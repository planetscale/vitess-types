//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Data definitions for service vtgateservice.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: vitess/vtgate/v21/vtgate.proto

package vtgatev21

import (
	v213 "github.com/planetscale/vitess-types/gen/vitess/binlogdata/v21"
	v21 "github.com/planetscale/vitess-types/gen/vitess/query/v21"
	v212 "github.com/planetscale/vitess-types/gen/vitess/topodata/v21"
	v211 "github.com/planetscale/vitess-types/gen/vitess/vtrpc/v21"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TransactionMode controls the execution of distributed transaction
// across multiple shards.
type TransactionMode int32

const (
	// UNSPECIFIED uses the transaction mode set by the VTGate flag 'transaction_mode'.
	TransactionMode_UNSPECIFIED TransactionMode = 0
	// SINGLE disallows distributed transactions.
	TransactionMode_SINGLE TransactionMode = 1
	// MULTI allows distributed transactions with best effort commit.
	TransactionMode_MULTI TransactionMode = 2
	// TWOPC is for distributed transactions with atomic commits.
	TransactionMode_TWOPC TransactionMode = 3
)

// Enum value maps for TransactionMode.
var (
	TransactionMode_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SINGLE",
		2: "MULTI",
		3: "TWOPC",
	}
	TransactionMode_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SINGLE":      1,
		"MULTI":       2,
		"TWOPC":       3,
	}
)

func (x TransactionMode) Enum() *TransactionMode {
	p := new(TransactionMode)
	*p = x
	return p
}

func (x TransactionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_vitess_vtgate_v21_vtgate_proto_enumTypes[0].Descriptor()
}

func (TransactionMode) Type() protoreflect.EnumType {
	return &file_vitess_vtgate_v21_vtgate_proto_enumTypes[0]
}

func (x TransactionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionMode.Descriptor instead.
func (TransactionMode) EnumDescriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{0}
}

// CommitOrder is used to designate which of the ShardSessions
// get used for transactions.
type CommitOrder int32

const (
	// NORMAL is the default commit order.
	CommitOrder_NORMAL CommitOrder = 0
	// PRE is used to designate pre_sessions.
	CommitOrder_PRE CommitOrder = 1
	// POST is used to designate post_sessions.
	CommitOrder_POST CommitOrder = 2
	// AUTOCOMMIT is used to run the statement as autocommitted transaction.
	CommitOrder_AUTOCOMMIT CommitOrder = 3
)

// Enum value maps for CommitOrder.
var (
	CommitOrder_name = map[int32]string{
		0: "NORMAL",
		1: "PRE",
		2: "POST",
		3: "AUTOCOMMIT",
	}
	CommitOrder_value = map[string]int32{
		"NORMAL":     0,
		"PRE":        1,
		"POST":       2,
		"AUTOCOMMIT": 3,
	}
)

func (x CommitOrder) Enum() *CommitOrder {
	p := new(CommitOrder)
	*p = x
	return p
}

func (x CommitOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_vitess_vtgate_v21_vtgate_proto_enumTypes[1].Descriptor()
}

func (CommitOrder) Type() protoreflect.EnumType {
	return &file_vitess_vtgate_v21_vtgate_proto_enumTypes[1]
}

func (x CommitOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitOrder.Descriptor instead.
func (CommitOrder) EnumDescriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{1}
}

// Session objects are exchanged like cookies through various
// calls to VTGate. The behavior differs between V2 & V3 APIs.
// V3 APIs are Execute, ExecuteBatch and StreamExecute. All
// other APIs are V2. For the V3 APIs, the session
// must be sent with every call to Execute or ExecuteBatch.
// For the V2 APIs, Begin does not accept a session. It instead
// returns a brand new one with in_transaction set to true.
// After a call to Commit or Rollback, the session can be
// discarded. If you're not in a transaction, Session is
// an optional parameter for the V2 APIs.
type Session struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// in_transaction is set to true if the session is in a transaction.
	InTransaction bool `protobuf:"varint,1,opt,name=in_transaction,json=inTransaction,proto3" json:"in_transaction,omitempty"`
	// shard_sessions keep track of per-shard transaction info.
	ShardSessions []*Session_ShardSession `protobuf:"bytes,2,rep,name=shard_sessions,json=shardSessions,proto3" json:"shard_sessions,omitempty"`
	// autocommit specifies if the session is in autocommit mode.
	// This is used only for V3.
	Autocommit bool `protobuf:"varint,4,opt,name=autocommit,proto3" json:"autocommit,omitempty"`
	// target_string is the target expressed as a string. Valid
	// names are: keyspace:shard@target, keyspace@target or @target.
	// This is used only for V3.
	TargetString string `protobuf:"bytes,5,opt,name=target_string,json=targetString,proto3" json:"target_string,omitempty"`
	// options is used only for V3.
	Options *v21.ExecuteOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	// transaction_mode specifies the current transaction mode.
	TransactionMode TransactionMode `protobuf:"varint,7,opt,name=transaction_mode,json=transactionMode,proto3,enum=vitess.vtgate.v21.TransactionMode" json:"transaction_mode,omitempty"`
	// warnings contains non-fatal warnings from the previous query
	Warnings []*v21.QueryWarning `protobuf:"bytes,8,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// pre_sessions contains sessions that have to be committed first.
	PreSessions []*Session_ShardSession `protobuf:"bytes,9,rep,name=pre_sessions,json=preSessions,proto3" json:"pre_sessions,omitempty"`
	// post_sessions contains sessions that have to be committed last.
	PostSessions []*Session_ShardSession `protobuf:"bytes,10,rep,name=post_sessions,json=postSessions,proto3" json:"post_sessions,omitempty"`
	// last_insert_id keeps track of the last seen insert_id for this session
	LastInsertId uint64 `protobuf:"varint,11,opt,name=last_insert_id,json=lastInsertId,proto3" json:"last_insert_id,omitempty"`
	// found_rows keeps track of how many rows the last query returned
	FoundRows uint64 `protobuf:"varint,12,opt,name=found_rows,json=foundRows,proto3" json:"found_rows,omitempty"`
	// user_defined_variables contains all the @variables defined for this session
	UserDefinedVariables map[string]*v21.BindVariable `protobuf:"bytes,13,rep,name=user_defined_variables,json=userDefinedVariables,proto3" json:"user_defined_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// system_variables keeps track of all session variables set for this connection
	// TODO: systay should we keep this so we can apply it ordered?
	SystemVariables map[string]string `protobuf:"bytes,14,rep,name=system_variables,json=systemVariables,proto3" json:"system_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// row_count keeps track of the last seen rows affected for this session
	RowCount int64 `protobuf:"varint,15,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	// Stores savepoint and release savepoint calls inside a transaction
	// and is reset once transaction is committed or rolled back.
	Savepoints []string `protobuf:"bytes,16,rep,name=savepoints,proto3" json:"savepoints,omitempty"`
	// in_reserved_conn is set to true if the session should be using reserved connections.
	InReservedConn bool `protobuf:"varint,17,opt,name=in_reserved_conn,json=inReservedConn,proto3" json:"in_reserved_conn,omitempty"`
	// lock_session keep tracks of shard on which the lock query is sent.
	LockSession *Session_ShardSession `protobuf:"bytes,18,opt,name=lock_session,json=lockSession,proto3" json:"lock_session,omitempty"`
	// last_lock_heartbeat keep tracks of when last lock heartbeat was sent.
	LastLockHeartbeat int64 `protobuf:"varint,19,opt,name=last_lock_heartbeat,json=lastLockHeartbeat,proto3" json:"last_lock_heartbeat,omitempty"`
	// read_after_write tracks the ReadAfterWrite settings for this session.
	ReadAfterWrite *ReadAfterWrite `protobuf:"bytes,20,opt,name=read_after_write,json=readAfterWrite,proto3" json:"read_after_write,omitempty"`
	// DDL strategy
	DDLStrategy string `protobuf:"bytes,21,opt,name=DDLStrategy,proto3" json:"DDLStrategy,omitempty"`
	// Session UUID
	SessionUUID string `protobuf:"bytes,22,opt,name=SessionUUID,proto3" json:"SessionUUID,omitempty"`
	// enable_system_settings defines if we can use reserved connections.
	EnableSystemSettings bool             `protobuf:"varint,23,opt,name=enable_system_settings,json=enableSystemSettings,proto3" json:"enable_system_settings,omitempty"`
	AdvisoryLock         map[string]int64 `protobuf:"bytes,24,rep,name=advisory_lock,json=advisoryLock,proto3" json:"advisory_lock,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// query_timeout is the maximum amount of time a query is permitted to run
	QueryTimeout     int64                   `protobuf:"varint,25,opt,name=query_timeout,json=queryTimeout,proto3" json:"query_timeout,omitempty"`
	PrepareStatement map[string]*PrepareData `protobuf:"bytes,26,rep,name=prepare_statement,json=prepareStatement,proto3" json:"prepare_statement,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// MigrationContext
	MigrationContext string `protobuf:"bytes,27,opt,name=migration_context,json=migrationContext,proto3" json:"migration_context,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{0}
}

func (x *Session) GetInTransaction() bool {
	if x != nil {
		return x.InTransaction
	}
	return false
}

func (x *Session) GetShardSessions() []*Session_ShardSession {
	if x != nil {
		return x.ShardSessions
	}
	return nil
}

func (x *Session) GetAutocommit() bool {
	if x != nil {
		return x.Autocommit
	}
	return false
}

func (x *Session) GetTargetString() string {
	if x != nil {
		return x.TargetString
	}
	return ""
}

func (x *Session) GetOptions() *v21.ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Session) GetTransactionMode() TransactionMode {
	if x != nil {
		return x.TransactionMode
	}
	return TransactionMode_UNSPECIFIED
}

func (x *Session) GetWarnings() []*v21.QueryWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *Session) GetPreSessions() []*Session_ShardSession {
	if x != nil {
		return x.PreSessions
	}
	return nil
}

func (x *Session) GetPostSessions() []*Session_ShardSession {
	if x != nil {
		return x.PostSessions
	}
	return nil
}

func (x *Session) GetLastInsertId() uint64 {
	if x != nil {
		return x.LastInsertId
	}
	return 0
}

func (x *Session) GetFoundRows() uint64 {
	if x != nil {
		return x.FoundRows
	}
	return 0
}

func (x *Session) GetUserDefinedVariables() map[string]*v21.BindVariable {
	if x != nil {
		return x.UserDefinedVariables
	}
	return nil
}

func (x *Session) GetSystemVariables() map[string]string {
	if x != nil {
		return x.SystemVariables
	}
	return nil
}

func (x *Session) GetRowCount() int64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *Session) GetSavepoints() []string {
	if x != nil {
		return x.Savepoints
	}
	return nil
}

func (x *Session) GetInReservedConn() bool {
	if x != nil {
		return x.InReservedConn
	}
	return false
}

func (x *Session) GetLockSession() *Session_ShardSession {
	if x != nil {
		return x.LockSession
	}
	return nil
}

func (x *Session) GetLastLockHeartbeat() int64 {
	if x != nil {
		return x.LastLockHeartbeat
	}
	return 0
}

func (x *Session) GetReadAfterWrite() *ReadAfterWrite {
	if x != nil {
		return x.ReadAfterWrite
	}
	return nil
}

func (x *Session) GetDDLStrategy() string {
	if x != nil {
		return x.DDLStrategy
	}
	return ""
}

func (x *Session) GetSessionUUID() string {
	if x != nil {
		return x.SessionUUID
	}
	return ""
}

func (x *Session) GetEnableSystemSettings() bool {
	if x != nil {
		return x.EnableSystemSettings
	}
	return false
}

func (x *Session) GetAdvisoryLock() map[string]int64 {
	if x != nil {
		return x.AdvisoryLock
	}
	return nil
}

func (x *Session) GetQueryTimeout() int64 {
	if x != nil {
		return x.QueryTimeout
	}
	return 0
}

func (x *Session) GetPrepareStatement() map[string]*PrepareData {
	if x != nil {
		return x.PrepareStatement
	}
	return nil
}

func (x *Session) GetMigrationContext() string {
	if x != nil {
		return x.MigrationContext
	}
	return ""
}

// PrepareData keeps the prepared statement and other information related for execution of it.
type PrepareData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PrepareStatement string                 `protobuf:"bytes,1,opt,name=prepare_statement,json=prepareStatement,proto3" json:"prepare_statement,omitempty"`
	ParamsCount      int32                  `protobuf:"varint,2,opt,name=params_count,json=paramsCount,proto3" json:"params_count,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PrepareData) Reset() {
	*x = PrepareData{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareData) ProtoMessage() {}

func (x *PrepareData) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareData.ProtoReflect.Descriptor instead.
func (*PrepareData) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{1}
}

func (x *PrepareData) GetPrepareStatement() string {
	if x != nil {
		return x.PrepareStatement
	}
	return ""
}

func (x *PrepareData) GetParamsCount() int32 {
	if x != nil {
		return x.ParamsCount
	}
	return 0
}

// ReadAfterWrite contains information regarding gtid set and timeout
// Also if the gtid information needs to be passed to client.
type ReadAfterWrite struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ReadAfterWriteGtid    string                 `protobuf:"bytes,1,opt,name=read_after_write_gtid,json=readAfterWriteGtid,proto3" json:"read_after_write_gtid,omitempty"`
	ReadAfterWriteTimeout float64                `protobuf:"fixed64,2,opt,name=read_after_write_timeout,json=readAfterWriteTimeout,proto3" json:"read_after_write_timeout,omitempty"`
	SessionTrackGtids     bool                   `protobuf:"varint,3,opt,name=session_track_gtids,json=sessionTrackGtids,proto3" json:"session_track_gtids,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ReadAfterWrite) Reset() {
	*x = ReadAfterWrite{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAfterWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAfterWrite) ProtoMessage() {}

func (x *ReadAfterWrite) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAfterWrite.ProtoReflect.Descriptor instead.
func (*ReadAfterWrite) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{2}
}

func (x *ReadAfterWrite) GetReadAfterWriteGtid() string {
	if x != nil {
		return x.ReadAfterWriteGtid
	}
	return ""
}

func (x *ReadAfterWrite) GetReadAfterWriteTimeout() float64 {
	if x != nil {
		return x.ReadAfterWriteTimeout
	}
	return 0
}

func (x *ReadAfterWrite) GetSessionTrackGtids() bool {
	if x != nil {
		return x.SessionTrackGtids
	}
	return false
}

// ExecuteRequest is the payload to Execute.
type ExecuteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *v211.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// session carries the session state.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	// query is the query and bind variables to execute.
	Query         *v21.BoundQuery `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{3}
}

func (x *ExecuteRequest) GetCallerId() *v211.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *ExecuteRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ExecuteRequest) GetQuery() *v21.BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// ExecuteResponse is the returned value from Execute.
type ExecuteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error *v211.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// session is the updated session information.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	// result contains the query result, only set if error is unset.
	Result        *v21.QueryResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{4}
}

func (x *ExecuteResponse) GetError() *v211.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ExecuteResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ExecuteResponse) GetResult() *v21.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// ExecuteBatchRequest is the payload to ExecuteBatch.
type ExecuteBatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *v211.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// session carries the session state.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	// queries is a list of query and bind variables to execute.
	Queries       []*v21.BoundQuery `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteBatchRequest) Reset() {
	*x = ExecuteBatchRequest{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteBatchRequest) ProtoMessage() {}

func (x *ExecuteBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteBatchRequest.ProtoReflect.Descriptor instead.
func (*ExecuteBatchRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{5}
}

func (x *ExecuteBatchRequest) GetCallerId() *v211.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *ExecuteBatchRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ExecuteBatchRequest) GetQueries() []*v21.BoundQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

// ExecuteBatchResponse is the returned value from ExecuteBatch.
type ExecuteBatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error *v211.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// session is the updated session information.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	// results contains the query results, only set if application level error is unset.
	Results       []*v21.ResultWithError `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteBatchResponse) Reset() {
	*x = ExecuteBatchResponse{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteBatchResponse) ProtoMessage() {}

func (x *ExecuteBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteBatchResponse.ProtoReflect.Descriptor instead.
func (*ExecuteBatchResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{6}
}

func (x *ExecuteBatchResponse) GetError() *v211.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ExecuteBatchResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ExecuteBatchResponse) GetResults() []*v21.ResultWithError {
	if x != nil {
		return x.Results
	}
	return nil
}

// StreamExecuteRequest is the payload to StreamExecute.
type StreamExecuteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *v211.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// query is the query and bind variables to execute.
	Query *v21.BoundQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// session carries the session state.
	Session       *Session `protobuf:"bytes,6,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamExecuteRequest) Reset() {
	*x = StreamExecuteRequest{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamExecuteRequest) ProtoMessage() {}

func (x *StreamExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamExecuteRequest.ProtoReflect.Descriptor instead.
func (*StreamExecuteRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{7}
}

func (x *StreamExecuteRequest) GetCallerId() *v211.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *StreamExecuteRequest) GetQuery() *v21.BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *StreamExecuteRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

// StreamExecuteResponse is the returned value from StreamExecute.
// The session is currently not returned because StreamExecute is
// not expected to modify it.
type StreamExecuteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// result contains the result data.
	// The first value contains only Fields information.
	// The next values contain the actual rows, a few values per result.
	Result *v21.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// session is the updated session information.
	Session       *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamExecuteResponse) Reset() {
	*x = StreamExecuteResponse{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamExecuteResponse) ProtoMessage() {}

func (x *StreamExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamExecuteResponse.ProtoReflect.Descriptor instead.
func (*StreamExecuteResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{8}
}

func (x *StreamExecuteResponse) GetResult() *v21.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *StreamExecuteResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

// ResolveTransactionRequest is the payload to ResolveTransaction.
type ResolveTransactionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *v211.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// dtid is the dtid of the transaction to be resolved.
	Dtid          string `protobuf:"bytes,2,opt,name=dtid,proto3" json:"dtid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveTransactionRequest) Reset() {
	*x = ResolveTransactionRequest{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveTransactionRequest) ProtoMessage() {}

func (x *ResolveTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveTransactionRequest.ProtoReflect.Descriptor instead.
func (*ResolveTransactionRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{9}
}

func (x *ResolveTransactionRequest) GetCallerId() *v211.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *ResolveTransactionRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// ResolveTransactionResponse is the returned value from Rollback.
type ResolveTransactionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveTransactionResponse) Reset() {
	*x = ResolveTransactionResponse{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveTransactionResponse) ProtoMessage() {}

func (x *ResolveTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveTransactionResponse.ProtoReflect.Descriptor instead.
func (*ResolveTransactionResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{10}
}

type VStreamFlags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// align streams
	MinimizeSkew bool `protobuf:"varint,1,opt,name=minimize_skew,json=minimizeSkew,proto3" json:"minimize_skew,omitempty"`
	// how often heartbeats must be sent when idle (seconds)
	HeartbeatInterval uint32 `protobuf:"varint,2,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	// stop streams on a reshard (journal event)
	StopOnReshard bool `protobuf:"varint,3,opt,name=stop_on_reshard,json=stopOnReshard,proto3" json:"stop_on_reshard,omitempty"`
	// if specified, these cells (comma-separated) are used to pick source tablets from.
	// defaults to the cell of the vtgate serving the VStream API.
	Cells          string `protobuf:"bytes,4,opt,name=cells,proto3" json:"cells,omitempty"`
	CellPreference string `protobuf:"bytes,5,opt,name=cell_preference,json=cellPreference,proto3" json:"cell_preference,omitempty"`
	TabletOrder    string `protobuf:"bytes,6,opt,name=tablet_order,json=tabletOrder,proto3" json:"tablet_order,omitempty"`
	// When set, all new row events from the `heartbeat` table, for all shards, in the sidecardb will be streamed.
	StreamKeyspaceHeartbeats bool `protobuf:"varint,7,opt,name=stream_keyspace_heartbeats,json=streamKeyspaceHeartbeats,proto3" json:"stream_keyspace_heartbeats,omitempty"`
	// Include reshard journal events in the stream.
	IncludeReshardJournalEvents bool `protobuf:"varint,8,opt,name=include_reshard_journal_events,json=includeReshardJournalEvents,proto3" json:"include_reshard_journal_events,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *VStreamFlags) Reset() {
	*x = VStreamFlags{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VStreamFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VStreamFlags) ProtoMessage() {}

func (x *VStreamFlags) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VStreamFlags.ProtoReflect.Descriptor instead.
func (*VStreamFlags) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{11}
}

func (x *VStreamFlags) GetMinimizeSkew() bool {
	if x != nil {
		return x.MinimizeSkew
	}
	return false
}

func (x *VStreamFlags) GetHeartbeatInterval() uint32 {
	if x != nil {
		return x.HeartbeatInterval
	}
	return 0
}

func (x *VStreamFlags) GetStopOnReshard() bool {
	if x != nil {
		return x.StopOnReshard
	}
	return false
}

func (x *VStreamFlags) GetCells() string {
	if x != nil {
		return x.Cells
	}
	return ""
}

func (x *VStreamFlags) GetCellPreference() string {
	if x != nil {
		return x.CellPreference
	}
	return ""
}

func (x *VStreamFlags) GetTabletOrder() string {
	if x != nil {
		return x.TabletOrder
	}
	return ""
}

func (x *VStreamFlags) GetStreamKeyspaceHeartbeats() bool {
	if x != nil {
		return x.StreamKeyspaceHeartbeats
	}
	return false
}

func (x *VStreamFlags) GetIncludeReshardJournalEvents() bool {
	if x != nil {
		return x.IncludeReshardJournalEvents
	}
	return false
}

// VStreamRequest is the payload for VStream.
type VStreamRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	CallerId   *v211.CallerID         `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	TabletType v212.TabletType        `protobuf:"varint,2,opt,name=tablet_type,json=tabletType,proto3,enum=vitess.topodata.v21.TabletType" json:"tablet_type,omitempty"`
	// position specifies the starting point of the bin log positions
	// as well as the keyspace-shards to pull events from.
	// position is of the form 'ks1:0@MySQL56/<mysql_pos>|ks2:-80@MySQL56/<mysql_pos>'.
	Vgtid         *v213.VGtid   `protobuf:"bytes,3,opt,name=vgtid,proto3" json:"vgtid,omitempty"`
	Filter        *v213.Filter  `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Flags         *VStreamFlags `protobuf:"bytes,5,opt,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VStreamRequest) Reset() {
	*x = VStreamRequest{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VStreamRequest) ProtoMessage() {}

func (x *VStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VStreamRequest.ProtoReflect.Descriptor instead.
func (*VStreamRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{12}
}

func (x *VStreamRequest) GetCallerId() *v211.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *VStreamRequest) GetTabletType() v212.TabletType {
	if x != nil {
		return x.TabletType
	}
	return v212.TabletType(0)
}

func (x *VStreamRequest) GetVgtid() *v213.VGtid {
	if x != nil {
		return x.Vgtid
	}
	return nil
}

func (x *VStreamRequest) GetFilter() *v213.Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *VStreamRequest) GetFlags() *VStreamFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

// VStreamResponse is streamed by VStream.
type VStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*v213.VEvent         `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VStreamResponse) Reset() {
	*x = VStreamResponse{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VStreamResponse) ProtoMessage() {}

func (x *VStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VStreamResponse.ProtoReflect.Descriptor instead.
func (*VStreamResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{13}
}

func (x *VStreamResponse) GetEvents() []*v213.VEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// PrepareRequest is the payload to Prepare.
type PrepareRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *v211.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// session carries the session state.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	// query is the query and bind variables to execute.
	Query         *v21.BoundQuery `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareRequest) Reset() {
	*x = PrepareRequest{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRequest) ProtoMessage() {}

func (x *PrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRequest.ProtoReflect.Descriptor instead.
func (*PrepareRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{14}
}

func (x *PrepareRequest) GetCallerId() *v211.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *PrepareRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *PrepareRequest) GetQuery() *v21.BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// PrepareResponse is the returned value from Prepare.
type PrepareResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error *v211.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// session is the updated session information.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	// fields contains the fields, only set if error is unset.
	Fields        []*v21.Field `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareResponse) Reset() {
	*x = PrepareResponse{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareResponse) ProtoMessage() {}

func (x *PrepareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareResponse.ProtoReflect.Descriptor instead.
func (*PrepareResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{15}
}

func (x *PrepareResponse) GetError() *v211.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PrepareResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *PrepareResponse) GetFields() []*v21.Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

// CloseSessionRequest is the payload to CloseSession.
type CloseSessionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *v211.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// session carries the session state.
	Session       *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseSessionRequest) Reset() {
	*x = CloseSessionRequest{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSessionRequest) ProtoMessage() {}

func (x *CloseSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSessionRequest.ProtoReflect.Descriptor instead.
func (*CloseSessionRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{16}
}

func (x *CloseSessionRequest) GetCallerId() *v211.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *CloseSessionRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

// CloseSessionResponse is the returned value from CloseSession.
type CloseSessionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error         *v211.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseSessionResponse) Reset() {
	*x = CloseSessionResponse{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSessionResponse) ProtoMessage() {}

func (x *CloseSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSessionResponse.ProtoReflect.Descriptor instead.
func (*CloseSessionResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{17}
}

func (x *CloseSessionResponse) GetError() *v211.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

type Session_ShardSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        *v21.Target            `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId int64                  `protobuf:"varint,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TabletAlias   *v212.TabletAlias      `protobuf:"bytes,3,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	// reserved connection if a dedicated connection is needed
	ReservedId    int64 `protobuf:"varint,4,opt,name=reserved_id,json=reservedId,proto3" json:"reserved_id,omitempty"`
	VindexOnly    bool  `protobuf:"varint,5,opt,name=vindex_only,json=vindexOnly,proto3" json:"vindex_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session_ShardSession) Reset() {
	*x = Session_ShardSession{}
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_ShardSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_ShardSession) ProtoMessage() {}

func (x *Session_ShardSession) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtgate_v21_vtgate_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_ShardSession.ProtoReflect.Descriptor instead.
func (*Session_ShardSession) Descriptor() ([]byte, []int) {
	return file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Session_ShardSession) GetTarget() *v21.Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Session_ShardSession) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *Session_ShardSession) GetTabletAlias() *v212.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *Session_ShardSession) GetReservedId() int64 {
	if x != nil {
		return x.ReservedId
	}
	return 0
}

func (x *Session_ShardSession) GetVindexOnly() bool {
	if x != nil {
		return x.VindexOnly
	}
	return false
}

var File_vitess_vtgate_v21_vtgate_proto protoreflect.FileDescriptor

const file_vitess_vtgate_v21_vtgate_proto_rawDesc = "" +
	"\n" +
	"\x1evitess/vtgate/v21/vtgate.proto\x12\x11vitess.vtgate.v21\x1a&vitess/binlogdata/v21/binlogdata.proto\x1a\x1cvitess/query/v21/query.proto\x1a\"vitess/topodata/v21/topodata.proto\x1a\x1cvitess/vtrpc/v21/vtrpc.proto\"\xab\x10\n" +
	"\aSession\x12%\n" +
	"\x0ein_transaction\x18\x01 \x01(\bR\rinTransaction\x12N\n" +
	"\x0eshard_sessions\x18\x02 \x03(\v2'.vitess.vtgate.v21.Session.ShardSessionR\rshardSessions\x12\x1e\n" +
	"\n" +
	"autocommit\x18\x04 \x01(\bR\n" +
	"autocommit\x12#\n" +
	"\rtarget_string\x18\x05 \x01(\tR\ftargetString\x12:\n" +
	"\aoptions\x18\x06 \x01(\v2 .vitess.query.v21.ExecuteOptionsR\aoptions\x12M\n" +
	"\x10transaction_mode\x18\a \x01(\x0e2\".vitess.vtgate.v21.TransactionModeR\x0ftransactionMode\x12:\n" +
	"\bwarnings\x18\b \x03(\v2\x1e.vitess.query.v21.QueryWarningR\bwarnings\x12J\n" +
	"\fpre_sessions\x18\t \x03(\v2'.vitess.vtgate.v21.Session.ShardSessionR\vpreSessions\x12L\n" +
	"\rpost_sessions\x18\n" +
	" \x03(\v2'.vitess.vtgate.v21.Session.ShardSessionR\fpostSessions\x12$\n" +
	"\x0elast_insert_id\x18\v \x01(\x04R\flastInsertId\x12\x1d\n" +
	"\n" +
	"found_rows\x18\f \x01(\x04R\tfoundRows\x12j\n" +
	"\x16user_defined_variables\x18\r \x03(\v24.vitess.vtgate.v21.Session.UserDefinedVariablesEntryR\x14userDefinedVariables\x12Z\n" +
	"\x10system_variables\x18\x0e \x03(\v2/.vitess.vtgate.v21.Session.SystemVariablesEntryR\x0fsystemVariables\x12\x1b\n" +
	"\trow_count\x18\x0f \x01(\x03R\browCount\x12\x1e\n" +
	"\n" +
	"savepoints\x18\x10 \x03(\tR\n" +
	"savepoints\x12(\n" +
	"\x10in_reserved_conn\x18\x11 \x01(\bR\x0einReservedConn\x12J\n" +
	"\flock_session\x18\x12 \x01(\v2'.vitess.vtgate.v21.Session.ShardSessionR\vlockSession\x12.\n" +
	"\x13last_lock_heartbeat\x18\x13 \x01(\x03R\x11lastLockHeartbeat\x12K\n" +
	"\x10read_after_write\x18\x14 \x01(\v2!.vitess.vtgate.v21.ReadAfterWriteR\x0ereadAfterWrite\x12 \n" +
	"\vDDLStrategy\x18\x15 \x01(\tR\vDDLStrategy\x12 \n" +
	"\vSessionUUID\x18\x16 \x01(\tR\vSessionUUID\x124\n" +
	"\x16enable_system_settings\x18\x17 \x01(\bR\x14enableSystemSettings\x12Q\n" +
	"\radvisory_lock\x18\x18 \x03(\v2,.vitess.vtgate.v21.Session.AdvisoryLockEntryR\fadvisoryLock\x12#\n" +
	"\rquery_timeout\x18\x19 \x01(\x03R\fqueryTimeout\x12]\n" +
	"\x11prepare_statement\x18\x1a \x03(\v20.vitess.vtgate.v21.Session.PrepareStatementEntryR\x10prepareStatement\x12+\n" +
	"\x11migration_context\x18\x1b \x01(\tR\x10migrationContext\x1a\xee\x01\n" +
	"\fShardSession\x120\n" +
	"\x06target\x18\x01 \x01(\v2\x18.vitess.query.v21.TargetR\x06target\x12%\n" +
	"\x0etransaction_id\x18\x02 \x01(\x03R\rtransactionId\x12C\n" +
	"\ftablet_alias\x18\x03 \x01(\v2 .vitess.topodata.v21.TabletAliasR\vtabletAlias\x12\x1f\n" +
	"\vreserved_id\x18\x04 \x01(\x03R\n" +
	"reservedId\x12\x1f\n" +
	"\vvindex_only\x18\x05 \x01(\bR\n" +
	"vindexOnly\x1ag\n" +
	"\x19UserDefinedVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x124\n" +
	"\x05value\x18\x02 \x01(\v2\x1e.vitess.query.v21.BindVariableR\x05value:\x028\x01\x1aB\n" +
	"\x14SystemVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a?\n" +
	"\x11AdvisoryLockEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1ac\n" +
	"\x15PrepareStatementEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x124\n" +
	"\x05value\x18\x02 \x01(\v2\x1e.vitess.vtgate.v21.PrepareDataR\x05value:\x028\x01J\x04\b\x03\x10\x04\"]\n" +
	"\vPrepareData\x12+\n" +
	"\x11prepare_statement\x18\x01 \x01(\tR\x10prepareStatement\x12!\n" +
	"\fparams_count\x18\x02 \x01(\x05R\vparamsCount\"\xac\x01\n" +
	"\x0eReadAfterWrite\x121\n" +
	"\x15read_after_write_gtid\x18\x01 \x01(\tR\x12readAfterWriteGtid\x127\n" +
	"\x18read_after_write_timeout\x18\x02 \x01(\x01R\x15readAfterWriteTimeout\x12.\n" +
	"\x13session_track_gtids\x18\x03 \x01(\bR\x11sessionTrackGtids\"\xcb\x01\n" +
	"\x0eExecuteRequest\x127\n" +
	"\tcaller_id\x18\x01 \x01(\v2\x1a.vitess.vtrpc.v21.CallerIDR\bcallerId\x124\n" +
	"\asession\x18\x02 \x01(\v2\x1a.vitess.vtgate.v21.SessionR\asession\x122\n" +
	"\x05query\x18\x03 \x01(\v2\x1c.vitess.query.v21.BoundQueryR\x05queryJ\x04\b\x04\x10\x05J\x04\b\x05\x10\x06J\x04\b\x06\x10\aJ\x04\b\a\x10\b\"\xb0\x01\n" +
	"\x0fExecuteResponse\x120\n" +
	"\x05error\x18\x01 \x01(\v2\x1a.vitess.vtrpc.v21.RPCErrorR\x05error\x124\n" +
	"\asession\x18\x02 \x01(\v2\x1a.vitess.vtgate.v21.SessionR\asession\x125\n" +
	"\x06result\x18\x03 \x01(\v2\x1d.vitess.query.v21.QueryResultR\x06result\"\xd4\x01\n" +
	"\x13ExecuteBatchRequest\x127\n" +
	"\tcaller_id\x18\x01 \x01(\v2\x1a.vitess.vtrpc.v21.CallerIDR\bcallerId\x124\n" +
	"\asession\x18\x02 \x01(\v2\x1a.vitess.vtgate.v21.SessionR\asession\x126\n" +
	"\aqueries\x18\x03 \x03(\v2\x1c.vitess.query.v21.BoundQueryR\aqueriesJ\x04\b\x04\x10\x05J\x04\b\x05\x10\x06J\x04\b\x06\x10\aJ\x04\b\a\x10\b\"\xbb\x01\n" +
	"\x14ExecuteBatchResponse\x120\n" +
	"\x05error\x18\x01 \x01(\v2\x1a.vitess.vtrpc.v21.RPCErrorR\x05error\x124\n" +
	"\asession\x18\x02 \x01(\v2\x1a.vitess.vtgate.v21.SessionR\asession\x12;\n" +
	"\aresults\x18\x03 \x03(\v2!.vitess.query.v21.ResultWithErrorR\aresults\"\xcb\x01\n" +
	"\x14StreamExecuteRequest\x127\n" +
	"\tcaller_id\x18\x01 \x01(\v2\x1a.vitess.vtrpc.v21.CallerIDR\bcallerId\x122\n" +
	"\x05query\x18\x02 \x01(\v2\x1c.vitess.query.v21.BoundQueryR\x05query\x124\n" +
	"\asession\x18\x06 \x01(\v2\x1a.vitess.vtgate.v21.SessionR\asessionJ\x04\b\x03\x10\x04J\x04\b\x04\x10\x05J\x04\b\x05\x10\x06\"\x84\x01\n" +
	"\x15StreamExecuteResponse\x125\n" +
	"\x06result\x18\x01 \x01(\v2\x1d.vitess.query.v21.QueryResultR\x06result\x124\n" +
	"\asession\x18\x02 \x01(\v2\x1a.vitess.vtgate.v21.SessionR\asession\"h\n" +
	"\x19ResolveTransactionRequest\x127\n" +
	"\tcaller_id\x18\x01 \x01(\v2\x1a.vitess.vtrpc.v21.CallerIDR\bcallerId\x12\x12\n" +
	"\x04dtid\x18\x02 \x01(\tR\x04dtid\"\x1c\n" +
	"\x1aResolveTransactionResponse\"\xef\x02\n" +
	"\fVStreamFlags\x12#\n" +
	"\rminimize_skew\x18\x01 \x01(\bR\fminimizeSkew\x12-\n" +
	"\x12heartbeat_interval\x18\x02 \x01(\rR\x11heartbeatInterval\x12&\n" +
	"\x0fstop_on_reshard\x18\x03 \x01(\bR\rstopOnReshard\x12\x14\n" +
	"\x05cells\x18\x04 \x01(\tR\x05cells\x12'\n" +
	"\x0fcell_preference\x18\x05 \x01(\tR\x0ecellPreference\x12!\n" +
	"\ftablet_order\x18\x06 \x01(\tR\vtabletOrder\x12<\n" +
	"\x1astream_keyspace_heartbeats\x18\a \x01(\bR\x18streamKeyspaceHeartbeats\x12C\n" +
	"\x1einclude_reshard_journal_events\x18\b \x01(\bR\x1bincludeReshardJournalEvents\"\xad\x02\n" +
	"\x0eVStreamRequest\x127\n" +
	"\tcaller_id\x18\x01 \x01(\v2\x1a.vitess.vtrpc.v21.CallerIDR\bcallerId\x12@\n" +
	"\vtablet_type\x18\x02 \x01(\x0e2\x1f.vitess.topodata.v21.TabletTypeR\n" +
	"tabletType\x122\n" +
	"\x05vgtid\x18\x03 \x01(\v2\x1c.vitess.binlogdata.v21.VGtidR\x05vgtid\x125\n" +
	"\x06filter\x18\x04 \x01(\v2\x1d.vitess.binlogdata.v21.FilterR\x06filter\x125\n" +
	"\x05flags\x18\x05 \x01(\v2\x1f.vitess.vtgate.v21.VStreamFlagsR\x05flags\"H\n" +
	"\x0fVStreamResponse\x125\n" +
	"\x06events\x18\x01 \x03(\v2\x1d.vitess.binlogdata.v21.VEventR\x06events\"\xb3\x01\n" +
	"\x0ePrepareRequest\x127\n" +
	"\tcaller_id\x18\x01 \x01(\v2\x1a.vitess.vtrpc.v21.CallerIDR\bcallerId\x124\n" +
	"\asession\x18\x02 \x01(\v2\x1a.vitess.vtgate.v21.SessionR\asession\x122\n" +
	"\x05query\x18\x03 \x01(\v2\x1c.vitess.query.v21.BoundQueryR\x05query\"\xaa\x01\n" +
	"\x0fPrepareResponse\x120\n" +
	"\x05error\x18\x01 \x01(\v2\x1a.vitess.vtrpc.v21.RPCErrorR\x05error\x124\n" +
	"\asession\x18\x02 \x01(\v2\x1a.vitess.vtgate.v21.SessionR\asession\x12/\n" +
	"\x06fields\x18\x03 \x03(\v2\x17.vitess.query.v21.FieldR\x06fields\"\x84\x01\n" +
	"\x13CloseSessionRequest\x127\n" +
	"\tcaller_id\x18\x01 \x01(\v2\x1a.vitess.vtrpc.v21.CallerIDR\bcallerId\x124\n" +
	"\asession\x18\x02 \x01(\v2\x1a.vitess.vtgate.v21.SessionR\asession\"H\n" +
	"\x14CloseSessionResponse\x120\n" +
	"\x05error\x18\x01 \x01(\v2\x1a.vitess.vtrpc.v21.RPCErrorR\x05error*D\n" +
	"\x0fTransactionMode\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06SINGLE\x10\x01\x12\t\n" +
	"\x05MULTI\x10\x02\x12\t\n" +
	"\x05TWOPC\x10\x03*<\n" +
	"\vCommitOrder\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x00\x12\a\n" +
	"\x03PRE\x10\x01\x12\b\n" +
	"\x04POST\x10\x02\x12\x0e\n" +
	"\n" +
	"AUTOCOMMIT\x10\x03BEZCgithub.com/planetscale/vitess-types/gen/vitess/vtgate/v21;vtgatev21b\x06proto3"

var (
	file_vitess_vtgate_v21_vtgate_proto_rawDescOnce sync.Once
	file_vitess_vtgate_v21_vtgate_proto_rawDescData []byte
)

func file_vitess_vtgate_v21_vtgate_proto_rawDescGZIP() []byte {
	file_vitess_vtgate_v21_vtgate_proto_rawDescOnce.Do(func() {
		file_vitess_vtgate_v21_vtgate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vitess_vtgate_v21_vtgate_proto_rawDesc), len(file_vitess_vtgate_v21_vtgate_proto_rawDesc)))
	})
	return file_vitess_vtgate_v21_vtgate_proto_rawDescData
}

var file_vitess_vtgate_v21_vtgate_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_vitess_vtgate_v21_vtgate_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_vitess_vtgate_v21_vtgate_proto_goTypes = []any{
	(TransactionMode)(0),               // 0: vitess.vtgate.v21.TransactionMode
	(CommitOrder)(0),                   // 1: vitess.vtgate.v21.CommitOrder
	(*Session)(nil),                    // 2: vitess.vtgate.v21.Session
	(*PrepareData)(nil),                // 3: vitess.vtgate.v21.PrepareData
	(*ReadAfterWrite)(nil),             // 4: vitess.vtgate.v21.ReadAfterWrite
	(*ExecuteRequest)(nil),             // 5: vitess.vtgate.v21.ExecuteRequest
	(*ExecuteResponse)(nil),            // 6: vitess.vtgate.v21.ExecuteResponse
	(*ExecuteBatchRequest)(nil),        // 7: vitess.vtgate.v21.ExecuteBatchRequest
	(*ExecuteBatchResponse)(nil),       // 8: vitess.vtgate.v21.ExecuteBatchResponse
	(*StreamExecuteRequest)(nil),       // 9: vitess.vtgate.v21.StreamExecuteRequest
	(*StreamExecuteResponse)(nil),      // 10: vitess.vtgate.v21.StreamExecuteResponse
	(*ResolveTransactionRequest)(nil),  // 11: vitess.vtgate.v21.ResolveTransactionRequest
	(*ResolveTransactionResponse)(nil), // 12: vitess.vtgate.v21.ResolveTransactionResponse
	(*VStreamFlags)(nil),               // 13: vitess.vtgate.v21.VStreamFlags
	(*VStreamRequest)(nil),             // 14: vitess.vtgate.v21.VStreamRequest
	(*VStreamResponse)(nil),            // 15: vitess.vtgate.v21.VStreamResponse
	(*PrepareRequest)(nil),             // 16: vitess.vtgate.v21.PrepareRequest
	(*PrepareResponse)(nil),            // 17: vitess.vtgate.v21.PrepareResponse
	(*CloseSessionRequest)(nil),        // 18: vitess.vtgate.v21.CloseSessionRequest
	(*CloseSessionResponse)(nil),       // 19: vitess.vtgate.v21.CloseSessionResponse
	(*Session_ShardSession)(nil),       // 20: vitess.vtgate.v21.Session.ShardSession
	nil,                                // 21: vitess.vtgate.v21.Session.UserDefinedVariablesEntry
	nil,                                // 22: vitess.vtgate.v21.Session.SystemVariablesEntry
	nil,                                // 23: vitess.vtgate.v21.Session.AdvisoryLockEntry
	nil,                                // 24: vitess.vtgate.v21.Session.PrepareStatementEntry
	(*v21.ExecuteOptions)(nil),         // 25: vitess.query.v21.ExecuteOptions
	(*v21.QueryWarning)(nil),           // 26: vitess.query.v21.QueryWarning
	(*v211.CallerID)(nil),              // 27: vitess.vtrpc.v21.CallerID
	(*v21.BoundQuery)(nil),             // 28: vitess.query.v21.BoundQuery
	(*v211.RPCError)(nil),              // 29: vitess.vtrpc.v21.RPCError
	(*v21.QueryResult)(nil),            // 30: vitess.query.v21.QueryResult
	(*v21.ResultWithError)(nil),        // 31: vitess.query.v21.ResultWithError
	(v212.TabletType)(0),               // 32: vitess.topodata.v21.TabletType
	(*v213.VGtid)(nil),                 // 33: vitess.binlogdata.v21.VGtid
	(*v213.Filter)(nil),                // 34: vitess.binlogdata.v21.Filter
	(*v213.VEvent)(nil),                // 35: vitess.binlogdata.v21.VEvent
	(*v21.Field)(nil),                  // 36: vitess.query.v21.Field
	(*v21.Target)(nil),                 // 37: vitess.query.v21.Target
	(*v212.TabletAlias)(nil),           // 38: vitess.topodata.v21.TabletAlias
	(*v21.BindVariable)(nil),           // 39: vitess.query.v21.BindVariable
}
var file_vitess_vtgate_v21_vtgate_proto_depIdxs = []int32{
	20, // 0: vitess.vtgate.v21.Session.shard_sessions:type_name -> vitess.vtgate.v21.Session.ShardSession
	25, // 1: vitess.vtgate.v21.Session.options:type_name -> vitess.query.v21.ExecuteOptions
	0,  // 2: vitess.vtgate.v21.Session.transaction_mode:type_name -> vitess.vtgate.v21.TransactionMode
	26, // 3: vitess.vtgate.v21.Session.warnings:type_name -> vitess.query.v21.QueryWarning
	20, // 4: vitess.vtgate.v21.Session.pre_sessions:type_name -> vitess.vtgate.v21.Session.ShardSession
	20, // 5: vitess.vtgate.v21.Session.post_sessions:type_name -> vitess.vtgate.v21.Session.ShardSession
	21, // 6: vitess.vtgate.v21.Session.user_defined_variables:type_name -> vitess.vtgate.v21.Session.UserDefinedVariablesEntry
	22, // 7: vitess.vtgate.v21.Session.system_variables:type_name -> vitess.vtgate.v21.Session.SystemVariablesEntry
	20, // 8: vitess.vtgate.v21.Session.lock_session:type_name -> vitess.vtgate.v21.Session.ShardSession
	4,  // 9: vitess.vtgate.v21.Session.read_after_write:type_name -> vitess.vtgate.v21.ReadAfterWrite
	23, // 10: vitess.vtgate.v21.Session.advisory_lock:type_name -> vitess.vtgate.v21.Session.AdvisoryLockEntry
	24, // 11: vitess.vtgate.v21.Session.prepare_statement:type_name -> vitess.vtgate.v21.Session.PrepareStatementEntry
	27, // 12: vitess.vtgate.v21.ExecuteRequest.caller_id:type_name -> vitess.vtrpc.v21.CallerID
	2,  // 13: vitess.vtgate.v21.ExecuteRequest.session:type_name -> vitess.vtgate.v21.Session
	28, // 14: vitess.vtgate.v21.ExecuteRequest.query:type_name -> vitess.query.v21.BoundQuery
	29, // 15: vitess.vtgate.v21.ExecuteResponse.error:type_name -> vitess.vtrpc.v21.RPCError
	2,  // 16: vitess.vtgate.v21.ExecuteResponse.session:type_name -> vitess.vtgate.v21.Session
	30, // 17: vitess.vtgate.v21.ExecuteResponse.result:type_name -> vitess.query.v21.QueryResult
	27, // 18: vitess.vtgate.v21.ExecuteBatchRequest.caller_id:type_name -> vitess.vtrpc.v21.CallerID
	2,  // 19: vitess.vtgate.v21.ExecuteBatchRequest.session:type_name -> vitess.vtgate.v21.Session
	28, // 20: vitess.vtgate.v21.ExecuteBatchRequest.queries:type_name -> vitess.query.v21.BoundQuery
	29, // 21: vitess.vtgate.v21.ExecuteBatchResponse.error:type_name -> vitess.vtrpc.v21.RPCError
	2,  // 22: vitess.vtgate.v21.ExecuteBatchResponse.session:type_name -> vitess.vtgate.v21.Session
	31, // 23: vitess.vtgate.v21.ExecuteBatchResponse.results:type_name -> vitess.query.v21.ResultWithError
	27, // 24: vitess.vtgate.v21.StreamExecuteRequest.caller_id:type_name -> vitess.vtrpc.v21.CallerID
	28, // 25: vitess.vtgate.v21.StreamExecuteRequest.query:type_name -> vitess.query.v21.BoundQuery
	2,  // 26: vitess.vtgate.v21.StreamExecuteRequest.session:type_name -> vitess.vtgate.v21.Session
	30, // 27: vitess.vtgate.v21.StreamExecuteResponse.result:type_name -> vitess.query.v21.QueryResult
	2,  // 28: vitess.vtgate.v21.StreamExecuteResponse.session:type_name -> vitess.vtgate.v21.Session
	27, // 29: vitess.vtgate.v21.ResolveTransactionRequest.caller_id:type_name -> vitess.vtrpc.v21.CallerID
	27, // 30: vitess.vtgate.v21.VStreamRequest.caller_id:type_name -> vitess.vtrpc.v21.CallerID
	32, // 31: vitess.vtgate.v21.VStreamRequest.tablet_type:type_name -> vitess.topodata.v21.TabletType
	33, // 32: vitess.vtgate.v21.VStreamRequest.vgtid:type_name -> vitess.binlogdata.v21.VGtid
	34, // 33: vitess.vtgate.v21.VStreamRequest.filter:type_name -> vitess.binlogdata.v21.Filter
	13, // 34: vitess.vtgate.v21.VStreamRequest.flags:type_name -> vitess.vtgate.v21.VStreamFlags
	35, // 35: vitess.vtgate.v21.VStreamResponse.events:type_name -> vitess.binlogdata.v21.VEvent
	27, // 36: vitess.vtgate.v21.PrepareRequest.caller_id:type_name -> vitess.vtrpc.v21.CallerID
	2,  // 37: vitess.vtgate.v21.PrepareRequest.session:type_name -> vitess.vtgate.v21.Session
	28, // 38: vitess.vtgate.v21.PrepareRequest.query:type_name -> vitess.query.v21.BoundQuery
	29, // 39: vitess.vtgate.v21.PrepareResponse.error:type_name -> vitess.vtrpc.v21.RPCError
	2,  // 40: vitess.vtgate.v21.PrepareResponse.session:type_name -> vitess.vtgate.v21.Session
	36, // 41: vitess.vtgate.v21.PrepareResponse.fields:type_name -> vitess.query.v21.Field
	27, // 42: vitess.vtgate.v21.CloseSessionRequest.caller_id:type_name -> vitess.vtrpc.v21.CallerID
	2,  // 43: vitess.vtgate.v21.CloseSessionRequest.session:type_name -> vitess.vtgate.v21.Session
	29, // 44: vitess.vtgate.v21.CloseSessionResponse.error:type_name -> vitess.vtrpc.v21.RPCError
	37, // 45: vitess.vtgate.v21.Session.ShardSession.target:type_name -> vitess.query.v21.Target
	38, // 46: vitess.vtgate.v21.Session.ShardSession.tablet_alias:type_name -> vitess.topodata.v21.TabletAlias
	39, // 47: vitess.vtgate.v21.Session.UserDefinedVariablesEntry.value:type_name -> vitess.query.v21.BindVariable
	3,  // 48: vitess.vtgate.v21.Session.PrepareStatementEntry.value:type_name -> vitess.vtgate.v21.PrepareData
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_vitess_vtgate_v21_vtgate_proto_init() }
func file_vitess_vtgate_v21_vtgate_proto_init() {
	if File_vitess_vtgate_v21_vtgate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vitess_vtgate_v21_vtgate_proto_rawDesc), len(file_vitess_vtgate_v21_vtgate_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vitess_vtgate_v21_vtgate_proto_goTypes,
		DependencyIndexes: file_vitess_vtgate_v21_vtgate_proto_depIdxs,
		EnumInfos:         file_vitess_vtgate_v21_vtgate_proto_enumTypes,
		MessageInfos:      file_vitess_vtgate_v21_vtgate_proto_msgTypes,
	}.Build()
	File_vitess_vtgate_v21_vtgate_proto = out.File
	file_vitess_vtgate_v21_vtgate_proto_goTypes = nil
	file_vitess_vtgate_v21_vtgate_proto_depIdxs = nil
}
