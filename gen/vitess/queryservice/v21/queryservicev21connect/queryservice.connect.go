//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
// This file contains the service VtTablet exposes for queries.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vitess/queryservice/v21/queryservice.proto

package queryservicev21connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v211 "github.com/planetscale/vitess-types/gen/vitess/binlogdata/v21"
	v21 "github.com/planetscale/vitess-types/gen/vitess/query/v21"
	v212 "github.com/planetscale/vitess-types/gen/vitess/queryservice/v21"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// QueryName is the fully-qualified name of the Query service.
	QueryName = "queryservice.Query"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QueryExecuteProcedure is the fully-qualified name of the Query's Execute RPC.
	QueryExecuteProcedure = "/queryservice.Query/Execute"
	// QueryStreamExecuteProcedure is the fully-qualified name of the Query's StreamExecute RPC.
	QueryStreamExecuteProcedure = "/queryservice.Query/StreamExecute"
	// QueryBeginProcedure is the fully-qualified name of the Query's Begin RPC.
	QueryBeginProcedure = "/queryservice.Query/Begin"
	// QueryCommitProcedure is the fully-qualified name of the Query's Commit RPC.
	QueryCommitProcedure = "/queryservice.Query/Commit"
	// QueryRollbackProcedure is the fully-qualified name of the Query's Rollback RPC.
	QueryRollbackProcedure = "/queryservice.Query/Rollback"
	// QueryPrepareProcedure is the fully-qualified name of the Query's Prepare RPC.
	QueryPrepareProcedure = "/queryservice.Query/Prepare"
	// QueryCommitPreparedProcedure is the fully-qualified name of the Query's CommitPrepared RPC.
	QueryCommitPreparedProcedure = "/queryservice.Query/CommitPrepared"
	// QueryRollbackPreparedProcedure is the fully-qualified name of the Query's RollbackPrepared RPC.
	QueryRollbackPreparedProcedure = "/queryservice.Query/RollbackPrepared"
	// QueryCreateTransactionProcedure is the fully-qualified name of the Query's CreateTransaction RPC.
	QueryCreateTransactionProcedure = "/queryservice.Query/CreateTransaction"
	// QueryStartCommitProcedure is the fully-qualified name of the Query's StartCommit RPC.
	QueryStartCommitProcedure = "/queryservice.Query/StartCommit"
	// QuerySetRollbackProcedure is the fully-qualified name of the Query's SetRollback RPC.
	QuerySetRollbackProcedure = "/queryservice.Query/SetRollback"
	// QueryConcludeTransactionProcedure is the fully-qualified name of the Query's ConcludeTransaction
	// RPC.
	QueryConcludeTransactionProcedure = "/queryservice.Query/ConcludeTransaction"
	// QueryReadTransactionProcedure is the fully-qualified name of the Query's ReadTransaction RPC.
	QueryReadTransactionProcedure = "/queryservice.Query/ReadTransaction"
	// QueryUnresolvedTransactionsProcedure is the fully-qualified name of the Query's
	// UnresolvedTransactions RPC.
	QueryUnresolvedTransactionsProcedure = "/queryservice.Query/UnresolvedTransactions"
	// QueryBeginExecuteProcedure is the fully-qualified name of the Query's BeginExecute RPC.
	QueryBeginExecuteProcedure = "/queryservice.Query/BeginExecute"
	// QueryBeginStreamExecuteProcedure is the fully-qualified name of the Query's BeginStreamExecute
	// RPC.
	QueryBeginStreamExecuteProcedure = "/queryservice.Query/BeginStreamExecute"
	// QueryMessageStreamProcedure is the fully-qualified name of the Query's MessageStream RPC.
	QueryMessageStreamProcedure = "/queryservice.Query/MessageStream"
	// QueryMessageAckProcedure is the fully-qualified name of the Query's MessageAck RPC.
	QueryMessageAckProcedure = "/queryservice.Query/MessageAck"
	// QueryReserveExecuteProcedure is the fully-qualified name of the Query's ReserveExecute RPC.
	QueryReserveExecuteProcedure = "/queryservice.Query/ReserveExecute"
	// QueryReserveBeginExecuteProcedure is the fully-qualified name of the Query's ReserveBeginExecute
	// RPC.
	QueryReserveBeginExecuteProcedure = "/queryservice.Query/ReserveBeginExecute"
	// QueryReserveStreamExecuteProcedure is the fully-qualified name of the Query's
	// ReserveStreamExecute RPC.
	QueryReserveStreamExecuteProcedure = "/queryservice.Query/ReserveStreamExecute"
	// QueryReserveBeginStreamExecuteProcedure is the fully-qualified name of the Query's
	// ReserveBeginStreamExecute RPC.
	QueryReserveBeginStreamExecuteProcedure = "/queryservice.Query/ReserveBeginStreamExecute"
	// QueryReleaseProcedure is the fully-qualified name of the Query's Release RPC.
	QueryReleaseProcedure = "/queryservice.Query/Release"
	// QueryStreamHealthProcedure is the fully-qualified name of the Query's StreamHealth RPC.
	QueryStreamHealthProcedure = "/queryservice.Query/StreamHealth"
	// QueryVStreamProcedure is the fully-qualified name of the Query's VStream RPC.
	QueryVStreamProcedure = "/queryservice.Query/VStream"
	// QueryVStreamRowsProcedure is the fully-qualified name of the Query's VStreamRows RPC.
	QueryVStreamRowsProcedure = "/queryservice.Query/VStreamRows"
	// QueryVStreamTablesProcedure is the fully-qualified name of the Query's VStreamTables RPC.
	QueryVStreamTablesProcedure = "/queryservice.Query/VStreamTables"
	// QueryVStreamResultsProcedure is the fully-qualified name of the Query's VStreamResults RPC.
	QueryVStreamResultsProcedure = "/queryservice.Query/VStreamResults"
	// QueryGetSchemaProcedure is the fully-qualified name of the Query's GetSchema RPC.
	QueryGetSchemaProcedure = "/queryservice.Query/GetSchema"
)

// QueryClient is a client for the queryservice.Query service.
type QueryClient interface {
	// Execute executes the specified SQL query (might be in a
	// transaction context, if Query.transaction_id is set).
	Execute(context.Context, *connect.Request[v21.ExecuteRequest]) (*connect.Response[v21.ExecuteResponse], error)
	// StreamExecute executes a streaming query. Use this method if the
	// query returns a large number of rows. The first QueryResult will
	// contain the Fields, subsequent QueryResult messages will contain
	// the rows.
	StreamExecute(context.Context, *connect.Request[v21.StreamExecuteRequest]) (*connect.ServerStreamForClient[v21.StreamExecuteResponse], error)
	// Begin a transaction.
	Begin(context.Context, *connect.Request[v21.BeginRequest]) (*connect.Response[v21.BeginResponse], error)
	// Commit a transaction.
	Commit(context.Context, *connect.Request[v21.CommitRequest]) (*connect.Response[v21.CommitResponse], error)
	// Rollback a transaction.
	Rollback(context.Context, *connect.Request[v21.RollbackRequest]) (*connect.Response[v21.RollbackResponse], error)
	// Prepare preares a transaction.
	Prepare(context.Context, *connect.Request[v21.PrepareRequest]) (*connect.Response[v21.PrepareResponse], error)
	// CommitPrepared commits a prepared transaction.
	CommitPrepared(context.Context, *connect.Request[v21.CommitPreparedRequest]) (*connect.Response[v21.CommitPreparedResponse], error)
	// RollbackPrepared rolls back a prepared transaction.
	RollbackPrepared(context.Context, *connect.Request[v21.RollbackPreparedRequest]) (*connect.Response[v21.RollbackPreparedResponse], error)
	// CreateTransaction creates the metadata for a 2pc transaction.
	CreateTransaction(context.Context, *connect.Request[v21.CreateTransactionRequest]) (*connect.Response[v21.CreateTransactionResponse], error)
	// StartCommit initiates a commit for a 2pc transaction.
	StartCommit(context.Context, *connect.Request[v21.StartCommitRequest]) (*connect.Response[v21.StartCommitResponse], error)
	// SetRollback marks the 2pc transaction for rollback.
	SetRollback(context.Context, *connect.Request[v21.SetRollbackRequest]) (*connect.Response[v21.SetRollbackResponse], error)
	// ConcludeTransaction marks the 2pc transaction as resolved.
	ConcludeTransaction(context.Context, *connect.Request[v21.ConcludeTransactionRequest]) (*connect.Response[v21.ConcludeTransactionResponse], error)
	// ReadTransaction returns the 2pc transaction info.
	ReadTransaction(context.Context, *connect.Request[v21.ReadTransactionRequest]) (*connect.Response[v21.ReadTransactionResponse], error)
	// UnresolvedTransactions returns the 2pc transaction info.
	UnresolvedTransactions(context.Context, *connect.Request[v21.UnresolvedTransactionsRequest]) (*connect.Response[v21.UnresolvedTransactionsResponse], error)
	// BeginExecute executes a begin and the specified SQL query.
	BeginExecute(context.Context, *connect.Request[v21.BeginExecuteRequest]) (*connect.Response[v21.BeginExecuteResponse], error)
	// BeginStreamExecute executes a begin and the specified SQL query.
	BeginStreamExecute(context.Context, *connect.Request[v21.BeginStreamExecuteRequest]) (*connect.ServerStreamForClient[v21.BeginStreamExecuteResponse], error)
	// MessageStream streams messages from a message table.
	MessageStream(context.Context, *connect.Request[v21.MessageStreamRequest]) (*connect.ServerStreamForClient[v21.MessageStreamResponse], error)
	// MessageAck acks messages for a table.
	MessageAck(context.Context, *connect.Request[v21.MessageAckRequest]) (*connect.Response[v21.MessageAckResponse], error)
	// ReserveExecute executes a query on a reserved connection
	ReserveExecute(context.Context, *connect.Request[v21.ReserveExecuteRequest]) (*connect.Response[v21.ReserveExecuteResponse], error)
	// ReserveBeginExecute starts a transaction and executes a query in the transaction on a reserved connection
	ReserveBeginExecute(context.Context, *connect.Request[v21.ReserveBeginExecuteRequest]) (*connect.Response[v21.ReserveBeginExecuteResponse], error)
	// ReserveStreamExecute executes a streaming query on a reserved connection
	ReserveStreamExecute(context.Context, *connect.Request[v21.ReserveStreamExecuteRequest]) (*connect.ServerStreamForClient[v21.ReserveStreamExecuteResponse], error)
	// ReserveBeginStreamExecute starts a transaction and executes a streaming query in the transaction on a reserved connection
	ReserveBeginStreamExecute(context.Context, *connect.Request[v21.ReserveBeginStreamExecuteRequest]) (*connect.ServerStreamForClient[v21.ReserveBeginStreamExecuteResponse], error)
	// Release releases the connection
	Release(context.Context, *connect.Request[v21.ReleaseRequest]) (*connect.Response[v21.ReleaseResponse], error)
	// StreamHealth runs a streaming RPC to the tablet, that returns the
	// current health of the tablet on a regular basis.
	StreamHealth(context.Context, *connect.Request[v21.StreamHealthRequest]) (*connect.ServerStreamForClient[v21.StreamHealthResponse], error)
	// VStream streams vreplication events.
	VStream(context.Context, *connect.Request[v211.VStreamRequest]) (*connect.ServerStreamForClient[v211.VStreamResponse], error)
	// VStreamRows streams rows from the specified starting point.
	VStreamRows(context.Context, *connect.Request[v211.VStreamRowsRequest]) (*connect.ServerStreamForClient[v211.VStreamRowsResponse], error)
	// VStreamTables streams rows from the specified starting point.
	VStreamTables(context.Context, *connect.Request[v211.VStreamTablesRequest]) (*connect.ServerStreamForClient[v211.VStreamTablesResponse], error)
	// VStreamResults streams results along with the gtid of the snapshot.
	VStreamResults(context.Context, *connect.Request[v211.VStreamResultsRequest]) (*connect.ServerStreamForClient[v211.VStreamResultsResponse], error)
	// GetSchema returns the schema information.
	GetSchema(context.Context, *connect.Request[v21.GetSchemaRequest]) (*connect.ServerStreamForClient[v21.GetSchemaResponse], error)
}

// NewQueryClient constructs a client for the queryservice.Query service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueryClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QueryClient {
	baseURL = strings.TrimRight(baseURL, "/")
	queryMethods := v212.File_vitess_queryservice_v21_queryservice_proto.Services().ByName("Query").Methods()
	return &queryClient{
		execute: connect.NewClient[v21.ExecuteRequest, v21.ExecuteResponse](
			httpClient,
			baseURL+QueryExecuteProcedure,
			connect.WithSchema(queryMethods.ByName("Execute")),
			connect.WithClientOptions(opts...),
		),
		streamExecute: connect.NewClient[v21.StreamExecuteRequest, v21.StreamExecuteResponse](
			httpClient,
			baseURL+QueryStreamExecuteProcedure,
			connect.WithSchema(queryMethods.ByName("StreamExecute")),
			connect.WithClientOptions(opts...),
		),
		begin: connect.NewClient[v21.BeginRequest, v21.BeginResponse](
			httpClient,
			baseURL+QueryBeginProcedure,
			connect.WithSchema(queryMethods.ByName("Begin")),
			connect.WithClientOptions(opts...),
		),
		commit: connect.NewClient[v21.CommitRequest, v21.CommitResponse](
			httpClient,
			baseURL+QueryCommitProcedure,
			connect.WithSchema(queryMethods.ByName("Commit")),
			connect.WithClientOptions(opts...),
		),
		rollback: connect.NewClient[v21.RollbackRequest, v21.RollbackResponse](
			httpClient,
			baseURL+QueryRollbackProcedure,
			connect.WithSchema(queryMethods.ByName("Rollback")),
			connect.WithClientOptions(opts...),
		),
		prepare: connect.NewClient[v21.PrepareRequest, v21.PrepareResponse](
			httpClient,
			baseURL+QueryPrepareProcedure,
			connect.WithSchema(queryMethods.ByName("Prepare")),
			connect.WithClientOptions(opts...),
		),
		commitPrepared: connect.NewClient[v21.CommitPreparedRequest, v21.CommitPreparedResponse](
			httpClient,
			baseURL+QueryCommitPreparedProcedure,
			connect.WithSchema(queryMethods.ByName("CommitPrepared")),
			connect.WithClientOptions(opts...),
		),
		rollbackPrepared: connect.NewClient[v21.RollbackPreparedRequest, v21.RollbackPreparedResponse](
			httpClient,
			baseURL+QueryRollbackPreparedProcedure,
			connect.WithSchema(queryMethods.ByName("RollbackPrepared")),
			connect.WithClientOptions(opts...),
		),
		createTransaction: connect.NewClient[v21.CreateTransactionRequest, v21.CreateTransactionResponse](
			httpClient,
			baseURL+QueryCreateTransactionProcedure,
			connect.WithSchema(queryMethods.ByName("CreateTransaction")),
			connect.WithClientOptions(opts...),
		),
		startCommit: connect.NewClient[v21.StartCommitRequest, v21.StartCommitResponse](
			httpClient,
			baseURL+QueryStartCommitProcedure,
			connect.WithSchema(queryMethods.ByName("StartCommit")),
			connect.WithClientOptions(opts...),
		),
		setRollback: connect.NewClient[v21.SetRollbackRequest, v21.SetRollbackResponse](
			httpClient,
			baseURL+QuerySetRollbackProcedure,
			connect.WithSchema(queryMethods.ByName("SetRollback")),
			connect.WithClientOptions(opts...),
		),
		concludeTransaction: connect.NewClient[v21.ConcludeTransactionRequest, v21.ConcludeTransactionResponse](
			httpClient,
			baseURL+QueryConcludeTransactionProcedure,
			connect.WithSchema(queryMethods.ByName("ConcludeTransaction")),
			connect.WithClientOptions(opts...),
		),
		readTransaction: connect.NewClient[v21.ReadTransactionRequest, v21.ReadTransactionResponse](
			httpClient,
			baseURL+QueryReadTransactionProcedure,
			connect.WithSchema(queryMethods.ByName("ReadTransaction")),
			connect.WithClientOptions(opts...),
		),
		unresolvedTransactions: connect.NewClient[v21.UnresolvedTransactionsRequest, v21.UnresolvedTransactionsResponse](
			httpClient,
			baseURL+QueryUnresolvedTransactionsProcedure,
			connect.WithSchema(queryMethods.ByName("UnresolvedTransactions")),
			connect.WithClientOptions(opts...),
		),
		beginExecute: connect.NewClient[v21.BeginExecuteRequest, v21.BeginExecuteResponse](
			httpClient,
			baseURL+QueryBeginExecuteProcedure,
			connect.WithSchema(queryMethods.ByName("BeginExecute")),
			connect.WithClientOptions(opts...),
		),
		beginStreamExecute: connect.NewClient[v21.BeginStreamExecuteRequest, v21.BeginStreamExecuteResponse](
			httpClient,
			baseURL+QueryBeginStreamExecuteProcedure,
			connect.WithSchema(queryMethods.ByName("BeginStreamExecute")),
			connect.WithClientOptions(opts...),
		),
		messageStream: connect.NewClient[v21.MessageStreamRequest, v21.MessageStreamResponse](
			httpClient,
			baseURL+QueryMessageStreamProcedure,
			connect.WithSchema(queryMethods.ByName("MessageStream")),
			connect.WithClientOptions(opts...),
		),
		messageAck: connect.NewClient[v21.MessageAckRequest, v21.MessageAckResponse](
			httpClient,
			baseURL+QueryMessageAckProcedure,
			connect.WithSchema(queryMethods.ByName("MessageAck")),
			connect.WithClientOptions(opts...),
		),
		reserveExecute: connect.NewClient[v21.ReserveExecuteRequest, v21.ReserveExecuteResponse](
			httpClient,
			baseURL+QueryReserveExecuteProcedure,
			connect.WithSchema(queryMethods.ByName("ReserveExecute")),
			connect.WithClientOptions(opts...),
		),
		reserveBeginExecute: connect.NewClient[v21.ReserveBeginExecuteRequest, v21.ReserveBeginExecuteResponse](
			httpClient,
			baseURL+QueryReserveBeginExecuteProcedure,
			connect.WithSchema(queryMethods.ByName("ReserveBeginExecute")),
			connect.WithClientOptions(opts...),
		),
		reserveStreamExecute: connect.NewClient[v21.ReserveStreamExecuteRequest, v21.ReserveStreamExecuteResponse](
			httpClient,
			baseURL+QueryReserveStreamExecuteProcedure,
			connect.WithSchema(queryMethods.ByName("ReserveStreamExecute")),
			connect.WithClientOptions(opts...),
		),
		reserveBeginStreamExecute: connect.NewClient[v21.ReserveBeginStreamExecuteRequest, v21.ReserveBeginStreamExecuteResponse](
			httpClient,
			baseURL+QueryReserveBeginStreamExecuteProcedure,
			connect.WithSchema(queryMethods.ByName("ReserveBeginStreamExecute")),
			connect.WithClientOptions(opts...),
		),
		release: connect.NewClient[v21.ReleaseRequest, v21.ReleaseResponse](
			httpClient,
			baseURL+QueryReleaseProcedure,
			connect.WithSchema(queryMethods.ByName("Release")),
			connect.WithClientOptions(opts...),
		),
		streamHealth: connect.NewClient[v21.StreamHealthRequest, v21.StreamHealthResponse](
			httpClient,
			baseURL+QueryStreamHealthProcedure,
			connect.WithSchema(queryMethods.ByName("StreamHealth")),
			connect.WithClientOptions(opts...),
		),
		vStream: connect.NewClient[v211.VStreamRequest, v211.VStreamResponse](
			httpClient,
			baseURL+QueryVStreamProcedure,
			connect.WithSchema(queryMethods.ByName("VStream")),
			connect.WithClientOptions(opts...),
		),
		vStreamRows: connect.NewClient[v211.VStreamRowsRequest, v211.VStreamRowsResponse](
			httpClient,
			baseURL+QueryVStreamRowsProcedure,
			connect.WithSchema(queryMethods.ByName("VStreamRows")),
			connect.WithClientOptions(opts...),
		),
		vStreamTables: connect.NewClient[v211.VStreamTablesRequest, v211.VStreamTablesResponse](
			httpClient,
			baseURL+QueryVStreamTablesProcedure,
			connect.WithSchema(queryMethods.ByName("VStreamTables")),
			connect.WithClientOptions(opts...),
		),
		vStreamResults: connect.NewClient[v211.VStreamResultsRequest, v211.VStreamResultsResponse](
			httpClient,
			baseURL+QueryVStreamResultsProcedure,
			connect.WithSchema(queryMethods.ByName("VStreamResults")),
			connect.WithClientOptions(opts...),
		),
		getSchema: connect.NewClient[v21.GetSchemaRequest, v21.GetSchemaResponse](
			httpClient,
			baseURL+QueryGetSchemaProcedure,
			connect.WithSchema(queryMethods.ByName("GetSchema")),
			connect.WithClientOptions(opts...),
		),
	}
}

// queryClient implements QueryClient.
type queryClient struct {
	execute                   *connect.Client[v21.ExecuteRequest, v21.ExecuteResponse]
	streamExecute             *connect.Client[v21.StreamExecuteRequest, v21.StreamExecuteResponse]
	begin                     *connect.Client[v21.BeginRequest, v21.BeginResponse]
	commit                    *connect.Client[v21.CommitRequest, v21.CommitResponse]
	rollback                  *connect.Client[v21.RollbackRequest, v21.RollbackResponse]
	prepare                   *connect.Client[v21.PrepareRequest, v21.PrepareResponse]
	commitPrepared            *connect.Client[v21.CommitPreparedRequest, v21.CommitPreparedResponse]
	rollbackPrepared          *connect.Client[v21.RollbackPreparedRequest, v21.RollbackPreparedResponse]
	createTransaction         *connect.Client[v21.CreateTransactionRequest, v21.CreateTransactionResponse]
	startCommit               *connect.Client[v21.StartCommitRequest, v21.StartCommitResponse]
	setRollback               *connect.Client[v21.SetRollbackRequest, v21.SetRollbackResponse]
	concludeTransaction       *connect.Client[v21.ConcludeTransactionRequest, v21.ConcludeTransactionResponse]
	readTransaction           *connect.Client[v21.ReadTransactionRequest, v21.ReadTransactionResponse]
	unresolvedTransactions    *connect.Client[v21.UnresolvedTransactionsRequest, v21.UnresolvedTransactionsResponse]
	beginExecute              *connect.Client[v21.BeginExecuteRequest, v21.BeginExecuteResponse]
	beginStreamExecute        *connect.Client[v21.BeginStreamExecuteRequest, v21.BeginStreamExecuteResponse]
	messageStream             *connect.Client[v21.MessageStreamRequest, v21.MessageStreamResponse]
	messageAck                *connect.Client[v21.MessageAckRequest, v21.MessageAckResponse]
	reserveExecute            *connect.Client[v21.ReserveExecuteRequest, v21.ReserveExecuteResponse]
	reserveBeginExecute       *connect.Client[v21.ReserveBeginExecuteRequest, v21.ReserveBeginExecuteResponse]
	reserveStreamExecute      *connect.Client[v21.ReserveStreamExecuteRequest, v21.ReserveStreamExecuteResponse]
	reserveBeginStreamExecute *connect.Client[v21.ReserveBeginStreamExecuteRequest, v21.ReserveBeginStreamExecuteResponse]
	release                   *connect.Client[v21.ReleaseRequest, v21.ReleaseResponse]
	streamHealth              *connect.Client[v21.StreamHealthRequest, v21.StreamHealthResponse]
	vStream                   *connect.Client[v211.VStreamRequest, v211.VStreamResponse]
	vStreamRows               *connect.Client[v211.VStreamRowsRequest, v211.VStreamRowsResponse]
	vStreamTables             *connect.Client[v211.VStreamTablesRequest, v211.VStreamTablesResponse]
	vStreamResults            *connect.Client[v211.VStreamResultsRequest, v211.VStreamResultsResponse]
	getSchema                 *connect.Client[v21.GetSchemaRequest, v21.GetSchemaResponse]
}

// Execute calls queryservice.Query.Execute.
func (c *queryClient) Execute(ctx context.Context, req *connect.Request[v21.ExecuteRequest]) (*connect.Response[v21.ExecuteResponse], error) {
	return c.execute.CallUnary(ctx, req)
}

// StreamExecute calls queryservice.Query.StreamExecute.
func (c *queryClient) StreamExecute(ctx context.Context, req *connect.Request[v21.StreamExecuteRequest]) (*connect.ServerStreamForClient[v21.StreamExecuteResponse], error) {
	return c.streamExecute.CallServerStream(ctx, req)
}

// Begin calls queryservice.Query.Begin.
func (c *queryClient) Begin(ctx context.Context, req *connect.Request[v21.BeginRequest]) (*connect.Response[v21.BeginResponse], error) {
	return c.begin.CallUnary(ctx, req)
}

// Commit calls queryservice.Query.Commit.
func (c *queryClient) Commit(ctx context.Context, req *connect.Request[v21.CommitRequest]) (*connect.Response[v21.CommitResponse], error) {
	return c.commit.CallUnary(ctx, req)
}

// Rollback calls queryservice.Query.Rollback.
func (c *queryClient) Rollback(ctx context.Context, req *connect.Request[v21.RollbackRequest]) (*connect.Response[v21.RollbackResponse], error) {
	return c.rollback.CallUnary(ctx, req)
}

// Prepare calls queryservice.Query.Prepare.
func (c *queryClient) Prepare(ctx context.Context, req *connect.Request[v21.PrepareRequest]) (*connect.Response[v21.PrepareResponse], error) {
	return c.prepare.CallUnary(ctx, req)
}

// CommitPrepared calls queryservice.Query.CommitPrepared.
func (c *queryClient) CommitPrepared(ctx context.Context, req *connect.Request[v21.CommitPreparedRequest]) (*connect.Response[v21.CommitPreparedResponse], error) {
	return c.commitPrepared.CallUnary(ctx, req)
}

// RollbackPrepared calls queryservice.Query.RollbackPrepared.
func (c *queryClient) RollbackPrepared(ctx context.Context, req *connect.Request[v21.RollbackPreparedRequest]) (*connect.Response[v21.RollbackPreparedResponse], error) {
	return c.rollbackPrepared.CallUnary(ctx, req)
}

// CreateTransaction calls queryservice.Query.CreateTransaction.
func (c *queryClient) CreateTransaction(ctx context.Context, req *connect.Request[v21.CreateTransactionRequest]) (*connect.Response[v21.CreateTransactionResponse], error) {
	return c.createTransaction.CallUnary(ctx, req)
}

// StartCommit calls queryservice.Query.StartCommit.
func (c *queryClient) StartCommit(ctx context.Context, req *connect.Request[v21.StartCommitRequest]) (*connect.Response[v21.StartCommitResponse], error) {
	return c.startCommit.CallUnary(ctx, req)
}

// SetRollback calls queryservice.Query.SetRollback.
func (c *queryClient) SetRollback(ctx context.Context, req *connect.Request[v21.SetRollbackRequest]) (*connect.Response[v21.SetRollbackResponse], error) {
	return c.setRollback.CallUnary(ctx, req)
}

// ConcludeTransaction calls queryservice.Query.ConcludeTransaction.
func (c *queryClient) ConcludeTransaction(ctx context.Context, req *connect.Request[v21.ConcludeTransactionRequest]) (*connect.Response[v21.ConcludeTransactionResponse], error) {
	return c.concludeTransaction.CallUnary(ctx, req)
}

// ReadTransaction calls queryservice.Query.ReadTransaction.
func (c *queryClient) ReadTransaction(ctx context.Context, req *connect.Request[v21.ReadTransactionRequest]) (*connect.Response[v21.ReadTransactionResponse], error) {
	return c.readTransaction.CallUnary(ctx, req)
}

// UnresolvedTransactions calls queryservice.Query.UnresolvedTransactions.
func (c *queryClient) UnresolvedTransactions(ctx context.Context, req *connect.Request[v21.UnresolvedTransactionsRequest]) (*connect.Response[v21.UnresolvedTransactionsResponse], error) {
	return c.unresolvedTransactions.CallUnary(ctx, req)
}

// BeginExecute calls queryservice.Query.BeginExecute.
func (c *queryClient) BeginExecute(ctx context.Context, req *connect.Request[v21.BeginExecuteRequest]) (*connect.Response[v21.BeginExecuteResponse], error) {
	return c.beginExecute.CallUnary(ctx, req)
}

// BeginStreamExecute calls queryservice.Query.BeginStreamExecute.
func (c *queryClient) BeginStreamExecute(ctx context.Context, req *connect.Request[v21.BeginStreamExecuteRequest]) (*connect.ServerStreamForClient[v21.BeginStreamExecuteResponse], error) {
	return c.beginStreamExecute.CallServerStream(ctx, req)
}

// MessageStream calls queryservice.Query.MessageStream.
func (c *queryClient) MessageStream(ctx context.Context, req *connect.Request[v21.MessageStreamRequest]) (*connect.ServerStreamForClient[v21.MessageStreamResponse], error) {
	return c.messageStream.CallServerStream(ctx, req)
}

// MessageAck calls queryservice.Query.MessageAck.
func (c *queryClient) MessageAck(ctx context.Context, req *connect.Request[v21.MessageAckRequest]) (*connect.Response[v21.MessageAckResponse], error) {
	return c.messageAck.CallUnary(ctx, req)
}

// ReserveExecute calls queryservice.Query.ReserveExecute.
func (c *queryClient) ReserveExecute(ctx context.Context, req *connect.Request[v21.ReserveExecuteRequest]) (*connect.Response[v21.ReserveExecuteResponse], error) {
	return c.reserveExecute.CallUnary(ctx, req)
}

// ReserveBeginExecute calls queryservice.Query.ReserveBeginExecute.
func (c *queryClient) ReserveBeginExecute(ctx context.Context, req *connect.Request[v21.ReserveBeginExecuteRequest]) (*connect.Response[v21.ReserveBeginExecuteResponse], error) {
	return c.reserveBeginExecute.CallUnary(ctx, req)
}

// ReserveStreamExecute calls queryservice.Query.ReserveStreamExecute.
func (c *queryClient) ReserveStreamExecute(ctx context.Context, req *connect.Request[v21.ReserveStreamExecuteRequest]) (*connect.ServerStreamForClient[v21.ReserveStreamExecuteResponse], error) {
	return c.reserveStreamExecute.CallServerStream(ctx, req)
}

// ReserveBeginStreamExecute calls queryservice.Query.ReserveBeginStreamExecute.
func (c *queryClient) ReserveBeginStreamExecute(ctx context.Context, req *connect.Request[v21.ReserveBeginStreamExecuteRequest]) (*connect.ServerStreamForClient[v21.ReserveBeginStreamExecuteResponse], error) {
	return c.reserveBeginStreamExecute.CallServerStream(ctx, req)
}

// Release calls queryservice.Query.Release.
func (c *queryClient) Release(ctx context.Context, req *connect.Request[v21.ReleaseRequest]) (*connect.Response[v21.ReleaseResponse], error) {
	return c.release.CallUnary(ctx, req)
}

// StreamHealth calls queryservice.Query.StreamHealth.
func (c *queryClient) StreamHealth(ctx context.Context, req *connect.Request[v21.StreamHealthRequest]) (*connect.ServerStreamForClient[v21.StreamHealthResponse], error) {
	return c.streamHealth.CallServerStream(ctx, req)
}

// VStream calls queryservice.Query.VStream.
func (c *queryClient) VStream(ctx context.Context, req *connect.Request[v211.VStreamRequest]) (*connect.ServerStreamForClient[v211.VStreamResponse], error) {
	return c.vStream.CallServerStream(ctx, req)
}

// VStreamRows calls queryservice.Query.VStreamRows.
func (c *queryClient) VStreamRows(ctx context.Context, req *connect.Request[v211.VStreamRowsRequest]) (*connect.ServerStreamForClient[v211.VStreamRowsResponse], error) {
	return c.vStreamRows.CallServerStream(ctx, req)
}

// VStreamTables calls queryservice.Query.VStreamTables.
func (c *queryClient) VStreamTables(ctx context.Context, req *connect.Request[v211.VStreamTablesRequest]) (*connect.ServerStreamForClient[v211.VStreamTablesResponse], error) {
	return c.vStreamTables.CallServerStream(ctx, req)
}

// VStreamResults calls queryservice.Query.VStreamResults.
func (c *queryClient) VStreamResults(ctx context.Context, req *connect.Request[v211.VStreamResultsRequest]) (*connect.ServerStreamForClient[v211.VStreamResultsResponse], error) {
	return c.vStreamResults.CallServerStream(ctx, req)
}

// GetSchema calls queryservice.Query.GetSchema.
func (c *queryClient) GetSchema(ctx context.Context, req *connect.Request[v21.GetSchemaRequest]) (*connect.ServerStreamForClient[v21.GetSchemaResponse], error) {
	return c.getSchema.CallServerStream(ctx, req)
}

// QueryHandler is an implementation of the queryservice.Query service.
type QueryHandler interface {
	// Execute executes the specified SQL query (might be in a
	// transaction context, if Query.transaction_id is set).
	Execute(context.Context, *connect.Request[v21.ExecuteRequest]) (*connect.Response[v21.ExecuteResponse], error)
	// StreamExecute executes a streaming query. Use this method if the
	// query returns a large number of rows. The first QueryResult will
	// contain the Fields, subsequent QueryResult messages will contain
	// the rows.
	StreamExecute(context.Context, *connect.Request[v21.StreamExecuteRequest], *connect.ServerStream[v21.StreamExecuteResponse]) error
	// Begin a transaction.
	Begin(context.Context, *connect.Request[v21.BeginRequest]) (*connect.Response[v21.BeginResponse], error)
	// Commit a transaction.
	Commit(context.Context, *connect.Request[v21.CommitRequest]) (*connect.Response[v21.CommitResponse], error)
	// Rollback a transaction.
	Rollback(context.Context, *connect.Request[v21.RollbackRequest]) (*connect.Response[v21.RollbackResponse], error)
	// Prepare preares a transaction.
	Prepare(context.Context, *connect.Request[v21.PrepareRequest]) (*connect.Response[v21.PrepareResponse], error)
	// CommitPrepared commits a prepared transaction.
	CommitPrepared(context.Context, *connect.Request[v21.CommitPreparedRequest]) (*connect.Response[v21.CommitPreparedResponse], error)
	// RollbackPrepared rolls back a prepared transaction.
	RollbackPrepared(context.Context, *connect.Request[v21.RollbackPreparedRequest]) (*connect.Response[v21.RollbackPreparedResponse], error)
	// CreateTransaction creates the metadata for a 2pc transaction.
	CreateTransaction(context.Context, *connect.Request[v21.CreateTransactionRequest]) (*connect.Response[v21.CreateTransactionResponse], error)
	// StartCommit initiates a commit for a 2pc transaction.
	StartCommit(context.Context, *connect.Request[v21.StartCommitRequest]) (*connect.Response[v21.StartCommitResponse], error)
	// SetRollback marks the 2pc transaction for rollback.
	SetRollback(context.Context, *connect.Request[v21.SetRollbackRequest]) (*connect.Response[v21.SetRollbackResponse], error)
	// ConcludeTransaction marks the 2pc transaction as resolved.
	ConcludeTransaction(context.Context, *connect.Request[v21.ConcludeTransactionRequest]) (*connect.Response[v21.ConcludeTransactionResponse], error)
	// ReadTransaction returns the 2pc transaction info.
	ReadTransaction(context.Context, *connect.Request[v21.ReadTransactionRequest]) (*connect.Response[v21.ReadTransactionResponse], error)
	// UnresolvedTransactions returns the 2pc transaction info.
	UnresolvedTransactions(context.Context, *connect.Request[v21.UnresolvedTransactionsRequest]) (*connect.Response[v21.UnresolvedTransactionsResponse], error)
	// BeginExecute executes a begin and the specified SQL query.
	BeginExecute(context.Context, *connect.Request[v21.BeginExecuteRequest]) (*connect.Response[v21.BeginExecuteResponse], error)
	// BeginStreamExecute executes a begin and the specified SQL query.
	BeginStreamExecute(context.Context, *connect.Request[v21.BeginStreamExecuteRequest], *connect.ServerStream[v21.BeginStreamExecuteResponse]) error
	// MessageStream streams messages from a message table.
	MessageStream(context.Context, *connect.Request[v21.MessageStreamRequest], *connect.ServerStream[v21.MessageStreamResponse]) error
	// MessageAck acks messages for a table.
	MessageAck(context.Context, *connect.Request[v21.MessageAckRequest]) (*connect.Response[v21.MessageAckResponse], error)
	// ReserveExecute executes a query on a reserved connection
	ReserveExecute(context.Context, *connect.Request[v21.ReserveExecuteRequest]) (*connect.Response[v21.ReserveExecuteResponse], error)
	// ReserveBeginExecute starts a transaction and executes a query in the transaction on a reserved connection
	ReserveBeginExecute(context.Context, *connect.Request[v21.ReserveBeginExecuteRequest]) (*connect.Response[v21.ReserveBeginExecuteResponse], error)
	// ReserveStreamExecute executes a streaming query on a reserved connection
	ReserveStreamExecute(context.Context, *connect.Request[v21.ReserveStreamExecuteRequest], *connect.ServerStream[v21.ReserveStreamExecuteResponse]) error
	// ReserveBeginStreamExecute starts a transaction and executes a streaming query in the transaction on a reserved connection
	ReserveBeginStreamExecute(context.Context, *connect.Request[v21.ReserveBeginStreamExecuteRequest], *connect.ServerStream[v21.ReserveBeginStreamExecuteResponse]) error
	// Release releases the connection
	Release(context.Context, *connect.Request[v21.ReleaseRequest]) (*connect.Response[v21.ReleaseResponse], error)
	// StreamHealth runs a streaming RPC to the tablet, that returns the
	// current health of the tablet on a regular basis.
	StreamHealth(context.Context, *connect.Request[v21.StreamHealthRequest], *connect.ServerStream[v21.StreamHealthResponse]) error
	// VStream streams vreplication events.
	VStream(context.Context, *connect.Request[v211.VStreamRequest], *connect.ServerStream[v211.VStreamResponse]) error
	// VStreamRows streams rows from the specified starting point.
	VStreamRows(context.Context, *connect.Request[v211.VStreamRowsRequest], *connect.ServerStream[v211.VStreamRowsResponse]) error
	// VStreamTables streams rows from the specified starting point.
	VStreamTables(context.Context, *connect.Request[v211.VStreamTablesRequest], *connect.ServerStream[v211.VStreamTablesResponse]) error
	// VStreamResults streams results along with the gtid of the snapshot.
	VStreamResults(context.Context, *connect.Request[v211.VStreamResultsRequest], *connect.ServerStream[v211.VStreamResultsResponse]) error
	// GetSchema returns the schema information.
	GetSchema(context.Context, *connect.Request[v21.GetSchemaRequest], *connect.ServerStream[v21.GetSchemaResponse]) error
}

// NewQueryHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueryHandler(svc QueryHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	queryMethods := v212.File_vitess_queryservice_v21_queryservice_proto.Services().ByName("Query").Methods()
	queryExecuteHandler := connect.NewUnaryHandler(
		QueryExecuteProcedure,
		svc.Execute,
		connect.WithSchema(queryMethods.ByName("Execute")),
		connect.WithHandlerOptions(opts...),
	)
	queryStreamExecuteHandler := connect.NewServerStreamHandler(
		QueryStreamExecuteProcedure,
		svc.StreamExecute,
		connect.WithSchema(queryMethods.ByName("StreamExecute")),
		connect.WithHandlerOptions(opts...),
	)
	queryBeginHandler := connect.NewUnaryHandler(
		QueryBeginProcedure,
		svc.Begin,
		connect.WithSchema(queryMethods.ByName("Begin")),
		connect.WithHandlerOptions(opts...),
	)
	queryCommitHandler := connect.NewUnaryHandler(
		QueryCommitProcedure,
		svc.Commit,
		connect.WithSchema(queryMethods.ByName("Commit")),
		connect.WithHandlerOptions(opts...),
	)
	queryRollbackHandler := connect.NewUnaryHandler(
		QueryRollbackProcedure,
		svc.Rollback,
		connect.WithSchema(queryMethods.ByName("Rollback")),
		connect.WithHandlerOptions(opts...),
	)
	queryPrepareHandler := connect.NewUnaryHandler(
		QueryPrepareProcedure,
		svc.Prepare,
		connect.WithSchema(queryMethods.ByName("Prepare")),
		connect.WithHandlerOptions(opts...),
	)
	queryCommitPreparedHandler := connect.NewUnaryHandler(
		QueryCommitPreparedProcedure,
		svc.CommitPrepared,
		connect.WithSchema(queryMethods.ByName("CommitPrepared")),
		connect.WithHandlerOptions(opts...),
	)
	queryRollbackPreparedHandler := connect.NewUnaryHandler(
		QueryRollbackPreparedProcedure,
		svc.RollbackPrepared,
		connect.WithSchema(queryMethods.ByName("RollbackPrepared")),
		connect.WithHandlerOptions(opts...),
	)
	queryCreateTransactionHandler := connect.NewUnaryHandler(
		QueryCreateTransactionProcedure,
		svc.CreateTransaction,
		connect.WithSchema(queryMethods.ByName("CreateTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	queryStartCommitHandler := connect.NewUnaryHandler(
		QueryStartCommitProcedure,
		svc.StartCommit,
		connect.WithSchema(queryMethods.ByName("StartCommit")),
		connect.WithHandlerOptions(opts...),
	)
	querySetRollbackHandler := connect.NewUnaryHandler(
		QuerySetRollbackProcedure,
		svc.SetRollback,
		connect.WithSchema(queryMethods.ByName("SetRollback")),
		connect.WithHandlerOptions(opts...),
	)
	queryConcludeTransactionHandler := connect.NewUnaryHandler(
		QueryConcludeTransactionProcedure,
		svc.ConcludeTransaction,
		connect.WithSchema(queryMethods.ByName("ConcludeTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	queryReadTransactionHandler := connect.NewUnaryHandler(
		QueryReadTransactionProcedure,
		svc.ReadTransaction,
		connect.WithSchema(queryMethods.ByName("ReadTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	queryUnresolvedTransactionsHandler := connect.NewUnaryHandler(
		QueryUnresolvedTransactionsProcedure,
		svc.UnresolvedTransactions,
		connect.WithSchema(queryMethods.ByName("UnresolvedTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	queryBeginExecuteHandler := connect.NewUnaryHandler(
		QueryBeginExecuteProcedure,
		svc.BeginExecute,
		connect.WithSchema(queryMethods.ByName("BeginExecute")),
		connect.WithHandlerOptions(opts...),
	)
	queryBeginStreamExecuteHandler := connect.NewServerStreamHandler(
		QueryBeginStreamExecuteProcedure,
		svc.BeginStreamExecute,
		connect.WithSchema(queryMethods.ByName("BeginStreamExecute")),
		connect.WithHandlerOptions(opts...),
	)
	queryMessageStreamHandler := connect.NewServerStreamHandler(
		QueryMessageStreamProcedure,
		svc.MessageStream,
		connect.WithSchema(queryMethods.ByName("MessageStream")),
		connect.WithHandlerOptions(opts...),
	)
	queryMessageAckHandler := connect.NewUnaryHandler(
		QueryMessageAckProcedure,
		svc.MessageAck,
		connect.WithSchema(queryMethods.ByName("MessageAck")),
		connect.WithHandlerOptions(opts...),
	)
	queryReserveExecuteHandler := connect.NewUnaryHandler(
		QueryReserveExecuteProcedure,
		svc.ReserveExecute,
		connect.WithSchema(queryMethods.ByName("ReserveExecute")),
		connect.WithHandlerOptions(opts...),
	)
	queryReserveBeginExecuteHandler := connect.NewUnaryHandler(
		QueryReserveBeginExecuteProcedure,
		svc.ReserveBeginExecute,
		connect.WithSchema(queryMethods.ByName("ReserveBeginExecute")),
		connect.WithHandlerOptions(opts...),
	)
	queryReserveStreamExecuteHandler := connect.NewServerStreamHandler(
		QueryReserveStreamExecuteProcedure,
		svc.ReserveStreamExecute,
		connect.WithSchema(queryMethods.ByName("ReserveStreamExecute")),
		connect.WithHandlerOptions(opts...),
	)
	queryReserveBeginStreamExecuteHandler := connect.NewServerStreamHandler(
		QueryReserveBeginStreamExecuteProcedure,
		svc.ReserveBeginStreamExecute,
		connect.WithSchema(queryMethods.ByName("ReserveBeginStreamExecute")),
		connect.WithHandlerOptions(opts...),
	)
	queryReleaseHandler := connect.NewUnaryHandler(
		QueryReleaseProcedure,
		svc.Release,
		connect.WithSchema(queryMethods.ByName("Release")),
		connect.WithHandlerOptions(opts...),
	)
	queryStreamHealthHandler := connect.NewServerStreamHandler(
		QueryStreamHealthProcedure,
		svc.StreamHealth,
		connect.WithSchema(queryMethods.ByName("StreamHealth")),
		connect.WithHandlerOptions(opts...),
	)
	queryVStreamHandler := connect.NewServerStreamHandler(
		QueryVStreamProcedure,
		svc.VStream,
		connect.WithSchema(queryMethods.ByName("VStream")),
		connect.WithHandlerOptions(opts...),
	)
	queryVStreamRowsHandler := connect.NewServerStreamHandler(
		QueryVStreamRowsProcedure,
		svc.VStreamRows,
		connect.WithSchema(queryMethods.ByName("VStreamRows")),
		connect.WithHandlerOptions(opts...),
	)
	queryVStreamTablesHandler := connect.NewServerStreamHandler(
		QueryVStreamTablesProcedure,
		svc.VStreamTables,
		connect.WithSchema(queryMethods.ByName("VStreamTables")),
		connect.WithHandlerOptions(opts...),
	)
	queryVStreamResultsHandler := connect.NewServerStreamHandler(
		QueryVStreamResultsProcedure,
		svc.VStreamResults,
		connect.WithSchema(queryMethods.ByName("VStreamResults")),
		connect.WithHandlerOptions(opts...),
	)
	queryGetSchemaHandler := connect.NewServerStreamHandler(
		QueryGetSchemaProcedure,
		svc.GetSchema,
		connect.WithSchema(queryMethods.ByName("GetSchema")),
		connect.WithHandlerOptions(opts...),
	)
	return "/queryservice.Query/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QueryExecuteProcedure:
			queryExecuteHandler.ServeHTTP(w, r)
		case QueryStreamExecuteProcedure:
			queryStreamExecuteHandler.ServeHTTP(w, r)
		case QueryBeginProcedure:
			queryBeginHandler.ServeHTTP(w, r)
		case QueryCommitProcedure:
			queryCommitHandler.ServeHTTP(w, r)
		case QueryRollbackProcedure:
			queryRollbackHandler.ServeHTTP(w, r)
		case QueryPrepareProcedure:
			queryPrepareHandler.ServeHTTP(w, r)
		case QueryCommitPreparedProcedure:
			queryCommitPreparedHandler.ServeHTTP(w, r)
		case QueryRollbackPreparedProcedure:
			queryRollbackPreparedHandler.ServeHTTP(w, r)
		case QueryCreateTransactionProcedure:
			queryCreateTransactionHandler.ServeHTTP(w, r)
		case QueryStartCommitProcedure:
			queryStartCommitHandler.ServeHTTP(w, r)
		case QuerySetRollbackProcedure:
			querySetRollbackHandler.ServeHTTP(w, r)
		case QueryConcludeTransactionProcedure:
			queryConcludeTransactionHandler.ServeHTTP(w, r)
		case QueryReadTransactionProcedure:
			queryReadTransactionHandler.ServeHTTP(w, r)
		case QueryUnresolvedTransactionsProcedure:
			queryUnresolvedTransactionsHandler.ServeHTTP(w, r)
		case QueryBeginExecuteProcedure:
			queryBeginExecuteHandler.ServeHTTP(w, r)
		case QueryBeginStreamExecuteProcedure:
			queryBeginStreamExecuteHandler.ServeHTTP(w, r)
		case QueryMessageStreamProcedure:
			queryMessageStreamHandler.ServeHTTP(w, r)
		case QueryMessageAckProcedure:
			queryMessageAckHandler.ServeHTTP(w, r)
		case QueryReserveExecuteProcedure:
			queryReserveExecuteHandler.ServeHTTP(w, r)
		case QueryReserveBeginExecuteProcedure:
			queryReserveBeginExecuteHandler.ServeHTTP(w, r)
		case QueryReserveStreamExecuteProcedure:
			queryReserveStreamExecuteHandler.ServeHTTP(w, r)
		case QueryReserveBeginStreamExecuteProcedure:
			queryReserveBeginStreamExecuteHandler.ServeHTTP(w, r)
		case QueryReleaseProcedure:
			queryReleaseHandler.ServeHTTP(w, r)
		case QueryStreamHealthProcedure:
			queryStreamHealthHandler.ServeHTTP(w, r)
		case QueryVStreamProcedure:
			queryVStreamHandler.ServeHTTP(w, r)
		case QueryVStreamRowsProcedure:
			queryVStreamRowsHandler.ServeHTTP(w, r)
		case QueryVStreamTablesProcedure:
			queryVStreamTablesHandler.ServeHTTP(w, r)
		case QueryVStreamResultsProcedure:
			queryVStreamResultsHandler.ServeHTTP(w, r)
		case QueryGetSchemaProcedure:
			queryGetSchemaHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQueryHandler returns CodeUnimplemented from all methods.
type UnimplementedQueryHandler struct{}

func (UnimplementedQueryHandler) Execute(context.Context, *connect.Request[v21.ExecuteRequest]) (*connect.Response[v21.ExecuteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.Execute is not implemented"))
}

func (UnimplementedQueryHandler) StreamExecute(context.Context, *connect.Request[v21.StreamExecuteRequest], *connect.ServerStream[v21.StreamExecuteResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.StreamExecute is not implemented"))
}

func (UnimplementedQueryHandler) Begin(context.Context, *connect.Request[v21.BeginRequest]) (*connect.Response[v21.BeginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.Begin is not implemented"))
}

func (UnimplementedQueryHandler) Commit(context.Context, *connect.Request[v21.CommitRequest]) (*connect.Response[v21.CommitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.Commit is not implemented"))
}

func (UnimplementedQueryHandler) Rollback(context.Context, *connect.Request[v21.RollbackRequest]) (*connect.Response[v21.RollbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.Rollback is not implemented"))
}

func (UnimplementedQueryHandler) Prepare(context.Context, *connect.Request[v21.PrepareRequest]) (*connect.Response[v21.PrepareResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.Prepare is not implemented"))
}

func (UnimplementedQueryHandler) CommitPrepared(context.Context, *connect.Request[v21.CommitPreparedRequest]) (*connect.Response[v21.CommitPreparedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.CommitPrepared is not implemented"))
}

func (UnimplementedQueryHandler) RollbackPrepared(context.Context, *connect.Request[v21.RollbackPreparedRequest]) (*connect.Response[v21.RollbackPreparedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.RollbackPrepared is not implemented"))
}

func (UnimplementedQueryHandler) CreateTransaction(context.Context, *connect.Request[v21.CreateTransactionRequest]) (*connect.Response[v21.CreateTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.CreateTransaction is not implemented"))
}

func (UnimplementedQueryHandler) StartCommit(context.Context, *connect.Request[v21.StartCommitRequest]) (*connect.Response[v21.StartCommitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.StartCommit is not implemented"))
}

func (UnimplementedQueryHandler) SetRollback(context.Context, *connect.Request[v21.SetRollbackRequest]) (*connect.Response[v21.SetRollbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.SetRollback is not implemented"))
}

func (UnimplementedQueryHandler) ConcludeTransaction(context.Context, *connect.Request[v21.ConcludeTransactionRequest]) (*connect.Response[v21.ConcludeTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.ConcludeTransaction is not implemented"))
}

func (UnimplementedQueryHandler) ReadTransaction(context.Context, *connect.Request[v21.ReadTransactionRequest]) (*connect.Response[v21.ReadTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.ReadTransaction is not implemented"))
}

func (UnimplementedQueryHandler) UnresolvedTransactions(context.Context, *connect.Request[v21.UnresolvedTransactionsRequest]) (*connect.Response[v21.UnresolvedTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.UnresolvedTransactions is not implemented"))
}

func (UnimplementedQueryHandler) BeginExecute(context.Context, *connect.Request[v21.BeginExecuteRequest]) (*connect.Response[v21.BeginExecuteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.BeginExecute is not implemented"))
}

func (UnimplementedQueryHandler) BeginStreamExecute(context.Context, *connect.Request[v21.BeginStreamExecuteRequest], *connect.ServerStream[v21.BeginStreamExecuteResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.BeginStreamExecute is not implemented"))
}

func (UnimplementedQueryHandler) MessageStream(context.Context, *connect.Request[v21.MessageStreamRequest], *connect.ServerStream[v21.MessageStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.MessageStream is not implemented"))
}

func (UnimplementedQueryHandler) MessageAck(context.Context, *connect.Request[v21.MessageAckRequest]) (*connect.Response[v21.MessageAckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.MessageAck is not implemented"))
}

func (UnimplementedQueryHandler) ReserveExecute(context.Context, *connect.Request[v21.ReserveExecuteRequest]) (*connect.Response[v21.ReserveExecuteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.ReserveExecute is not implemented"))
}

func (UnimplementedQueryHandler) ReserveBeginExecute(context.Context, *connect.Request[v21.ReserveBeginExecuteRequest]) (*connect.Response[v21.ReserveBeginExecuteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.ReserveBeginExecute is not implemented"))
}

func (UnimplementedQueryHandler) ReserveStreamExecute(context.Context, *connect.Request[v21.ReserveStreamExecuteRequest], *connect.ServerStream[v21.ReserveStreamExecuteResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.ReserveStreamExecute is not implemented"))
}

func (UnimplementedQueryHandler) ReserveBeginStreamExecute(context.Context, *connect.Request[v21.ReserveBeginStreamExecuteRequest], *connect.ServerStream[v21.ReserveBeginStreamExecuteResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.ReserveBeginStreamExecute is not implemented"))
}

func (UnimplementedQueryHandler) Release(context.Context, *connect.Request[v21.ReleaseRequest]) (*connect.Response[v21.ReleaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.Release is not implemented"))
}

func (UnimplementedQueryHandler) StreamHealth(context.Context, *connect.Request[v21.StreamHealthRequest], *connect.ServerStream[v21.StreamHealthResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.StreamHealth is not implemented"))
}

func (UnimplementedQueryHandler) VStream(context.Context, *connect.Request[v211.VStreamRequest], *connect.ServerStream[v211.VStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.VStream is not implemented"))
}

func (UnimplementedQueryHandler) VStreamRows(context.Context, *connect.Request[v211.VStreamRowsRequest], *connect.ServerStream[v211.VStreamRowsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.VStreamRows is not implemented"))
}

func (UnimplementedQueryHandler) VStreamTables(context.Context, *connect.Request[v211.VStreamTablesRequest], *connect.ServerStream[v211.VStreamTablesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.VStreamTables is not implemented"))
}

func (UnimplementedQueryHandler) VStreamResults(context.Context, *connect.Request[v211.VStreamResultsRequest], *connect.ServerStream[v211.VStreamResultsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.VStreamResults is not implemented"))
}

func (UnimplementedQueryHandler) GetSchema(context.Context, *connect.Request[v21.GetSchemaRequest], *connect.ServerStream[v21.GetSchemaResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("queryservice.Query.GetSchema is not implemented"))
}
