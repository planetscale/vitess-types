//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
// This package contains a service allowing you to use vtctld as a
// proxy for vt commands.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vitess/vtctlservice/v16/vtctlservice.proto

package vtctlservicev16connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v16 "github.com/planetscale/vitess-types/gen/vitess/vtctldata/v16"
	_ "github.com/planetscale/vitess-types/gen/vitess/vtctlservice/v16"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// VtctlName is the fully-qualified name of the Vtctl service.
	VtctlName = "vitess.vtctlservice.v16.Vtctl"
	// VtctldName is the fully-qualified name of the Vtctld service.
	VtctldName = "vitess.vtctlservice.v16.Vtctld"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VtctlExecuteVtctlCommandProcedure is the fully-qualified name of the Vtctl's ExecuteVtctlCommand
	// RPC.
	VtctlExecuteVtctlCommandProcedure = "/vitess.vtctlservice.v16.Vtctl/ExecuteVtctlCommand"
	// VtctldAddCellInfoProcedure is the fully-qualified name of the Vtctld's AddCellInfo RPC.
	VtctldAddCellInfoProcedure = "/vitess.vtctlservice.v16.Vtctld/AddCellInfo"
	// VtctldAddCellsAliasProcedure is the fully-qualified name of the Vtctld's AddCellsAlias RPC.
	VtctldAddCellsAliasProcedure = "/vitess.vtctlservice.v16.Vtctld/AddCellsAlias"
	// VtctldApplyRoutingRulesProcedure is the fully-qualified name of the Vtctld's ApplyRoutingRules
	// RPC.
	VtctldApplyRoutingRulesProcedure = "/vitess.vtctlservice.v16.Vtctld/ApplyRoutingRules"
	// VtctldApplySchemaProcedure is the fully-qualified name of the Vtctld's ApplySchema RPC.
	VtctldApplySchemaProcedure = "/vitess.vtctlservice.v16.Vtctld/ApplySchema"
	// VtctldApplyShardRoutingRulesProcedure is the fully-qualified name of the Vtctld's
	// ApplyShardRoutingRules RPC.
	VtctldApplyShardRoutingRulesProcedure = "/vitess.vtctlservice.v16.Vtctld/ApplyShardRoutingRules"
	// VtctldApplyVSchemaProcedure is the fully-qualified name of the Vtctld's ApplyVSchema RPC.
	VtctldApplyVSchemaProcedure = "/vitess.vtctlservice.v16.Vtctld/ApplyVSchema"
	// VtctldBackupProcedure is the fully-qualified name of the Vtctld's Backup RPC.
	VtctldBackupProcedure = "/vitess.vtctlservice.v16.Vtctld/Backup"
	// VtctldBackupShardProcedure is the fully-qualified name of the Vtctld's BackupShard RPC.
	VtctldBackupShardProcedure = "/vitess.vtctlservice.v16.Vtctld/BackupShard"
	// VtctldChangeTabletTypeProcedure is the fully-qualified name of the Vtctld's ChangeTabletType RPC.
	VtctldChangeTabletTypeProcedure = "/vitess.vtctlservice.v16.Vtctld/ChangeTabletType"
	// VtctldCreateKeyspaceProcedure is the fully-qualified name of the Vtctld's CreateKeyspace RPC.
	VtctldCreateKeyspaceProcedure = "/vitess.vtctlservice.v16.Vtctld/CreateKeyspace"
	// VtctldCreateShardProcedure is the fully-qualified name of the Vtctld's CreateShard RPC.
	VtctldCreateShardProcedure = "/vitess.vtctlservice.v16.Vtctld/CreateShard"
	// VtctldDeleteCellInfoProcedure is the fully-qualified name of the Vtctld's DeleteCellInfo RPC.
	VtctldDeleteCellInfoProcedure = "/vitess.vtctlservice.v16.Vtctld/DeleteCellInfo"
	// VtctldDeleteCellsAliasProcedure is the fully-qualified name of the Vtctld's DeleteCellsAlias RPC.
	VtctldDeleteCellsAliasProcedure = "/vitess.vtctlservice.v16.Vtctld/DeleteCellsAlias"
	// VtctldDeleteKeyspaceProcedure is the fully-qualified name of the Vtctld's DeleteKeyspace RPC.
	VtctldDeleteKeyspaceProcedure = "/vitess.vtctlservice.v16.Vtctld/DeleteKeyspace"
	// VtctldDeleteShardsProcedure is the fully-qualified name of the Vtctld's DeleteShards RPC.
	VtctldDeleteShardsProcedure = "/vitess.vtctlservice.v16.Vtctld/DeleteShards"
	// VtctldDeleteSrvVSchemaProcedure is the fully-qualified name of the Vtctld's DeleteSrvVSchema RPC.
	VtctldDeleteSrvVSchemaProcedure = "/vitess.vtctlservice.v16.Vtctld/DeleteSrvVSchema"
	// VtctldDeleteTabletsProcedure is the fully-qualified name of the Vtctld's DeleteTablets RPC.
	VtctldDeleteTabletsProcedure = "/vitess.vtctlservice.v16.Vtctld/DeleteTablets"
	// VtctldEmergencyReparentShardProcedure is the fully-qualified name of the Vtctld's
	// EmergencyReparentShard RPC.
	VtctldEmergencyReparentShardProcedure = "/vitess.vtctlservice.v16.Vtctld/EmergencyReparentShard"
	// VtctldExecuteFetchAsAppProcedure is the fully-qualified name of the Vtctld's ExecuteFetchAsApp
	// RPC.
	VtctldExecuteFetchAsAppProcedure = "/vitess.vtctlservice.v16.Vtctld/ExecuteFetchAsApp"
	// VtctldExecuteFetchAsDBAProcedure is the fully-qualified name of the Vtctld's ExecuteFetchAsDBA
	// RPC.
	VtctldExecuteFetchAsDBAProcedure = "/vitess.vtctlservice.v16.Vtctld/ExecuteFetchAsDBA"
	// VtctldExecuteHookProcedure is the fully-qualified name of the Vtctld's ExecuteHook RPC.
	VtctldExecuteHookProcedure = "/vitess.vtctlservice.v16.Vtctld/ExecuteHook"
	// VtctldFindAllShardsInKeyspaceProcedure is the fully-qualified name of the Vtctld's
	// FindAllShardsInKeyspace RPC.
	VtctldFindAllShardsInKeyspaceProcedure = "/vitess.vtctlservice.v16.Vtctld/FindAllShardsInKeyspace"
	// VtctldGetBackupsProcedure is the fully-qualified name of the Vtctld's GetBackups RPC.
	VtctldGetBackupsProcedure = "/vitess.vtctlservice.v16.Vtctld/GetBackups"
	// VtctldGetCellInfoProcedure is the fully-qualified name of the Vtctld's GetCellInfo RPC.
	VtctldGetCellInfoProcedure = "/vitess.vtctlservice.v16.Vtctld/GetCellInfo"
	// VtctldGetCellInfoNamesProcedure is the fully-qualified name of the Vtctld's GetCellInfoNames RPC.
	VtctldGetCellInfoNamesProcedure = "/vitess.vtctlservice.v16.Vtctld/GetCellInfoNames"
	// VtctldGetCellsAliasesProcedure is the fully-qualified name of the Vtctld's GetCellsAliases RPC.
	VtctldGetCellsAliasesProcedure = "/vitess.vtctlservice.v16.Vtctld/GetCellsAliases"
	// VtctldGetFullStatusProcedure is the fully-qualified name of the Vtctld's GetFullStatus RPC.
	VtctldGetFullStatusProcedure = "/vitess.vtctlservice.v16.Vtctld/GetFullStatus"
	// VtctldGetKeyspaceProcedure is the fully-qualified name of the Vtctld's GetKeyspace RPC.
	VtctldGetKeyspaceProcedure = "/vitess.vtctlservice.v16.Vtctld/GetKeyspace"
	// VtctldGetKeyspacesProcedure is the fully-qualified name of the Vtctld's GetKeyspaces RPC.
	VtctldGetKeyspacesProcedure = "/vitess.vtctlservice.v16.Vtctld/GetKeyspaces"
	// VtctldGetPermissionsProcedure is the fully-qualified name of the Vtctld's GetPermissions RPC.
	VtctldGetPermissionsProcedure = "/vitess.vtctlservice.v16.Vtctld/GetPermissions"
	// VtctldGetRoutingRulesProcedure is the fully-qualified name of the Vtctld's GetRoutingRules RPC.
	VtctldGetRoutingRulesProcedure = "/vitess.vtctlservice.v16.Vtctld/GetRoutingRules"
	// VtctldGetSchemaProcedure is the fully-qualified name of the Vtctld's GetSchema RPC.
	VtctldGetSchemaProcedure = "/vitess.vtctlservice.v16.Vtctld/GetSchema"
	// VtctldGetShardProcedure is the fully-qualified name of the Vtctld's GetShard RPC.
	VtctldGetShardProcedure = "/vitess.vtctlservice.v16.Vtctld/GetShard"
	// VtctldGetShardRoutingRulesProcedure is the fully-qualified name of the Vtctld's
	// GetShardRoutingRules RPC.
	VtctldGetShardRoutingRulesProcedure = "/vitess.vtctlservice.v16.Vtctld/GetShardRoutingRules"
	// VtctldGetSrvKeyspaceNamesProcedure is the fully-qualified name of the Vtctld's
	// GetSrvKeyspaceNames RPC.
	VtctldGetSrvKeyspaceNamesProcedure = "/vitess.vtctlservice.v16.Vtctld/GetSrvKeyspaceNames"
	// VtctldGetSrvKeyspacesProcedure is the fully-qualified name of the Vtctld's GetSrvKeyspaces RPC.
	VtctldGetSrvKeyspacesProcedure = "/vitess.vtctlservice.v16.Vtctld/GetSrvKeyspaces"
	// VtctldUpdateThrottlerConfigProcedure is the fully-qualified name of the Vtctld's
	// UpdateThrottlerConfig RPC.
	VtctldUpdateThrottlerConfigProcedure = "/vitess.vtctlservice.v16.Vtctld/UpdateThrottlerConfig"
	// VtctldGetSrvVSchemaProcedure is the fully-qualified name of the Vtctld's GetSrvVSchema RPC.
	VtctldGetSrvVSchemaProcedure = "/vitess.vtctlservice.v16.Vtctld/GetSrvVSchema"
	// VtctldGetSrvVSchemasProcedure is the fully-qualified name of the Vtctld's GetSrvVSchemas RPC.
	VtctldGetSrvVSchemasProcedure = "/vitess.vtctlservice.v16.Vtctld/GetSrvVSchemas"
	// VtctldGetTabletProcedure is the fully-qualified name of the Vtctld's GetTablet RPC.
	VtctldGetTabletProcedure = "/vitess.vtctlservice.v16.Vtctld/GetTablet"
	// VtctldGetTabletsProcedure is the fully-qualified name of the Vtctld's GetTablets RPC.
	VtctldGetTabletsProcedure = "/vitess.vtctlservice.v16.Vtctld/GetTablets"
	// VtctldGetTopologyPathProcedure is the fully-qualified name of the Vtctld's GetTopologyPath RPC.
	VtctldGetTopologyPathProcedure = "/vitess.vtctlservice.v16.Vtctld/GetTopologyPath"
	// VtctldGetVersionProcedure is the fully-qualified name of the Vtctld's GetVersion RPC.
	VtctldGetVersionProcedure = "/vitess.vtctlservice.v16.Vtctld/GetVersion"
	// VtctldGetVSchemaProcedure is the fully-qualified name of the Vtctld's GetVSchema RPC.
	VtctldGetVSchemaProcedure = "/vitess.vtctlservice.v16.Vtctld/GetVSchema"
	// VtctldGetWorkflowsProcedure is the fully-qualified name of the Vtctld's GetWorkflows RPC.
	VtctldGetWorkflowsProcedure = "/vitess.vtctlservice.v16.Vtctld/GetWorkflows"
	// VtctldInitShardPrimaryProcedure is the fully-qualified name of the Vtctld's InitShardPrimary RPC.
	VtctldInitShardPrimaryProcedure = "/vitess.vtctlservice.v16.Vtctld/InitShardPrimary"
	// VtctldPingTabletProcedure is the fully-qualified name of the Vtctld's PingTablet RPC.
	VtctldPingTabletProcedure = "/vitess.vtctlservice.v16.Vtctld/PingTablet"
	// VtctldPlannedReparentShardProcedure is the fully-qualified name of the Vtctld's
	// PlannedReparentShard RPC.
	VtctldPlannedReparentShardProcedure = "/vitess.vtctlservice.v16.Vtctld/PlannedReparentShard"
	// VtctldRebuildKeyspaceGraphProcedure is the fully-qualified name of the Vtctld's
	// RebuildKeyspaceGraph RPC.
	VtctldRebuildKeyspaceGraphProcedure = "/vitess.vtctlservice.v16.Vtctld/RebuildKeyspaceGraph"
	// VtctldRebuildVSchemaGraphProcedure is the fully-qualified name of the Vtctld's
	// RebuildVSchemaGraph RPC.
	VtctldRebuildVSchemaGraphProcedure = "/vitess.vtctlservice.v16.Vtctld/RebuildVSchemaGraph"
	// VtctldRefreshStateProcedure is the fully-qualified name of the Vtctld's RefreshState RPC.
	VtctldRefreshStateProcedure = "/vitess.vtctlservice.v16.Vtctld/RefreshState"
	// VtctldRefreshStateByShardProcedure is the fully-qualified name of the Vtctld's
	// RefreshStateByShard RPC.
	VtctldRefreshStateByShardProcedure = "/vitess.vtctlservice.v16.Vtctld/RefreshStateByShard"
	// VtctldReloadSchemaProcedure is the fully-qualified name of the Vtctld's ReloadSchema RPC.
	VtctldReloadSchemaProcedure = "/vitess.vtctlservice.v16.Vtctld/ReloadSchema"
	// VtctldReloadSchemaKeyspaceProcedure is the fully-qualified name of the Vtctld's
	// ReloadSchemaKeyspace RPC.
	VtctldReloadSchemaKeyspaceProcedure = "/vitess.vtctlservice.v16.Vtctld/ReloadSchemaKeyspace"
	// VtctldReloadSchemaShardProcedure is the fully-qualified name of the Vtctld's ReloadSchemaShard
	// RPC.
	VtctldReloadSchemaShardProcedure = "/vitess.vtctlservice.v16.Vtctld/ReloadSchemaShard"
	// VtctldRemoveBackupProcedure is the fully-qualified name of the Vtctld's RemoveBackup RPC.
	VtctldRemoveBackupProcedure = "/vitess.vtctlservice.v16.Vtctld/RemoveBackup"
	// VtctldRemoveKeyspaceCellProcedure is the fully-qualified name of the Vtctld's RemoveKeyspaceCell
	// RPC.
	VtctldRemoveKeyspaceCellProcedure = "/vitess.vtctlservice.v16.Vtctld/RemoveKeyspaceCell"
	// VtctldRemoveShardCellProcedure is the fully-qualified name of the Vtctld's RemoveShardCell RPC.
	VtctldRemoveShardCellProcedure = "/vitess.vtctlservice.v16.Vtctld/RemoveShardCell"
	// VtctldReparentTabletProcedure is the fully-qualified name of the Vtctld's ReparentTablet RPC.
	VtctldReparentTabletProcedure = "/vitess.vtctlservice.v16.Vtctld/ReparentTablet"
	// VtctldRestoreFromBackupProcedure is the fully-qualified name of the Vtctld's RestoreFromBackup
	// RPC.
	VtctldRestoreFromBackupProcedure = "/vitess.vtctlservice.v16.Vtctld/RestoreFromBackup"
	// VtctldRunHealthCheckProcedure is the fully-qualified name of the Vtctld's RunHealthCheck RPC.
	VtctldRunHealthCheckProcedure = "/vitess.vtctlservice.v16.Vtctld/RunHealthCheck"
	// VtctldSetKeyspaceDurabilityPolicyProcedure is the fully-qualified name of the Vtctld's
	// SetKeyspaceDurabilityPolicy RPC.
	VtctldSetKeyspaceDurabilityPolicyProcedure = "/vitess.vtctlservice.v16.Vtctld/SetKeyspaceDurabilityPolicy"
	// VtctldSetShardIsPrimaryServingProcedure is the fully-qualified name of the Vtctld's
	// SetShardIsPrimaryServing RPC.
	VtctldSetShardIsPrimaryServingProcedure = "/vitess.vtctlservice.v16.Vtctld/SetShardIsPrimaryServing"
	// VtctldSetShardTabletControlProcedure is the fully-qualified name of the Vtctld's
	// SetShardTabletControl RPC.
	VtctldSetShardTabletControlProcedure = "/vitess.vtctlservice.v16.Vtctld/SetShardTabletControl"
	// VtctldSetWritableProcedure is the fully-qualified name of the Vtctld's SetWritable RPC.
	VtctldSetWritableProcedure = "/vitess.vtctlservice.v16.Vtctld/SetWritable"
	// VtctldShardReplicationAddProcedure is the fully-qualified name of the Vtctld's
	// ShardReplicationAdd RPC.
	VtctldShardReplicationAddProcedure = "/vitess.vtctlservice.v16.Vtctld/ShardReplicationAdd"
	// VtctldShardReplicationFixProcedure is the fully-qualified name of the Vtctld's
	// ShardReplicationFix RPC.
	VtctldShardReplicationFixProcedure = "/vitess.vtctlservice.v16.Vtctld/ShardReplicationFix"
	// VtctldShardReplicationPositionsProcedure is the fully-qualified name of the Vtctld's
	// ShardReplicationPositions RPC.
	VtctldShardReplicationPositionsProcedure = "/vitess.vtctlservice.v16.Vtctld/ShardReplicationPositions"
	// VtctldShardReplicationRemoveProcedure is the fully-qualified name of the Vtctld's
	// ShardReplicationRemove RPC.
	VtctldShardReplicationRemoveProcedure = "/vitess.vtctlservice.v16.Vtctld/ShardReplicationRemove"
	// VtctldSleepTabletProcedure is the fully-qualified name of the Vtctld's SleepTablet RPC.
	VtctldSleepTabletProcedure = "/vitess.vtctlservice.v16.Vtctld/SleepTablet"
	// VtctldSourceShardAddProcedure is the fully-qualified name of the Vtctld's SourceShardAdd RPC.
	VtctldSourceShardAddProcedure = "/vitess.vtctlservice.v16.Vtctld/SourceShardAdd"
	// VtctldSourceShardDeleteProcedure is the fully-qualified name of the Vtctld's SourceShardDelete
	// RPC.
	VtctldSourceShardDeleteProcedure = "/vitess.vtctlservice.v16.Vtctld/SourceShardDelete"
	// VtctldStartReplicationProcedure is the fully-qualified name of the Vtctld's StartReplication RPC.
	VtctldStartReplicationProcedure = "/vitess.vtctlservice.v16.Vtctld/StartReplication"
	// VtctldStopReplicationProcedure is the fully-qualified name of the Vtctld's StopReplication RPC.
	VtctldStopReplicationProcedure = "/vitess.vtctlservice.v16.Vtctld/StopReplication"
	// VtctldTabletExternallyReparentedProcedure is the fully-qualified name of the Vtctld's
	// TabletExternallyReparented RPC.
	VtctldTabletExternallyReparentedProcedure = "/vitess.vtctlservice.v16.Vtctld/TabletExternallyReparented"
	// VtctldUpdateCellInfoProcedure is the fully-qualified name of the Vtctld's UpdateCellInfo RPC.
	VtctldUpdateCellInfoProcedure = "/vitess.vtctlservice.v16.Vtctld/UpdateCellInfo"
	// VtctldUpdateCellsAliasProcedure is the fully-qualified name of the Vtctld's UpdateCellsAlias RPC.
	VtctldUpdateCellsAliasProcedure = "/vitess.vtctlservice.v16.Vtctld/UpdateCellsAlias"
	// VtctldValidateProcedure is the fully-qualified name of the Vtctld's Validate RPC.
	VtctldValidateProcedure = "/vitess.vtctlservice.v16.Vtctld/Validate"
	// VtctldValidateKeyspaceProcedure is the fully-qualified name of the Vtctld's ValidateKeyspace RPC.
	VtctldValidateKeyspaceProcedure = "/vitess.vtctlservice.v16.Vtctld/ValidateKeyspace"
	// VtctldValidateSchemaKeyspaceProcedure is the fully-qualified name of the Vtctld's
	// ValidateSchemaKeyspace RPC.
	VtctldValidateSchemaKeyspaceProcedure = "/vitess.vtctlservice.v16.Vtctld/ValidateSchemaKeyspace"
	// VtctldValidateShardProcedure is the fully-qualified name of the Vtctld's ValidateShard RPC.
	VtctldValidateShardProcedure = "/vitess.vtctlservice.v16.Vtctld/ValidateShard"
	// VtctldValidateVersionKeyspaceProcedure is the fully-qualified name of the Vtctld's
	// ValidateVersionKeyspace RPC.
	VtctldValidateVersionKeyspaceProcedure = "/vitess.vtctlservice.v16.Vtctld/ValidateVersionKeyspace"
	// VtctldValidateVersionShardProcedure is the fully-qualified name of the Vtctld's
	// ValidateVersionShard RPC.
	VtctldValidateVersionShardProcedure = "/vitess.vtctlservice.v16.Vtctld/ValidateVersionShard"
	// VtctldValidateVSchemaProcedure is the fully-qualified name of the Vtctld's ValidateVSchema RPC.
	VtctldValidateVSchemaProcedure = "/vitess.vtctlservice.v16.Vtctld/ValidateVSchema"
)

// VtctlClient is a client for the vitess.vtctlservice.v16.Vtctl service.
type VtctlClient interface {
	ExecuteVtctlCommand(context.Context, *connect_go.Request[v16.ExecuteVtctlCommandRequest]) (*connect_go.ServerStreamForClient[v16.ExecuteVtctlCommandResponse], error)
}

// NewVtctlClient constructs a client for the vitess.vtctlservice.v16.Vtctl service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVtctlClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VtctlClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vtctlClient{
		executeVtctlCommand: connect_go.NewClient[v16.ExecuteVtctlCommandRequest, v16.ExecuteVtctlCommandResponse](
			httpClient,
			baseURL+VtctlExecuteVtctlCommandProcedure,
			opts...,
		),
	}
}

// vtctlClient implements VtctlClient.
type vtctlClient struct {
	executeVtctlCommand *connect_go.Client[v16.ExecuteVtctlCommandRequest, v16.ExecuteVtctlCommandResponse]
}

// ExecuteVtctlCommand calls vitess.vtctlservice.v16.Vtctl.ExecuteVtctlCommand.
func (c *vtctlClient) ExecuteVtctlCommand(ctx context.Context, req *connect_go.Request[v16.ExecuteVtctlCommandRequest]) (*connect_go.ServerStreamForClient[v16.ExecuteVtctlCommandResponse], error) {
	return c.executeVtctlCommand.CallServerStream(ctx, req)
}

// VtctlHandler is an implementation of the vitess.vtctlservice.v16.Vtctl service.
type VtctlHandler interface {
	ExecuteVtctlCommand(context.Context, *connect_go.Request[v16.ExecuteVtctlCommandRequest], *connect_go.ServerStream[v16.ExecuteVtctlCommandResponse]) error
}

// NewVtctlHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVtctlHandler(svc VtctlHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(VtctlExecuteVtctlCommandProcedure, connect_go.NewServerStreamHandler(
		VtctlExecuteVtctlCommandProcedure,
		svc.ExecuteVtctlCommand,
		opts...,
	))
	return "/vitess.vtctlservice.v16.Vtctl/", mux
}

// UnimplementedVtctlHandler returns CodeUnimplemented from all methods.
type UnimplementedVtctlHandler struct{}

func (UnimplementedVtctlHandler) ExecuteVtctlCommand(context.Context, *connect_go.Request[v16.ExecuteVtctlCommandRequest], *connect_go.ServerStream[v16.ExecuteVtctlCommandResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctl.ExecuteVtctlCommand is not implemented"))
}

// VtctldClient is a client for the vitess.vtctlservice.v16.Vtctld service.
type VtctldClient interface {
	// AddCellInfo registers a local topology service in a new cell by creating
	// the CellInfo with the provided parameters.
	AddCellInfo(context.Context, *connect_go.Request[v16.AddCellInfoRequest]) (*connect_go.Response[v16.AddCellInfoResponse], error)
	// AddCellsAlias defines a group of cells that can be referenced by a single
	// name (the alias).
	//
	// When routing query traffic, replica/rdonly traffic can be routed across
	// cells within the group (alias). Only primary traffic can be routed across
	// cells not in the same group (alias).
	AddCellsAlias(context.Context, *connect_go.Request[v16.AddCellsAliasRequest]) (*connect_go.Response[v16.AddCellsAliasResponse], error)
	// ApplyRoutingRules applies the VSchema routing rules.
	ApplyRoutingRules(context.Context, *connect_go.Request[v16.ApplyRoutingRulesRequest]) (*connect_go.Response[v16.ApplyRoutingRulesResponse], error)
	// ApplySchema applies a schema to a keyspace.
	ApplySchema(context.Context, *connect_go.Request[v16.ApplySchemaRequest]) (*connect_go.Response[v16.ApplySchemaResponse], error)
	// ApplyShardRoutingRules applies the VSchema shard routing rules.
	ApplyShardRoutingRules(context.Context, *connect_go.Request[v16.ApplyShardRoutingRulesRequest]) (*connect_go.Response[v16.ApplyShardRoutingRulesResponse], error)
	// ApplyVSchema applies a vschema to a keyspace.
	ApplyVSchema(context.Context, *connect_go.Request[v16.ApplyVSchemaRequest]) (*connect_go.Response[v16.ApplyVSchemaResponse], error)
	// Backup uses the BackupEngine and BackupStorage services on the specified
	// tablet to create and store a new backup.
	Backup(context.Context, *connect_go.Request[v16.BackupRequest]) (*connect_go.ServerStreamForClient[v16.BackupResponse], error)
	// BackupShard chooses a tablet in the shard and uses it to create a backup.
	BackupShard(context.Context, *connect_go.Request[v16.BackupShardRequest]) (*connect_go.ServerStreamForClient[v16.BackupResponse], error)
	// ChangeTabletType changes the db type for the specified tablet, if possible.
	// This is used primarily to arrange replicas, and it will not convert a
	// primary. For that, use InitShardPrimary.
	//
	// NOTE: This command automatically updates the serving graph.
	ChangeTabletType(context.Context, *connect_go.Request[v16.ChangeTabletTypeRequest]) (*connect_go.Response[v16.ChangeTabletTypeResponse], error)
	// CreateKeyspace creates the specified keyspace in the topology. For a
	// SNAPSHOT keyspace, the request must specify the name of a base keyspace,
	// as well as a snapshot time.
	CreateKeyspace(context.Context, *connect_go.Request[v16.CreateKeyspaceRequest]) (*connect_go.Response[v16.CreateKeyspaceResponse], error)
	// CreateShard creates the specified shard in the topology.
	CreateShard(context.Context, *connect_go.Request[v16.CreateShardRequest]) (*connect_go.Response[v16.CreateShardResponse], error)
	// DeleteCellInfo deletes the CellInfo for the provided cell. The cell cannot
	// be referenced by any Shard record in the topology.
	DeleteCellInfo(context.Context, *connect_go.Request[v16.DeleteCellInfoRequest]) (*connect_go.Response[v16.DeleteCellInfoResponse], error)
	// DeleteCellsAlias deletes the CellsAlias for the provided alias.
	DeleteCellsAlias(context.Context, *connect_go.Request[v16.DeleteCellsAliasRequest]) (*connect_go.Response[v16.DeleteCellsAliasResponse], error)
	// DeleteKeyspace deletes the specified keyspace from the topology. In
	// recursive mode, it also recursively deletes all shards in the keyspace.
	// Otherwise, the keyspace must be empty (have no shards), or DeleteKeyspace
	// returns an error.
	DeleteKeyspace(context.Context, *connect_go.Request[v16.DeleteKeyspaceRequest]) (*connect_go.Response[v16.DeleteKeyspaceResponse], error)
	// DeleteShards deletes the specified shards from the topology. In recursive
	// mode, it also deletes all tablets belonging to the shard. Otherwise, the
	// shard must be empty (have no tablets) or DeleteShards returns an error for
	// that shard.
	DeleteShards(context.Context, *connect_go.Request[v16.DeleteShardsRequest]) (*connect_go.Response[v16.DeleteShardsResponse], error)
	// DeleteSrvVSchema deletes the SrvVSchema object in the specified cell.
	DeleteSrvVSchema(context.Context, *connect_go.Request[v16.DeleteSrvVSchemaRequest]) (*connect_go.Response[v16.DeleteSrvVSchemaResponse], error)
	// DeleteTablets deletes one or more tablets from the topology.
	DeleteTablets(context.Context, *connect_go.Request[v16.DeleteTabletsRequest]) (*connect_go.Response[v16.DeleteTabletsResponse], error)
	// EmergencyReparentShard reparents the shard to the new primary. It assumes
	// the old primary is dead or otherwise not responding.
	EmergencyReparentShard(context.Context, *connect_go.Request[v16.EmergencyReparentShardRequest]) (*connect_go.Response[v16.EmergencyReparentShardResponse], error)
	// ExecuteFetchAsApp executes a SQL query on the remote tablet as the App user.
	ExecuteFetchAsApp(context.Context, *connect_go.Request[v16.ExecuteFetchAsAppRequest]) (*connect_go.Response[v16.ExecuteFetchAsAppResponse], error)
	// ExecuteFetchAsDBA executes a SQL query on the remote tablet as the DBA user.
	ExecuteFetchAsDBA(context.Context, *connect_go.Request[v16.ExecuteFetchAsDBARequest]) (*connect_go.Response[v16.ExecuteFetchAsDBAResponse], error)
	// ExecuteHook runs the hook on the tablet.
	ExecuteHook(context.Context, *connect_go.Request[v16.ExecuteHookRequest]) (*connect_go.Response[v16.ExecuteHookResponse], error)
	// FindAllShardsInKeyspace returns a map of shard names to shard references
	// for a given keyspace.
	FindAllShardsInKeyspace(context.Context, *connect_go.Request[v16.FindAllShardsInKeyspaceRequest]) (*connect_go.Response[v16.FindAllShardsInKeyspaceResponse], error)
	// GetBackups returns all the backups for a shard.
	GetBackups(context.Context, *connect_go.Request[v16.GetBackupsRequest]) (*connect_go.Response[v16.GetBackupsResponse], error)
	// GetCellInfo returns the information for a cell.
	GetCellInfo(context.Context, *connect_go.Request[v16.GetCellInfoRequest]) (*connect_go.Response[v16.GetCellInfoResponse], error)
	// GetCellInfoNames returns all the cells for which we have a CellInfo object,
	// meaning we have a topology service registered.
	GetCellInfoNames(context.Context, *connect_go.Request[v16.GetCellInfoNamesRequest]) (*connect_go.Response[v16.GetCellInfoNamesResponse], error)
	// GetCellsAliases returns a mapping of cell alias to cells identified by that
	// alias.
	GetCellsAliases(context.Context, *connect_go.Request[v16.GetCellsAliasesRequest]) (*connect_go.Response[v16.GetCellsAliasesResponse], error)
	// GetFullStatus returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	GetFullStatus(context.Context, *connect_go.Request[v16.GetFullStatusRequest]) (*connect_go.Response[v16.GetFullStatusResponse], error)
	// GetKeyspace reads the given keyspace from the topo and returns it.
	GetKeyspace(context.Context, *connect_go.Request[v16.GetKeyspaceRequest]) (*connect_go.Response[v16.GetKeyspaceResponse], error)
	// GetKeyspaces returns the keyspace struct of all keyspaces in the topo.
	GetKeyspaces(context.Context, *connect_go.Request[v16.GetKeyspacesRequest]) (*connect_go.Response[v16.GetKeyspacesResponse], error)
	// GetPermissions returns the permissions set on the remote tablet.
	GetPermissions(context.Context, *connect_go.Request[v16.GetPermissionsRequest]) (*connect_go.Response[v16.GetPermissionsResponse], error)
	// GetRoutingRules returns the VSchema routing rules.
	GetRoutingRules(context.Context, *connect_go.Request[v16.GetRoutingRulesRequest]) (*connect_go.Response[v16.GetRoutingRulesResponse], error)
	// GetSchema returns the schema for a tablet, or just the schema for the
	// specified tables in that tablet.
	GetSchema(context.Context, *connect_go.Request[v16.GetSchemaRequest]) (*connect_go.Response[v16.GetSchemaResponse], error)
	// GetShard returns information about a shard in the topology.
	GetShard(context.Context, *connect_go.Request[v16.GetShardRequest]) (*connect_go.Response[v16.GetShardResponse], error)
	// GetShardRoutingRules returns the VSchema shard routing rules.
	GetShardRoutingRules(context.Context, *connect_go.Request[v16.GetShardRoutingRulesRequest]) (*connect_go.Response[v16.GetShardRoutingRulesResponse], error)
	// GetSrvKeyspaceNames returns a mapping of cell name to the keyspaces served
	// in that cell.
	GetSrvKeyspaceNames(context.Context, *connect_go.Request[v16.GetSrvKeyspaceNamesRequest]) (*connect_go.Response[v16.GetSrvKeyspaceNamesResponse], error)
	// GetSrvKeyspaces returns the SrvKeyspaces for a keyspace in one or more
	// cells.
	GetSrvKeyspaces(context.Context, *connect_go.Request[v16.GetSrvKeyspacesRequest]) (*connect_go.Response[v16.GetSrvKeyspacesResponse], error)
	// UpdateThrottlerConfig updates the tablet throttler configuration
	UpdateThrottlerConfig(context.Context, *connect_go.Request[v16.UpdateThrottlerConfigRequest]) (*connect_go.Response[v16.UpdateThrottlerConfigResponse], error)
	// GetSrvVSchema returns the SrvVSchema for a cell.
	GetSrvVSchema(context.Context, *connect_go.Request[v16.GetSrvVSchemaRequest]) (*connect_go.Response[v16.GetSrvVSchemaResponse], error)
	// GetSrvVSchemas returns a mapping from cell name to SrvVSchema for all cells,
	// optionally filtered by cell name.
	GetSrvVSchemas(context.Context, *connect_go.Request[v16.GetSrvVSchemasRequest]) (*connect_go.Response[v16.GetSrvVSchemasResponse], error)
	// GetTablet returns information about a tablet.
	GetTablet(context.Context, *connect_go.Request[v16.GetTabletRequest]) (*connect_go.Response[v16.GetTabletResponse], error)
	// GetTablets returns tablets, optionally filtered by keyspace and shard.
	GetTablets(context.Context, *connect_go.Request[v16.GetTabletsRequest]) (*connect_go.Response[v16.GetTabletsResponse], error)
	// GetTopologyPath returns the topology cell at a given path.
	GetTopologyPath(context.Context, *connect_go.Request[v16.GetTopologyPathRequest]) (*connect_go.Response[v16.GetTopologyPathResponse], error)
	// GetVersion returns the version of a tablet from its debug vars.
	GetVersion(context.Context, *connect_go.Request[v16.GetVersionRequest]) (*connect_go.Response[v16.GetVersionResponse], error)
	// GetVSchema returns the vschema for a keyspace.
	GetVSchema(context.Context, *connect_go.Request[v16.GetVSchemaRequest]) (*connect_go.Response[v16.GetVSchemaResponse], error)
	// GetWorkflows returns a list of workflows for the given keyspace.
	GetWorkflows(context.Context, *connect_go.Request[v16.GetWorkflowsRequest]) (*connect_go.Response[v16.GetWorkflowsResponse], error)
	// InitShardPrimary sets the initial primary for a shard. Will make all other
	// tablets in the shard replicas of the provided primary.
	//
	// WARNING: This could cause data loss on an already replicating shard.
	// PlannedReparentShard or EmergencyReparentShard should be used in those
	// cases instead.
	InitShardPrimary(context.Context, *connect_go.Request[v16.InitShardPrimaryRequest]) (*connect_go.Response[v16.InitShardPrimaryResponse], error)
	// PingTablet checks that the specified tablet is awake and responding to RPCs.
	// This command can be blocked by other in-flight operations.
	PingTablet(context.Context, *connect_go.Request[v16.PingTabletRequest]) (*connect_go.Response[v16.PingTabletResponse], error)
	// PlannedReparentShard reparents the shard to the new primary, or away from
	// an old primary. Both the old and new primaries need to be reachable and
	// running.
	//
	// **NOTE**: The vtctld will not consider any replicas outside the cell the
	// current shard primary is in for promotion unless NewPrimary is explicitly
	// provided in the request.
	PlannedReparentShard(context.Context, *connect_go.Request[v16.PlannedReparentShardRequest]) (*connect_go.Response[v16.PlannedReparentShardResponse], error)
	// RebuildKeyspaceGraph rebuilds the serving data for a keyspace.
	//
	// This may trigger an update to all connected clients.
	RebuildKeyspaceGraph(context.Context, *connect_go.Request[v16.RebuildKeyspaceGraphRequest]) (*connect_go.Response[v16.RebuildKeyspaceGraphResponse], error)
	// RebuildVSchemaGraph rebuilds the per-cell SrvVSchema from the global
	// VSchema objects in the provided cells (or all cells in the topo none
	// provided).
	RebuildVSchemaGraph(context.Context, *connect_go.Request[v16.RebuildVSchemaGraphRequest]) (*connect_go.Response[v16.RebuildVSchemaGraphResponse], error)
	// RefreshState reloads the tablet record on the specified tablet.
	RefreshState(context.Context, *connect_go.Request[v16.RefreshStateRequest]) (*connect_go.Response[v16.RefreshStateResponse], error)
	// RefreshStateByShard calls RefreshState on all the tablets in the given shard.
	RefreshStateByShard(context.Context, *connect_go.Request[v16.RefreshStateByShardRequest]) (*connect_go.Response[v16.RefreshStateByShardResponse], error)
	// ReloadSchema instructs the remote tablet to reload its schema.
	ReloadSchema(context.Context, *connect_go.Request[v16.ReloadSchemaRequest]) (*connect_go.Response[v16.ReloadSchemaResponse], error)
	// ReloadSchemaKeyspace reloads the schema on all tablets in a keyspace.
	ReloadSchemaKeyspace(context.Context, *connect_go.Request[v16.ReloadSchemaKeyspaceRequest]) (*connect_go.Response[v16.ReloadSchemaKeyspaceResponse], error)
	// ReloadSchemaShard reloads the schema on all tablets in a shard.
	//
	// In general, we don't always expect all replicas to be ready to reload, and
	// the periodic schema reload makes them self-healing anyway. So, we do this
	// on a best-effort basis, and log warnings for any tablets that fail to
	// reload within the context deadline.
	ReloadSchemaShard(context.Context, *connect_go.Request[v16.ReloadSchemaShardRequest]) (*connect_go.Response[v16.ReloadSchemaShardResponse], error)
	// RemoveBackup removes a backup from the BackupStorage used by vtctld.
	RemoveBackup(context.Context, *connect_go.Request[v16.RemoveBackupRequest]) (*connect_go.Response[v16.RemoveBackupResponse], error)
	// RemoveKeyspaceCell removes the specified cell from the Cells list for all
	// shards in the specified keyspace (by calling RemoveShardCell on every
	// shard). It also removes the SrvKeyspace for that keyspace in that cell.
	RemoveKeyspaceCell(context.Context, *connect_go.Request[v16.RemoveKeyspaceCellRequest]) (*connect_go.Response[v16.RemoveKeyspaceCellResponse], error)
	// RemoveShardCell removes the specified cell from the specified shard's Cells
	// list.
	RemoveShardCell(context.Context, *connect_go.Request[v16.RemoveShardCellRequest]) (*connect_go.Response[v16.RemoveShardCellResponse], error)
	// ReparentTablet reparents a tablet to the current primary in the shard. This
	// only works if the current replica position matches the last known reparent
	// action.
	ReparentTablet(context.Context, *connect_go.Request[v16.ReparentTabletRequest]) (*connect_go.Response[v16.ReparentTabletResponse], error)
	// RestoreFromBackup stops mysqld for the given tablet and restores a backup.
	RestoreFromBackup(context.Context, *connect_go.Request[v16.RestoreFromBackupRequest]) (*connect_go.ServerStreamForClient[v16.RestoreFromBackupResponse], error)
	// RunHealthCheck runs a healthcheck on the remote tablet.
	RunHealthCheck(context.Context, *connect_go.Request[v16.RunHealthCheckRequest]) (*connect_go.Response[v16.RunHealthCheckResponse], error)
	// SetKeyspaceDurabilityPolicy updates the DurabilityPolicy for a keyspace.
	SetKeyspaceDurabilityPolicy(context.Context, *connect_go.Request[v16.SetKeyspaceDurabilityPolicyRequest]) (*connect_go.Response[v16.SetKeyspaceDurabilityPolicyResponse], error)
	// SetShardIsPrimaryServing adds or removes a shard from serving.
	//
	// This is meant as an emergency function. It does not rebuild any serving
	// graph (i.e. it does not run RebuildKeyspaceGraph).
	SetShardIsPrimaryServing(context.Context, *connect_go.Request[v16.SetShardIsPrimaryServingRequest]) (*connect_go.Response[v16.SetShardIsPrimaryServingResponse], error)
	// SetShardTabletControl updates the TabletControl topo record for a shard and
	// tablet type.
	//
	// This should only be used for an emergency fix, or after a finished
	// Reshard. See the documentation on SetShardTabletControlRequest for more
	// information about the different update modes.
	SetShardTabletControl(context.Context, *connect_go.Request[v16.SetShardTabletControlRequest]) (*connect_go.Response[v16.SetShardTabletControlResponse], error)
	// SetWritable sets a tablet as read-write (writable=true) or read-only (writable=false).
	SetWritable(context.Context, *connect_go.Request[v16.SetWritableRequest]) (*connect_go.Response[v16.SetWritableResponse], error)
	// ShardReplicationAdd adds an entry to a topodata.ShardReplication object.
	//
	// It is a low-level function and should generally not be called.
	ShardReplicationAdd(context.Context, *connect_go.Request[v16.ShardReplicationAddRequest]) (*connect_go.Response[v16.ShardReplicationAddResponse], error)
	// ShardReplicationFix walks the replication graph for a shard in a cell and
	// attempts to fix the first problem encountered, returning information about
	// the problem fixed, if any.
	ShardReplicationFix(context.Context, *connect_go.Request[v16.ShardReplicationFixRequest]) (*connect_go.Response[v16.ShardReplicationFixResponse], error)
	// ShardReplicationPositions returns the replication position of each tablet
	// in a shard. This RPC makes a best-effort to return partial results. For
	// example, if one tablet in the shard graph is unreachable, then
	// ShardReplicationPositions will return non-error, and include valid results
	// for the reachable tablets.
	ShardReplicationPositions(context.Context, *connect_go.Request[v16.ShardReplicationPositionsRequest]) (*connect_go.Response[v16.ShardReplicationPositionsResponse], error)
	// ShardReplicationRemove removes an entry from a topodata.ShardReplication
	// object.
	//
	// It is a low-level function and should generally not be called.
	ShardReplicationRemove(context.Context, *connect_go.Request[v16.ShardReplicationRemoveRequest]) (*connect_go.Response[v16.ShardReplicationRemoveResponse], error)
	// SleepTablet blocks the aciton queue on the specified tablet for the
	// specified duration.
	//
	// This is typically used for testing.
	SleepTablet(context.Context, *connect_go.Request[v16.SleepTabletRequest]) (*connect_go.Response[v16.SleepTabletResponse], error)
	// SourceShardAdd adds the SourceShard record with the provided index. This
	// should be used only as an emergency function.
	//
	// It does not call RefreshState for the shard primary.
	SourceShardAdd(context.Context, *connect_go.Request[v16.SourceShardAddRequest]) (*connect_go.Response[v16.SourceShardAddResponse], error)
	// SourceShardDelete deletes the SourceShard record with the provided index.
	// This should be used only as an emergency cleanup function.
	//
	// It does not call RefreshState for the shard primary.
	SourceShardDelete(context.Context, *connect_go.Request[v16.SourceShardDeleteRequest]) (*connect_go.Response[v16.SourceShardDeleteResponse], error)
	// StartReplication starts replication on the specified tablet.
	StartReplication(context.Context, *connect_go.Request[v16.StartReplicationRequest]) (*connect_go.Response[v16.StartReplicationResponse], error)
	// StopReplication stops replication on the specified tablet.
	StopReplication(context.Context, *connect_go.Request[v16.StopReplicationRequest]) (*connect_go.Response[v16.StopReplicationResponse], error)
	// TabletExternallyReparented changes metadata in the topology server to
	// acknowledge a shard primary change performed by an external tool (e.g.
	// orchestrator).
	//
	// See the Reparenting guide for more information:
	// https://vitess.io/docs/user-guides/configuration-advanced/reparenting/#external-reparenting.
	TabletExternallyReparented(context.Context, *connect_go.Request[v16.TabletExternallyReparentedRequest]) (*connect_go.Response[v16.TabletExternallyReparentedResponse], error)
	// UpdateCellInfo updates the content of a CellInfo with the provided
	// parameters. Empty values are ignored. If the cell does not exist, the
	// CellInfo will be created.
	UpdateCellInfo(context.Context, *connect_go.Request[v16.UpdateCellInfoRequest]) (*connect_go.Response[v16.UpdateCellInfoResponse], error)
	// UpdateCellsAlias updates the content of a CellsAlias with the provided
	// parameters. Empty values are ignored. If the alias does not exist, the
	// CellsAlias will be created.
	UpdateCellsAlias(context.Context, *connect_go.Request[v16.UpdateCellsAliasRequest]) (*connect_go.Response[v16.UpdateCellsAliasResponse], error)
	// Validate validates that all nodes from the global replication graph are
	// reachable, and that all tablets in discoverable cells are consistent.
	Validate(context.Context, *connect_go.Request[v16.ValidateRequest]) (*connect_go.Response[v16.ValidateResponse], error)
	// ValidateKeyspace validates that all nodes reachable from the specified
	// keyspace are consistent.
	ValidateKeyspace(context.Context, *connect_go.Request[v16.ValidateKeyspaceRequest]) (*connect_go.Response[v16.ValidateKeyspaceResponse], error)
	// ValidateSchemaKeyspace validates that the schema on the primary tablet for shard 0 matches the schema on all of the other tablets in the keyspace.
	ValidateSchemaKeyspace(context.Context, *connect_go.Request[v16.ValidateSchemaKeyspaceRequest]) (*connect_go.Response[v16.ValidateSchemaKeyspaceResponse], error)
	// ValidateShard validates that all nodes reachable from the specified shard
	// are consistent.
	ValidateShard(context.Context, *connect_go.Request[v16.ValidateShardRequest]) (*connect_go.Response[v16.ValidateShardResponse], error)
	// ValidateVersionKeyspace validates that the version on the primary of shard 0 matches all of the other tablets in the keyspace.
	ValidateVersionKeyspace(context.Context, *connect_go.Request[v16.ValidateVersionKeyspaceRequest]) (*connect_go.Response[v16.ValidateVersionKeyspaceResponse], error)
	// ValidateVersionShard validates that the version on the primary matches all of the replicas.
	ValidateVersionShard(context.Context, *connect_go.Request[v16.ValidateVersionShardRequest]) (*connect_go.Response[v16.ValidateVersionShardResponse], error)
	// ValidateVSchema compares the schema of each primary tablet in "keyspace/shards..." to the vschema and errs if there are differences.
	ValidateVSchema(context.Context, *connect_go.Request[v16.ValidateVSchemaRequest]) (*connect_go.Response[v16.ValidateVSchemaResponse], error)
}

// NewVtctldClient constructs a client for the vitess.vtctlservice.v16.Vtctld service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVtctldClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VtctldClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vtctldClient{
		addCellInfo: connect_go.NewClient[v16.AddCellInfoRequest, v16.AddCellInfoResponse](
			httpClient,
			baseURL+VtctldAddCellInfoProcedure,
			opts...,
		),
		addCellsAlias: connect_go.NewClient[v16.AddCellsAliasRequest, v16.AddCellsAliasResponse](
			httpClient,
			baseURL+VtctldAddCellsAliasProcedure,
			opts...,
		),
		applyRoutingRules: connect_go.NewClient[v16.ApplyRoutingRulesRequest, v16.ApplyRoutingRulesResponse](
			httpClient,
			baseURL+VtctldApplyRoutingRulesProcedure,
			opts...,
		),
		applySchema: connect_go.NewClient[v16.ApplySchemaRequest, v16.ApplySchemaResponse](
			httpClient,
			baseURL+VtctldApplySchemaProcedure,
			opts...,
		),
		applyShardRoutingRules: connect_go.NewClient[v16.ApplyShardRoutingRulesRequest, v16.ApplyShardRoutingRulesResponse](
			httpClient,
			baseURL+VtctldApplyShardRoutingRulesProcedure,
			opts...,
		),
		applyVSchema: connect_go.NewClient[v16.ApplyVSchemaRequest, v16.ApplyVSchemaResponse](
			httpClient,
			baseURL+VtctldApplyVSchemaProcedure,
			opts...,
		),
		backup: connect_go.NewClient[v16.BackupRequest, v16.BackupResponse](
			httpClient,
			baseURL+VtctldBackupProcedure,
			opts...,
		),
		backupShard: connect_go.NewClient[v16.BackupShardRequest, v16.BackupResponse](
			httpClient,
			baseURL+VtctldBackupShardProcedure,
			opts...,
		),
		changeTabletType: connect_go.NewClient[v16.ChangeTabletTypeRequest, v16.ChangeTabletTypeResponse](
			httpClient,
			baseURL+VtctldChangeTabletTypeProcedure,
			opts...,
		),
		createKeyspace: connect_go.NewClient[v16.CreateKeyspaceRequest, v16.CreateKeyspaceResponse](
			httpClient,
			baseURL+VtctldCreateKeyspaceProcedure,
			opts...,
		),
		createShard: connect_go.NewClient[v16.CreateShardRequest, v16.CreateShardResponse](
			httpClient,
			baseURL+VtctldCreateShardProcedure,
			opts...,
		),
		deleteCellInfo: connect_go.NewClient[v16.DeleteCellInfoRequest, v16.DeleteCellInfoResponse](
			httpClient,
			baseURL+VtctldDeleteCellInfoProcedure,
			opts...,
		),
		deleteCellsAlias: connect_go.NewClient[v16.DeleteCellsAliasRequest, v16.DeleteCellsAliasResponse](
			httpClient,
			baseURL+VtctldDeleteCellsAliasProcedure,
			opts...,
		),
		deleteKeyspace: connect_go.NewClient[v16.DeleteKeyspaceRequest, v16.DeleteKeyspaceResponse](
			httpClient,
			baseURL+VtctldDeleteKeyspaceProcedure,
			opts...,
		),
		deleteShards: connect_go.NewClient[v16.DeleteShardsRequest, v16.DeleteShardsResponse](
			httpClient,
			baseURL+VtctldDeleteShardsProcedure,
			opts...,
		),
		deleteSrvVSchema: connect_go.NewClient[v16.DeleteSrvVSchemaRequest, v16.DeleteSrvVSchemaResponse](
			httpClient,
			baseURL+VtctldDeleteSrvVSchemaProcedure,
			opts...,
		),
		deleteTablets: connect_go.NewClient[v16.DeleteTabletsRequest, v16.DeleteTabletsResponse](
			httpClient,
			baseURL+VtctldDeleteTabletsProcedure,
			opts...,
		),
		emergencyReparentShard: connect_go.NewClient[v16.EmergencyReparentShardRequest, v16.EmergencyReparentShardResponse](
			httpClient,
			baseURL+VtctldEmergencyReparentShardProcedure,
			opts...,
		),
		executeFetchAsApp: connect_go.NewClient[v16.ExecuteFetchAsAppRequest, v16.ExecuteFetchAsAppResponse](
			httpClient,
			baseURL+VtctldExecuteFetchAsAppProcedure,
			opts...,
		),
		executeFetchAsDBA: connect_go.NewClient[v16.ExecuteFetchAsDBARequest, v16.ExecuteFetchAsDBAResponse](
			httpClient,
			baseURL+VtctldExecuteFetchAsDBAProcedure,
			opts...,
		),
		executeHook: connect_go.NewClient[v16.ExecuteHookRequest, v16.ExecuteHookResponse](
			httpClient,
			baseURL+VtctldExecuteHookProcedure,
			opts...,
		),
		findAllShardsInKeyspace: connect_go.NewClient[v16.FindAllShardsInKeyspaceRequest, v16.FindAllShardsInKeyspaceResponse](
			httpClient,
			baseURL+VtctldFindAllShardsInKeyspaceProcedure,
			opts...,
		),
		getBackups: connect_go.NewClient[v16.GetBackupsRequest, v16.GetBackupsResponse](
			httpClient,
			baseURL+VtctldGetBackupsProcedure,
			opts...,
		),
		getCellInfo: connect_go.NewClient[v16.GetCellInfoRequest, v16.GetCellInfoResponse](
			httpClient,
			baseURL+VtctldGetCellInfoProcedure,
			opts...,
		),
		getCellInfoNames: connect_go.NewClient[v16.GetCellInfoNamesRequest, v16.GetCellInfoNamesResponse](
			httpClient,
			baseURL+VtctldGetCellInfoNamesProcedure,
			opts...,
		),
		getCellsAliases: connect_go.NewClient[v16.GetCellsAliasesRequest, v16.GetCellsAliasesResponse](
			httpClient,
			baseURL+VtctldGetCellsAliasesProcedure,
			opts...,
		),
		getFullStatus: connect_go.NewClient[v16.GetFullStatusRequest, v16.GetFullStatusResponse](
			httpClient,
			baseURL+VtctldGetFullStatusProcedure,
			opts...,
		),
		getKeyspace: connect_go.NewClient[v16.GetKeyspaceRequest, v16.GetKeyspaceResponse](
			httpClient,
			baseURL+VtctldGetKeyspaceProcedure,
			opts...,
		),
		getKeyspaces: connect_go.NewClient[v16.GetKeyspacesRequest, v16.GetKeyspacesResponse](
			httpClient,
			baseURL+VtctldGetKeyspacesProcedure,
			opts...,
		),
		getPermissions: connect_go.NewClient[v16.GetPermissionsRequest, v16.GetPermissionsResponse](
			httpClient,
			baseURL+VtctldGetPermissionsProcedure,
			opts...,
		),
		getRoutingRules: connect_go.NewClient[v16.GetRoutingRulesRequest, v16.GetRoutingRulesResponse](
			httpClient,
			baseURL+VtctldGetRoutingRulesProcedure,
			opts...,
		),
		getSchema: connect_go.NewClient[v16.GetSchemaRequest, v16.GetSchemaResponse](
			httpClient,
			baseURL+VtctldGetSchemaProcedure,
			opts...,
		),
		getShard: connect_go.NewClient[v16.GetShardRequest, v16.GetShardResponse](
			httpClient,
			baseURL+VtctldGetShardProcedure,
			opts...,
		),
		getShardRoutingRules: connect_go.NewClient[v16.GetShardRoutingRulesRequest, v16.GetShardRoutingRulesResponse](
			httpClient,
			baseURL+VtctldGetShardRoutingRulesProcedure,
			opts...,
		),
		getSrvKeyspaceNames: connect_go.NewClient[v16.GetSrvKeyspaceNamesRequest, v16.GetSrvKeyspaceNamesResponse](
			httpClient,
			baseURL+VtctldGetSrvKeyspaceNamesProcedure,
			opts...,
		),
		getSrvKeyspaces: connect_go.NewClient[v16.GetSrvKeyspacesRequest, v16.GetSrvKeyspacesResponse](
			httpClient,
			baseURL+VtctldGetSrvKeyspacesProcedure,
			opts...,
		),
		updateThrottlerConfig: connect_go.NewClient[v16.UpdateThrottlerConfigRequest, v16.UpdateThrottlerConfigResponse](
			httpClient,
			baseURL+VtctldUpdateThrottlerConfigProcedure,
			opts...,
		),
		getSrvVSchema: connect_go.NewClient[v16.GetSrvVSchemaRequest, v16.GetSrvVSchemaResponse](
			httpClient,
			baseURL+VtctldGetSrvVSchemaProcedure,
			opts...,
		),
		getSrvVSchemas: connect_go.NewClient[v16.GetSrvVSchemasRequest, v16.GetSrvVSchemasResponse](
			httpClient,
			baseURL+VtctldGetSrvVSchemasProcedure,
			opts...,
		),
		getTablet: connect_go.NewClient[v16.GetTabletRequest, v16.GetTabletResponse](
			httpClient,
			baseURL+VtctldGetTabletProcedure,
			opts...,
		),
		getTablets: connect_go.NewClient[v16.GetTabletsRequest, v16.GetTabletsResponse](
			httpClient,
			baseURL+VtctldGetTabletsProcedure,
			opts...,
		),
		getTopologyPath: connect_go.NewClient[v16.GetTopologyPathRequest, v16.GetTopologyPathResponse](
			httpClient,
			baseURL+VtctldGetTopologyPathProcedure,
			opts...,
		),
		getVersion: connect_go.NewClient[v16.GetVersionRequest, v16.GetVersionResponse](
			httpClient,
			baseURL+VtctldGetVersionProcedure,
			opts...,
		),
		getVSchema: connect_go.NewClient[v16.GetVSchemaRequest, v16.GetVSchemaResponse](
			httpClient,
			baseURL+VtctldGetVSchemaProcedure,
			opts...,
		),
		getWorkflows: connect_go.NewClient[v16.GetWorkflowsRequest, v16.GetWorkflowsResponse](
			httpClient,
			baseURL+VtctldGetWorkflowsProcedure,
			opts...,
		),
		initShardPrimary: connect_go.NewClient[v16.InitShardPrimaryRequest, v16.InitShardPrimaryResponse](
			httpClient,
			baseURL+VtctldInitShardPrimaryProcedure,
			opts...,
		),
		pingTablet: connect_go.NewClient[v16.PingTabletRequest, v16.PingTabletResponse](
			httpClient,
			baseURL+VtctldPingTabletProcedure,
			opts...,
		),
		plannedReparentShard: connect_go.NewClient[v16.PlannedReparentShardRequest, v16.PlannedReparentShardResponse](
			httpClient,
			baseURL+VtctldPlannedReparentShardProcedure,
			opts...,
		),
		rebuildKeyspaceGraph: connect_go.NewClient[v16.RebuildKeyspaceGraphRequest, v16.RebuildKeyspaceGraphResponse](
			httpClient,
			baseURL+VtctldRebuildKeyspaceGraphProcedure,
			opts...,
		),
		rebuildVSchemaGraph: connect_go.NewClient[v16.RebuildVSchemaGraphRequest, v16.RebuildVSchemaGraphResponse](
			httpClient,
			baseURL+VtctldRebuildVSchemaGraphProcedure,
			opts...,
		),
		refreshState: connect_go.NewClient[v16.RefreshStateRequest, v16.RefreshStateResponse](
			httpClient,
			baseURL+VtctldRefreshStateProcedure,
			opts...,
		),
		refreshStateByShard: connect_go.NewClient[v16.RefreshStateByShardRequest, v16.RefreshStateByShardResponse](
			httpClient,
			baseURL+VtctldRefreshStateByShardProcedure,
			opts...,
		),
		reloadSchema: connect_go.NewClient[v16.ReloadSchemaRequest, v16.ReloadSchemaResponse](
			httpClient,
			baseURL+VtctldReloadSchemaProcedure,
			opts...,
		),
		reloadSchemaKeyspace: connect_go.NewClient[v16.ReloadSchemaKeyspaceRequest, v16.ReloadSchemaKeyspaceResponse](
			httpClient,
			baseURL+VtctldReloadSchemaKeyspaceProcedure,
			opts...,
		),
		reloadSchemaShard: connect_go.NewClient[v16.ReloadSchemaShardRequest, v16.ReloadSchemaShardResponse](
			httpClient,
			baseURL+VtctldReloadSchemaShardProcedure,
			opts...,
		),
		removeBackup: connect_go.NewClient[v16.RemoveBackupRequest, v16.RemoveBackupResponse](
			httpClient,
			baseURL+VtctldRemoveBackupProcedure,
			opts...,
		),
		removeKeyspaceCell: connect_go.NewClient[v16.RemoveKeyspaceCellRequest, v16.RemoveKeyspaceCellResponse](
			httpClient,
			baseURL+VtctldRemoveKeyspaceCellProcedure,
			opts...,
		),
		removeShardCell: connect_go.NewClient[v16.RemoveShardCellRequest, v16.RemoveShardCellResponse](
			httpClient,
			baseURL+VtctldRemoveShardCellProcedure,
			opts...,
		),
		reparentTablet: connect_go.NewClient[v16.ReparentTabletRequest, v16.ReparentTabletResponse](
			httpClient,
			baseURL+VtctldReparentTabletProcedure,
			opts...,
		),
		restoreFromBackup: connect_go.NewClient[v16.RestoreFromBackupRequest, v16.RestoreFromBackupResponse](
			httpClient,
			baseURL+VtctldRestoreFromBackupProcedure,
			opts...,
		),
		runHealthCheck: connect_go.NewClient[v16.RunHealthCheckRequest, v16.RunHealthCheckResponse](
			httpClient,
			baseURL+VtctldRunHealthCheckProcedure,
			opts...,
		),
		setKeyspaceDurabilityPolicy: connect_go.NewClient[v16.SetKeyspaceDurabilityPolicyRequest, v16.SetKeyspaceDurabilityPolicyResponse](
			httpClient,
			baseURL+VtctldSetKeyspaceDurabilityPolicyProcedure,
			opts...,
		),
		setShardIsPrimaryServing: connect_go.NewClient[v16.SetShardIsPrimaryServingRequest, v16.SetShardIsPrimaryServingResponse](
			httpClient,
			baseURL+VtctldSetShardIsPrimaryServingProcedure,
			opts...,
		),
		setShardTabletControl: connect_go.NewClient[v16.SetShardTabletControlRequest, v16.SetShardTabletControlResponse](
			httpClient,
			baseURL+VtctldSetShardTabletControlProcedure,
			opts...,
		),
		setWritable: connect_go.NewClient[v16.SetWritableRequest, v16.SetWritableResponse](
			httpClient,
			baseURL+VtctldSetWritableProcedure,
			opts...,
		),
		shardReplicationAdd: connect_go.NewClient[v16.ShardReplicationAddRequest, v16.ShardReplicationAddResponse](
			httpClient,
			baseURL+VtctldShardReplicationAddProcedure,
			opts...,
		),
		shardReplicationFix: connect_go.NewClient[v16.ShardReplicationFixRequest, v16.ShardReplicationFixResponse](
			httpClient,
			baseURL+VtctldShardReplicationFixProcedure,
			opts...,
		),
		shardReplicationPositions: connect_go.NewClient[v16.ShardReplicationPositionsRequest, v16.ShardReplicationPositionsResponse](
			httpClient,
			baseURL+VtctldShardReplicationPositionsProcedure,
			opts...,
		),
		shardReplicationRemove: connect_go.NewClient[v16.ShardReplicationRemoveRequest, v16.ShardReplicationRemoveResponse](
			httpClient,
			baseURL+VtctldShardReplicationRemoveProcedure,
			opts...,
		),
		sleepTablet: connect_go.NewClient[v16.SleepTabletRequest, v16.SleepTabletResponse](
			httpClient,
			baseURL+VtctldSleepTabletProcedure,
			opts...,
		),
		sourceShardAdd: connect_go.NewClient[v16.SourceShardAddRequest, v16.SourceShardAddResponse](
			httpClient,
			baseURL+VtctldSourceShardAddProcedure,
			opts...,
		),
		sourceShardDelete: connect_go.NewClient[v16.SourceShardDeleteRequest, v16.SourceShardDeleteResponse](
			httpClient,
			baseURL+VtctldSourceShardDeleteProcedure,
			opts...,
		),
		startReplication: connect_go.NewClient[v16.StartReplicationRequest, v16.StartReplicationResponse](
			httpClient,
			baseURL+VtctldStartReplicationProcedure,
			opts...,
		),
		stopReplication: connect_go.NewClient[v16.StopReplicationRequest, v16.StopReplicationResponse](
			httpClient,
			baseURL+VtctldStopReplicationProcedure,
			opts...,
		),
		tabletExternallyReparented: connect_go.NewClient[v16.TabletExternallyReparentedRequest, v16.TabletExternallyReparentedResponse](
			httpClient,
			baseURL+VtctldTabletExternallyReparentedProcedure,
			opts...,
		),
		updateCellInfo: connect_go.NewClient[v16.UpdateCellInfoRequest, v16.UpdateCellInfoResponse](
			httpClient,
			baseURL+VtctldUpdateCellInfoProcedure,
			opts...,
		),
		updateCellsAlias: connect_go.NewClient[v16.UpdateCellsAliasRequest, v16.UpdateCellsAliasResponse](
			httpClient,
			baseURL+VtctldUpdateCellsAliasProcedure,
			opts...,
		),
		validate: connect_go.NewClient[v16.ValidateRequest, v16.ValidateResponse](
			httpClient,
			baseURL+VtctldValidateProcedure,
			opts...,
		),
		validateKeyspace: connect_go.NewClient[v16.ValidateKeyspaceRequest, v16.ValidateKeyspaceResponse](
			httpClient,
			baseURL+VtctldValidateKeyspaceProcedure,
			opts...,
		),
		validateSchemaKeyspace: connect_go.NewClient[v16.ValidateSchemaKeyspaceRequest, v16.ValidateSchemaKeyspaceResponse](
			httpClient,
			baseURL+VtctldValidateSchemaKeyspaceProcedure,
			opts...,
		),
		validateShard: connect_go.NewClient[v16.ValidateShardRequest, v16.ValidateShardResponse](
			httpClient,
			baseURL+VtctldValidateShardProcedure,
			opts...,
		),
		validateVersionKeyspace: connect_go.NewClient[v16.ValidateVersionKeyspaceRequest, v16.ValidateVersionKeyspaceResponse](
			httpClient,
			baseURL+VtctldValidateVersionKeyspaceProcedure,
			opts...,
		),
		validateVersionShard: connect_go.NewClient[v16.ValidateVersionShardRequest, v16.ValidateVersionShardResponse](
			httpClient,
			baseURL+VtctldValidateVersionShardProcedure,
			opts...,
		),
		validateVSchema: connect_go.NewClient[v16.ValidateVSchemaRequest, v16.ValidateVSchemaResponse](
			httpClient,
			baseURL+VtctldValidateVSchemaProcedure,
			opts...,
		),
	}
}

// vtctldClient implements VtctldClient.
type vtctldClient struct {
	addCellInfo                 *connect_go.Client[v16.AddCellInfoRequest, v16.AddCellInfoResponse]
	addCellsAlias               *connect_go.Client[v16.AddCellsAliasRequest, v16.AddCellsAliasResponse]
	applyRoutingRules           *connect_go.Client[v16.ApplyRoutingRulesRequest, v16.ApplyRoutingRulesResponse]
	applySchema                 *connect_go.Client[v16.ApplySchemaRequest, v16.ApplySchemaResponse]
	applyShardRoutingRules      *connect_go.Client[v16.ApplyShardRoutingRulesRequest, v16.ApplyShardRoutingRulesResponse]
	applyVSchema                *connect_go.Client[v16.ApplyVSchemaRequest, v16.ApplyVSchemaResponse]
	backup                      *connect_go.Client[v16.BackupRequest, v16.BackupResponse]
	backupShard                 *connect_go.Client[v16.BackupShardRequest, v16.BackupResponse]
	changeTabletType            *connect_go.Client[v16.ChangeTabletTypeRequest, v16.ChangeTabletTypeResponse]
	createKeyspace              *connect_go.Client[v16.CreateKeyspaceRequest, v16.CreateKeyspaceResponse]
	createShard                 *connect_go.Client[v16.CreateShardRequest, v16.CreateShardResponse]
	deleteCellInfo              *connect_go.Client[v16.DeleteCellInfoRequest, v16.DeleteCellInfoResponse]
	deleteCellsAlias            *connect_go.Client[v16.DeleteCellsAliasRequest, v16.DeleteCellsAliasResponse]
	deleteKeyspace              *connect_go.Client[v16.DeleteKeyspaceRequest, v16.DeleteKeyspaceResponse]
	deleteShards                *connect_go.Client[v16.DeleteShardsRequest, v16.DeleteShardsResponse]
	deleteSrvVSchema            *connect_go.Client[v16.DeleteSrvVSchemaRequest, v16.DeleteSrvVSchemaResponse]
	deleteTablets               *connect_go.Client[v16.DeleteTabletsRequest, v16.DeleteTabletsResponse]
	emergencyReparentShard      *connect_go.Client[v16.EmergencyReparentShardRequest, v16.EmergencyReparentShardResponse]
	executeFetchAsApp           *connect_go.Client[v16.ExecuteFetchAsAppRequest, v16.ExecuteFetchAsAppResponse]
	executeFetchAsDBA           *connect_go.Client[v16.ExecuteFetchAsDBARequest, v16.ExecuteFetchAsDBAResponse]
	executeHook                 *connect_go.Client[v16.ExecuteHookRequest, v16.ExecuteHookResponse]
	findAllShardsInKeyspace     *connect_go.Client[v16.FindAllShardsInKeyspaceRequest, v16.FindAllShardsInKeyspaceResponse]
	getBackups                  *connect_go.Client[v16.GetBackupsRequest, v16.GetBackupsResponse]
	getCellInfo                 *connect_go.Client[v16.GetCellInfoRequest, v16.GetCellInfoResponse]
	getCellInfoNames            *connect_go.Client[v16.GetCellInfoNamesRequest, v16.GetCellInfoNamesResponse]
	getCellsAliases             *connect_go.Client[v16.GetCellsAliasesRequest, v16.GetCellsAliasesResponse]
	getFullStatus               *connect_go.Client[v16.GetFullStatusRequest, v16.GetFullStatusResponse]
	getKeyspace                 *connect_go.Client[v16.GetKeyspaceRequest, v16.GetKeyspaceResponse]
	getKeyspaces                *connect_go.Client[v16.GetKeyspacesRequest, v16.GetKeyspacesResponse]
	getPermissions              *connect_go.Client[v16.GetPermissionsRequest, v16.GetPermissionsResponse]
	getRoutingRules             *connect_go.Client[v16.GetRoutingRulesRequest, v16.GetRoutingRulesResponse]
	getSchema                   *connect_go.Client[v16.GetSchemaRequest, v16.GetSchemaResponse]
	getShard                    *connect_go.Client[v16.GetShardRequest, v16.GetShardResponse]
	getShardRoutingRules        *connect_go.Client[v16.GetShardRoutingRulesRequest, v16.GetShardRoutingRulesResponse]
	getSrvKeyspaceNames         *connect_go.Client[v16.GetSrvKeyspaceNamesRequest, v16.GetSrvKeyspaceNamesResponse]
	getSrvKeyspaces             *connect_go.Client[v16.GetSrvKeyspacesRequest, v16.GetSrvKeyspacesResponse]
	updateThrottlerConfig       *connect_go.Client[v16.UpdateThrottlerConfigRequest, v16.UpdateThrottlerConfigResponse]
	getSrvVSchema               *connect_go.Client[v16.GetSrvVSchemaRequest, v16.GetSrvVSchemaResponse]
	getSrvVSchemas              *connect_go.Client[v16.GetSrvVSchemasRequest, v16.GetSrvVSchemasResponse]
	getTablet                   *connect_go.Client[v16.GetTabletRequest, v16.GetTabletResponse]
	getTablets                  *connect_go.Client[v16.GetTabletsRequest, v16.GetTabletsResponse]
	getTopologyPath             *connect_go.Client[v16.GetTopologyPathRequest, v16.GetTopologyPathResponse]
	getVersion                  *connect_go.Client[v16.GetVersionRequest, v16.GetVersionResponse]
	getVSchema                  *connect_go.Client[v16.GetVSchemaRequest, v16.GetVSchemaResponse]
	getWorkflows                *connect_go.Client[v16.GetWorkflowsRequest, v16.GetWorkflowsResponse]
	initShardPrimary            *connect_go.Client[v16.InitShardPrimaryRequest, v16.InitShardPrimaryResponse]
	pingTablet                  *connect_go.Client[v16.PingTabletRequest, v16.PingTabletResponse]
	plannedReparentShard        *connect_go.Client[v16.PlannedReparentShardRequest, v16.PlannedReparentShardResponse]
	rebuildKeyspaceGraph        *connect_go.Client[v16.RebuildKeyspaceGraphRequest, v16.RebuildKeyspaceGraphResponse]
	rebuildVSchemaGraph         *connect_go.Client[v16.RebuildVSchemaGraphRequest, v16.RebuildVSchemaGraphResponse]
	refreshState                *connect_go.Client[v16.RefreshStateRequest, v16.RefreshStateResponse]
	refreshStateByShard         *connect_go.Client[v16.RefreshStateByShardRequest, v16.RefreshStateByShardResponse]
	reloadSchema                *connect_go.Client[v16.ReloadSchemaRequest, v16.ReloadSchemaResponse]
	reloadSchemaKeyspace        *connect_go.Client[v16.ReloadSchemaKeyspaceRequest, v16.ReloadSchemaKeyspaceResponse]
	reloadSchemaShard           *connect_go.Client[v16.ReloadSchemaShardRequest, v16.ReloadSchemaShardResponse]
	removeBackup                *connect_go.Client[v16.RemoveBackupRequest, v16.RemoveBackupResponse]
	removeKeyspaceCell          *connect_go.Client[v16.RemoveKeyspaceCellRequest, v16.RemoveKeyspaceCellResponse]
	removeShardCell             *connect_go.Client[v16.RemoveShardCellRequest, v16.RemoveShardCellResponse]
	reparentTablet              *connect_go.Client[v16.ReparentTabletRequest, v16.ReparentTabletResponse]
	restoreFromBackup           *connect_go.Client[v16.RestoreFromBackupRequest, v16.RestoreFromBackupResponse]
	runHealthCheck              *connect_go.Client[v16.RunHealthCheckRequest, v16.RunHealthCheckResponse]
	setKeyspaceDurabilityPolicy *connect_go.Client[v16.SetKeyspaceDurabilityPolicyRequest, v16.SetKeyspaceDurabilityPolicyResponse]
	setShardIsPrimaryServing    *connect_go.Client[v16.SetShardIsPrimaryServingRequest, v16.SetShardIsPrimaryServingResponse]
	setShardTabletControl       *connect_go.Client[v16.SetShardTabletControlRequest, v16.SetShardTabletControlResponse]
	setWritable                 *connect_go.Client[v16.SetWritableRequest, v16.SetWritableResponse]
	shardReplicationAdd         *connect_go.Client[v16.ShardReplicationAddRequest, v16.ShardReplicationAddResponse]
	shardReplicationFix         *connect_go.Client[v16.ShardReplicationFixRequest, v16.ShardReplicationFixResponse]
	shardReplicationPositions   *connect_go.Client[v16.ShardReplicationPositionsRequest, v16.ShardReplicationPositionsResponse]
	shardReplicationRemove      *connect_go.Client[v16.ShardReplicationRemoveRequest, v16.ShardReplicationRemoveResponse]
	sleepTablet                 *connect_go.Client[v16.SleepTabletRequest, v16.SleepTabletResponse]
	sourceShardAdd              *connect_go.Client[v16.SourceShardAddRequest, v16.SourceShardAddResponse]
	sourceShardDelete           *connect_go.Client[v16.SourceShardDeleteRequest, v16.SourceShardDeleteResponse]
	startReplication            *connect_go.Client[v16.StartReplicationRequest, v16.StartReplicationResponse]
	stopReplication             *connect_go.Client[v16.StopReplicationRequest, v16.StopReplicationResponse]
	tabletExternallyReparented  *connect_go.Client[v16.TabletExternallyReparentedRequest, v16.TabletExternallyReparentedResponse]
	updateCellInfo              *connect_go.Client[v16.UpdateCellInfoRequest, v16.UpdateCellInfoResponse]
	updateCellsAlias            *connect_go.Client[v16.UpdateCellsAliasRequest, v16.UpdateCellsAliasResponse]
	validate                    *connect_go.Client[v16.ValidateRequest, v16.ValidateResponse]
	validateKeyspace            *connect_go.Client[v16.ValidateKeyspaceRequest, v16.ValidateKeyspaceResponse]
	validateSchemaKeyspace      *connect_go.Client[v16.ValidateSchemaKeyspaceRequest, v16.ValidateSchemaKeyspaceResponse]
	validateShard               *connect_go.Client[v16.ValidateShardRequest, v16.ValidateShardResponse]
	validateVersionKeyspace     *connect_go.Client[v16.ValidateVersionKeyspaceRequest, v16.ValidateVersionKeyspaceResponse]
	validateVersionShard        *connect_go.Client[v16.ValidateVersionShardRequest, v16.ValidateVersionShardResponse]
	validateVSchema             *connect_go.Client[v16.ValidateVSchemaRequest, v16.ValidateVSchemaResponse]
}

// AddCellInfo calls vitess.vtctlservice.v16.Vtctld.AddCellInfo.
func (c *vtctldClient) AddCellInfo(ctx context.Context, req *connect_go.Request[v16.AddCellInfoRequest]) (*connect_go.Response[v16.AddCellInfoResponse], error) {
	return c.addCellInfo.CallUnary(ctx, req)
}

// AddCellsAlias calls vitess.vtctlservice.v16.Vtctld.AddCellsAlias.
func (c *vtctldClient) AddCellsAlias(ctx context.Context, req *connect_go.Request[v16.AddCellsAliasRequest]) (*connect_go.Response[v16.AddCellsAliasResponse], error) {
	return c.addCellsAlias.CallUnary(ctx, req)
}

// ApplyRoutingRules calls vitess.vtctlservice.v16.Vtctld.ApplyRoutingRules.
func (c *vtctldClient) ApplyRoutingRules(ctx context.Context, req *connect_go.Request[v16.ApplyRoutingRulesRequest]) (*connect_go.Response[v16.ApplyRoutingRulesResponse], error) {
	return c.applyRoutingRules.CallUnary(ctx, req)
}

// ApplySchema calls vitess.vtctlservice.v16.Vtctld.ApplySchema.
func (c *vtctldClient) ApplySchema(ctx context.Context, req *connect_go.Request[v16.ApplySchemaRequest]) (*connect_go.Response[v16.ApplySchemaResponse], error) {
	return c.applySchema.CallUnary(ctx, req)
}

// ApplyShardRoutingRules calls vitess.vtctlservice.v16.Vtctld.ApplyShardRoutingRules.
func (c *vtctldClient) ApplyShardRoutingRules(ctx context.Context, req *connect_go.Request[v16.ApplyShardRoutingRulesRequest]) (*connect_go.Response[v16.ApplyShardRoutingRulesResponse], error) {
	return c.applyShardRoutingRules.CallUnary(ctx, req)
}

// ApplyVSchema calls vitess.vtctlservice.v16.Vtctld.ApplyVSchema.
func (c *vtctldClient) ApplyVSchema(ctx context.Context, req *connect_go.Request[v16.ApplyVSchemaRequest]) (*connect_go.Response[v16.ApplyVSchemaResponse], error) {
	return c.applyVSchema.CallUnary(ctx, req)
}

// Backup calls vitess.vtctlservice.v16.Vtctld.Backup.
func (c *vtctldClient) Backup(ctx context.Context, req *connect_go.Request[v16.BackupRequest]) (*connect_go.ServerStreamForClient[v16.BackupResponse], error) {
	return c.backup.CallServerStream(ctx, req)
}

// BackupShard calls vitess.vtctlservice.v16.Vtctld.BackupShard.
func (c *vtctldClient) BackupShard(ctx context.Context, req *connect_go.Request[v16.BackupShardRequest]) (*connect_go.ServerStreamForClient[v16.BackupResponse], error) {
	return c.backupShard.CallServerStream(ctx, req)
}

// ChangeTabletType calls vitess.vtctlservice.v16.Vtctld.ChangeTabletType.
func (c *vtctldClient) ChangeTabletType(ctx context.Context, req *connect_go.Request[v16.ChangeTabletTypeRequest]) (*connect_go.Response[v16.ChangeTabletTypeResponse], error) {
	return c.changeTabletType.CallUnary(ctx, req)
}

// CreateKeyspace calls vitess.vtctlservice.v16.Vtctld.CreateKeyspace.
func (c *vtctldClient) CreateKeyspace(ctx context.Context, req *connect_go.Request[v16.CreateKeyspaceRequest]) (*connect_go.Response[v16.CreateKeyspaceResponse], error) {
	return c.createKeyspace.CallUnary(ctx, req)
}

// CreateShard calls vitess.vtctlservice.v16.Vtctld.CreateShard.
func (c *vtctldClient) CreateShard(ctx context.Context, req *connect_go.Request[v16.CreateShardRequest]) (*connect_go.Response[v16.CreateShardResponse], error) {
	return c.createShard.CallUnary(ctx, req)
}

// DeleteCellInfo calls vitess.vtctlservice.v16.Vtctld.DeleteCellInfo.
func (c *vtctldClient) DeleteCellInfo(ctx context.Context, req *connect_go.Request[v16.DeleteCellInfoRequest]) (*connect_go.Response[v16.DeleteCellInfoResponse], error) {
	return c.deleteCellInfo.CallUnary(ctx, req)
}

// DeleteCellsAlias calls vitess.vtctlservice.v16.Vtctld.DeleteCellsAlias.
func (c *vtctldClient) DeleteCellsAlias(ctx context.Context, req *connect_go.Request[v16.DeleteCellsAliasRequest]) (*connect_go.Response[v16.DeleteCellsAliasResponse], error) {
	return c.deleteCellsAlias.CallUnary(ctx, req)
}

// DeleteKeyspace calls vitess.vtctlservice.v16.Vtctld.DeleteKeyspace.
func (c *vtctldClient) DeleteKeyspace(ctx context.Context, req *connect_go.Request[v16.DeleteKeyspaceRequest]) (*connect_go.Response[v16.DeleteKeyspaceResponse], error) {
	return c.deleteKeyspace.CallUnary(ctx, req)
}

// DeleteShards calls vitess.vtctlservice.v16.Vtctld.DeleteShards.
func (c *vtctldClient) DeleteShards(ctx context.Context, req *connect_go.Request[v16.DeleteShardsRequest]) (*connect_go.Response[v16.DeleteShardsResponse], error) {
	return c.deleteShards.CallUnary(ctx, req)
}

// DeleteSrvVSchema calls vitess.vtctlservice.v16.Vtctld.DeleteSrvVSchema.
func (c *vtctldClient) DeleteSrvVSchema(ctx context.Context, req *connect_go.Request[v16.DeleteSrvVSchemaRequest]) (*connect_go.Response[v16.DeleteSrvVSchemaResponse], error) {
	return c.deleteSrvVSchema.CallUnary(ctx, req)
}

// DeleteTablets calls vitess.vtctlservice.v16.Vtctld.DeleteTablets.
func (c *vtctldClient) DeleteTablets(ctx context.Context, req *connect_go.Request[v16.DeleteTabletsRequest]) (*connect_go.Response[v16.DeleteTabletsResponse], error) {
	return c.deleteTablets.CallUnary(ctx, req)
}

// EmergencyReparentShard calls vitess.vtctlservice.v16.Vtctld.EmergencyReparentShard.
func (c *vtctldClient) EmergencyReparentShard(ctx context.Context, req *connect_go.Request[v16.EmergencyReparentShardRequest]) (*connect_go.Response[v16.EmergencyReparentShardResponse], error) {
	return c.emergencyReparentShard.CallUnary(ctx, req)
}

// ExecuteFetchAsApp calls vitess.vtctlservice.v16.Vtctld.ExecuteFetchAsApp.
func (c *vtctldClient) ExecuteFetchAsApp(ctx context.Context, req *connect_go.Request[v16.ExecuteFetchAsAppRequest]) (*connect_go.Response[v16.ExecuteFetchAsAppResponse], error) {
	return c.executeFetchAsApp.CallUnary(ctx, req)
}

// ExecuteFetchAsDBA calls vitess.vtctlservice.v16.Vtctld.ExecuteFetchAsDBA.
func (c *vtctldClient) ExecuteFetchAsDBA(ctx context.Context, req *connect_go.Request[v16.ExecuteFetchAsDBARequest]) (*connect_go.Response[v16.ExecuteFetchAsDBAResponse], error) {
	return c.executeFetchAsDBA.CallUnary(ctx, req)
}

// ExecuteHook calls vitess.vtctlservice.v16.Vtctld.ExecuteHook.
func (c *vtctldClient) ExecuteHook(ctx context.Context, req *connect_go.Request[v16.ExecuteHookRequest]) (*connect_go.Response[v16.ExecuteHookResponse], error) {
	return c.executeHook.CallUnary(ctx, req)
}

// FindAllShardsInKeyspace calls vitess.vtctlservice.v16.Vtctld.FindAllShardsInKeyspace.
func (c *vtctldClient) FindAllShardsInKeyspace(ctx context.Context, req *connect_go.Request[v16.FindAllShardsInKeyspaceRequest]) (*connect_go.Response[v16.FindAllShardsInKeyspaceResponse], error) {
	return c.findAllShardsInKeyspace.CallUnary(ctx, req)
}

// GetBackups calls vitess.vtctlservice.v16.Vtctld.GetBackups.
func (c *vtctldClient) GetBackups(ctx context.Context, req *connect_go.Request[v16.GetBackupsRequest]) (*connect_go.Response[v16.GetBackupsResponse], error) {
	return c.getBackups.CallUnary(ctx, req)
}

// GetCellInfo calls vitess.vtctlservice.v16.Vtctld.GetCellInfo.
func (c *vtctldClient) GetCellInfo(ctx context.Context, req *connect_go.Request[v16.GetCellInfoRequest]) (*connect_go.Response[v16.GetCellInfoResponse], error) {
	return c.getCellInfo.CallUnary(ctx, req)
}

// GetCellInfoNames calls vitess.vtctlservice.v16.Vtctld.GetCellInfoNames.
func (c *vtctldClient) GetCellInfoNames(ctx context.Context, req *connect_go.Request[v16.GetCellInfoNamesRequest]) (*connect_go.Response[v16.GetCellInfoNamesResponse], error) {
	return c.getCellInfoNames.CallUnary(ctx, req)
}

// GetCellsAliases calls vitess.vtctlservice.v16.Vtctld.GetCellsAliases.
func (c *vtctldClient) GetCellsAliases(ctx context.Context, req *connect_go.Request[v16.GetCellsAliasesRequest]) (*connect_go.Response[v16.GetCellsAliasesResponse], error) {
	return c.getCellsAliases.CallUnary(ctx, req)
}

// GetFullStatus calls vitess.vtctlservice.v16.Vtctld.GetFullStatus.
func (c *vtctldClient) GetFullStatus(ctx context.Context, req *connect_go.Request[v16.GetFullStatusRequest]) (*connect_go.Response[v16.GetFullStatusResponse], error) {
	return c.getFullStatus.CallUnary(ctx, req)
}

// GetKeyspace calls vitess.vtctlservice.v16.Vtctld.GetKeyspace.
func (c *vtctldClient) GetKeyspace(ctx context.Context, req *connect_go.Request[v16.GetKeyspaceRequest]) (*connect_go.Response[v16.GetKeyspaceResponse], error) {
	return c.getKeyspace.CallUnary(ctx, req)
}

// GetKeyspaces calls vitess.vtctlservice.v16.Vtctld.GetKeyspaces.
func (c *vtctldClient) GetKeyspaces(ctx context.Context, req *connect_go.Request[v16.GetKeyspacesRequest]) (*connect_go.Response[v16.GetKeyspacesResponse], error) {
	return c.getKeyspaces.CallUnary(ctx, req)
}

// GetPermissions calls vitess.vtctlservice.v16.Vtctld.GetPermissions.
func (c *vtctldClient) GetPermissions(ctx context.Context, req *connect_go.Request[v16.GetPermissionsRequest]) (*connect_go.Response[v16.GetPermissionsResponse], error) {
	return c.getPermissions.CallUnary(ctx, req)
}

// GetRoutingRules calls vitess.vtctlservice.v16.Vtctld.GetRoutingRules.
func (c *vtctldClient) GetRoutingRules(ctx context.Context, req *connect_go.Request[v16.GetRoutingRulesRequest]) (*connect_go.Response[v16.GetRoutingRulesResponse], error) {
	return c.getRoutingRules.CallUnary(ctx, req)
}

// GetSchema calls vitess.vtctlservice.v16.Vtctld.GetSchema.
func (c *vtctldClient) GetSchema(ctx context.Context, req *connect_go.Request[v16.GetSchemaRequest]) (*connect_go.Response[v16.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// GetShard calls vitess.vtctlservice.v16.Vtctld.GetShard.
func (c *vtctldClient) GetShard(ctx context.Context, req *connect_go.Request[v16.GetShardRequest]) (*connect_go.Response[v16.GetShardResponse], error) {
	return c.getShard.CallUnary(ctx, req)
}

// GetShardRoutingRules calls vitess.vtctlservice.v16.Vtctld.GetShardRoutingRules.
func (c *vtctldClient) GetShardRoutingRules(ctx context.Context, req *connect_go.Request[v16.GetShardRoutingRulesRequest]) (*connect_go.Response[v16.GetShardRoutingRulesResponse], error) {
	return c.getShardRoutingRules.CallUnary(ctx, req)
}

// GetSrvKeyspaceNames calls vitess.vtctlservice.v16.Vtctld.GetSrvKeyspaceNames.
func (c *vtctldClient) GetSrvKeyspaceNames(ctx context.Context, req *connect_go.Request[v16.GetSrvKeyspaceNamesRequest]) (*connect_go.Response[v16.GetSrvKeyspaceNamesResponse], error) {
	return c.getSrvKeyspaceNames.CallUnary(ctx, req)
}

// GetSrvKeyspaces calls vitess.vtctlservice.v16.Vtctld.GetSrvKeyspaces.
func (c *vtctldClient) GetSrvKeyspaces(ctx context.Context, req *connect_go.Request[v16.GetSrvKeyspacesRequest]) (*connect_go.Response[v16.GetSrvKeyspacesResponse], error) {
	return c.getSrvKeyspaces.CallUnary(ctx, req)
}

// UpdateThrottlerConfig calls vitess.vtctlservice.v16.Vtctld.UpdateThrottlerConfig.
func (c *vtctldClient) UpdateThrottlerConfig(ctx context.Context, req *connect_go.Request[v16.UpdateThrottlerConfigRequest]) (*connect_go.Response[v16.UpdateThrottlerConfigResponse], error) {
	return c.updateThrottlerConfig.CallUnary(ctx, req)
}

// GetSrvVSchema calls vitess.vtctlservice.v16.Vtctld.GetSrvVSchema.
func (c *vtctldClient) GetSrvVSchema(ctx context.Context, req *connect_go.Request[v16.GetSrvVSchemaRequest]) (*connect_go.Response[v16.GetSrvVSchemaResponse], error) {
	return c.getSrvVSchema.CallUnary(ctx, req)
}

// GetSrvVSchemas calls vitess.vtctlservice.v16.Vtctld.GetSrvVSchemas.
func (c *vtctldClient) GetSrvVSchemas(ctx context.Context, req *connect_go.Request[v16.GetSrvVSchemasRequest]) (*connect_go.Response[v16.GetSrvVSchemasResponse], error) {
	return c.getSrvVSchemas.CallUnary(ctx, req)
}

// GetTablet calls vitess.vtctlservice.v16.Vtctld.GetTablet.
func (c *vtctldClient) GetTablet(ctx context.Context, req *connect_go.Request[v16.GetTabletRequest]) (*connect_go.Response[v16.GetTabletResponse], error) {
	return c.getTablet.CallUnary(ctx, req)
}

// GetTablets calls vitess.vtctlservice.v16.Vtctld.GetTablets.
func (c *vtctldClient) GetTablets(ctx context.Context, req *connect_go.Request[v16.GetTabletsRequest]) (*connect_go.Response[v16.GetTabletsResponse], error) {
	return c.getTablets.CallUnary(ctx, req)
}

// GetTopologyPath calls vitess.vtctlservice.v16.Vtctld.GetTopologyPath.
func (c *vtctldClient) GetTopologyPath(ctx context.Context, req *connect_go.Request[v16.GetTopologyPathRequest]) (*connect_go.Response[v16.GetTopologyPathResponse], error) {
	return c.getTopologyPath.CallUnary(ctx, req)
}

// GetVersion calls vitess.vtctlservice.v16.Vtctld.GetVersion.
func (c *vtctldClient) GetVersion(ctx context.Context, req *connect_go.Request[v16.GetVersionRequest]) (*connect_go.Response[v16.GetVersionResponse], error) {
	return c.getVersion.CallUnary(ctx, req)
}

// GetVSchema calls vitess.vtctlservice.v16.Vtctld.GetVSchema.
func (c *vtctldClient) GetVSchema(ctx context.Context, req *connect_go.Request[v16.GetVSchemaRequest]) (*connect_go.Response[v16.GetVSchemaResponse], error) {
	return c.getVSchema.CallUnary(ctx, req)
}

// GetWorkflows calls vitess.vtctlservice.v16.Vtctld.GetWorkflows.
func (c *vtctldClient) GetWorkflows(ctx context.Context, req *connect_go.Request[v16.GetWorkflowsRequest]) (*connect_go.Response[v16.GetWorkflowsResponse], error) {
	return c.getWorkflows.CallUnary(ctx, req)
}

// InitShardPrimary calls vitess.vtctlservice.v16.Vtctld.InitShardPrimary.
func (c *vtctldClient) InitShardPrimary(ctx context.Context, req *connect_go.Request[v16.InitShardPrimaryRequest]) (*connect_go.Response[v16.InitShardPrimaryResponse], error) {
	return c.initShardPrimary.CallUnary(ctx, req)
}

// PingTablet calls vitess.vtctlservice.v16.Vtctld.PingTablet.
func (c *vtctldClient) PingTablet(ctx context.Context, req *connect_go.Request[v16.PingTabletRequest]) (*connect_go.Response[v16.PingTabletResponse], error) {
	return c.pingTablet.CallUnary(ctx, req)
}

// PlannedReparentShard calls vitess.vtctlservice.v16.Vtctld.PlannedReparentShard.
func (c *vtctldClient) PlannedReparentShard(ctx context.Context, req *connect_go.Request[v16.PlannedReparentShardRequest]) (*connect_go.Response[v16.PlannedReparentShardResponse], error) {
	return c.plannedReparentShard.CallUnary(ctx, req)
}

// RebuildKeyspaceGraph calls vitess.vtctlservice.v16.Vtctld.RebuildKeyspaceGraph.
func (c *vtctldClient) RebuildKeyspaceGraph(ctx context.Context, req *connect_go.Request[v16.RebuildKeyspaceGraphRequest]) (*connect_go.Response[v16.RebuildKeyspaceGraphResponse], error) {
	return c.rebuildKeyspaceGraph.CallUnary(ctx, req)
}

// RebuildVSchemaGraph calls vitess.vtctlservice.v16.Vtctld.RebuildVSchemaGraph.
func (c *vtctldClient) RebuildVSchemaGraph(ctx context.Context, req *connect_go.Request[v16.RebuildVSchemaGraphRequest]) (*connect_go.Response[v16.RebuildVSchemaGraphResponse], error) {
	return c.rebuildVSchemaGraph.CallUnary(ctx, req)
}

// RefreshState calls vitess.vtctlservice.v16.Vtctld.RefreshState.
func (c *vtctldClient) RefreshState(ctx context.Context, req *connect_go.Request[v16.RefreshStateRequest]) (*connect_go.Response[v16.RefreshStateResponse], error) {
	return c.refreshState.CallUnary(ctx, req)
}

// RefreshStateByShard calls vitess.vtctlservice.v16.Vtctld.RefreshStateByShard.
func (c *vtctldClient) RefreshStateByShard(ctx context.Context, req *connect_go.Request[v16.RefreshStateByShardRequest]) (*connect_go.Response[v16.RefreshStateByShardResponse], error) {
	return c.refreshStateByShard.CallUnary(ctx, req)
}

// ReloadSchema calls vitess.vtctlservice.v16.Vtctld.ReloadSchema.
func (c *vtctldClient) ReloadSchema(ctx context.Context, req *connect_go.Request[v16.ReloadSchemaRequest]) (*connect_go.Response[v16.ReloadSchemaResponse], error) {
	return c.reloadSchema.CallUnary(ctx, req)
}

// ReloadSchemaKeyspace calls vitess.vtctlservice.v16.Vtctld.ReloadSchemaKeyspace.
func (c *vtctldClient) ReloadSchemaKeyspace(ctx context.Context, req *connect_go.Request[v16.ReloadSchemaKeyspaceRequest]) (*connect_go.Response[v16.ReloadSchemaKeyspaceResponse], error) {
	return c.reloadSchemaKeyspace.CallUnary(ctx, req)
}

// ReloadSchemaShard calls vitess.vtctlservice.v16.Vtctld.ReloadSchemaShard.
func (c *vtctldClient) ReloadSchemaShard(ctx context.Context, req *connect_go.Request[v16.ReloadSchemaShardRequest]) (*connect_go.Response[v16.ReloadSchemaShardResponse], error) {
	return c.reloadSchemaShard.CallUnary(ctx, req)
}

// RemoveBackup calls vitess.vtctlservice.v16.Vtctld.RemoveBackup.
func (c *vtctldClient) RemoveBackup(ctx context.Context, req *connect_go.Request[v16.RemoveBackupRequest]) (*connect_go.Response[v16.RemoveBackupResponse], error) {
	return c.removeBackup.CallUnary(ctx, req)
}

// RemoveKeyspaceCell calls vitess.vtctlservice.v16.Vtctld.RemoveKeyspaceCell.
func (c *vtctldClient) RemoveKeyspaceCell(ctx context.Context, req *connect_go.Request[v16.RemoveKeyspaceCellRequest]) (*connect_go.Response[v16.RemoveKeyspaceCellResponse], error) {
	return c.removeKeyspaceCell.CallUnary(ctx, req)
}

// RemoveShardCell calls vitess.vtctlservice.v16.Vtctld.RemoveShardCell.
func (c *vtctldClient) RemoveShardCell(ctx context.Context, req *connect_go.Request[v16.RemoveShardCellRequest]) (*connect_go.Response[v16.RemoveShardCellResponse], error) {
	return c.removeShardCell.CallUnary(ctx, req)
}

// ReparentTablet calls vitess.vtctlservice.v16.Vtctld.ReparentTablet.
func (c *vtctldClient) ReparentTablet(ctx context.Context, req *connect_go.Request[v16.ReparentTabletRequest]) (*connect_go.Response[v16.ReparentTabletResponse], error) {
	return c.reparentTablet.CallUnary(ctx, req)
}

// RestoreFromBackup calls vitess.vtctlservice.v16.Vtctld.RestoreFromBackup.
func (c *vtctldClient) RestoreFromBackup(ctx context.Context, req *connect_go.Request[v16.RestoreFromBackupRequest]) (*connect_go.ServerStreamForClient[v16.RestoreFromBackupResponse], error) {
	return c.restoreFromBackup.CallServerStream(ctx, req)
}

// RunHealthCheck calls vitess.vtctlservice.v16.Vtctld.RunHealthCheck.
func (c *vtctldClient) RunHealthCheck(ctx context.Context, req *connect_go.Request[v16.RunHealthCheckRequest]) (*connect_go.Response[v16.RunHealthCheckResponse], error) {
	return c.runHealthCheck.CallUnary(ctx, req)
}

// SetKeyspaceDurabilityPolicy calls vitess.vtctlservice.v16.Vtctld.SetKeyspaceDurabilityPolicy.
func (c *vtctldClient) SetKeyspaceDurabilityPolicy(ctx context.Context, req *connect_go.Request[v16.SetKeyspaceDurabilityPolicyRequest]) (*connect_go.Response[v16.SetKeyspaceDurabilityPolicyResponse], error) {
	return c.setKeyspaceDurabilityPolicy.CallUnary(ctx, req)
}

// SetShardIsPrimaryServing calls vitess.vtctlservice.v16.Vtctld.SetShardIsPrimaryServing.
func (c *vtctldClient) SetShardIsPrimaryServing(ctx context.Context, req *connect_go.Request[v16.SetShardIsPrimaryServingRequest]) (*connect_go.Response[v16.SetShardIsPrimaryServingResponse], error) {
	return c.setShardIsPrimaryServing.CallUnary(ctx, req)
}

// SetShardTabletControl calls vitess.vtctlservice.v16.Vtctld.SetShardTabletControl.
func (c *vtctldClient) SetShardTabletControl(ctx context.Context, req *connect_go.Request[v16.SetShardTabletControlRequest]) (*connect_go.Response[v16.SetShardTabletControlResponse], error) {
	return c.setShardTabletControl.CallUnary(ctx, req)
}

// SetWritable calls vitess.vtctlservice.v16.Vtctld.SetWritable.
func (c *vtctldClient) SetWritable(ctx context.Context, req *connect_go.Request[v16.SetWritableRequest]) (*connect_go.Response[v16.SetWritableResponse], error) {
	return c.setWritable.CallUnary(ctx, req)
}

// ShardReplicationAdd calls vitess.vtctlservice.v16.Vtctld.ShardReplicationAdd.
func (c *vtctldClient) ShardReplicationAdd(ctx context.Context, req *connect_go.Request[v16.ShardReplicationAddRequest]) (*connect_go.Response[v16.ShardReplicationAddResponse], error) {
	return c.shardReplicationAdd.CallUnary(ctx, req)
}

// ShardReplicationFix calls vitess.vtctlservice.v16.Vtctld.ShardReplicationFix.
func (c *vtctldClient) ShardReplicationFix(ctx context.Context, req *connect_go.Request[v16.ShardReplicationFixRequest]) (*connect_go.Response[v16.ShardReplicationFixResponse], error) {
	return c.shardReplicationFix.CallUnary(ctx, req)
}

// ShardReplicationPositions calls vitess.vtctlservice.v16.Vtctld.ShardReplicationPositions.
func (c *vtctldClient) ShardReplicationPositions(ctx context.Context, req *connect_go.Request[v16.ShardReplicationPositionsRequest]) (*connect_go.Response[v16.ShardReplicationPositionsResponse], error) {
	return c.shardReplicationPositions.CallUnary(ctx, req)
}

// ShardReplicationRemove calls vitess.vtctlservice.v16.Vtctld.ShardReplicationRemove.
func (c *vtctldClient) ShardReplicationRemove(ctx context.Context, req *connect_go.Request[v16.ShardReplicationRemoveRequest]) (*connect_go.Response[v16.ShardReplicationRemoveResponse], error) {
	return c.shardReplicationRemove.CallUnary(ctx, req)
}

// SleepTablet calls vitess.vtctlservice.v16.Vtctld.SleepTablet.
func (c *vtctldClient) SleepTablet(ctx context.Context, req *connect_go.Request[v16.SleepTabletRequest]) (*connect_go.Response[v16.SleepTabletResponse], error) {
	return c.sleepTablet.CallUnary(ctx, req)
}

// SourceShardAdd calls vitess.vtctlservice.v16.Vtctld.SourceShardAdd.
func (c *vtctldClient) SourceShardAdd(ctx context.Context, req *connect_go.Request[v16.SourceShardAddRequest]) (*connect_go.Response[v16.SourceShardAddResponse], error) {
	return c.sourceShardAdd.CallUnary(ctx, req)
}

// SourceShardDelete calls vitess.vtctlservice.v16.Vtctld.SourceShardDelete.
func (c *vtctldClient) SourceShardDelete(ctx context.Context, req *connect_go.Request[v16.SourceShardDeleteRequest]) (*connect_go.Response[v16.SourceShardDeleteResponse], error) {
	return c.sourceShardDelete.CallUnary(ctx, req)
}

// StartReplication calls vitess.vtctlservice.v16.Vtctld.StartReplication.
func (c *vtctldClient) StartReplication(ctx context.Context, req *connect_go.Request[v16.StartReplicationRequest]) (*connect_go.Response[v16.StartReplicationResponse], error) {
	return c.startReplication.CallUnary(ctx, req)
}

// StopReplication calls vitess.vtctlservice.v16.Vtctld.StopReplication.
func (c *vtctldClient) StopReplication(ctx context.Context, req *connect_go.Request[v16.StopReplicationRequest]) (*connect_go.Response[v16.StopReplicationResponse], error) {
	return c.stopReplication.CallUnary(ctx, req)
}

// TabletExternallyReparented calls vitess.vtctlservice.v16.Vtctld.TabletExternallyReparented.
func (c *vtctldClient) TabletExternallyReparented(ctx context.Context, req *connect_go.Request[v16.TabletExternallyReparentedRequest]) (*connect_go.Response[v16.TabletExternallyReparentedResponse], error) {
	return c.tabletExternallyReparented.CallUnary(ctx, req)
}

// UpdateCellInfo calls vitess.vtctlservice.v16.Vtctld.UpdateCellInfo.
func (c *vtctldClient) UpdateCellInfo(ctx context.Context, req *connect_go.Request[v16.UpdateCellInfoRequest]) (*connect_go.Response[v16.UpdateCellInfoResponse], error) {
	return c.updateCellInfo.CallUnary(ctx, req)
}

// UpdateCellsAlias calls vitess.vtctlservice.v16.Vtctld.UpdateCellsAlias.
func (c *vtctldClient) UpdateCellsAlias(ctx context.Context, req *connect_go.Request[v16.UpdateCellsAliasRequest]) (*connect_go.Response[v16.UpdateCellsAliasResponse], error) {
	return c.updateCellsAlias.CallUnary(ctx, req)
}

// Validate calls vitess.vtctlservice.v16.Vtctld.Validate.
func (c *vtctldClient) Validate(ctx context.Context, req *connect_go.Request[v16.ValidateRequest]) (*connect_go.Response[v16.ValidateResponse], error) {
	return c.validate.CallUnary(ctx, req)
}

// ValidateKeyspace calls vitess.vtctlservice.v16.Vtctld.ValidateKeyspace.
func (c *vtctldClient) ValidateKeyspace(ctx context.Context, req *connect_go.Request[v16.ValidateKeyspaceRequest]) (*connect_go.Response[v16.ValidateKeyspaceResponse], error) {
	return c.validateKeyspace.CallUnary(ctx, req)
}

// ValidateSchemaKeyspace calls vitess.vtctlservice.v16.Vtctld.ValidateSchemaKeyspace.
func (c *vtctldClient) ValidateSchemaKeyspace(ctx context.Context, req *connect_go.Request[v16.ValidateSchemaKeyspaceRequest]) (*connect_go.Response[v16.ValidateSchemaKeyspaceResponse], error) {
	return c.validateSchemaKeyspace.CallUnary(ctx, req)
}

// ValidateShard calls vitess.vtctlservice.v16.Vtctld.ValidateShard.
func (c *vtctldClient) ValidateShard(ctx context.Context, req *connect_go.Request[v16.ValidateShardRequest]) (*connect_go.Response[v16.ValidateShardResponse], error) {
	return c.validateShard.CallUnary(ctx, req)
}

// ValidateVersionKeyspace calls vitess.vtctlservice.v16.Vtctld.ValidateVersionKeyspace.
func (c *vtctldClient) ValidateVersionKeyspace(ctx context.Context, req *connect_go.Request[v16.ValidateVersionKeyspaceRequest]) (*connect_go.Response[v16.ValidateVersionKeyspaceResponse], error) {
	return c.validateVersionKeyspace.CallUnary(ctx, req)
}

// ValidateVersionShard calls vitess.vtctlservice.v16.Vtctld.ValidateVersionShard.
func (c *vtctldClient) ValidateVersionShard(ctx context.Context, req *connect_go.Request[v16.ValidateVersionShardRequest]) (*connect_go.Response[v16.ValidateVersionShardResponse], error) {
	return c.validateVersionShard.CallUnary(ctx, req)
}

// ValidateVSchema calls vitess.vtctlservice.v16.Vtctld.ValidateVSchema.
func (c *vtctldClient) ValidateVSchema(ctx context.Context, req *connect_go.Request[v16.ValidateVSchemaRequest]) (*connect_go.Response[v16.ValidateVSchemaResponse], error) {
	return c.validateVSchema.CallUnary(ctx, req)
}

// VtctldHandler is an implementation of the vitess.vtctlservice.v16.Vtctld service.
type VtctldHandler interface {
	// AddCellInfo registers a local topology service in a new cell by creating
	// the CellInfo with the provided parameters.
	AddCellInfo(context.Context, *connect_go.Request[v16.AddCellInfoRequest]) (*connect_go.Response[v16.AddCellInfoResponse], error)
	// AddCellsAlias defines a group of cells that can be referenced by a single
	// name (the alias).
	//
	// When routing query traffic, replica/rdonly traffic can be routed across
	// cells within the group (alias). Only primary traffic can be routed across
	// cells not in the same group (alias).
	AddCellsAlias(context.Context, *connect_go.Request[v16.AddCellsAliasRequest]) (*connect_go.Response[v16.AddCellsAliasResponse], error)
	// ApplyRoutingRules applies the VSchema routing rules.
	ApplyRoutingRules(context.Context, *connect_go.Request[v16.ApplyRoutingRulesRequest]) (*connect_go.Response[v16.ApplyRoutingRulesResponse], error)
	// ApplySchema applies a schema to a keyspace.
	ApplySchema(context.Context, *connect_go.Request[v16.ApplySchemaRequest]) (*connect_go.Response[v16.ApplySchemaResponse], error)
	// ApplyShardRoutingRules applies the VSchema shard routing rules.
	ApplyShardRoutingRules(context.Context, *connect_go.Request[v16.ApplyShardRoutingRulesRequest]) (*connect_go.Response[v16.ApplyShardRoutingRulesResponse], error)
	// ApplyVSchema applies a vschema to a keyspace.
	ApplyVSchema(context.Context, *connect_go.Request[v16.ApplyVSchemaRequest]) (*connect_go.Response[v16.ApplyVSchemaResponse], error)
	// Backup uses the BackupEngine and BackupStorage services on the specified
	// tablet to create and store a new backup.
	Backup(context.Context, *connect_go.Request[v16.BackupRequest], *connect_go.ServerStream[v16.BackupResponse]) error
	// BackupShard chooses a tablet in the shard and uses it to create a backup.
	BackupShard(context.Context, *connect_go.Request[v16.BackupShardRequest], *connect_go.ServerStream[v16.BackupResponse]) error
	// ChangeTabletType changes the db type for the specified tablet, if possible.
	// This is used primarily to arrange replicas, and it will not convert a
	// primary. For that, use InitShardPrimary.
	//
	// NOTE: This command automatically updates the serving graph.
	ChangeTabletType(context.Context, *connect_go.Request[v16.ChangeTabletTypeRequest]) (*connect_go.Response[v16.ChangeTabletTypeResponse], error)
	// CreateKeyspace creates the specified keyspace in the topology. For a
	// SNAPSHOT keyspace, the request must specify the name of a base keyspace,
	// as well as a snapshot time.
	CreateKeyspace(context.Context, *connect_go.Request[v16.CreateKeyspaceRequest]) (*connect_go.Response[v16.CreateKeyspaceResponse], error)
	// CreateShard creates the specified shard in the topology.
	CreateShard(context.Context, *connect_go.Request[v16.CreateShardRequest]) (*connect_go.Response[v16.CreateShardResponse], error)
	// DeleteCellInfo deletes the CellInfo for the provided cell. The cell cannot
	// be referenced by any Shard record in the topology.
	DeleteCellInfo(context.Context, *connect_go.Request[v16.DeleteCellInfoRequest]) (*connect_go.Response[v16.DeleteCellInfoResponse], error)
	// DeleteCellsAlias deletes the CellsAlias for the provided alias.
	DeleteCellsAlias(context.Context, *connect_go.Request[v16.DeleteCellsAliasRequest]) (*connect_go.Response[v16.DeleteCellsAliasResponse], error)
	// DeleteKeyspace deletes the specified keyspace from the topology. In
	// recursive mode, it also recursively deletes all shards in the keyspace.
	// Otherwise, the keyspace must be empty (have no shards), or DeleteKeyspace
	// returns an error.
	DeleteKeyspace(context.Context, *connect_go.Request[v16.DeleteKeyspaceRequest]) (*connect_go.Response[v16.DeleteKeyspaceResponse], error)
	// DeleteShards deletes the specified shards from the topology. In recursive
	// mode, it also deletes all tablets belonging to the shard. Otherwise, the
	// shard must be empty (have no tablets) or DeleteShards returns an error for
	// that shard.
	DeleteShards(context.Context, *connect_go.Request[v16.DeleteShardsRequest]) (*connect_go.Response[v16.DeleteShardsResponse], error)
	// DeleteSrvVSchema deletes the SrvVSchema object in the specified cell.
	DeleteSrvVSchema(context.Context, *connect_go.Request[v16.DeleteSrvVSchemaRequest]) (*connect_go.Response[v16.DeleteSrvVSchemaResponse], error)
	// DeleteTablets deletes one or more tablets from the topology.
	DeleteTablets(context.Context, *connect_go.Request[v16.DeleteTabletsRequest]) (*connect_go.Response[v16.DeleteTabletsResponse], error)
	// EmergencyReparentShard reparents the shard to the new primary. It assumes
	// the old primary is dead or otherwise not responding.
	EmergencyReparentShard(context.Context, *connect_go.Request[v16.EmergencyReparentShardRequest]) (*connect_go.Response[v16.EmergencyReparentShardResponse], error)
	// ExecuteFetchAsApp executes a SQL query on the remote tablet as the App user.
	ExecuteFetchAsApp(context.Context, *connect_go.Request[v16.ExecuteFetchAsAppRequest]) (*connect_go.Response[v16.ExecuteFetchAsAppResponse], error)
	// ExecuteFetchAsDBA executes a SQL query on the remote tablet as the DBA user.
	ExecuteFetchAsDBA(context.Context, *connect_go.Request[v16.ExecuteFetchAsDBARequest]) (*connect_go.Response[v16.ExecuteFetchAsDBAResponse], error)
	// ExecuteHook runs the hook on the tablet.
	ExecuteHook(context.Context, *connect_go.Request[v16.ExecuteHookRequest]) (*connect_go.Response[v16.ExecuteHookResponse], error)
	// FindAllShardsInKeyspace returns a map of shard names to shard references
	// for a given keyspace.
	FindAllShardsInKeyspace(context.Context, *connect_go.Request[v16.FindAllShardsInKeyspaceRequest]) (*connect_go.Response[v16.FindAllShardsInKeyspaceResponse], error)
	// GetBackups returns all the backups for a shard.
	GetBackups(context.Context, *connect_go.Request[v16.GetBackupsRequest]) (*connect_go.Response[v16.GetBackupsResponse], error)
	// GetCellInfo returns the information for a cell.
	GetCellInfo(context.Context, *connect_go.Request[v16.GetCellInfoRequest]) (*connect_go.Response[v16.GetCellInfoResponse], error)
	// GetCellInfoNames returns all the cells for which we have a CellInfo object,
	// meaning we have a topology service registered.
	GetCellInfoNames(context.Context, *connect_go.Request[v16.GetCellInfoNamesRequest]) (*connect_go.Response[v16.GetCellInfoNamesResponse], error)
	// GetCellsAliases returns a mapping of cell alias to cells identified by that
	// alias.
	GetCellsAliases(context.Context, *connect_go.Request[v16.GetCellsAliasesRequest]) (*connect_go.Response[v16.GetCellsAliasesResponse], error)
	// GetFullStatus returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	GetFullStatus(context.Context, *connect_go.Request[v16.GetFullStatusRequest]) (*connect_go.Response[v16.GetFullStatusResponse], error)
	// GetKeyspace reads the given keyspace from the topo and returns it.
	GetKeyspace(context.Context, *connect_go.Request[v16.GetKeyspaceRequest]) (*connect_go.Response[v16.GetKeyspaceResponse], error)
	// GetKeyspaces returns the keyspace struct of all keyspaces in the topo.
	GetKeyspaces(context.Context, *connect_go.Request[v16.GetKeyspacesRequest]) (*connect_go.Response[v16.GetKeyspacesResponse], error)
	// GetPermissions returns the permissions set on the remote tablet.
	GetPermissions(context.Context, *connect_go.Request[v16.GetPermissionsRequest]) (*connect_go.Response[v16.GetPermissionsResponse], error)
	// GetRoutingRules returns the VSchema routing rules.
	GetRoutingRules(context.Context, *connect_go.Request[v16.GetRoutingRulesRequest]) (*connect_go.Response[v16.GetRoutingRulesResponse], error)
	// GetSchema returns the schema for a tablet, or just the schema for the
	// specified tables in that tablet.
	GetSchema(context.Context, *connect_go.Request[v16.GetSchemaRequest]) (*connect_go.Response[v16.GetSchemaResponse], error)
	// GetShard returns information about a shard in the topology.
	GetShard(context.Context, *connect_go.Request[v16.GetShardRequest]) (*connect_go.Response[v16.GetShardResponse], error)
	// GetShardRoutingRules returns the VSchema shard routing rules.
	GetShardRoutingRules(context.Context, *connect_go.Request[v16.GetShardRoutingRulesRequest]) (*connect_go.Response[v16.GetShardRoutingRulesResponse], error)
	// GetSrvKeyspaceNames returns a mapping of cell name to the keyspaces served
	// in that cell.
	GetSrvKeyspaceNames(context.Context, *connect_go.Request[v16.GetSrvKeyspaceNamesRequest]) (*connect_go.Response[v16.GetSrvKeyspaceNamesResponse], error)
	// GetSrvKeyspaces returns the SrvKeyspaces for a keyspace in one or more
	// cells.
	GetSrvKeyspaces(context.Context, *connect_go.Request[v16.GetSrvKeyspacesRequest]) (*connect_go.Response[v16.GetSrvKeyspacesResponse], error)
	// UpdateThrottlerConfig updates the tablet throttler configuration
	UpdateThrottlerConfig(context.Context, *connect_go.Request[v16.UpdateThrottlerConfigRequest]) (*connect_go.Response[v16.UpdateThrottlerConfigResponse], error)
	// GetSrvVSchema returns the SrvVSchema for a cell.
	GetSrvVSchema(context.Context, *connect_go.Request[v16.GetSrvVSchemaRequest]) (*connect_go.Response[v16.GetSrvVSchemaResponse], error)
	// GetSrvVSchemas returns a mapping from cell name to SrvVSchema for all cells,
	// optionally filtered by cell name.
	GetSrvVSchemas(context.Context, *connect_go.Request[v16.GetSrvVSchemasRequest]) (*connect_go.Response[v16.GetSrvVSchemasResponse], error)
	// GetTablet returns information about a tablet.
	GetTablet(context.Context, *connect_go.Request[v16.GetTabletRequest]) (*connect_go.Response[v16.GetTabletResponse], error)
	// GetTablets returns tablets, optionally filtered by keyspace and shard.
	GetTablets(context.Context, *connect_go.Request[v16.GetTabletsRequest]) (*connect_go.Response[v16.GetTabletsResponse], error)
	// GetTopologyPath returns the topology cell at a given path.
	GetTopologyPath(context.Context, *connect_go.Request[v16.GetTopologyPathRequest]) (*connect_go.Response[v16.GetTopologyPathResponse], error)
	// GetVersion returns the version of a tablet from its debug vars.
	GetVersion(context.Context, *connect_go.Request[v16.GetVersionRequest]) (*connect_go.Response[v16.GetVersionResponse], error)
	// GetVSchema returns the vschema for a keyspace.
	GetVSchema(context.Context, *connect_go.Request[v16.GetVSchemaRequest]) (*connect_go.Response[v16.GetVSchemaResponse], error)
	// GetWorkflows returns a list of workflows for the given keyspace.
	GetWorkflows(context.Context, *connect_go.Request[v16.GetWorkflowsRequest]) (*connect_go.Response[v16.GetWorkflowsResponse], error)
	// InitShardPrimary sets the initial primary for a shard. Will make all other
	// tablets in the shard replicas of the provided primary.
	//
	// WARNING: This could cause data loss on an already replicating shard.
	// PlannedReparentShard or EmergencyReparentShard should be used in those
	// cases instead.
	InitShardPrimary(context.Context, *connect_go.Request[v16.InitShardPrimaryRequest]) (*connect_go.Response[v16.InitShardPrimaryResponse], error)
	// PingTablet checks that the specified tablet is awake and responding to RPCs.
	// This command can be blocked by other in-flight operations.
	PingTablet(context.Context, *connect_go.Request[v16.PingTabletRequest]) (*connect_go.Response[v16.PingTabletResponse], error)
	// PlannedReparentShard reparents the shard to the new primary, or away from
	// an old primary. Both the old and new primaries need to be reachable and
	// running.
	//
	// **NOTE**: The vtctld will not consider any replicas outside the cell the
	// current shard primary is in for promotion unless NewPrimary is explicitly
	// provided in the request.
	PlannedReparentShard(context.Context, *connect_go.Request[v16.PlannedReparentShardRequest]) (*connect_go.Response[v16.PlannedReparentShardResponse], error)
	// RebuildKeyspaceGraph rebuilds the serving data for a keyspace.
	//
	// This may trigger an update to all connected clients.
	RebuildKeyspaceGraph(context.Context, *connect_go.Request[v16.RebuildKeyspaceGraphRequest]) (*connect_go.Response[v16.RebuildKeyspaceGraphResponse], error)
	// RebuildVSchemaGraph rebuilds the per-cell SrvVSchema from the global
	// VSchema objects in the provided cells (or all cells in the topo none
	// provided).
	RebuildVSchemaGraph(context.Context, *connect_go.Request[v16.RebuildVSchemaGraphRequest]) (*connect_go.Response[v16.RebuildVSchemaGraphResponse], error)
	// RefreshState reloads the tablet record on the specified tablet.
	RefreshState(context.Context, *connect_go.Request[v16.RefreshStateRequest]) (*connect_go.Response[v16.RefreshStateResponse], error)
	// RefreshStateByShard calls RefreshState on all the tablets in the given shard.
	RefreshStateByShard(context.Context, *connect_go.Request[v16.RefreshStateByShardRequest]) (*connect_go.Response[v16.RefreshStateByShardResponse], error)
	// ReloadSchema instructs the remote tablet to reload its schema.
	ReloadSchema(context.Context, *connect_go.Request[v16.ReloadSchemaRequest]) (*connect_go.Response[v16.ReloadSchemaResponse], error)
	// ReloadSchemaKeyspace reloads the schema on all tablets in a keyspace.
	ReloadSchemaKeyspace(context.Context, *connect_go.Request[v16.ReloadSchemaKeyspaceRequest]) (*connect_go.Response[v16.ReloadSchemaKeyspaceResponse], error)
	// ReloadSchemaShard reloads the schema on all tablets in a shard.
	//
	// In general, we don't always expect all replicas to be ready to reload, and
	// the periodic schema reload makes them self-healing anyway. So, we do this
	// on a best-effort basis, and log warnings for any tablets that fail to
	// reload within the context deadline.
	ReloadSchemaShard(context.Context, *connect_go.Request[v16.ReloadSchemaShardRequest]) (*connect_go.Response[v16.ReloadSchemaShardResponse], error)
	// RemoveBackup removes a backup from the BackupStorage used by vtctld.
	RemoveBackup(context.Context, *connect_go.Request[v16.RemoveBackupRequest]) (*connect_go.Response[v16.RemoveBackupResponse], error)
	// RemoveKeyspaceCell removes the specified cell from the Cells list for all
	// shards in the specified keyspace (by calling RemoveShardCell on every
	// shard). It also removes the SrvKeyspace for that keyspace in that cell.
	RemoveKeyspaceCell(context.Context, *connect_go.Request[v16.RemoveKeyspaceCellRequest]) (*connect_go.Response[v16.RemoveKeyspaceCellResponse], error)
	// RemoveShardCell removes the specified cell from the specified shard's Cells
	// list.
	RemoveShardCell(context.Context, *connect_go.Request[v16.RemoveShardCellRequest]) (*connect_go.Response[v16.RemoveShardCellResponse], error)
	// ReparentTablet reparents a tablet to the current primary in the shard. This
	// only works if the current replica position matches the last known reparent
	// action.
	ReparentTablet(context.Context, *connect_go.Request[v16.ReparentTabletRequest]) (*connect_go.Response[v16.ReparentTabletResponse], error)
	// RestoreFromBackup stops mysqld for the given tablet and restores a backup.
	RestoreFromBackup(context.Context, *connect_go.Request[v16.RestoreFromBackupRequest], *connect_go.ServerStream[v16.RestoreFromBackupResponse]) error
	// RunHealthCheck runs a healthcheck on the remote tablet.
	RunHealthCheck(context.Context, *connect_go.Request[v16.RunHealthCheckRequest]) (*connect_go.Response[v16.RunHealthCheckResponse], error)
	// SetKeyspaceDurabilityPolicy updates the DurabilityPolicy for a keyspace.
	SetKeyspaceDurabilityPolicy(context.Context, *connect_go.Request[v16.SetKeyspaceDurabilityPolicyRequest]) (*connect_go.Response[v16.SetKeyspaceDurabilityPolicyResponse], error)
	// SetShardIsPrimaryServing adds or removes a shard from serving.
	//
	// This is meant as an emergency function. It does not rebuild any serving
	// graph (i.e. it does not run RebuildKeyspaceGraph).
	SetShardIsPrimaryServing(context.Context, *connect_go.Request[v16.SetShardIsPrimaryServingRequest]) (*connect_go.Response[v16.SetShardIsPrimaryServingResponse], error)
	// SetShardTabletControl updates the TabletControl topo record for a shard and
	// tablet type.
	//
	// This should only be used for an emergency fix, or after a finished
	// Reshard. See the documentation on SetShardTabletControlRequest for more
	// information about the different update modes.
	SetShardTabletControl(context.Context, *connect_go.Request[v16.SetShardTabletControlRequest]) (*connect_go.Response[v16.SetShardTabletControlResponse], error)
	// SetWritable sets a tablet as read-write (writable=true) or read-only (writable=false).
	SetWritable(context.Context, *connect_go.Request[v16.SetWritableRequest]) (*connect_go.Response[v16.SetWritableResponse], error)
	// ShardReplicationAdd adds an entry to a topodata.ShardReplication object.
	//
	// It is a low-level function and should generally not be called.
	ShardReplicationAdd(context.Context, *connect_go.Request[v16.ShardReplicationAddRequest]) (*connect_go.Response[v16.ShardReplicationAddResponse], error)
	// ShardReplicationFix walks the replication graph for a shard in a cell and
	// attempts to fix the first problem encountered, returning information about
	// the problem fixed, if any.
	ShardReplicationFix(context.Context, *connect_go.Request[v16.ShardReplicationFixRequest]) (*connect_go.Response[v16.ShardReplicationFixResponse], error)
	// ShardReplicationPositions returns the replication position of each tablet
	// in a shard. This RPC makes a best-effort to return partial results. For
	// example, if one tablet in the shard graph is unreachable, then
	// ShardReplicationPositions will return non-error, and include valid results
	// for the reachable tablets.
	ShardReplicationPositions(context.Context, *connect_go.Request[v16.ShardReplicationPositionsRequest]) (*connect_go.Response[v16.ShardReplicationPositionsResponse], error)
	// ShardReplicationRemove removes an entry from a topodata.ShardReplication
	// object.
	//
	// It is a low-level function and should generally not be called.
	ShardReplicationRemove(context.Context, *connect_go.Request[v16.ShardReplicationRemoveRequest]) (*connect_go.Response[v16.ShardReplicationRemoveResponse], error)
	// SleepTablet blocks the aciton queue on the specified tablet for the
	// specified duration.
	//
	// This is typically used for testing.
	SleepTablet(context.Context, *connect_go.Request[v16.SleepTabletRequest]) (*connect_go.Response[v16.SleepTabletResponse], error)
	// SourceShardAdd adds the SourceShard record with the provided index. This
	// should be used only as an emergency function.
	//
	// It does not call RefreshState for the shard primary.
	SourceShardAdd(context.Context, *connect_go.Request[v16.SourceShardAddRequest]) (*connect_go.Response[v16.SourceShardAddResponse], error)
	// SourceShardDelete deletes the SourceShard record with the provided index.
	// This should be used only as an emergency cleanup function.
	//
	// It does not call RefreshState for the shard primary.
	SourceShardDelete(context.Context, *connect_go.Request[v16.SourceShardDeleteRequest]) (*connect_go.Response[v16.SourceShardDeleteResponse], error)
	// StartReplication starts replication on the specified tablet.
	StartReplication(context.Context, *connect_go.Request[v16.StartReplicationRequest]) (*connect_go.Response[v16.StartReplicationResponse], error)
	// StopReplication stops replication on the specified tablet.
	StopReplication(context.Context, *connect_go.Request[v16.StopReplicationRequest]) (*connect_go.Response[v16.StopReplicationResponse], error)
	// TabletExternallyReparented changes metadata in the topology server to
	// acknowledge a shard primary change performed by an external tool (e.g.
	// orchestrator).
	//
	// See the Reparenting guide for more information:
	// https://vitess.io/docs/user-guides/configuration-advanced/reparenting/#external-reparenting.
	TabletExternallyReparented(context.Context, *connect_go.Request[v16.TabletExternallyReparentedRequest]) (*connect_go.Response[v16.TabletExternallyReparentedResponse], error)
	// UpdateCellInfo updates the content of a CellInfo with the provided
	// parameters. Empty values are ignored. If the cell does not exist, the
	// CellInfo will be created.
	UpdateCellInfo(context.Context, *connect_go.Request[v16.UpdateCellInfoRequest]) (*connect_go.Response[v16.UpdateCellInfoResponse], error)
	// UpdateCellsAlias updates the content of a CellsAlias with the provided
	// parameters. Empty values are ignored. If the alias does not exist, the
	// CellsAlias will be created.
	UpdateCellsAlias(context.Context, *connect_go.Request[v16.UpdateCellsAliasRequest]) (*connect_go.Response[v16.UpdateCellsAliasResponse], error)
	// Validate validates that all nodes from the global replication graph are
	// reachable, and that all tablets in discoverable cells are consistent.
	Validate(context.Context, *connect_go.Request[v16.ValidateRequest]) (*connect_go.Response[v16.ValidateResponse], error)
	// ValidateKeyspace validates that all nodes reachable from the specified
	// keyspace are consistent.
	ValidateKeyspace(context.Context, *connect_go.Request[v16.ValidateKeyspaceRequest]) (*connect_go.Response[v16.ValidateKeyspaceResponse], error)
	// ValidateSchemaKeyspace validates that the schema on the primary tablet for shard 0 matches the schema on all of the other tablets in the keyspace.
	ValidateSchemaKeyspace(context.Context, *connect_go.Request[v16.ValidateSchemaKeyspaceRequest]) (*connect_go.Response[v16.ValidateSchemaKeyspaceResponse], error)
	// ValidateShard validates that all nodes reachable from the specified shard
	// are consistent.
	ValidateShard(context.Context, *connect_go.Request[v16.ValidateShardRequest]) (*connect_go.Response[v16.ValidateShardResponse], error)
	// ValidateVersionKeyspace validates that the version on the primary of shard 0 matches all of the other tablets in the keyspace.
	ValidateVersionKeyspace(context.Context, *connect_go.Request[v16.ValidateVersionKeyspaceRequest]) (*connect_go.Response[v16.ValidateVersionKeyspaceResponse], error)
	// ValidateVersionShard validates that the version on the primary matches all of the replicas.
	ValidateVersionShard(context.Context, *connect_go.Request[v16.ValidateVersionShardRequest]) (*connect_go.Response[v16.ValidateVersionShardResponse], error)
	// ValidateVSchema compares the schema of each primary tablet in "keyspace/shards..." to the vschema and errs if there are differences.
	ValidateVSchema(context.Context, *connect_go.Request[v16.ValidateVSchemaRequest]) (*connect_go.Response[v16.ValidateVSchemaResponse], error)
}

// NewVtctldHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVtctldHandler(svc VtctldHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(VtctldAddCellInfoProcedure, connect_go.NewUnaryHandler(
		VtctldAddCellInfoProcedure,
		svc.AddCellInfo,
		opts...,
	))
	mux.Handle(VtctldAddCellsAliasProcedure, connect_go.NewUnaryHandler(
		VtctldAddCellsAliasProcedure,
		svc.AddCellsAlias,
		opts...,
	))
	mux.Handle(VtctldApplyRoutingRulesProcedure, connect_go.NewUnaryHandler(
		VtctldApplyRoutingRulesProcedure,
		svc.ApplyRoutingRules,
		opts...,
	))
	mux.Handle(VtctldApplySchemaProcedure, connect_go.NewUnaryHandler(
		VtctldApplySchemaProcedure,
		svc.ApplySchema,
		opts...,
	))
	mux.Handle(VtctldApplyShardRoutingRulesProcedure, connect_go.NewUnaryHandler(
		VtctldApplyShardRoutingRulesProcedure,
		svc.ApplyShardRoutingRules,
		opts...,
	))
	mux.Handle(VtctldApplyVSchemaProcedure, connect_go.NewUnaryHandler(
		VtctldApplyVSchemaProcedure,
		svc.ApplyVSchema,
		opts...,
	))
	mux.Handle(VtctldBackupProcedure, connect_go.NewServerStreamHandler(
		VtctldBackupProcedure,
		svc.Backup,
		opts...,
	))
	mux.Handle(VtctldBackupShardProcedure, connect_go.NewServerStreamHandler(
		VtctldBackupShardProcedure,
		svc.BackupShard,
		opts...,
	))
	mux.Handle(VtctldChangeTabletTypeProcedure, connect_go.NewUnaryHandler(
		VtctldChangeTabletTypeProcedure,
		svc.ChangeTabletType,
		opts...,
	))
	mux.Handle(VtctldCreateKeyspaceProcedure, connect_go.NewUnaryHandler(
		VtctldCreateKeyspaceProcedure,
		svc.CreateKeyspace,
		opts...,
	))
	mux.Handle(VtctldCreateShardProcedure, connect_go.NewUnaryHandler(
		VtctldCreateShardProcedure,
		svc.CreateShard,
		opts...,
	))
	mux.Handle(VtctldDeleteCellInfoProcedure, connect_go.NewUnaryHandler(
		VtctldDeleteCellInfoProcedure,
		svc.DeleteCellInfo,
		opts...,
	))
	mux.Handle(VtctldDeleteCellsAliasProcedure, connect_go.NewUnaryHandler(
		VtctldDeleteCellsAliasProcedure,
		svc.DeleteCellsAlias,
		opts...,
	))
	mux.Handle(VtctldDeleteKeyspaceProcedure, connect_go.NewUnaryHandler(
		VtctldDeleteKeyspaceProcedure,
		svc.DeleteKeyspace,
		opts...,
	))
	mux.Handle(VtctldDeleteShardsProcedure, connect_go.NewUnaryHandler(
		VtctldDeleteShardsProcedure,
		svc.DeleteShards,
		opts...,
	))
	mux.Handle(VtctldDeleteSrvVSchemaProcedure, connect_go.NewUnaryHandler(
		VtctldDeleteSrvVSchemaProcedure,
		svc.DeleteSrvVSchema,
		opts...,
	))
	mux.Handle(VtctldDeleteTabletsProcedure, connect_go.NewUnaryHandler(
		VtctldDeleteTabletsProcedure,
		svc.DeleteTablets,
		opts...,
	))
	mux.Handle(VtctldEmergencyReparentShardProcedure, connect_go.NewUnaryHandler(
		VtctldEmergencyReparentShardProcedure,
		svc.EmergencyReparentShard,
		opts...,
	))
	mux.Handle(VtctldExecuteFetchAsAppProcedure, connect_go.NewUnaryHandler(
		VtctldExecuteFetchAsAppProcedure,
		svc.ExecuteFetchAsApp,
		opts...,
	))
	mux.Handle(VtctldExecuteFetchAsDBAProcedure, connect_go.NewUnaryHandler(
		VtctldExecuteFetchAsDBAProcedure,
		svc.ExecuteFetchAsDBA,
		opts...,
	))
	mux.Handle(VtctldExecuteHookProcedure, connect_go.NewUnaryHandler(
		VtctldExecuteHookProcedure,
		svc.ExecuteHook,
		opts...,
	))
	mux.Handle(VtctldFindAllShardsInKeyspaceProcedure, connect_go.NewUnaryHandler(
		VtctldFindAllShardsInKeyspaceProcedure,
		svc.FindAllShardsInKeyspace,
		opts...,
	))
	mux.Handle(VtctldGetBackupsProcedure, connect_go.NewUnaryHandler(
		VtctldGetBackupsProcedure,
		svc.GetBackups,
		opts...,
	))
	mux.Handle(VtctldGetCellInfoProcedure, connect_go.NewUnaryHandler(
		VtctldGetCellInfoProcedure,
		svc.GetCellInfo,
		opts...,
	))
	mux.Handle(VtctldGetCellInfoNamesProcedure, connect_go.NewUnaryHandler(
		VtctldGetCellInfoNamesProcedure,
		svc.GetCellInfoNames,
		opts...,
	))
	mux.Handle(VtctldGetCellsAliasesProcedure, connect_go.NewUnaryHandler(
		VtctldGetCellsAliasesProcedure,
		svc.GetCellsAliases,
		opts...,
	))
	mux.Handle(VtctldGetFullStatusProcedure, connect_go.NewUnaryHandler(
		VtctldGetFullStatusProcedure,
		svc.GetFullStatus,
		opts...,
	))
	mux.Handle(VtctldGetKeyspaceProcedure, connect_go.NewUnaryHandler(
		VtctldGetKeyspaceProcedure,
		svc.GetKeyspace,
		opts...,
	))
	mux.Handle(VtctldGetKeyspacesProcedure, connect_go.NewUnaryHandler(
		VtctldGetKeyspacesProcedure,
		svc.GetKeyspaces,
		opts...,
	))
	mux.Handle(VtctldGetPermissionsProcedure, connect_go.NewUnaryHandler(
		VtctldGetPermissionsProcedure,
		svc.GetPermissions,
		opts...,
	))
	mux.Handle(VtctldGetRoutingRulesProcedure, connect_go.NewUnaryHandler(
		VtctldGetRoutingRulesProcedure,
		svc.GetRoutingRules,
		opts...,
	))
	mux.Handle(VtctldGetSchemaProcedure, connect_go.NewUnaryHandler(
		VtctldGetSchemaProcedure,
		svc.GetSchema,
		opts...,
	))
	mux.Handle(VtctldGetShardProcedure, connect_go.NewUnaryHandler(
		VtctldGetShardProcedure,
		svc.GetShard,
		opts...,
	))
	mux.Handle(VtctldGetShardRoutingRulesProcedure, connect_go.NewUnaryHandler(
		VtctldGetShardRoutingRulesProcedure,
		svc.GetShardRoutingRules,
		opts...,
	))
	mux.Handle(VtctldGetSrvKeyspaceNamesProcedure, connect_go.NewUnaryHandler(
		VtctldGetSrvKeyspaceNamesProcedure,
		svc.GetSrvKeyspaceNames,
		opts...,
	))
	mux.Handle(VtctldGetSrvKeyspacesProcedure, connect_go.NewUnaryHandler(
		VtctldGetSrvKeyspacesProcedure,
		svc.GetSrvKeyspaces,
		opts...,
	))
	mux.Handle(VtctldUpdateThrottlerConfigProcedure, connect_go.NewUnaryHandler(
		VtctldUpdateThrottlerConfigProcedure,
		svc.UpdateThrottlerConfig,
		opts...,
	))
	mux.Handle(VtctldGetSrvVSchemaProcedure, connect_go.NewUnaryHandler(
		VtctldGetSrvVSchemaProcedure,
		svc.GetSrvVSchema,
		opts...,
	))
	mux.Handle(VtctldGetSrvVSchemasProcedure, connect_go.NewUnaryHandler(
		VtctldGetSrvVSchemasProcedure,
		svc.GetSrvVSchemas,
		opts...,
	))
	mux.Handle(VtctldGetTabletProcedure, connect_go.NewUnaryHandler(
		VtctldGetTabletProcedure,
		svc.GetTablet,
		opts...,
	))
	mux.Handle(VtctldGetTabletsProcedure, connect_go.NewUnaryHandler(
		VtctldGetTabletsProcedure,
		svc.GetTablets,
		opts...,
	))
	mux.Handle(VtctldGetTopologyPathProcedure, connect_go.NewUnaryHandler(
		VtctldGetTopologyPathProcedure,
		svc.GetTopologyPath,
		opts...,
	))
	mux.Handle(VtctldGetVersionProcedure, connect_go.NewUnaryHandler(
		VtctldGetVersionProcedure,
		svc.GetVersion,
		opts...,
	))
	mux.Handle(VtctldGetVSchemaProcedure, connect_go.NewUnaryHandler(
		VtctldGetVSchemaProcedure,
		svc.GetVSchema,
		opts...,
	))
	mux.Handle(VtctldGetWorkflowsProcedure, connect_go.NewUnaryHandler(
		VtctldGetWorkflowsProcedure,
		svc.GetWorkflows,
		opts...,
	))
	mux.Handle(VtctldInitShardPrimaryProcedure, connect_go.NewUnaryHandler(
		VtctldInitShardPrimaryProcedure,
		svc.InitShardPrimary,
		opts...,
	))
	mux.Handle(VtctldPingTabletProcedure, connect_go.NewUnaryHandler(
		VtctldPingTabletProcedure,
		svc.PingTablet,
		opts...,
	))
	mux.Handle(VtctldPlannedReparentShardProcedure, connect_go.NewUnaryHandler(
		VtctldPlannedReparentShardProcedure,
		svc.PlannedReparentShard,
		opts...,
	))
	mux.Handle(VtctldRebuildKeyspaceGraphProcedure, connect_go.NewUnaryHandler(
		VtctldRebuildKeyspaceGraphProcedure,
		svc.RebuildKeyspaceGraph,
		opts...,
	))
	mux.Handle(VtctldRebuildVSchemaGraphProcedure, connect_go.NewUnaryHandler(
		VtctldRebuildVSchemaGraphProcedure,
		svc.RebuildVSchemaGraph,
		opts...,
	))
	mux.Handle(VtctldRefreshStateProcedure, connect_go.NewUnaryHandler(
		VtctldRefreshStateProcedure,
		svc.RefreshState,
		opts...,
	))
	mux.Handle(VtctldRefreshStateByShardProcedure, connect_go.NewUnaryHandler(
		VtctldRefreshStateByShardProcedure,
		svc.RefreshStateByShard,
		opts...,
	))
	mux.Handle(VtctldReloadSchemaProcedure, connect_go.NewUnaryHandler(
		VtctldReloadSchemaProcedure,
		svc.ReloadSchema,
		opts...,
	))
	mux.Handle(VtctldReloadSchemaKeyspaceProcedure, connect_go.NewUnaryHandler(
		VtctldReloadSchemaKeyspaceProcedure,
		svc.ReloadSchemaKeyspace,
		opts...,
	))
	mux.Handle(VtctldReloadSchemaShardProcedure, connect_go.NewUnaryHandler(
		VtctldReloadSchemaShardProcedure,
		svc.ReloadSchemaShard,
		opts...,
	))
	mux.Handle(VtctldRemoveBackupProcedure, connect_go.NewUnaryHandler(
		VtctldRemoveBackupProcedure,
		svc.RemoveBackup,
		opts...,
	))
	mux.Handle(VtctldRemoveKeyspaceCellProcedure, connect_go.NewUnaryHandler(
		VtctldRemoveKeyspaceCellProcedure,
		svc.RemoveKeyspaceCell,
		opts...,
	))
	mux.Handle(VtctldRemoveShardCellProcedure, connect_go.NewUnaryHandler(
		VtctldRemoveShardCellProcedure,
		svc.RemoveShardCell,
		opts...,
	))
	mux.Handle(VtctldReparentTabletProcedure, connect_go.NewUnaryHandler(
		VtctldReparentTabletProcedure,
		svc.ReparentTablet,
		opts...,
	))
	mux.Handle(VtctldRestoreFromBackupProcedure, connect_go.NewServerStreamHandler(
		VtctldRestoreFromBackupProcedure,
		svc.RestoreFromBackup,
		opts...,
	))
	mux.Handle(VtctldRunHealthCheckProcedure, connect_go.NewUnaryHandler(
		VtctldRunHealthCheckProcedure,
		svc.RunHealthCheck,
		opts...,
	))
	mux.Handle(VtctldSetKeyspaceDurabilityPolicyProcedure, connect_go.NewUnaryHandler(
		VtctldSetKeyspaceDurabilityPolicyProcedure,
		svc.SetKeyspaceDurabilityPolicy,
		opts...,
	))
	mux.Handle(VtctldSetShardIsPrimaryServingProcedure, connect_go.NewUnaryHandler(
		VtctldSetShardIsPrimaryServingProcedure,
		svc.SetShardIsPrimaryServing,
		opts...,
	))
	mux.Handle(VtctldSetShardTabletControlProcedure, connect_go.NewUnaryHandler(
		VtctldSetShardTabletControlProcedure,
		svc.SetShardTabletControl,
		opts...,
	))
	mux.Handle(VtctldSetWritableProcedure, connect_go.NewUnaryHandler(
		VtctldSetWritableProcedure,
		svc.SetWritable,
		opts...,
	))
	mux.Handle(VtctldShardReplicationAddProcedure, connect_go.NewUnaryHandler(
		VtctldShardReplicationAddProcedure,
		svc.ShardReplicationAdd,
		opts...,
	))
	mux.Handle(VtctldShardReplicationFixProcedure, connect_go.NewUnaryHandler(
		VtctldShardReplicationFixProcedure,
		svc.ShardReplicationFix,
		opts...,
	))
	mux.Handle(VtctldShardReplicationPositionsProcedure, connect_go.NewUnaryHandler(
		VtctldShardReplicationPositionsProcedure,
		svc.ShardReplicationPositions,
		opts...,
	))
	mux.Handle(VtctldShardReplicationRemoveProcedure, connect_go.NewUnaryHandler(
		VtctldShardReplicationRemoveProcedure,
		svc.ShardReplicationRemove,
		opts...,
	))
	mux.Handle(VtctldSleepTabletProcedure, connect_go.NewUnaryHandler(
		VtctldSleepTabletProcedure,
		svc.SleepTablet,
		opts...,
	))
	mux.Handle(VtctldSourceShardAddProcedure, connect_go.NewUnaryHandler(
		VtctldSourceShardAddProcedure,
		svc.SourceShardAdd,
		opts...,
	))
	mux.Handle(VtctldSourceShardDeleteProcedure, connect_go.NewUnaryHandler(
		VtctldSourceShardDeleteProcedure,
		svc.SourceShardDelete,
		opts...,
	))
	mux.Handle(VtctldStartReplicationProcedure, connect_go.NewUnaryHandler(
		VtctldStartReplicationProcedure,
		svc.StartReplication,
		opts...,
	))
	mux.Handle(VtctldStopReplicationProcedure, connect_go.NewUnaryHandler(
		VtctldStopReplicationProcedure,
		svc.StopReplication,
		opts...,
	))
	mux.Handle(VtctldTabletExternallyReparentedProcedure, connect_go.NewUnaryHandler(
		VtctldTabletExternallyReparentedProcedure,
		svc.TabletExternallyReparented,
		opts...,
	))
	mux.Handle(VtctldUpdateCellInfoProcedure, connect_go.NewUnaryHandler(
		VtctldUpdateCellInfoProcedure,
		svc.UpdateCellInfo,
		opts...,
	))
	mux.Handle(VtctldUpdateCellsAliasProcedure, connect_go.NewUnaryHandler(
		VtctldUpdateCellsAliasProcedure,
		svc.UpdateCellsAlias,
		opts...,
	))
	mux.Handle(VtctldValidateProcedure, connect_go.NewUnaryHandler(
		VtctldValidateProcedure,
		svc.Validate,
		opts...,
	))
	mux.Handle(VtctldValidateKeyspaceProcedure, connect_go.NewUnaryHandler(
		VtctldValidateKeyspaceProcedure,
		svc.ValidateKeyspace,
		opts...,
	))
	mux.Handle(VtctldValidateSchemaKeyspaceProcedure, connect_go.NewUnaryHandler(
		VtctldValidateSchemaKeyspaceProcedure,
		svc.ValidateSchemaKeyspace,
		opts...,
	))
	mux.Handle(VtctldValidateShardProcedure, connect_go.NewUnaryHandler(
		VtctldValidateShardProcedure,
		svc.ValidateShard,
		opts...,
	))
	mux.Handle(VtctldValidateVersionKeyspaceProcedure, connect_go.NewUnaryHandler(
		VtctldValidateVersionKeyspaceProcedure,
		svc.ValidateVersionKeyspace,
		opts...,
	))
	mux.Handle(VtctldValidateVersionShardProcedure, connect_go.NewUnaryHandler(
		VtctldValidateVersionShardProcedure,
		svc.ValidateVersionShard,
		opts...,
	))
	mux.Handle(VtctldValidateVSchemaProcedure, connect_go.NewUnaryHandler(
		VtctldValidateVSchemaProcedure,
		svc.ValidateVSchema,
		opts...,
	))
	return "/vitess.vtctlservice.v16.Vtctld/", mux
}

// UnimplementedVtctldHandler returns CodeUnimplemented from all methods.
type UnimplementedVtctldHandler struct{}

func (UnimplementedVtctldHandler) AddCellInfo(context.Context, *connect_go.Request[v16.AddCellInfoRequest]) (*connect_go.Response[v16.AddCellInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.AddCellInfo is not implemented"))
}

func (UnimplementedVtctldHandler) AddCellsAlias(context.Context, *connect_go.Request[v16.AddCellsAliasRequest]) (*connect_go.Response[v16.AddCellsAliasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.AddCellsAlias is not implemented"))
}

func (UnimplementedVtctldHandler) ApplyRoutingRules(context.Context, *connect_go.Request[v16.ApplyRoutingRulesRequest]) (*connect_go.Response[v16.ApplyRoutingRulesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ApplyRoutingRules is not implemented"))
}

func (UnimplementedVtctldHandler) ApplySchema(context.Context, *connect_go.Request[v16.ApplySchemaRequest]) (*connect_go.Response[v16.ApplySchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ApplySchema is not implemented"))
}

func (UnimplementedVtctldHandler) ApplyShardRoutingRules(context.Context, *connect_go.Request[v16.ApplyShardRoutingRulesRequest]) (*connect_go.Response[v16.ApplyShardRoutingRulesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ApplyShardRoutingRules is not implemented"))
}

func (UnimplementedVtctldHandler) ApplyVSchema(context.Context, *connect_go.Request[v16.ApplyVSchemaRequest]) (*connect_go.Response[v16.ApplyVSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ApplyVSchema is not implemented"))
}

func (UnimplementedVtctldHandler) Backup(context.Context, *connect_go.Request[v16.BackupRequest], *connect_go.ServerStream[v16.BackupResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.Backup is not implemented"))
}

func (UnimplementedVtctldHandler) BackupShard(context.Context, *connect_go.Request[v16.BackupShardRequest], *connect_go.ServerStream[v16.BackupResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.BackupShard is not implemented"))
}

func (UnimplementedVtctldHandler) ChangeTabletType(context.Context, *connect_go.Request[v16.ChangeTabletTypeRequest]) (*connect_go.Response[v16.ChangeTabletTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ChangeTabletType is not implemented"))
}

func (UnimplementedVtctldHandler) CreateKeyspace(context.Context, *connect_go.Request[v16.CreateKeyspaceRequest]) (*connect_go.Response[v16.CreateKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.CreateKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) CreateShard(context.Context, *connect_go.Request[v16.CreateShardRequest]) (*connect_go.Response[v16.CreateShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.CreateShard is not implemented"))
}

func (UnimplementedVtctldHandler) DeleteCellInfo(context.Context, *connect_go.Request[v16.DeleteCellInfoRequest]) (*connect_go.Response[v16.DeleteCellInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.DeleteCellInfo is not implemented"))
}

func (UnimplementedVtctldHandler) DeleteCellsAlias(context.Context, *connect_go.Request[v16.DeleteCellsAliasRequest]) (*connect_go.Response[v16.DeleteCellsAliasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.DeleteCellsAlias is not implemented"))
}

func (UnimplementedVtctldHandler) DeleteKeyspace(context.Context, *connect_go.Request[v16.DeleteKeyspaceRequest]) (*connect_go.Response[v16.DeleteKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.DeleteKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) DeleteShards(context.Context, *connect_go.Request[v16.DeleteShardsRequest]) (*connect_go.Response[v16.DeleteShardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.DeleteShards is not implemented"))
}

func (UnimplementedVtctldHandler) DeleteSrvVSchema(context.Context, *connect_go.Request[v16.DeleteSrvVSchemaRequest]) (*connect_go.Response[v16.DeleteSrvVSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.DeleteSrvVSchema is not implemented"))
}

func (UnimplementedVtctldHandler) DeleteTablets(context.Context, *connect_go.Request[v16.DeleteTabletsRequest]) (*connect_go.Response[v16.DeleteTabletsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.DeleteTablets is not implemented"))
}

func (UnimplementedVtctldHandler) EmergencyReparentShard(context.Context, *connect_go.Request[v16.EmergencyReparentShardRequest]) (*connect_go.Response[v16.EmergencyReparentShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.EmergencyReparentShard is not implemented"))
}

func (UnimplementedVtctldHandler) ExecuteFetchAsApp(context.Context, *connect_go.Request[v16.ExecuteFetchAsAppRequest]) (*connect_go.Response[v16.ExecuteFetchAsAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ExecuteFetchAsApp is not implemented"))
}

func (UnimplementedVtctldHandler) ExecuteFetchAsDBA(context.Context, *connect_go.Request[v16.ExecuteFetchAsDBARequest]) (*connect_go.Response[v16.ExecuteFetchAsDBAResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ExecuteFetchAsDBA is not implemented"))
}

func (UnimplementedVtctldHandler) ExecuteHook(context.Context, *connect_go.Request[v16.ExecuteHookRequest]) (*connect_go.Response[v16.ExecuteHookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ExecuteHook is not implemented"))
}

func (UnimplementedVtctldHandler) FindAllShardsInKeyspace(context.Context, *connect_go.Request[v16.FindAllShardsInKeyspaceRequest]) (*connect_go.Response[v16.FindAllShardsInKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.FindAllShardsInKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) GetBackups(context.Context, *connect_go.Request[v16.GetBackupsRequest]) (*connect_go.Response[v16.GetBackupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetBackups is not implemented"))
}

func (UnimplementedVtctldHandler) GetCellInfo(context.Context, *connect_go.Request[v16.GetCellInfoRequest]) (*connect_go.Response[v16.GetCellInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetCellInfo is not implemented"))
}

func (UnimplementedVtctldHandler) GetCellInfoNames(context.Context, *connect_go.Request[v16.GetCellInfoNamesRequest]) (*connect_go.Response[v16.GetCellInfoNamesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetCellInfoNames is not implemented"))
}

func (UnimplementedVtctldHandler) GetCellsAliases(context.Context, *connect_go.Request[v16.GetCellsAliasesRequest]) (*connect_go.Response[v16.GetCellsAliasesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetCellsAliases is not implemented"))
}

func (UnimplementedVtctldHandler) GetFullStatus(context.Context, *connect_go.Request[v16.GetFullStatusRequest]) (*connect_go.Response[v16.GetFullStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetFullStatus is not implemented"))
}

func (UnimplementedVtctldHandler) GetKeyspace(context.Context, *connect_go.Request[v16.GetKeyspaceRequest]) (*connect_go.Response[v16.GetKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) GetKeyspaces(context.Context, *connect_go.Request[v16.GetKeyspacesRequest]) (*connect_go.Response[v16.GetKeyspacesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetKeyspaces is not implemented"))
}

func (UnimplementedVtctldHandler) GetPermissions(context.Context, *connect_go.Request[v16.GetPermissionsRequest]) (*connect_go.Response[v16.GetPermissionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetPermissions is not implemented"))
}

func (UnimplementedVtctldHandler) GetRoutingRules(context.Context, *connect_go.Request[v16.GetRoutingRulesRequest]) (*connect_go.Response[v16.GetRoutingRulesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetRoutingRules is not implemented"))
}

func (UnimplementedVtctldHandler) GetSchema(context.Context, *connect_go.Request[v16.GetSchemaRequest]) (*connect_go.Response[v16.GetSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetSchema is not implemented"))
}

func (UnimplementedVtctldHandler) GetShard(context.Context, *connect_go.Request[v16.GetShardRequest]) (*connect_go.Response[v16.GetShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetShard is not implemented"))
}

func (UnimplementedVtctldHandler) GetShardRoutingRules(context.Context, *connect_go.Request[v16.GetShardRoutingRulesRequest]) (*connect_go.Response[v16.GetShardRoutingRulesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetShardRoutingRules is not implemented"))
}

func (UnimplementedVtctldHandler) GetSrvKeyspaceNames(context.Context, *connect_go.Request[v16.GetSrvKeyspaceNamesRequest]) (*connect_go.Response[v16.GetSrvKeyspaceNamesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetSrvKeyspaceNames is not implemented"))
}

func (UnimplementedVtctldHandler) GetSrvKeyspaces(context.Context, *connect_go.Request[v16.GetSrvKeyspacesRequest]) (*connect_go.Response[v16.GetSrvKeyspacesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetSrvKeyspaces is not implemented"))
}

func (UnimplementedVtctldHandler) UpdateThrottlerConfig(context.Context, *connect_go.Request[v16.UpdateThrottlerConfigRequest]) (*connect_go.Response[v16.UpdateThrottlerConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.UpdateThrottlerConfig is not implemented"))
}

func (UnimplementedVtctldHandler) GetSrvVSchema(context.Context, *connect_go.Request[v16.GetSrvVSchemaRequest]) (*connect_go.Response[v16.GetSrvVSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetSrvVSchema is not implemented"))
}

func (UnimplementedVtctldHandler) GetSrvVSchemas(context.Context, *connect_go.Request[v16.GetSrvVSchemasRequest]) (*connect_go.Response[v16.GetSrvVSchemasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetSrvVSchemas is not implemented"))
}

func (UnimplementedVtctldHandler) GetTablet(context.Context, *connect_go.Request[v16.GetTabletRequest]) (*connect_go.Response[v16.GetTabletResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetTablet is not implemented"))
}

func (UnimplementedVtctldHandler) GetTablets(context.Context, *connect_go.Request[v16.GetTabletsRequest]) (*connect_go.Response[v16.GetTabletsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetTablets is not implemented"))
}

func (UnimplementedVtctldHandler) GetTopologyPath(context.Context, *connect_go.Request[v16.GetTopologyPathRequest]) (*connect_go.Response[v16.GetTopologyPathResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetTopologyPath is not implemented"))
}

func (UnimplementedVtctldHandler) GetVersion(context.Context, *connect_go.Request[v16.GetVersionRequest]) (*connect_go.Response[v16.GetVersionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetVersion is not implemented"))
}

func (UnimplementedVtctldHandler) GetVSchema(context.Context, *connect_go.Request[v16.GetVSchemaRequest]) (*connect_go.Response[v16.GetVSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetVSchema is not implemented"))
}

func (UnimplementedVtctldHandler) GetWorkflows(context.Context, *connect_go.Request[v16.GetWorkflowsRequest]) (*connect_go.Response[v16.GetWorkflowsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.GetWorkflows is not implemented"))
}

func (UnimplementedVtctldHandler) InitShardPrimary(context.Context, *connect_go.Request[v16.InitShardPrimaryRequest]) (*connect_go.Response[v16.InitShardPrimaryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.InitShardPrimary is not implemented"))
}

func (UnimplementedVtctldHandler) PingTablet(context.Context, *connect_go.Request[v16.PingTabletRequest]) (*connect_go.Response[v16.PingTabletResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.PingTablet is not implemented"))
}

func (UnimplementedVtctldHandler) PlannedReparentShard(context.Context, *connect_go.Request[v16.PlannedReparentShardRequest]) (*connect_go.Response[v16.PlannedReparentShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.PlannedReparentShard is not implemented"))
}

func (UnimplementedVtctldHandler) RebuildKeyspaceGraph(context.Context, *connect_go.Request[v16.RebuildKeyspaceGraphRequest]) (*connect_go.Response[v16.RebuildKeyspaceGraphResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.RebuildKeyspaceGraph is not implemented"))
}

func (UnimplementedVtctldHandler) RebuildVSchemaGraph(context.Context, *connect_go.Request[v16.RebuildVSchemaGraphRequest]) (*connect_go.Response[v16.RebuildVSchemaGraphResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.RebuildVSchemaGraph is not implemented"))
}

func (UnimplementedVtctldHandler) RefreshState(context.Context, *connect_go.Request[v16.RefreshStateRequest]) (*connect_go.Response[v16.RefreshStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.RefreshState is not implemented"))
}

func (UnimplementedVtctldHandler) RefreshStateByShard(context.Context, *connect_go.Request[v16.RefreshStateByShardRequest]) (*connect_go.Response[v16.RefreshStateByShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.RefreshStateByShard is not implemented"))
}

func (UnimplementedVtctldHandler) ReloadSchema(context.Context, *connect_go.Request[v16.ReloadSchemaRequest]) (*connect_go.Response[v16.ReloadSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ReloadSchema is not implemented"))
}

func (UnimplementedVtctldHandler) ReloadSchemaKeyspace(context.Context, *connect_go.Request[v16.ReloadSchemaKeyspaceRequest]) (*connect_go.Response[v16.ReloadSchemaKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ReloadSchemaKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) ReloadSchemaShard(context.Context, *connect_go.Request[v16.ReloadSchemaShardRequest]) (*connect_go.Response[v16.ReloadSchemaShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ReloadSchemaShard is not implemented"))
}

func (UnimplementedVtctldHandler) RemoveBackup(context.Context, *connect_go.Request[v16.RemoveBackupRequest]) (*connect_go.Response[v16.RemoveBackupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.RemoveBackup is not implemented"))
}

func (UnimplementedVtctldHandler) RemoveKeyspaceCell(context.Context, *connect_go.Request[v16.RemoveKeyspaceCellRequest]) (*connect_go.Response[v16.RemoveKeyspaceCellResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.RemoveKeyspaceCell is not implemented"))
}

func (UnimplementedVtctldHandler) RemoveShardCell(context.Context, *connect_go.Request[v16.RemoveShardCellRequest]) (*connect_go.Response[v16.RemoveShardCellResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.RemoveShardCell is not implemented"))
}

func (UnimplementedVtctldHandler) ReparentTablet(context.Context, *connect_go.Request[v16.ReparentTabletRequest]) (*connect_go.Response[v16.ReparentTabletResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ReparentTablet is not implemented"))
}

func (UnimplementedVtctldHandler) RestoreFromBackup(context.Context, *connect_go.Request[v16.RestoreFromBackupRequest], *connect_go.ServerStream[v16.RestoreFromBackupResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.RestoreFromBackup is not implemented"))
}

func (UnimplementedVtctldHandler) RunHealthCheck(context.Context, *connect_go.Request[v16.RunHealthCheckRequest]) (*connect_go.Response[v16.RunHealthCheckResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.RunHealthCheck is not implemented"))
}

func (UnimplementedVtctldHandler) SetKeyspaceDurabilityPolicy(context.Context, *connect_go.Request[v16.SetKeyspaceDurabilityPolicyRequest]) (*connect_go.Response[v16.SetKeyspaceDurabilityPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.SetKeyspaceDurabilityPolicy is not implemented"))
}

func (UnimplementedVtctldHandler) SetShardIsPrimaryServing(context.Context, *connect_go.Request[v16.SetShardIsPrimaryServingRequest]) (*connect_go.Response[v16.SetShardIsPrimaryServingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.SetShardIsPrimaryServing is not implemented"))
}

func (UnimplementedVtctldHandler) SetShardTabletControl(context.Context, *connect_go.Request[v16.SetShardTabletControlRequest]) (*connect_go.Response[v16.SetShardTabletControlResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.SetShardTabletControl is not implemented"))
}

func (UnimplementedVtctldHandler) SetWritable(context.Context, *connect_go.Request[v16.SetWritableRequest]) (*connect_go.Response[v16.SetWritableResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.SetWritable is not implemented"))
}

func (UnimplementedVtctldHandler) ShardReplicationAdd(context.Context, *connect_go.Request[v16.ShardReplicationAddRequest]) (*connect_go.Response[v16.ShardReplicationAddResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ShardReplicationAdd is not implemented"))
}

func (UnimplementedVtctldHandler) ShardReplicationFix(context.Context, *connect_go.Request[v16.ShardReplicationFixRequest]) (*connect_go.Response[v16.ShardReplicationFixResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ShardReplicationFix is not implemented"))
}

func (UnimplementedVtctldHandler) ShardReplicationPositions(context.Context, *connect_go.Request[v16.ShardReplicationPositionsRequest]) (*connect_go.Response[v16.ShardReplicationPositionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ShardReplicationPositions is not implemented"))
}

func (UnimplementedVtctldHandler) ShardReplicationRemove(context.Context, *connect_go.Request[v16.ShardReplicationRemoveRequest]) (*connect_go.Response[v16.ShardReplicationRemoveResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ShardReplicationRemove is not implemented"))
}

func (UnimplementedVtctldHandler) SleepTablet(context.Context, *connect_go.Request[v16.SleepTabletRequest]) (*connect_go.Response[v16.SleepTabletResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.SleepTablet is not implemented"))
}

func (UnimplementedVtctldHandler) SourceShardAdd(context.Context, *connect_go.Request[v16.SourceShardAddRequest]) (*connect_go.Response[v16.SourceShardAddResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.SourceShardAdd is not implemented"))
}

func (UnimplementedVtctldHandler) SourceShardDelete(context.Context, *connect_go.Request[v16.SourceShardDeleteRequest]) (*connect_go.Response[v16.SourceShardDeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.SourceShardDelete is not implemented"))
}

func (UnimplementedVtctldHandler) StartReplication(context.Context, *connect_go.Request[v16.StartReplicationRequest]) (*connect_go.Response[v16.StartReplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.StartReplication is not implemented"))
}

func (UnimplementedVtctldHandler) StopReplication(context.Context, *connect_go.Request[v16.StopReplicationRequest]) (*connect_go.Response[v16.StopReplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.StopReplication is not implemented"))
}

func (UnimplementedVtctldHandler) TabletExternallyReparented(context.Context, *connect_go.Request[v16.TabletExternallyReparentedRequest]) (*connect_go.Response[v16.TabletExternallyReparentedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.TabletExternallyReparented is not implemented"))
}

func (UnimplementedVtctldHandler) UpdateCellInfo(context.Context, *connect_go.Request[v16.UpdateCellInfoRequest]) (*connect_go.Response[v16.UpdateCellInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.UpdateCellInfo is not implemented"))
}

func (UnimplementedVtctldHandler) UpdateCellsAlias(context.Context, *connect_go.Request[v16.UpdateCellsAliasRequest]) (*connect_go.Response[v16.UpdateCellsAliasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.UpdateCellsAlias is not implemented"))
}

func (UnimplementedVtctldHandler) Validate(context.Context, *connect_go.Request[v16.ValidateRequest]) (*connect_go.Response[v16.ValidateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.Validate is not implemented"))
}

func (UnimplementedVtctldHandler) ValidateKeyspace(context.Context, *connect_go.Request[v16.ValidateKeyspaceRequest]) (*connect_go.Response[v16.ValidateKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ValidateKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) ValidateSchemaKeyspace(context.Context, *connect_go.Request[v16.ValidateSchemaKeyspaceRequest]) (*connect_go.Response[v16.ValidateSchemaKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ValidateSchemaKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) ValidateShard(context.Context, *connect_go.Request[v16.ValidateShardRequest]) (*connect_go.Response[v16.ValidateShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ValidateShard is not implemented"))
}

func (UnimplementedVtctldHandler) ValidateVersionKeyspace(context.Context, *connect_go.Request[v16.ValidateVersionKeyspaceRequest]) (*connect_go.Response[v16.ValidateVersionKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ValidateVersionKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) ValidateVersionShard(context.Context, *connect_go.Request[v16.ValidateVersionShardRequest]) (*connect_go.Response[v16.ValidateVersionShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ValidateVersionShard is not implemented"))
}

func (UnimplementedVtctldHandler) ValidateVSchema(context.Context, *connect_go.Request[v16.ValidateVSchemaRequest]) (*connect_go.Response[v16.ValidateVSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.vtctlservice.v16.Vtctld.ValidateVSchema is not implemented"))
}
