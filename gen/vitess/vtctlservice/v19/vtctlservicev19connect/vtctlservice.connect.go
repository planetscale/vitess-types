//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
// This package contains a service allowing you to use vtctld as a
// proxy for vt commands.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vitess/vtctlservice/v19/vtctlservice.proto

package vtctlservicev19connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v19 "github.com/planetscale/vitess-types/gen/vitess/vtctldata/v19"
	v191 "github.com/planetscale/vitess-types/gen/vitess/vtctlservice/v19"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VtctlName is the fully-qualified name of the Vtctl service.
	VtctlName = "vtctlservice.Vtctl"
	// VtctldName is the fully-qualified name of the Vtctld service.
	VtctldName = "vtctlservice.Vtctld"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VtctlExecuteVtctlCommandProcedure is the fully-qualified name of the Vtctl's ExecuteVtctlCommand
	// RPC.
	VtctlExecuteVtctlCommandProcedure = "/vtctlservice.Vtctl/ExecuteVtctlCommand"
	// VtctldAddCellInfoProcedure is the fully-qualified name of the Vtctld's AddCellInfo RPC.
	VtctldAddCellInfoProcedure = "/vtctlservice.Vtctld/AddCellInfo"
	// VtctldAddCellsAliasProcedure is the fully-qualified name of the Vtctld's AddCellsAlias RPC.
	VtctldAddCellsAliasProcedure = "/vtctlservice.Vtctld/AddCellsAlias"
	// VtctldApplyRoutingRulesProcedure is the fully-qualified name of the Vtctld's ApplyRoutingRules
	// RPC.
	VtctldApplyRoutingRulesProcedure = "/vtctlservice.Vtctld/ApplyRoutingRules"
	// VtctldApplySchemaProcedure is the fully-qualified name of the Vtctld's ApplySchema RPC.
	VtctldApplySchemaProcedure = "/vtctlservice.Vtctld/ApplySchema"
	// VtctldApplyShardRoutingRulesProcedure is the fully-qualified name of the Vtctld's
	// ApplyShardRoutingRules RPC.
	VtctldApplyShardRoutingRulesProcedure = "/vtctlservice.Vtctld/ApplyShardRoutingRules"
	// VtctldApplyVSchemaProcedure is the fully-qualified name of the Vtctld's ApplyVSchema RPC.
	VtctldApplyVSchemaProcedure = "/vtctlservice.Vtctld/ApplyVSchema"
	// VtctldBackupProcedure is the fully-qualified name of the Vtctld's Backup RPC.
	VtctldBackupProcedure = "/vtctlservice.Vtctld/Backup"
	// VtctldBackupShardProcedure is the fully-qualified name of the Vtctld's BackupShard RPC.
	VtctldBackupShardProcedure = "/vtctlservice.Vtctld/BackupShard"
	// VtctldCancelSchemaMigrationProcedure is the fully-qualified name of the Vtctld's
	// CancelSchemaMigration RPC.
	VtctldCancelSchemaMigrationProcedure = "/vtctlservice.Vtctld/CancelSchemaMigration"
	// VtctldChangeTabletTypeProcedure is the fully-qualified name of the Vtctld's ChangeTabletType RPC.
	VtctldChangeTabletTypeProcedure = "/vtctlservice.Vtctld/ChangeTabletType"
	// VtctldCleanupSchemaMigrationProcedure is the fully-qualified name of the Vtctld's
	// CleanupSchemaMigration RPC.
	VtctldCleanupSchemaMigrationProcedure = "/vtctlservice.Vtctld/CleanupSchemaMigration"
	// VtctldCompleteSchemaMigrationProcedure is the fully-qualified name of the Vtctld's
	// CompleteSchemaMigration RPC.
	VtctldCompleteSchemaMigrationProcedure = "/vtctlservice.Vtctld/CompleteSchemaMigration"
	// VtctldCreateKeyspaceProcedure is the fully-qualified name of the Vtctld's CreateKeyspace RPC.
	VtctldCreateKeyspaceProcedure = "/vtctlservice.Vtctld/CreateKeyspace"
	// VtctldCreateShardProcedure is the fully-qualified name of the Vtctld's CreateShard RPC.
	VtctldCreateShardProcedure = "/vtctlservice.Vtctld/CreateShard"
	// VtctldDeleteCellInfoProcedure is the fully-qualified name of the Vtctld's DeleteCellInfo RPC.
	VtctldDeleteCellInfoProcedure = "/vtctlservice.Vtctld/DeleteCellInfo"
	// VtctldDeleteCellsAliasProcedure is the fully-qualified name of the Vtctld's DeleteCellsAlias RPC.
	VtctldDeleteCellsAliasProcedure = "/vtctlservice.Vtctld/DeleteCellsAlias"
	// VtctldDeleteKeyspaceProcedure is the fully-qualified name of the Vtctld's DeleteKeyspace RPC.
	VtctldDeleteKeyspaceProcedure = "/vtctlservice.Vtctld/DeleteKeyspace"
	// VtctldDeleteShardsProcedure is the fully-qualified name of the Vtctld's DeleteShards RPC.
	VtctldDeleteShardsProcedure = "/vtctlservice.Vtctld/DeleteShards"
	// VtctldDeleteSrvVSchemaProcedure is the fully-qualified name of the Vtctld's DeleteSrvVSchema RPC.
	VtctldDeleteSrvVSchemaProcedure = "/vtctlservice.Vtctld/DeleteSrvVSchema"
	// VtctldDeleteTabletsProcedure is the fully-qualified name of the Vtctld's DeleteTablets RPC.
	VtctldDeleteTabletsProcedure = "/vtctlservice.Vtctld/DeleteTablets"
	// VtctldEmergencyReparentShardProcedure is the fully-qualified name of the Vtctld's
	// EmergencyReparentShard RPC.
	VtctldEmergencyReparentShardProcedure = "/vtctlservice.Vtctld/EmergencyReparentShard"
	// VtctldExecuteFetchAsAppProcedure is the fully-qualified name of the Vtctld's ExecuteFetchAsApp
	// RPC.
	VtctldExecuteFetchAsAppProcedure = "/vtctlservice.Vtctld/ExecuteFetchAsApp"
	// VtctldExecuteFetchAsDBAProcedure is the fully-qualified name of the Vtctld's ExecuteFetchAsDBA
	// RPC.
	VtctldExecuteFetchAsDBAProcedure = "/vtctlservice.Vtctld/ExecuteFetchAsDBA"
	// VtctldExecuteHookProcedure is the fully-qualified name of the Vtctld's ExecuteHook RPC.
	VtctldExecuteHookProcedure = "/vtctlservice.Vtctld/ExecuteHook"
	// VtctldFindAllShardsInKeyspaceProcedure is the fully-qualified name of the Vtctld's
	// FindAllShardsInKeyspace RPC.
	VtctldFindAllShardsInKeyspaceProcedure = "/vtctlservice.Vtctld/FindAllShardsInKeyspace"
	// VtctldForceCutOverSchemaMigrationProcedure is the fully-qualified name of the Vtctld's
	// ForceCutOverSchemaMigration RPC.
	VtctldForceCutOverSchemaMigrationProcedure = "/vtctlservice.Vtctld/ForceCutOverSchemaMigration"
	// VtctldGetBackupsProcedure is the fully-qualified name of the Vtctld's GetBackups RPC.
	VtctldGetBackupsProcedure = "/vtctlservice.Vtctld/GetBackups"
	// VtctldGetCellInfoProcedure is the fully-qualified name of the Vtctld's GetCellInfo RPC.
	VtctldGetCellInfoProcedure = "/vtctlservice.Vtctld/GetCellInfo"
	// VtctldGetCellInfoNamesProcedure is the fully-qualified name of the Vtctld's GetCellInfoNames RPC.
	VtctldGetCellInfoNamesProcedure = "/vtctlservice.Vtctld/GetCellInfoNames"
	// VtctldGetCellsAliasesProcedure is the fully-qualified name of the Vtctld's GetCellsAliases RPC.
	VtctldGetCellsAliasesProcedure = "/vtctlservice.Vtctld/GetCellsAliases"
	// VtctldGetFullStatusProcedure is the fully-qualified name of the Vtctld's GetFullStatus RPC.
	VtctldGetFullStatusProcedure = "/vtctlservice.Vtctld/GetFullStatus"
	// VtctldGetKeyspaceProcedure is the fully-qualified name of the Vtctld's GetKeyspace RPC.
	VtctldGetKeyspaceProcedure = "/vtctlservice.Vtctld/GetKeyspace"
	// VtctldGetKeyspacesProcedure is the fully-qualified name of the Vtctld's GetKeyspaces RPC.
	VtctldGetKeyspacesProcedure = "/vtctlservice.Vtctld/GetKeyspaces"
	// VtctldGetPermissionsProcedure is the fully-qualified name of the Vtctld's GetPermissions RPC.
	VtctldGetPermissionsProcedure = "/vtctlservice.Vtctld/GetPermissions"
	// VtctldGetRoutingRulesProcedure is the fully-qualified name of the Vtctld's GetRoutingRules RPC.
	VtctldGetRoutingRulesProcedure = "/vtctlservice.Vtctld/GetRoutingRules"
	// VtctldGetSchemaProcedure is the fully-qualified name of the Vtctld's GetSchema RPC.
	VtctldGetSchemaProcedure = "/vtctlservice.Vtctld/GetSchema"
	// VtctldGetSchemaMigrationsProcedure is the fully-qualified name of the Vtctld's
	// GetSchemaMigrations RPC.
	VtctldGetSchemaMigrationsProcedure = "/vtctlservice.Vtctld/GetSchemaMigrations"
	// VtctldGetShardReplicationProcedure is the fully-qualified name of the Vtctld's
	// GetShardReplication RPC.
	VtctldGetShardReplicationProcedure = "/vtctlservice.Vtctld/GetShardReplication"
	// VtctldGetShardProcedure is the fully-qualified name of the Vtctld's GetShard RPC.
	VtctldGetShardProcedure = "/vtctlservice.Vtctld/GetShard"
	// VtctldGetShardRoutingRulesProcedure is the fully-qualified name of the Vtctld's
	// GetShardRoutingRules RPC.
	VtctldGetShardRoutingRulesProcedure = "/vtctlservice.Vtctld/GetShardRoutingRules"
	// VtctldGetSrvKeyspaceNamesProcedure is the fully-qualified name of the Vtctld's
	// GetSrvKeyspaceNames RPC.
	VtctldGetSrvKeyspaceNamesProcedure = "/vtctlservice.Vtctld/GetSrvKeyspaceNames"
	// VtctldGetSrvKeyspacesProcedure is the fully-qualified name of the Vtctld's GetSrvKeyspaces RPC.
	VtctldGetSrvKeyspacesProcedure = "/vtctlservice.Vtctld/GetSrvKeyspaces"
	// VtctldUpdateThrottlerConfigProcedure is the fully-qualified name of the Vtctld's
	// UpdateThrottlerConfig RPC.
	VtctldUpdateThrottlerConfigProcedure = "/vtctlservice.Vtctld/UpdateThrottlerConfig"
	// VtctldGetSrvVSchemaProcedure is the fully-qualified name of the Vtctld's GetSrvVSchema RPC.
	VtctldGetSrvVSchemaProcedure = "/vtctlservice.Vtctld/GetSrvVSchema"
	// VtctldGetSrvVSchemasProcedure is the fully-qualified name of the Vtctld's GetSrvVSchemas RPC.
	VtctldGetSrvVSchemasProcedure = "/vtctlservice.Vtctld/GetSrvVSchemas"
	// VtctldGetTabletProcedure is the fully-qualified name of the Vtctld's GetTablet RPC.
	VtctldGetTabletProcedure = "/vtctlservice.Vtctld/GetTablet"
	// VtctldGetTabletsProcedure is the fully-qualified name of the Vtctld's GetTablets RPC.
	VtctldGetTabletsProcedure = "/vtctlservice.Vtctld/GetTablets"
	// VtctldGetTopologyPathProcedure is the fully-qualified name of the Vtctld's GetTopologyPath RPC.
	VtctldGetTopologyPathProcedure = "/vtctlservice.Vtctld/GetTopologyPath"
	// VtctldGetVersionProcedure is the fully-qualified name of the Vtctld's GetVersion RPC.
	VtctldGetVersionProcedure = "/vtctlservice.Vtctld/GetVersion"
	// VtctldGetVSchemaProcedure is the fully-qualified name of the Vtctld's GetVSchema RPC.
	VtctldGetVSchemaProcedure = "/vtctlservice.Vtctld/GetVSchema"
	// VtctldGetWorkflowsProcedure is the fully-qualified name of the Vtctld's GetWorkflows RPC.
	VtctldGetWorkflowsProcedure = "/vtctlservice.Vtctld/GetWorkflows"
	// VtctldInitShardPrimaryProcedure is the fully-qualified name of the Vtctld's InitShardPrimary RPC.
	VtctldInitShardPrimaryProcedure = "/vtctlservice.Vtctld/InitShardPrimary"
	// VtctldLaunchSchemaMigrationProcedure is the fully-qualified name of the Vtctld's
	// LaunchSchemaMigration RPC.
	VtctldLaunchSchemaMigrationProcedure = "/vtctlservice.Vtctld/LaunchSchemaMigration"
	// VtctldLookupVindexCreateProcedure is the fully-qualified name of the Vtctld's LookupVindexCreate
	// RPC.
	VtctldLookupVindexCreateProcedure = "/vtctlservice.Vtctld/LookupVindexCreate"
	// VtctldLookupVindexExternalizeProcedure is the fully-qualified name of the Vtctld's
	// LookupVindexExternalize RPC.
	VtctldLookupVindexExternalizeProcedure = "/vtctlservice.Vtctld/LookupVindexExternalize"
	// VtctldMaterializeCreateProcedure is the fully-qualified name of the Vtctld's MaterializeCreate
	// RPC.
	VtctldMaterializeCreateProcedure = "/vtctlservice.Vtctld/MaterializeCreate"
	// VtctldMigrateCreateProcedure is the fully-qualified name of the Vtctld's MigrateCreate RPC.
	VtctldMigrateCreateProcedure = "/vtctlservice.Vtctld/MigrateCreate"
	// VtctldMountRegisterProcedure is the fully-qualified name of the Vtctld's MountRegister RPC.
	VtctldMountRegisterProcedure = "/vtctlservice.Vtctld/MountRegister"
	// VtctldMountUnregisterProcedure is the fully-qualified name of the Vtctld's MountUnregister RPC.
	VtctldMountUnregisterProcedure = "/vtctlservice.Vtctld/MountUnregister"
	// VtctldMountShowProcedure is the fully-qualified name of the Vtctld's MountShow RPC.
	VtctldMountShowProcedure = "/vtctlservice.Vtctld/MountShow"
	// VtctldMountListProcedure is the fully-qualified name of the Vtctld's MountList RPC.
	VtctldMountListProcedure = "/vtctlservice.Vtctld/MountList"
	// VtctldMoveTablesCreateProcedure is the fully-qualified name of the Vtctld's MoveTablesCreate RPC.
	VtctldMoveTablesCreateProcedure = "/vtctlservice.Vtctld/MoveTablesCreate"
	// VtctldMoveTablesCompleteProcedure is the fully-qualified name of the Vtctld's MoveTablesComplete
	// RPC.
	VtctldMoveTablesCompleteProcedure = "/vtctlservice.Vtctld/MoveTablesComplete"
	// VtctldPingTabletProcedure is the fully-qualified name of the Vtctld's PingTablet RPC.
	VtctldPingTabletProcedure = "/vtctlservice.Vtctld/PingTablet"
	// VtctldPlannedReparentShardProcedure is the fully-qualified name of the Vtctld's
	// PlannedReparentShard RPC.
	VtctldPlannedReparentShardProcedure = "/vtctlservice.Vtctld/PlannedReparentShard"
	// VtctldRebuildKeyspaceGraphProcedure is the fully-qualified name of the Vtctld's
	// RebuildKeyspaceGraph RPC.
	VtctldRebuildKeyspaceGraphProcedure = "/vtctlservice.Vtctld/RebuildKeyspaceGraph"
	// VtctldRebuildVSchemaGraphProcedure is the fully-qualified name of the Vtctld's
	// RebuildVSchemaGraph RPC.
	VtctldRebuildVSchemaGraphProcedure = "/vtctlservice.Vtctld/RebuildVSchemaGraph"
	// VtctldRefreshStateProcedure is the fully-qualified name of the Vtctld's RefreshState RPC.
	VtctldRefreshStateProcedure = "/vtctlservice.Vtctld/RefreshState"
	// VtctldRefreshStateByShardProcedure is the fully-qualified name of the Vtctld's
	// RefreshStateByShard RPC.
	VtctldRefreshStateByShardProcedure = "/vtctlservice.Vtctld/RefreshStateByShard"
	// VtctldReloadSchemaProcedure is the fully-qualified name of the Vtctld's ReloadSchema RPC.
	VtctldReloadSchemaProcedure = "/vtctlservice.Vtctld/ReloadSchema"
	// VtctldReloadSchemaKeyspaceProcedure is the fully-qualified name of the Vtctld's
	// ReloadSchemaKeyspace RPC.
	VtctldReloadSchemaKeyspaceProcedure = "/vtctlservice.Vtctld/ReloadSchemaKeyspace"
	// VtctldReloadSchemaShardProcedure is the fully-qualified name of the Vtctld's ReloadSchemaShard
	// RPC.
	VtctldReloadSchemaShardProcedure = "/vtctlservice.Vtctld/ReloadSchemaShard"
	// VtctldRemoveBackupProcedure is the fully-qualified name of the Vtctld's RemoveBackup RPC.
	VtctldRemoveBackupProcedure = "/vtctlservice.Vtctld/RemoveBackup"
	// VtctldRemoveKeyspaceCellProcedure is the fully-qualified name of the Vtctld's RemoveKeyspaceCell
	// RPC.
	VtctldRemoveKeyspaceCellProcedure = "/vtctlservice.Vtctld/RemoveKeyspaceCell"
	// VtctldRemoveShardCellProcedure is the fully-qualified name of the Vtctld's RemoveShardCell RPC.
	VtctldRemoveShardCellProcedure = "/vtctlservice.Vtctld/RemoveShardCell"
	// VtctldReparentTabletProcedure is the fully-qualified name of the Vtctld's ReparentTablet RPC.
	VtctldReparentTabletProcedure = "/vtctlservice.Vtctld/ReparentTablet"
	// VtctldReshardCreateProcedure is the fully-qualified name of the Vtctld's ReshardCreate RPC.
	VtctldReshardCreateProcedure = "/vtctlservice.Vtctld/ReshardCreate"
	// VtctldRestoreFromBackupProcedure is the fully-qualified name of the Vtctld's RestoreFromBackup
	// RPC.
	VtctldRestoreFromBackupProcedure = "/vtctlservice.Vtctld/RestoreFromBackup"
	// VtctldRetrySchemaMigrationProcedure is the fully-qualified name of the Vtctld's
	// RetrySchemaMigration RPC.
	VtctldRetrySchemaMigrationProcedure = "/vtctlservice.Vtctld/RetrySchemaMigration"
	// VtctldRunHealthCheckProcedure is the fully-qualified name of the Vtctld's RunHealthCheck RPC.
	VtctldRunHealthCheckProcedure = "/vtctlservice.Vtctld/RunHealthCheck"
	// VtctldSetKeyspaceDurabilityPolicyProcedure is the fully-qualified name of the Vtctld's
	// SetKeyspaceDurabilityPolicy RPC.
	VtctldSetKeyspaceDurabilityPolicyProcedure = "/vtctlservice.Vtctld/SetKeyspaceDurabilityPolicy"
	// VtctldSetShardIsPrimaryServingProcedure is the fully-qualified name of the Vtctld's
	// SetShardIsPrimaryServing RPC.
	VtctldSetShardIsPrimaryServingProcedure = "/vtctlservice.Vtctld/SetShardIsPrimaryServing"
	// VtctldSetShardTabletControlProcedure is the fully-qualified name of the Vtctld's
	// SetShardTabletControl RPC.
	VtctldSetShardTabletControlProcedure = "/vtctlservice.Vtctld/SetShardTabletControl"
	// VtctldSetWritableProcedure is the fully-qualified name of the Vtctld's SetWritable RPC.
	VtctldSetWritableProcedure = "/vtctlservice.Vtctld/SetWritable"
	// VtctldShardReplicationAddProcedure is the fully-qualified name of the Vtctld's
	// ShardReplicationAdd RPC.
	VtctldShardReplicationAddProcedure = "/vtctlservice.Vtctld/ShardReplicationAdd"
	// VtctldShardReplicationFixProcedure is the fully-qualified name of the Vtctld's
	// ShardReplicationFix RPC.
	VtctldShardReplicationFixProcedure = "/vtctlservice.Vtctld/ShardReplicationFix"
	// VtctldShardReplicationPositionsProcedure is the fully-qualified name of the Vtctld's
	// ShardReplicationPositions RPC.
	VtctldShardReplicationPositionsProcedure = "/vtctlservice.Vtctld/ShardReplicationPositions"
	// VtctldShardReplicationRemoveProcedure is the fully-qualified name of the Vtctld's
	// ShardReplicationRemove RPC.
	VtctldShardReplicationRemoveProcedure = "/vtctlservice.Vtctld/ShardReplicationRemove"
	// VtctldSleepTabletProcedure is the fully-qualified name of the Vtctld's SleepTablet RPC.
	VtctldSleepTabletProcedure = "/vtctlservice.Vtctld/SleepTablet"
	// VtctldSourceShardAddProcedure is the fully-qualified name of the Vtctld's SourceShardAdd RPC.
	VtctldSourceShardAddProcedure = "/vtctlservice.Vtctld/SourceShardAdd"
	// VtctldSourceShardDeleteProcedure is the fully-qualified name of the Vtctld's SourceShardDelete
	// RPC.
	VtctldSourceShardDeleteProcedure = "/vtctlservice.Vtctld/SourceShardDelete"
	// VtctldStartReplicationProcedure is the fully-qualified name of the Vtctld's StartReplication RPC.
	VtctldStartReplicationProcedure = "/vtctlservice.Vtctld/StartReplication"
	// VtctldStopReplicationProcedure is the fully-qualified name of the Vtctld's StopReplication RPC.
	VtctldStopReplicationProcedure = "/vtctlservice.Vtctld/StopReplication"
	// VtctldTabletExternallyReparentedProcedure is the fully-qualified name of the Vtctld's
	// TabletExternallyReparented RPC.
	VtctldTabletExternallyReparentedProcedure = "/vtctlservice.Vtctld/TabletExternallyReparented"
	// VtctldUpdateCellInfoProcedure is the fully-qualified name of the Vtctld's UpdateCellInfo RPC.
	VtctldUpdateCellInfoProcedure = "/vtctlservice.Vtctld/UpdateCellInfo"
	// VtctldUpdateCellsAliasProcedure is the fully-qualified name of the Vtctld's UpdateCellsAlias RPC.
	VtctldUpdateCellsAliasProcedure = "/vtctlservice.Vtctld/UpdateCellsAlias"
	// VtctldValidateProcedure is the fully-qualified name of the Vtctld's Validate RPC.
	VtctldValidateProcedure = "/vtctlservice.Vtctld/Validate"
	// VtctldValidateKeyspaceProcedure is the fully-qualified name of the Vtctld's ValidateKeyspace RPC.
	VtctldValidateKeyspaceProcedure = "/vtctlservice.Vtctld/ValidateKeyspace"
	// VtctldValidateSchemaKeyspaceProcedure is the fully-qualified name of the Vtctld's
	// ValidateSchemaKeyspace RPC.
	VtctldValidateSchemaKeyspaceProcedure = "/vtctlservice.Vtctld/ValidateSchemaKeyspace"
	// VtctldValidateShardProcedure is the fully-qualified name of the Vtctld's ValidateShard RPC.
	VtctldValidateShardProcedure = "/vtctlservice.Vtctld/ValidateShard"
	// VtctldValidateVersionKeyspaceProcedure is the fully-qualified name of the Vtctld's
	// ValidateVersionKeyspace RPC.
	VtctldValidateVersionKeyspaceProcedure = "/vtctlservice.Vtctld/ValidateVersionKeyspace"
	// VtctldValidateVersionShardProcedure is the fully-qualified name of the Vtctld's
	// ValidateVersionShard RPC.
	VtctldValidateVersionShardProcedure = "/vtctlservice.Vtctld/ValidateVersionShard"
	// VtctldValidateVSchemaProcedure is the fully-qualified name of the Vtctld's ValidateVSchema RPC.
	VtctldValidateVSchemaProcedure = "/vtctlservice.Vtctld/ValidateVSchema"
	// VtctldVDiffCreateProcedure is the fully-qualified name of the Vtctld's VDiffCreate RPC.
	VtctldVDiffCreateProcedure = "/vtctlservice.Vtctld/VDiffCreate"
	// VtctldVDiffDeleteProcedure is the fully-qualified name of the Vtctld's VDiffDelete RPC.
	VtctldVDiffDeleteProcedure = "/vtctlservice.Vtctld/VDiffDelete"
	// VtctldVDiffResumeProcedure is the fully-qualified name of the Vtctld's VDiffResume RPC.
	VtctldVDiffResumeProcedure = "/vtctlservice.Vtctld/VDiffResume"
	// VtctldVDiffShowProcedure is the fully-qualified name of the Vtctld's VDiffShow RPC.
	VtctldVDiffShowProcedure = "/vtctlservice.Vtctld/VDiffShow"
	// VtctldVDiffStopProcedure is the fully-qualified name of the Vtctld's VDiffStop RPC.
	VtctldVDiffStopProcedure = "/vtctlservice.Vtctld/VDiffStop"
	// VtctldWorkflowDeleteProcedure is the fully-qualified name of the Vtctld's WorkflowDelete RPC.
	VtctldWorkflowDeleteProcedure = "/vtctlservice.Vtctld/WorkflowDelete"
	// VtctldWorkflowStatusProcedure is the fully-qualified name of the Vtctld's WorkflowStatus RPC.
	VtctldWorkflowStatusProcedure = "/vtctlservice.Vtctld/WorkflowStatus"
	// VtctldWorkflowSwitchTrafficProcedure is the fully-qualified name of the Vtctld's
	// WorkflowSwitchTraffic RPC.
	VtctldWorkflowSwitchTrafficProcedure = "/vtctlservice.Vtctld/WorkflowSwitchTraffic"
	// VtctldWorkflowUpdateProcedure is the fully-qualified name of the Vtctld's WorkflowUpdate RPC.
	VtctldWorkflowUpdateProcedure = "/vtctlservice.Vtctld/WorkflowUpdate"
)

// VtctlClient is a client for the vtctlservice.Vtctl service.
type VtctlClient interface {
	ExecuteVtctlCommand(context.Context, *connect.Request[v19.ExecuteVtctlCommandRequest]) (*connect.ServerStreamForClient[v19.ExecuteVtctlCommandResponse], error)
}

// NewVtctlClient constructs a client for the vtctlservice.Vtctl service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVtctlClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VtctlClient {
	baseURL = strings.TrimRight(baseURL, "/")
	vtctlMethods := v191.File_vitess_vtctlservice_v19_vtctlservice_proto.Services().ByName("Vtctl").Methods()
	return &vtctlClient{
		executeVtctlCommand: connect.NewClient[v19.ExecuteVtctlCommandRequest, v19.ExecuteVtctlCommandResponse](
			httpClient,
			baseURL+VtctlExecuteVtctlCommandProcedure,
			connect.WithSchema(vtctlMethods.ByName("ExecuteVtctlCommand")),
			connect.WithClientOptions(opts...),
		),
	}
}

// vtctlClient implements VtctlClient.
type vtctlClient struct {
	executeVtctlCommand *connect.Client[v19.ExecuteVtctlCommandRequest, v19.ExecuteVtctlCommandResponse]
}

// ExecuteVtctlCommand calls vtctlservice.Vtctl.ExecuteVtctlCommand.
func (c *vtctlClient) ExecuteVtctlCommand(ctx context.Context, req *connect.Request[v19.ExecuteVtctlCommandRequest]) (*connect.ServerStreamForClient[v19.ExecuteVtctlCommandResponse], error) {
	return c.executeVtctlCommand.CallServerStream(ctx, req)
}

// VtctlHandler is an implementation of the vtctlservice.Vtctl service.
type VtctlHandler interface {
	ExecuteVtctlCommand(context.Context, *connect.Request[v19.ExecuteVtctlCommandRequest], *connect.ServerStream[v19.ExecuteVtctlCommandResponse]) error
}

// NewVtctlHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVtctlHandler(svc VtctlHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vtctlMethods := v191.File_vitess_vtctlservice_v19_vtctlservice_proto.Services().ByName("Vtctl").Methods()
	vtctlExecuteVtctlCommandHandler := connect.NewServerStreamHandler(
		VtctlExecuteVtctlCommandProcedure,
		svc.ExecuteVtctlCommand,
		connect.WithSchema(vtctlMethods.ByName("ExecuteVtctlCommand")),
		connect.WithHandlerOptions(opts...),
	)
	return "/vtctlservice.Vtctl/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VtctlExecuteVtctlCommandProcedure:
			vtctlExecuteVtctlCommandHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVtctlHandler returns CodeUnimplemented from all methods.
type UnimplementedVtctlHandler struct{}

func (UnimplementedVtctlHandler) ExecuteVtctlCommand(context.Context, *connect.Request[v19.ExecuteVtctlCommandRequest], *connect.ServerStream[v19.ExecuteVtctlCommandResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctl.ExecuteVtctlCommand is not implemented"))
}

// VtctldClient is a client for the vtctlservice.Vtctld service.
type VtctldClient interface {
	// AddCellInfo registers a local topology service in a new cell by creating
	// the CellInfo with the provided parameters.
	AddCellInfo(context.Context, *connect.Request[v19.AddCellInfoRequest]) (*connect.Response[v19.AddCellInfoResponse], error)
	// AddCellsAlias defines a group of cells that can be referenced by a single
	// name (the alias).
	//
	// When routing query traffic, replica/rdonly traffic can be routed across
	// cells within the group (alias). Only primary traffic can be routed across
	// cells not in the same group (alias).
	AddCellsAlias(context.Context, *connect.Request[v19.AddCellsAliasRequest]) (*connect.Response[v19.AddCellsAliasResponse], error)
	// ApplyRoutingRules applies the VSchema routing rules.
	ApplyRoutingRules(context.Context, *connect.Request[v19.ApplyRoutingRulesRequest]) (*connect.Response[v19.ApplyRoutingRulesResponse], error)
	// ApplySchema applies a schema to a keyspace.
	ApplySchema(context.Context, *connect.Request[v19.ApplySchemaRequest]) (*connect.Response[v19.ApplySchemaResponse], error)
	// ApplyShardRoutingRules applies the VSchema shard routing rules.
	ApplyShardRoutingRules(context.Context, *connect.Request[v19.ApplyShardRoutingRulesRequest]) (*connect.Response[v19.ApplyShardRoutingRulesResponse], error)
	// ApplyVSchema applies a vschema to a keyspace.
	ApplyVSchema(context.Context, *connect.Request[v19.ApplyVSchemaRequest]) (*connect.Response[v19.ApplyVSchemaResponse], error)
	// Backup uses the BackupEngine and BackupStorage services on the specified
	// tablet to create and store a new backup.
	Backup(context.Context, *connect.Request[v19.BackupRequest]) (*connect.ServerStreamForClient[v19.BackupResponse], error)
	// BackupShard chooses a tablet in the shard and uses it to create a backup.
	BackupShard(context.Context, *connect.Request[v19.BackupShardRequest]) (*connect.ServerStreamForClient[v19.BackupResponse], error)
	// CancelSchemaMigration cancels one or all migrations, terminating any running ones as needed.
	CancelSchemaMigration(context.Context, *connect.Request[v19.CancelSchemaMigrationRequest]) (*connect.Response[v19.CancelSchemaMigrationResponse], error)
	// ChangeTabletType changes the db type for the specified tablet, if possible.
	// This is used primarily to arrange replicas, and it will not convert a
	// primary. For that, use InitShardPrimary.
	//
	// NOTE: This command automatically updates the serving graph.
	ChangeTabletType(context.Context, *connect.Request[v19.ChangeTabletTypeRequest]) (*connect.Response[v19.ChangeTabletTypeResponse], error)
	// CleanupSchemaMigration marks a schema migration as ready for artifact cleanup.
	CleanupSchemaMigration(context.Context, *connect.Request[v19.CleanupSchemaMigrationRequest]) (*connect.Response[v19.CleanupSchemaMigrationResponse], error)
	// CompleteSchemaMigration completes one or all migrations executed with --postpone-completion.
	CompleteSchemaMigration(context.Context, *connect.Request[v19.CompleteSchemaMigrationRequest]) (*connect.Response[v19.CompleteSchemaMigrationResponse], error)
	// CreateKeyspace creates the specified keyspace in the topology. For a
	// SNAPSHOT keyspace, the request must specify the name of a base keyspace,
	// as well as a snapshot time.
	CreateKeyspace(context.Context, *connect.Request[v19.CreateKeyspaceRequest]) (*connect.Response[v19.CreateKeyspaceResponse], error)
	// CreateShard creates the specified shard in the topology.
	CreateShard(context.Context, *connect.Request[v19.CreateShardRequest]) (*connect.Response[v19.CreateShardResponse], error)
	// DeleteCellInfo deletes the CellInfo for the provided cell. The cell cannot
	// be referenced by any Shard record in the topology.
	DeleteCellInfo(context.Context, *connect.Request[v19.DeleteCellInfoRequest]) (*connect.Response[v19.DeleteCellInfoResponse], error)
	// DeleteCellsAlias deletes the CellsAlias for the provided alias.
	DeleteCellsAlias(context.Context, *connect.Request[v19.DeleteCellsAliasRequest]) (*connect.Response[v19.DeleteCellsAliasResponse], error)
	// DeleteKeyspace deletes the specified keyspace from the topology. In
	// recursive mode, it also recursively deletes all shards in the keyspace.
	// Otherwise, the keyspace must be empty (have no shards), or DeleteKeyspace
	// returns an error.
	DeleteKeyspace(context.Context, *connect.Request[v19.DeleteKeyspaceRequest]) (*connect.Response[v19.DeleteKeyspaceResponse], error)
	// DeleteShards deletes the specified shards from the topology. In recursive
	// mode, it also deletes all tablets belonging to the shard. Otherwise, the
	// shard must be empty (have no tablets) or DeleteShards returns an error for
	// that shard.
	DeleteShards(context.Context, *connect.Request[v19.DeleteShardsRequest]) (*connect.Response[v19.DeleteShardsResponse], error)
	// DeleteSrvVSchema deletes the SrvVSchema object in the specified cell.
	DeleteSrvVSchema(context.Context, *connect.Request[v19.DeleteSrvVSchemaRequest]) (*connect.Response[v19.DeleteSrvVSchemaResponse], error)
	// DeleteTablets deletes one or more tablets from the topology.
	DeleteTablets(context.Context, *connect.Request[v19.DeleteTabletsRequest]) (*connect.Response[v19.DeleteTabletsResponse], error)
	// EmergencyReparentShard reparents the shard to the new primary. It assumes
	// the old primary is dead or otherwise not responding.
	EmergencyReparentShard(context.Context, *connect.Request[v19.EmergencyReparentShardRequest]) (*connect.Response[v19.EmergencyReparentShardResponse], error)
	// ExecuteFetchAsApp executes a SQL query on the remote tablet as the App user.
	ExecuteFetchAsApp(context.Context, *connect.Request[v19.ExecuteFetchAsAppRequest]) (*connect.Response[v19.ExecuteFetchAsAppResponse], error)
	// ExecuteFetchAsDBA executes a SQL query on the remote tablet as the DBA user.
	ExecuteFetchAsDBA(context.Context, *connect.Request[v19.ExecuteFetchAsDBARequest]) (*connect.Response[v19.ExecuteFetchAsDBAResponse], error)
	// ExecuteHook runs the hook on the tablet.
	ExecuteHook(context.Context, *connect.Request[v19.ExecuteHookRequest]) (*connect.Response[v19.ExecuteHookResponse], error)
	// FindAllShardsInKeyspace returns a map of shard names to shard references
	// for a given keyspace.
	FindAllShardsInKeyspace(context.Context, *connect.Request[v19.FindAllShardsInKeyspaceRequest]) (*connect.Response[v19.FindAllShardsInKeyspaceResponse], error)
	// ForceCutOverSchemaMigration marks a schema migration for forced cut-over.
	ForceCutOverSchemaMigration(context.Context, *connect.Request[v19.ForceCutOverSchemaMigrationRequest]) (*connect.Response[v19.ForceCutOverSchemaMigrationResponse], error)
	// GetBackups returns all the backups for a shard.
	GetBackups(context.Context, *connect.Request[v19.GetBackupsRequest]) (*connect.Response[v19.GetBackupsResponse], error)
	// GetCellInfo returns the information for a cell.
	GetCellInfo(context.Context, *connect.Request[v19.GetCellInfoRequest]) (*connect.Response[v19.GetCellInfoResponse], error)
	// GetCellInfoNames returns all the cells for which we have a CellInfo object,
	// meaning we have a topology service registered.
	GetCellInfoNames(context.Context, *connect.Request[v19.GetCellInfoNamesRequest]) (*connect.Response[v19.GetCellInfoNamesResponse], error)
	// GetCellsAliases returns a mapping of cell alias to cells identified by that
	// alias.
	GetCellsAliases(context.Context, *connect.Request[v19.GetCellsAliasesRequest]) (*connect.Response[v19.GetCellsAliasesResponse], error)
	// GetFullStatus returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	GetFullStatus(context.Context, *connect.Request[v19.GetFullStatusRequest]) (*connect.Response[v19.GetFullStatusResponse], error)
	// GetKeyspace reads the given keyspace from the topo and returns it.
	GetKeyspace(context.Context, *connect.Request[v19.GetKeyspaceRequest]) (*connect.Response[v19.GetKeyspaceResponse], error)
	// GetKeyspaces returns the keyspace struct of all keyspaces in the topo.
	GetKeyspaces(context.Context, *connect.Request[v19.GetKeyspacesRequest]) (*connect.Response[v19.GetKeyspacesResponse], error)
	// GetPermissions returns the permissions set on the remote tablet.
	GetPermissions(context.Context, *connect.Request[v19.GetPermissionsRequest]) (*connect.Response[v19.GetPermissionsResponse], error)
	// GetRoutingRules returns the VSchema routing rules.
	GetRoutingRules(context.Context, *connect.Request[v19.GetRoutingRulesRequest]) (*connect.Response[v19.GetRoutingRulesResponse], error)
	// GetSchema returns the schema for a tablet, or just the schema for the
	// specified tables in that tablet.
	GetSchema(context.Context, *connect.Request[v19.GetSchemaRequest]) (*connect.Response[v19.GetSchemaResponse], error)
	// GetSchemaMigrations returns one or more online schema migrations for the
	// specified keyspace, analagous to `SHOW VITESS_MIGRATIONS`.
	//
	// Different fields in the request message result in different filtering
	// behaviors. See the documentation on GetSchemaMigrationsRequest for details.
	GetSchemaMigrations(context.Context, *connect.Request[v19.GetSchemaMigrationsRequest]) (*connect.Response[v19.GetSchemaMigrationsResponse], error)
	// GetShardReplication returns the replication graph for a shard in a cell.
	GetShardReplication(context.Context, *connect.Request[v19.GetShardReplicationRequest]) (*connect.Response[v19.GetShardReplicationResponse], error)
	// GetShard returns information about a shard in the topology.
	GetShard(context.Context, *connect.Request[v19.GetShardRequest]) (*connect.Response[v19.GetShardResponse], error)
	// GetShardRoutingRules returns the VSchema shard routing rules.
	GetShardRoutingRules(context.Context, *connect.Request[v19.GetShardRoutingRulesRequest]) (*connect.Response[v19.GetShardRoutingRulesResponse], error)
	// GetSrvKeyspaceNames returns a mapping of cell name to the keyspaces served
	// in that cell.
	GetSrvKeyspaceNames(context.Context, *connect.Request[v19.GetSrvKeyspaceNamesRequest]) (*connect.Response[v19.GetSrvKeyspaceNamesResponse], error)
	// GetSrvKeyspaces returns the SrvKeyspaces for a keyspace in one or more
	// cells.
	GetSrvKeyspaces(context.Context, *connect.Request[v19.GetSrvKeyspacesRequest]) (*connect.Response[v19.GetSrvKeyspacesResponse], error)
	// UpdateThrottlerConfig updates the tablet throttler configuration
	UpdateThrottlerConfig(context.Context, *connect.Request[v19.UpdateThrottlerConfigRequest]) (*connect.Response[v19.UpdateThrottlerConfigResponse], error)
	// GetSrvVSchema returns the SrvVSchema for a cell.
	GetSrvVSchema(context.Context, *connect.Request[v19.GetSrvVSchemaRequest]) (*connect.Response[v19.GetSrvVSchemaResponse], error)
	// GetSrvVSchemas returns a mapping from cell name to SrvVSchema for all cells,
	// optionally filtered by cell name.
	GetSrvVSchemas(context.Context, *connect.Request[v19.GetSrvVSchemasRequest]) (*connect.Response[v19.GetSrvVSchemasResponse], error)
	// GetTablet returns information about a tablet.
	GetTablet(context.Context, *connect.Request[v19.GetTabletRequest]) (*connect.Response[v19.GetTabletResponse], error)
	// GetTablets returns tablets, optionally filtered by keyspace and shard.
	GetTablets(context.Context, *connect.Request[v19.GetTabletsRequest]) (*connect.Response[v19.GetTabletsResponse], error)
	// GetTopologyPath returns the topology cell at a given path.
	GetTopologyPath(context.Context, *connect.Request[v19.GetTopologyPathRequest]) (*connect.Response[v19.GetTopologyPathResponse], error)
	// GetVersion returns the version of a tablet from its debug vars.
	GetVersion(context.Context, *connect.Request[v19.GetVersionRequest]) (*connect.Response[v19.GetVersionResponse], error)
	// GetVSchema returns the vschema for a keyspace.
	GetVSchema(context.Context, *connect.Request[v19.GetVSchemaRequest]) (*connect.Response[v19.GetVSchemaResponse], error)
	// GetWorkflows returns a list of workflows for the given keyspace.
	GetWorkflows(context.Context, *connect.Request[v19.GetWorkflowsRequest]) (*connect.Response[v19.GetWorkflowsResponse], error)
	// InitShardPrimary sets the initial primary for a shard. Will make all other
	// tablets in the shard replicas of the provided primary.
	//
	// WARNING: This could cause data loss on an already replicating shard.
	// PlannedReparentShard or EmergencyReparentShard should be used in those
	// cases instead.
	InitShardPrimary(context.Context, *connect.Request[v19.InitShardPrimaryRequest]) (*connect.Response[v19.InitShardPrimaryResponse], error)
	// LaunchSchemaMigration launches one or all migrations executed with --postpone-launch.
	LaunchSchemaMigration(context.Context, *connect.Request[v19.LaunchSchemaMigrationRequest]) (*connect.Response[v19.LaunchSchemaMigrationResponse], error)
	LookupVindexCreate(context.Context, *connect.Request[v19.LookupVindexCreateRequest]) (*connect.Response[v19.LookupVindexCreateResponse], error)
	LookupVindexExternalize(context.Context, *connect.Request[v19.LookupVindexExternalizeRequest]) (*connect.Response[v19.LookupVindexExternalizeResponse], error)
	// MaterializeCreate creates a workflow to materialize one or more tables
	// from a source keyspace to a target keyspace using a provided expressions.
	MaterializeCreate(context.Context, *connect.Request[v19.MaterializeCreateRequest]) (*connect.Response[v19.MaterializeCreateResponse], error)
	// MigrateCreate creates a workflow which migrates one or more tables from an
	// external cluster into Vitess.
	MigrateCreate(context.Context, *connect.Request[v19.MigrateCreateRequest]) (*connect.Response[v19.WorkflowStatusResponse], error)
	// MountRegister registers a new external Vitess cluster.
	MountRegister(context.Context, *connect.Request[v19.MountRegisterRequest]) (*connect.Response[v19.MountRegisterResponse], error)
	// MountUnregister unregisters an external Vitess cluster.
	MountUnregister(context.Context, *connect.Request[v19.MountUnregisterRequest]) (*connect.Response[v19.MountUnregisterResponse], error)
	// MountShow returns information about an external Vitess cluster.
	MountShow(context.Context, *connect.Request[v19.MountShowRequest]) (*connect.Response[v19.MountShowResponse], error)
	// MountList lists all registered external Vitess clusters.
	MountList(context.Context, *connect.Request[v19.MountListRequest]) (*connect.Response[v19.MountListResponse], error)
	// MoveTablesCreate creates a workflow which moves one or more tables from a
	// source keyspace to a target keyspace.
	MoveTablesCreate(context.Context, *connect.Request[v19.MoveTablesCreateRequest]) (*connect.Response[v19.WorkflowStatusResponse], error)
	// MoveTablesComplete completes the move and cleans up the workflow and
	// its related artifacts.
	MoveTablesComplete(context.Context, *connect.Request[v19.MoveTablesCompleteRequest]) (*connect.Response[v19.MoveTablesCompleteResponse], error)
	// PingTablet checks that the specified tablet is awake and responding to RPCs.
	// This command can be blocked by other in-flight operations.
	PingTablet(context.Context, *connect.Request[v19.PingTabletRequest]) (*connect.Response[v19.PingTabletResponse], error)
	// PlannedReparentShard reparents the shard to the new primary, or away from
	// an old primary. Both the old and new primaries need to be reachable and
	// running.
	//
	// **NOTE**: The vtctld will not consider any replicas outside the cell the
	// current shard primary is in for promotion unless NewPrimary is explicitly
	// provided in the request.
	PlannedReparentShard(context.Context, *connect.Request[v19.PlannedReparentShardRequest]) (*connect.Response[v19.PlannedReparentShardResponse], error)
	// RebuildKeyspaceGraph rebuilds the serving data for a keyspace.
	//
	// This may trigger an update to all connected clients.
	RebuildKeyspaceGraph(context.Context, *connect.Request[v19.RebuildKeyspaceGraphRequest]) (*connect.Response[v19.RebuildKeyspaceGraphResponse], error)
	// RebuildVSchemaGraph rebuilds the per-cell SrvVSchema from the global
	// VSchema objects in the provided cells (or all cells in the topo none
	// provided).
	RebuildVSchemaGraph(context.Context, *connect.Request[v19.RebuildVSchemaGraphRequest]) (*connect.Response[v19.RebuildVSchemaGraphResponse], error)
	// RefreshState reloads the tablet record on the specified tablet.
	RefreshState(context.Context, *connect.Request[v19.RefreshStateRequest]) (*connect.Response[v19.RefreshStateResponse], error)
	// RefreshStateByShard calls RefreshState on all the tablets in the given shard.
	RefreshStateByShard(context.Context, *connect.Request[v19.RefreshStateByShardRequest]) (*connect.Response[v19.RefreshStateByShardResponse], error)
	// ReloadSchema instructs the remote tablet to reload its schema.
	ReloadSchema(context.Context, *connect.Request[v19.ReloadSchemaRequest]) (*connect.Response[v19.ReloadSchemaResponse], error)
	// ReloadSchemaKeyspace reloads the schema on all tablets in a keyspace.
	ReloadSchemaKeyspace(context.Context, *connect.Request[v19.ReloadSchemaKeyspaceRequest]) (*connect.Response[v19.ReloadSchemaKeyspaceResponse], error)
	// ReloadSchemaShard reloads the schema on all tablets in a shard.
	//
	// In general, we don't always expect all replicas to be ready to reload, and
	// the periodic schema reload makes them self-healing anyway. So, we do this
	// on a best-effort basis, and log warnings for any tablets that fail to
	// reload within the context deadline.
	ReloadSchemaShard(context.Context, *connect.Request[v19.ReloadSchemaShardRequest]) (*connect.Response[v19.ReloadSchemaShardResponse], error)
	// RemoveBackup removes a backup from the BackupStorage used by vtctld.
	RemoveBackup(context.Context, *connect.Request[v19.RemoveBackupRequest]) (*connect.Response[v19.RemoveBackupResponse], error)
	// RemoveKeyspaceCell removes the specified cell from the Cells list for all
	// shards in the specified keyspace (by calling RemoveShardCell on every
	// shard). It also removes the SrvKeyspace for that keyspace in that cell.
	RemoveKeyspaceCell(context.Context, *connect.Request[v19.RemoveKeyspaceCellRequest]) (*connect.Response[v19.RemoveKeyspaceCellResponse], error)
	// RemoveShardCell removes the specified cell from the specified shard's Cells
	// list.
	RemoveShardCell(context.Context, *connect.Request[v19.RemoveShardCellRequest]) (*connect.Response[v19.RemoveShardCellResponse], error)
	// ReparentTablet reparents a tablet to the current primary in the shard. This
	// only works if the current replica position matches the last known reparent
	// action.
	ReparentTablet(context.Context, *connect.Request[v19.ReparentTabletRequest]) (*connect.Response[v19.ReparentTabletResponse], error)
	// ReshardCreate creates a workflow to reshard a keyspace.
	ReshardCreate(context.Context, *connect.Request[v19.ReshardCreateRequest]) (*connect.Response[v19.WorkflowStatusResponse], error)
	// RestoreFromBackup stops mysqld for the given tablet and restores a backup.
	RestoreFromBackup(context.Context, *connect.Request[v19.RestoreFromBackupRequest]) (*connect.ServerStreamForClient[v19.RestoreFromBackupResponse], error)
	// RetrySchemaMigration marks a given schema migration for retry.
	RetrySchemaMigration(context.Context, *connect.Request[v19.RetrySchemaMigrationRequest]) (*connect.Response[v19.RetrySchemaMigrationResponse], error)
	// RunHealthCheck runs a healthcheck on the remote tablet.
	RunHealthCheck(context.Context, *connect.Request[v19.RunHealthCheckRequest]) (*connect.Response[v19.RunHealthCheckResponse], error)
	// SetKeyspaceDurabilityPolicy updates the DurabilityPolicy for a keyspace.
	SetKeyspaceDurabilityPolicy(context.Context, *connect.Request[v19.SetKeyspaceDurabilityPolicyRequest]) (*connect.Response[v19.SetKeyspaceDurabilityPolicyResponse], error)
	// SetShardIsPrimaryServing adds or removes a shard from serving.
	//
	// This is meant as an emergency function. It does not rebuild any serving
	// graph (i.e. it does not run RebuildKeyspaceGraph).
	SetShardIsPrimaryServing(context.Context, *connect.Request[v19.SetShardIsPrimaryServingRequest]) (*connect.Response[v19.SetShardIsPrimaryServingResponse], error)
	// SetShardTabletControl updates the TabletControl topo record for a shard and
	// tablet type.
	//
	// This should only be used for an emergency fix, or after a finished
	// Reshard. See the documentation on SetShardTabletControlRequest for more
	// information about the different update modes.
	SetShardTabletControl(context.Context, *connect.Request[v19.SetShardTabletControlRequest]) (*connect.Response[v19.SetShardTabletControlResponse], error)
	// SetWritable sets a tablet as read-write (writable=true) or read-only (writable=false).
	SetWritable(context.Context, *connect.Request[v19.SetWritableRequest]) (*connect.Response[v19.SetWritableResponse], error)
	// ShardReplicationAdd adds an entry to a topodata.ShardReplication object.
	//
	// It is a low-level function and should generally not be called.
	ShardReplicationAdd(context.Context, *connect.Request[v19.ShardReplicationAddRequest]) (*connect.Response[v19.ShardReplicationAddResponse], error)
	// ShardReplicationFix walks the replication graph for a shard in a cell and
	// attempts to fix the first problem encountered, returning information about
	// the problem fixed, if any.
	ShardReplicationFix(context.Context, *connect.Request[v19.ShardReplicationFixRequest]) (*connect.Response[v19.ShardReplicationFixResponse], error)
	// ShardReplicationPositions returns the replication position of each tablet
	// in a shard. This RPC makes a best-effort to return partial results. For
	// example, if one tablet in the shard graph is unreachable, then
	// ShardReplicationPositions will return non-error, and include valid results
	// for the reachable tablets.
	ShardReplicationPositions(context.Context, *connect.Request[v19.ShardReplicationPositionsRequest]) (*connect.Response[v19.ShardReplicationPositionsResponse], error)
	// ShardReplicationRemove removes an entry from a topodata.ShardReplication
	// object.
	//
	// It is a low-level function and should generally not be called.
	ShardReplicationRemove(context.Context, *connect.Request[v19.ShardReplicationRemoveRequest]) (*connect.Response[v19.ShardReplicationRemoveResponse], error)
	// SleepTablet blocks the aciton queue on the specified tablet for the
	// specified duration.
	//
	// This is typically used for testing.
	SleepTablet(context.Context, *connect.Request[v19.SleepTabletRequest]) (*connect.Response[v19.SleepTabletResponse], error)
	// SourceShardAdd adds the SourceShard record with the provided index. This
	// should be used only as an emergency function.
	//
	// It does not call RefreshState for the shard primary.
	SourceShardAdd(context.Context, *connect.Request[v19.SourceShardAddRequest]) (*connect.Response[v19.SourceShardAddResponse], error)
	// SourceShardDelete deletes the SourceShard record with the provided index.
	// This should be used only as an emergency cleanup function.
	//
	// It does not call RefreshState for the shard primary.
	SourceShardDelete(context.Context, *connect.Request[v19.SourceShardDeleteRequest]) (*connect.Response[v19.SourceShardDeleteResponse], error)
	// StartReplication starts replication on the specified tablet.
	StartReplication(context.Context, *connect.Request[v19.StartReplicationRequest]) (*connect.Response[v19.StartReplicationResponse], error)
	// StopReplication stops replication on the specified tablet.
	StopReplication(context.Context, *connect.Request[v19.StopReplicationRequest]) (*connect.Response[v19.StopReplicationResponse], error)
	// TabletExternallyReparented changes metadata in the topology server to
	// acknowledge a shard primary change performed by an external tool (e.g.
	// orchestrator).
	//
	// See the Reparenting guide for more information:
	// https://vitess.io/docs/user-guides/configuration-advanced/reparenting/#external-reparenting.
	TabletExternallyReparented(context.Context, *connect.Request[v19.TabletExternallyReparentedRequest]) (*connect.Response[v19.TabletExternallyReparentedResponse], error)
	// UpdateCellInfo updates the content of a CellInfo with the provided
	// parameters. Empty values are ignored. If the cell does not exist, the
	// CellInfo will be created.
	UpdateCellInfo(context.Context, *connect.Request[v19.UpdateCellInfoRequest]) (*connect.Response[v19.UpdateCellInfoResponse], error)
	// UpdateCellsAlias updates the content of a CellsAlias with the provided
	// parameters. Empty values are ignored. If the alias does not exist, the
	// CellsAlias will be created.
	UpdateCellsAlias(context.Context, *connect.Request[v19.UpdateCellsAliasRequest]) (*connect.Response[v19.UpdateCellsAliasResponse], error)
	// Validate validates that all nodes from the global replication graph are
	// reachable, and that all tablets in discoverable cells are consistent.
	Validate(context.Context, *connect.Request[v19.ValidateRequest]) (*connect.Response[v19.ValidateResponse], error)
	// ValidateKeyspace validates that all nodes reachable from the specified
	// keyspace are consistent.
	ValidateKeyspace(context.Context, *connect.Request[v19.ValidateKeyspaceRequest]) (*connect.Response[v19.ValidateKeyspaceResponse], error)
	// ValidateSchemaKeyspace validates that the schema on the primary tablet for shard 0 matches the schema on all of the other tablets in the keyspace.
	ValidateSchemaKeyspace(context.Context, *connect.Request[v19.ValidateSchemaKeyspaceRequest]) (*connect.Response[v19.ValidateSchemaKeyspaceResponse], error)
	// ValidateShard validates that all nodes reachable from the specified shard
	// are consistent.
	ValidateShard(context.Context, *connect.Request[v19.ValidateShardRequest]) (*connect.Response[v19.ValidateShardResponse], error)
	// ValidateVersionKeyspace validates that the version on the primary of shard 0 matches all of the other tablets in the keyspace.
	ValidateVersionKeyspace(context.Context, *connect.Request[v19.ValidateVersionKeyspaceRequest]) (*connect.Response[v19.ValidateVersionKeyspaceResponse], error)
	// ValidateVersionShard validates that the version on the primary matches all of the replicas.
	ValidateVersionShard(context.Context, *connect.Request[v19.ValidateVersionShardRequest]) (*connect.Response[v19.ValidateVersionShardResponse], error)
	// ValidateVSchema compares the schema of each primary tablet in "keyspace/shards..." to the vschema and errs if there are differences.
	ValidateVSchema(context.Context, *connect.Request[v19.ValidateVSchemaRequest]) (*connect.Response[v19.ValidateVSchemaResponse], error)
	VDiffCreate(context.Context, *connect.Request[v19.VDiffCreateRequest]) (*connect.Response[v19.VDiffCreateResponse], error)
	VDiffDelete(context.Context, *connect.Request[v19.VDiffDeleteRequest]) (*connect.Response[v19.VDiffDeleteResponse], error)
	VDiffResume(context.Context, *connect.Request[v19.VDiffResumeRequest]) (*connect.Response[v19.VDiffResumeResponse], error)
	VDiffShow(context.Context, *connect.Request[v19.VDiffShowRequest]) (*connect.Response[v19.VDiffShowResponse], error)
	VDiffStop(context.Context, *connect.Request[v19.VDiffStopRequest]) (*connect.Response[v19.VDiffStopResponse], error)
	// WorkflowDelete deletes a vreplication workflow.
	WorkflowDelete(context.Context, *connect.Request[v19.WorkflowDeleteRequest]) (*connect.Response[v19.WorkflowDeleteResponse], error)
	WorkflowStatus(context.Context, *connect.Request[v19.WorkflowStatusRequest]) (*connect.Response[v19.WorkflowStatusResponse], error)
	WorkflowSwitchTraffic(context.Context, *connect.Request[v19.WorkflowSwitchTrafficRequest]) (*connect.Response[v19.WorkflowSwitchTrafficResponse], error)
	// WorkflowUpdate updates the configuration of a vreplication workflow
	// using the provided updated parameters.
	WorkflowUpdate(context.Context, *connect.Request[v19.WorkflowUpdateRequest]) (*connect.Response[v19.WorkflowUpdateResponse], error)
}

// NewVtctldClient constructs a client for the vtctlservice.Vtctld service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVtctldClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VtctldClient {
	baseURL = strings.TrimRight(baseURL, "/")
	vtctldMethods := v191.File_vitess_vtctlservice_v19_vtctlservice_proto.Services().ByName("Vtctld").Methods()
	return &vtctldClient{
		addCellInfo: connect.NewClient[v19.AddCellInfoRequest, v19.AddCellInfoResponse](
			httpClient,
			baseURL+VtctldAddCellInfoProcedure,
			connect.WithSchema(vtctldMethods.ByName("AddCellInfo")),
			connect.WithClientOptions(opts...),
		),
		addCellsAlias: connect.NewClient[v19.AddCellsAliasRequest, v19.AddCellsAliasResponse](
			httpClient,
			baseURL+VtctldAddCellsAliasProcedure,
			connect.WithSchema(vtctldMethods.ByName("AddCellsAlias")),
			connect.WithClientOptions(opts...),
		),
		applyRoutingRules: connect.NewClient[v19.ApplyRoutingRulesRequest, v19.ApplyRoutingRulesResponse](
			httpClient,
			baseURL+VtctldApplyRoutingRulesProcedure,
			connect.WithSchema(vtctldMethods.ByName("ApplyRoutingRules")),
			connect.WithClientOptions(opts...),
		),
		applySchema: connect.NewClient[v19.ApplySchemaRequest, v19.ApplySchemaResponse](
			httpClient,
			baseURL+VtctldApplySchemaProcedure,
			connect.WithSchema(vtctldMethods.ByName("ApplySchema")),
			connect.WithClientOptions(opts...),
		),
		applyShardRoutingRules: connect.NewClient[v19.ApplyShardRoutingRulesRequest, v19.ApplyShardRoutingRulesResponse](
			httpClient,
			baseURL+VtctldApplyShardRoutingRulesProcedure,
			connect.WithSchema(vtctldMethods.ByName("ApplyShardRoutingRules")),
			connect.WithClientOptions(opts...),
		),
		applyVSchema: connect.NewClient[v19.ApplyVSchemaRequest, v19.ApplyVSchemaResponse](
			httpClient,
			baseURL+VtctldApplyVSchemaProcedure,
			connect.WithSchema(vtctldMethods.ByName("ApplyVSchema")),
			connect.WithClientOptions(opts...),
		),
		backup: connect.NewClient[v19.BackupRequest, v19.BackupResponse](
			httpClient,
			baseURL+VtctldBackupProcedure,
			connect.WithSchema(vtctldMethods.ByName("Backup")),
			connect.WithClientOptions(opts...),
		),
		backupShard: connect.NewClient[v19.BackupShardRequest, v19.BackupResponse](
			httpClient,
			baseURL+VtctldBackupShardProcedure,
			connect.WithSchema(vtctldMethods.ByName("BackupShard")),
			connect.WithClientOptions(opts...),
		),
		cancelSchemaMigration: connect.NewClient[v19.CancelSchemaMigrationRequest, v19.CancelSchemaMigrationResponse](
			httpClient,
			baseURL+VtctldCancelSchemaMigrationProcedure,
			connect.WithSchema(vtctldMethods.ByName("CancelSchemaMigration")),
			connect.WithClientOptions(opts...),
		),
		changeTabletType: connect.NewClient[v19.ChangeTabletTypeRequest, v19.ChangeTabletTypeResponse](
			httpClient,
			baseURL+VtctldChangeTabletTypeProcedure,
			connect.WithSchema(vtctldMethods.ByName("ChangeTabletType")),
			connect.WithClientOptions(opts...),
		),
		cleanupSchemaMigration: connect.NewClient[v19.CleanupSchemaMigrationRequest, v19.CleanupSchemaMigrationResponse](
			httpClient,
			baseURL+VtctldCleanupSchemaMigrationProcedure,
			connect.WithSchema(vtctldMethods.ByName("CleanupSchemaMigration")),
			connect.WithClientOptions(opts...),
		),
		completeSchemaMigration: connect.NewClient[v19.CompleteSchemaMigrationRequest, v19.CompleteSchemaMigrationResponse](
			httpClient,
			baseURL+VtctldCompleteSchemaMigrationProcedure,
			connect.WithSchema(vtctldMethods.ByName("CompleteSchemaMigration")),
			connect.WithClientOptions(opts...),
		),
		createKeyspace: connect.NewClient[v19.CreateKeyspaceRequest, v19.CreateKeyspaceResponse](
			httpClient,
			baseURL+VtctldCreateKeyspaceProcedure,
			connect.WithSchema(vtctldMethods.ByName("CreateKeyspace")),
			connect.WithClientOptions(opts...),
		),
		createShard: connect.NewClient[v19.CreateShardRequest, v19.CreateShardResponse](
			httpClient,
			baseURL+VtctldCreateShardProcedure,
			connect.WithSchema(vtctldMethods.ByName("CreateShard")),
			connect.WithClientOptions(opts...),
		),
		deleteCellInfo: connect.NewClient[v19.DeleteCellInfoRequest, v19.DeleteCellInfoResponse](
			httpClient,
			baseURL+VtctldDeleteCellInfoProcedure,
			connect.WithSchema(vtctldMethods.ByName("DeleteCellInfo")),
			connect.WithClientOptions(opts...),
		),
		deleteCellsAlias: connect.NewClient[v19.DeleteCellsAliasRequest, v19.DeleteCellsAliasResponse](
			httpClient,
			baseURL+VtctldDeleteCellsAliasProcedure,
			connect.WithSchema(vtctldMethods.ByName("DeleteCellsAlias")),
			connect.WithClientOptions(opts...),
		),
		deleteKeyspace: connect.NewClient[v19.DeleteKeyspaceRequest, v19.DeleteKeyspaceResponse](
			httpClient,
			baseURL+VtctldDeleteKeyspaceProcedure,
			connect.WithSchema(vtctldMethods.ByName("DeleteKeyspace")),
			connect.WithClientOptions(opts...),
		),
		deleteShards: connect.NewClient[v19.DeleteShardsRequest, v19.DeleteShardsResponse](
			httpClient,
			baseURL+VtctldDeleteShardsProcedure,
			connect.WithSchema(vtctldMethods.ByName("DeleteShards")),
			connect.WithClientOptions(opts...),
		),
		deleteSrvVSchema: connect.NewClient[v19.DeleteSrvVSchemaRequest, v19.DeleteSrvVSchemaResponse](
			httpClient,
			baseURL+VtctldDeleteSrvVSchemaProcedure,
			connect.WithSchema(vtctldMethods.ByName("DeleteSrvVSchema")),
			connect.WithClientOptions(opts...),
		),
		deleteTablets: connect.NewClient[v19.DeleteTabletsRequest, v19.DeleteTabletsResponse](
			httpClient,
			baseURL+VtctldDeleteTabletsProcedure,
			connect.WithSchema(vtctldMethods.ByName("DeleteTablets")),
			connect.WithClientOptions(opts...),
		),
		emergencyReparentShard: connect.NewClient[v19.EmergencyReparentShardRequest, v19.EmergencyReparentShardResponse](
			httpClient,
			baseURL+VtctldEmergencyReparentShardProcedure,
			connect.WithSchema(vtctldMethods.ByName("EmergencyReparentShard")),
			connect.WithClientOptions(opts...),
		),
		executeFetchAsApp: connect.NewClient[v19.ExecuteFetchAsAppRequest, v19.ExecuteFetchAsAppResponse](
			httpClient,
			baseURL+VtctldExecuteFetchAsAppProcedure,
			connect.WithSchema(vtctldMethods.ByName("ExecuteFetchAsApp")),
			connect.WithClientOptions(opts...),
		),
		executeFetchAsDBA: connect.NewClient[v19.ExecuteFetchAsDBARequest, v19.ExecuteFetchAsDBAResponse](
			httpClient,
			baseURL+VtctldExecuteFetchAsDBAProcedure,
			connect.WithSchema(vtctldMethods.ByName("ExecuteFetchAsDBA")),
			connect.WithClientOptions(opts...),
		),
		executeHook: connect.NewClient[v19.ExecuteHookRequest, v19.ExecuteHookResponse](
			httpClient,
			baseURL+VtctldExecuteHookProcedure,
			connect.WithSchema(vtctldMethods.ByName("ExecuteHook")),
			connect.WithClientOptions(opts...),
		),
		findAllShardsInKeyspace: connect.NewClient[v19.FindAllShardsInKeyspaceRequest, v19.FindAllShardsInKeyspaceResponse](
			httpClient,
			baseURL+VtctldFindAllShardsInKeyspaceProcedure,
			connect.WithSchema(vtctldMethods.ByName("FindAllShardsInKeyspace")),
			connect.WithClientOptions(opts...),
		),
		forceCutOverSchemaMigration: connect.NewClient[v19.ForceCutOverSchemaMigrationRequest, v19.ForceCutOverSchemaMigrationResponse](
			httpClient,
			baseURL+VtctldForceCutOverSchemaMigrationProcedure,
			connect.WithSchema(vtctldMethods.ByName("ForceCutOverSchemaMigration")),
			connect.WithClientOptions(opts...),
		),
		getBackups: connect.NewClient[v19.GetBackupsRequest, v19.GetBackupsResponse](
			httpClient,
			baseURL+VtctldGetBackupsProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetBackups")),
			connect.WithClientOptions(opts...),
		),
		getCellInfo: connect.NewClient[v19.GetCellInfoRequest, v19.GetCellInfoResponse](
			httpClient,
			baseURL+VtctldGetCellInfoProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetCellInfo")),
			connect.WithClientOptions(opts...),
		),
		getCellInfoNames: connect.NewClient[v19.GetCellInfoNamesRequest, v19.GetCellInfoNamesResponse](
			httpClient,
			baseURL+VtctldGetCellInfoNamesProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetCellInfoNames")),
			connect.WithClientOptions(opts...),
		),
		getCellsAliases: connect.NewClient[v19.GetCellsAliasesRequest, v19.GetCellsAliasesResponse](
			httpClient,
			baseURL+VtctldGetCellsAliasesProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetCellsAliases")),
			connect.WithClientOptions(opts...),
		),
		getFullStatus: connect.NewClient[v19.GetFullStatusRequest, v19.GetFullStatusResponse](
			httpClient,
			baseURL+VtctldGetFullStatusProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetFullStatus")),
			connect.WithClientOptions(opts...),
		),
		getKeyspace: connect.NewClient[v19.GetKeyspaceRequest, v19.GetKeyspaceResponse](
			httpClient,
			baseURL+VtctldGetKeyspaceProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetKeyspace")),
			connect.WithClientOptions(opts...),
		),
		getKeyspaces: connect.NewClient[v19.GetKeyspacesRequest, v19.GetKeyspacesResponse](
			httpClient,
			baseURL+VtctldGetKeyspacesProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetKeyspaces")),
			connect.WithClientOptions(opts...),
		),
		getPermissions: connect.NewClient[v19.GetPermissionsRequest, v19.GetPermissionsResponse](
			httpClient,
			baseURL+VtctldGetPermissionsProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetPermissions")),
			connect.WithClientOptions(opts...),
		),
		getRoutingRules: connect.NewClient[v19.GetRoutingRulesRequest, v19.GetRoutingRulesResponse](
			httpClient,
			baseURL+VtctldGetRoutingRulesProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetRoutingRules")),
			connect.WithClientOptions(opts...),
		),
		getSchema: connect.NewClient[v19.GetSchemaRequest, v19.GetSchemaResponse](
			httpClient,
			baseURL+VtctldGetSchemaProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetSchema")),
			connect.WithClientOptions(opts...),
		),
		getSchemaMigrations: connect.NewClient[v19.GetSchemaMigrationsRequest, v19.GetSchemaMigrationsResponse](
			httpClient,
			baseURL+VtctldGetSchemaMigrationsProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetSchemaMigrations")),
			connect.WithClientOptions(opts...),
		),
		getShardReplication: connect.NewClient[v19.GetShardReplicationRequest, v19.GetShardReplicationResponse](
			httpClient,
			baseURL+VtctldGetShardReplicationProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetShardReplication")),
			connect.WithClientOptions(opts...),
		),
		getShard: connect.NewClient[v19.GetShardRequest, v19.GetShardResponse](
			httpClient,
			baseURL+VtctldGetShardProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetShard")),
			connect.WithClientOptions(opts...),
		),
		getShardRoutingRules: connect.NewClient[v19.GetShardRoutingRulesRequest, v19.GetShardRoutingRulesResponse](
			httpClient,
			baseURL+VtctldGetShardRoutingRulesProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetShardRoutingRules")),
			connect.WithClientOptions(opts...),
		),
		getSrvKeyspaceNames: connect.NewClient[v19.GetSrvKeyspaceNamesRequest, v19.GetSrvKeyspaceNamesResponse](
			httpClient,
			baseURL+VtctldGetSrvKeyspaceNamesProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetSrvKeyspaceNames")),
			connect.WithClientOptions(opts...),
		),
		getSrvKeyspaces: connect.NewClient[v19.GetSrvKeyspacesRequest, v19.GetSrvKeyspacesResponse](
			httpClient,
			baseURL+VtctldGetSrvKeyspacesProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetSrvKeyspaces")),
			connect.WithClientOptions(opts...),
		),
		updateThrottlerConfig: connect.NewClient[v19.UpdateThrottlerConfigRequest, v19.UpdateThrottlerConfigResponse](
			httpClient,
			baseURL+VtctldUpdateThrottlerConfigProcedure,
			connect.WithSchema(vtctldMethods.ByName("UpdateThrottlerConfig")),
			connect.WithClientOptions(opts...),
		),
		getSrvVSchema: connect.NewClient[v19.GetSrvVSchemaRequest, v19.GetSrvVSchemaResponse](
			httpClient,
			baseURL+VtctldGetSrvVSchemaProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetSrvVSchema")),
			connect.WithClientOptions(opts...),
		),
		getSrvVSchemas: connect.NewClient[v19.GetSrvVSchemasRequest, v19.GetSrvVSchemasResponse](
			httpClient,
			baseURL+VtctldGetSrvVSchemasProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetSrvVSchemas")),
			connect.WithClientOptions(opts...),
		),
		getTablet: connect.NewClient[v19.GetTabletRequest, v19.GetTabletResponse](
			httpClient,
			baseURL+VtctldGetTabletProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetTablet")),
			connect.WithClientOptions(opts...),
		),
		getTablets: connect.NewClient[v19.GetTabletsRequest, v19.GetTabletsResponse](
			httpClient,
			baseURL+VtctldGetTabletsProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetTablets")),
			connect.WithClientOptions(opts...),
		),
		getTopologyPath: connect.NewClient[v19.GetTopologyPathRequest, v19.GetTopologyPathResponse](
			httpClient,
			baseURL+VtctldGetTopologyPathProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetTopologyPath")),
			connect.WithClientOptions(opts...),
		),
		getVersion: connect.NewClient[v19.GetVersionRequest, v19.GetVersionResponse](
			httpClient,
			baseURL+VtctldGetVersionProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetVersion")),
			connect.WithClientOptions(opts...),
		),
		getVSchema: connect.NewClient[v19.GetVSchemaRequest, v19.GetVSchemaResponse](
			httpClient,
			baseURL+VtctldGetVSchemaProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetVSchema")),
			connect.WithClientOptions(opts...),
		),
		getWorkflows: connect.NewClient[v19.GetWorkflowsRequest, v19.GetWorkflowsResponse](
			httpClient,
			baseURL+VtctldGetWorkflowsProcedure,
			connect.WithSchema(vtctldMethods.ByName("GetWorkflows")),
			connect.WithClientOptions(opts...),
		),
		initShardPrimary: connect.NewClient[v19.InitShardPrimaryRequest, v19.InitShardPrimaryResponse](
			httpClient,
			baseURL+VtctldInitShardPrimaryProcedure,
			connect.WithSchema(vtctldMethods.ByName("InitShardPrimary")),
			connect.WithClientOptions(opts...),
		),
		launchSchemaMigration: connect.NewClient[v19.LaunchSchemaMigrationRequest, v19.LaunchSchemaMigrationResponse](
			httpClient,
			baseURL+VtctldLaunchSchemaMigrationProcedure,
			connect.WithSchema(vtctldMethods.ByName("LaunchSchemaMigration")),
			connect.WithClientOptions(opts...),
		),
		lookupVindexCreate: connect.NewClient[v19.LookupVindexCreateRequest, v19.LookupVindexCreateResponse](
			httpClient,
			baseURL+VtctldLookupVindexCreateProcedure,
			connect.WithSchema(vtctldMethods.ByName("LookupVindexCreate")),
			connect.WithClientOptions(opts...),
		),
		lookupVindexExternalize: connect.NewClient[v19.LookupVindexExternalizeRequest, v19.LookupVindexExternalizeResponse](
			httpClient,
			baseURL+VtctldLookupVindexExternalizeProcedure,
			connect.WithSchema(vtctldMethods.ByName("LookupVindexExternalize")),
			connect.WithClientOptions(opts...),
		),
		materializeCreate: connect.NewClient[v19.MaterializeCreateRequest, v19.MaterializeCreateResponse](
			httpClient,
			baseURL+VtctldMaterializeCreateProcedure,
			connect.WithSchema(vtctldMethods.ByName("MaterializeCreate")),
			connect.WithClientOptions(opts...),
		),
		migrateCreate: connect.NewClient[v19.MigrateCreateRequest, v19.WorkflowStatusResponse](
			httpClient,
			baseURL+VtctldMigrateCreateProcedure,
			connect.WithSchema(vtctldMethods.ByName("MigrateCreate")),
			connect.WithClientOptions(opts...),
		),
		mountRegister: connect.NewClient[v19.MountRegisterRequest, v19.MountRegisterResponse](
			httpClient,
			baseURL+VtctldMountRegisterProcedure,
			connect.WithSchema(vtctldMethods.ByName("MountRegister")),
			connect.WithClientOptions(opts...),
		),
		mountUnregister: connect.NewClient[v19.MountUnregisterRequest, v19.MountUnregisterResponse](
			httpClient,
			baseURL+VtctldMountUnregisterProcedure,
			connect.WithSchema(vtctldMethods.ByName("MountUnregister")),
			connect.WithClientOptions(opts...),
		),
		mountShow: connect.NewClient[v19.MountShowRequest, v19.MountShowResponse](
			httpClient,
			baseURL+VtctldMountShowProcedure,
			connect.WithSchema(vtctldMethods.ByName("MountShow")),
			connect.WithClientOptions(opts...),
		),
		mountList: connect.NewClient[v19.MountListRequest, v19.MountListResponse](
			httpClient,
			baseURL+VtctldMountListProcedure,
			connect.WithSchema(vtctldMethods.ByName("MountList")),
			connect.WithClientOptions(opts...),
		),
		moveTablesCreate: connect.NewClient[v19.MoveTablesCreateRequest, v19.WorkflowStatusResponse](
			httpClient,
			baseURL+VtctldMoveTablesCreateProcedure,
			connect.WithSchema(vtctldMethods.ByName("MoveTablesCreate")),
			connect.WithClientOptions(opts...),
		),
		moveTablesComplete: connect.NewClient[v19.MoveTablesCompleteRequest, v19.MoveTablesCompleteResponse](
			httpClient,
			baseURL+VtctldMoveTablesCompleteProcedure,
			connect.WithSchema(vtctldMethods.ByName("MoveTablesComplete")),
			connect.WithClientOptions(opts...),
		),
		pingTablet: connect.NewClient[v19.PingTabletRequest, v19.PingTabletResponse](
			httpClient,
			baseURL+VtctldPingTabletProcedure,
			connect.WithSchema(vtctldMethods.ByName("PingTablet")),
			connect.WithClientOptions(opts...),
		),
		plannedReparentShard: connect.NewClient[v19.PlannedReparentShardRequest, v19.PlannedReparentShardResponse](
			httpClient,
			baseURL+VtctldPlannedReparentShardProcedure,
			connect.WithSchema(vtctldMethods.ByName("PlannedReparentShard")),
			connect.WithClientOptions(opts...),
		),
		rebuildKeyspaceGraph: connect.NewClient[v19.RebuildKeyspaceGraphRequest, v19.RebuildKeyspaceGraphResponse](
			httpClient,
			baseURL+VtctldRebuildKeyspaceGraphProcedure,
			connect.WithSchema(vtctldMethods.ByName("RebuildKeyspaceGraph")),
			connect.WithClientOptions(opts...),
		),
		rebuildVSchemaGraph: connect.NewClient[v19.RebuildVSchemaGraphRequest, v19.RebuildVSchemaGraphResponse](
			httpClient,
			baseURL+VtctldRebuildVSchemaGraphProcedure,
			connect.WithSchema(vtctldMethods.ByName("RebuildVSchemaGraph")),
			connect.WithClientOptions(opts...),
		),
		refreshState: connect.NewClient[v19.RefreshStateRequest, v19.RefreshStateResponse](
			httpClient,
			baseURL+VtctldRefreshStateProcedure,
			connect.WithSchema(vtctldMethods.ByName("RefreshState")),
			connect.WithClientOptions(opts...),
		),
		refreshStateByShard: connect.NewClient[v19.RefreshStateByShardRequest, v19.RefreshStateByShardResponse](
			httpClient,
			baseURL+VtctldRefreshStateByShardProcedure,
			connect.WithSchema(vtctldMethods.ByName("RefreshStateByShard")),
			connect.WithClientOptions(opts...),
		),
		reloadSchema: connect.NewClient[v19.ReloadSchemaRequest, v19.ReloadSchemaResponse](
			httpClient,
			baseURL+VtctldReloadSchemaProcedure,
			connect.WithSchema(vtctldMethods.ByName("ReloadSchema")),
			connect.WithClientOptions(opts...),
		),
		reloadSchemaKeyspace: connect.NewClient[v19.ReloadSchemaKeyspaceRequest, v19.ReloadSchemaKeyspaceResponse](
			httpClient,
			baseURL+VtctldReloadSchemaKeyspaceProcedure,
			connect.WithSchema(vtctldMethods.ByName("ReloadSchemaKeyspace")),
			connect.WithClientOptions(opts...),
		),
		reloadSchemaShard: connect.NewClient[v19.ReloadSchemaShardRequest, v19.ReloadSchemaShardResponse](
			httpClient,
			baseURL+VtctldReloadSchemaShardProcedure,
			connect.WithSchema(vtctldMethods.ByName("ReloadSchemaShard")),
			connect.WithClientOptions(opts...),
		),
		removeBackup: connect.NewClient[v19.RemoveBackupRequest, v19.RemoveBackupResponse](
			httpClient,
			baseURL+VtctldRemoveBackupProcedure,
			connect.WithSchema(vtctldMethods.ByName("RemoveBackup")),
			connect.WithClientOptions(opts...),
		),
		removeKeyspaceCell: connect.NewClient[v19.RemoveKeyspaceCellRequest, v19.RemoveKeyspaceCellResponse](
			httpClient,
			baseURL+VtctldRemoveKeyspaceCellProcedure,
			connect.WithSchema(vtctldMethods.ByName("RemoveKeyspaceCell")),
			connect.WithClientOptions(opts...),
		),
		removeShardCell: connect.NewClient[v19.RemoveShardCellRequest, v19.RemoveShardCellResponse](
			httpClient,
			baseURL+VtctldRemoveShardCellProcedure,
			connect.WithSchema(vtctldMethods.ByName("RemoveShardCell")),
			connect.WithClientOptions(opts...),
		),
		reparentTablet: connect.NewClient[v19.ReparentTabletRequest, v19.ReparentTabletResponse](
			httpClient,
			baseURL+VtctldReparentTabletProcedure,
			connect.WithSchema(vtctldMethods.ByName("ReparentTablet")),
			connect.WithClientOptions(opts...),
		),
		reshardCreate: connect.NewClient[v19.ReshardCreateRequest, v19.WorkflowStatusResponse](
			httpClient,
			baseURL+VtctldReshardCreateProcedure,
			connect.WithSchema(vtctldMethods.ByName("ReshardCreate")),
			connect.WithClientOptions(opts...),
		),
		restoreFromBackup: connect.NewClient[v19.RestoreFromBackupRequest, v19.RestoreFromBackupResponse](
			httpClient,
			baseURL+VtctldRestoreFromBackupProcedure,
			connect.WithSchema(vtctldMethods.ByName("RestoreFromBackup")),
			connect.WithClientOptions(opts...),
		),
		retrySchemaMigration: connect.NewClient[v19.RetrySchemaMigrationRequest, v19.RetrySchemaMigrationResponse](
			httpClient,
			baseURL+VtctldRetrySchemaMigrationProcedure,
			connect.WithSchema(vtctldMethods.ByName("RetrySchemaMigration")),
			connect.WithClientOptions(opts...),
		),
		runHealthCheck: connect.NewClient[v19.RunHealthCheckRequest, v19.RunHealthCheckResponse](
			httpClient,
			baseURL+VtctldRunHealthCheckProcedure,
			connect.WithSchema(vtctldMethods.ByName("RunHealthCheck")),
			connect.WithClientOptions(opts...),
		),
		setKeyspaceDurabilityPolicy: connect.NewClient[v19.SetKeyspaceDurabilityPolicyRequest, v19.SetKeyspaceDurabilityPolicyResponse](
			httpClient,
			baseURL+VtctldSetKeyspaceDurabilityPolicyProcedure,
			connect.WithSchema(vtctldMethods.ByName("SetKeyspaceDurabilityPolicy")),
			connect.WithClientOptions(opts...),
		),
		setShardIsPrimaryServing: connect.NewClient[v19.SetShardIsPrimaryServingRequest, v19.SetShardIsPrimaryServingResponse](
			httpClient,
			baseURL+VtctldSetShardIsPrimaryServingProcedure,
			connect.WithSchema(vtctldMethods.ByName("SetShardIsPrimaryServing")),
			connect.WithClientOptions(opts...),
		),
		setShardTabletControl: connect.NewClient[v19.SetShardTabletControlRequest, v19.SetShardTabletControlResponse](
			httpClient,
			baseURL+VtctldSetShardTabletControlProcedure,
			connect.WithSchema(vtctldMethods.ByName("SetShardTabletControl")),
			connect.WithClientOptions(opts...),
		),
		setWritable: connect.NewClient[v19.SetWritableRequest, v19.SetWritableResponse](
			httpClient,
			baseURL+VtctldSetWritableProcedure,
			connect.WithSchema(vtctldMethods.ByName("SetWritable")),
			connect.WithClientOptions(opts...),
		),
		shardReplicationAdd: connect.NewClient[v19.ShardReplicationAddRequest, v19.ShardReplicationAddResponse](
			httpClient,
			baseURL+VtctldShardReplicationAddProcedure,
			connect.WithSchema(vtctldMethods.ByName("ShardReplicationAdd")),
			connect.WithClientOptions(opts...),
		),
		shardReplicationFix: connect.NewClient[v19.ShardReplicationFixRequest, v19.ShardReplicationFixResponse](
			httpClient,
			baseURL+VtctldShardReplicationFixProcedure,
			connect.WithSchema(vtctldMethods.ByName("ShardReplicationFix")),
			connect.WithClientOptions(opts...),
		),
		shardReplicationPositions: connect.NewClient[v19.ShardReplicationPositionsRequest, v19.ShardReplicationPositionsResponse](
			httpClient,
			baseURL+VtctldShardReplicationPositionsProcedure,
			connect.WithSchema(vtctldMethods.ByName("ShardReplicationPositions")),
			connect.WithClientOptions(opts...),
		),
		shardReplicationRemove: connect.NewClient[v19.ShardReplicationRemoveRequest, v19.ShardReplicationRemoveResponse](
			httpClient,
			baseURL+VtctldShardReplicationRemoveProcedure,
			connect.WithSchema(vtctldMethods.ByName("ShardReplicationRemove")),
			connect.WithClientOptions(opts...),
		),
		sleepTablet: connect.NewClient[v19.SleepTabletRequest, v19.SleepTabletResponse](
			httpClient,
			baseURL+VtctldSleepTabletProcedure,
			connect.WithSchema(vtctldMethods.ByName("SleepTablet")),
			connect.WithClientOptions(opts...),
		),
		sourceShardAdd: connect.NewClient[v19.SourceShardAddRequest, v19.SourceShardAddResponse](
			httpClient,
			baseURL+VtctldSourceShardAddProcedure,
			connect.WithSchema(vtctldMethods.ByName("SourceShardAdd")),
			connect.WithClientOptions(opts...),
		),
		sourceShardDelete: connect.NewClient[v19.SourceShardDeleteRequest, v19.SourceShardDeleteResponse](
			httpClient,
			baseURL+VtctldSourceShardDeleteProcedure,
			connect.WithSchema(vtctldMethods.ByName("SourceShardDelete")),
			connect.WithClientOptions(opts...),
		),
		startReplication: connect.NewClient[v19.StartReplicationRequest, v19.StartReplicationResponse](
			httpClient,
			baseURL+VtctldStartReplicationProcedure,
			connect.WithSchema(vtctldMethods.ByName("StartReplication")),
			connect.WithClientOptions(opts...),
		),
		stopReplication: connect.NewClient[v19.StopReplicationRequest, v19.StopReplicationResponse](
			httpClient,
			baseURL+VtctldStopReplicationProcedure,
			connect.WithSchema(vtctldMethods.ByName("StopReplication")),
			connect.WithClientOptions(opts...),
		),
		tabletExternallyReparented: connect.NewClient[v19.TabletExternallyReparentedRequest, v19.TabletExternallyReparentedResponse](
			httpClient,
			baseURL+VtctldTabletExternallyReparentedProcedure,
			connect.WithSchema(vtctldMethods.ByName("TabletExternallyReparented")),
			connect.WithClientOptions(opts...),
		),
		updateCellInfo: connect.NewClient[v19.UpdateCellInfoRequest, v19.UpdateCellInfoResponse](
			httpClient,
			baseURL+VtctldUpdateCellInfoProcedure,
			connect.WithSchema(vtctldMethods.ByName("UpdateCellInfo")),
			connect.WithClientOptions(opts...),
		),
		updateCellsAlias: connect.NewClient[v19.UpdateCellsAliasRequest, v19.UpdateCellsAliasResponse](
			httpClient,
			baseURL+VtctldUpdateCellsAliasProcedure,
			connect.WithSchema(vtctldMethods.ByName("UpdateCellsAlias")),
			connect.WithClientOptions(opts...),
		),
		validate: connect.NewClient[v19.ValidateRequest, v19.ValidateResponse](
			httpClient,
			baseURL+VtctldValidateProcedure,
			connect.WithSchema(vtctldMethods.ByName("Validate")),
			connect.WithClientOptions(opts...),
		),
		validateKeyspace: connect.NewClient[v19.ValidateKeyspaceRequest, v19.ValidateKeyspaceResponse](
			httpClient,
			baseURL+VtctldValidateKeyspaceProcedure,
			connect.WithSchema(vtctldMethods.ByName("ValidateKeyspace")),
			connect.WithClientOptions(opts...),
		),
		validateSchemaKeyspace: connect.NewClient[v19.ValidateSchemaKeyspaceRequest, v19.ValidateSchemaKeyspaceResponse](
			httpClient,
			baseURL+VtctldValidateSchemaKeyspaceProcedure,
			connect.WithSchema(vtctldMethods.ByName("ValidateSchemaKeyspace")),
			connect.WithClientOptions(opts...),
		),
		validateShard: connect.NewClient[v19.ValidateShardRequest, v19.ValidateShardResponse](
			httpClient,
			baseURL+VtctldValidateShardProcedure,
			connect.WithSchema(vtctldMethods.ByName("ValidateShard")),
			connect.WithClientOptions(opts...),
		),
		validateVersionKeyspace: connect.NewClient[v19.ValidateVersionKeyspaceRequest, v19.ValidateVersionKeyspaceResponse](
			httpClient,
			baseURL+VtctldValidateVersionKeyspaceProcedure,
			connect.WithSchema(vtctldMethods.ByName("ValidateVersionKeyspace")),
			connect.WithClientOptions(opts...),
		),
		validateVersionShard: connect.NewClient[v19.ValidateVersionShardRequest, v19.ValidateVersionShardResponse](
			httpClient,
			baseURL+VtctldValidateVersionShardProcedure,
			connect.WithSchema(vtctldMethods.ByName("ValidateVersionShard")),
			connect.WithClientOptions(opts...),
		),
		validateVSchema: connect.NewClient[v19.ValidateVSchemaRequest, v19.ValidateVSchemaResponse](
			httpClient,
			baseURL+VtctldValidateVSchemaProcedure,
			connect.WithSchema(vtctldMethods.ByName("ValidateVSchema")),
			connect.WithClientOptions(opts...),
		),
		vDiffCreate: connect.NewClient[v19.VDiffCreateRequest, v19.VDiffCreateResponse](
			httpClient,
			baseURL+VtctldVDiffCreateProcedure,
			connect.WithSchema(vtctldMethods.ByName("VDiffCreate")),
			connect.WithClientOptions(opts...),
		),
		vDiffDelete: connect.NewClient[v19.VDiffDeleteRequest, v19.VDiffDeleteResponse](
			httpClient,
			baseURL+VtctldVDiffDeleteProcedure,
			connect.WithSchema(vtctldMethods.ByName("VDiffDelete")),
			connect.WithClientOptions(opts...),
		),
		vDiffResume: connect.NewClient[v19.VDiffResumeRequest, v19.VDiffResumeResponse](
			httpClient,
			baseURL+VtctldVDiffResumeProcedure,
			connect.WithSchema(vtctldMethods.ByName("VDiffResume")),
			connect.WithClientOptions(opts...),
		),
		vDiffShow: connect.NewClient[v19.VDiffShowRequest, v19.VDiffShowResponse](
			httpClient,
			baseURL+VtctldVDiffShowProcedure,
			connect.WithSchema(vtctldMethods.ByName("VDiffShow")),
			connect.WithClientOptions(opts...),
		),
		vDiffStop: connect.NewClient[v19.VDiffStopRequest, v19.VDiffStopResponse](
			httpClient,
			baseURL+VtctldVDiffStopProcedure,
			connect.WithSchema(vtctldMethods.ByName("VDiffStop")),
			connect.WithClientOptions(opts...),
		),
		workflowDelete: connect.NewClient[v19.WorkflowDeleteRequest, v19.WorkflowDeleteResponse](
			httpClient,
			baseURL+VtctldWorkflowDeleteProcedure,
			connect.WithSchema(vtctldMethods.ByName("WorkflowDelete")),
			connect.WithClientOptions(opts...),
		),
		workflowStatus: connect.NewClient[v19.WorkflowStatusRequest, v19.WorkflowStatusResponse](
			httpClient,
			baseURL+VtctldWorkflowStatusProcedure,
			connect.WithSchema(vtctldMethods.ByName("WorkflowStatus")),
			connect.WithClientOptions(opts...),
		),
		workflowSwitchTraffic: connect.NewClient[v19.WorkflowSwitchTrafficRequest, v19.WorkflowSwitchTrafficResponse](
			httpClient,
			baseURL+VtctldWorkflowSwitchTrafficProcedure,
			connect.WithSchema(vtctldMethods.ByName("WorkflowSwitchTraffic")),
			connect.WithClientOptions(opts...),
		),
		workflowUpdate: connect.NewClient[v19.WorkflowUpdateRequest, v19.WorkflowUpdateResponse](
			httpClient,
			baseURL+VtctldWorkflowUpdateProcedure,
			connect.WithSchema(vtctldMethods.ByName("WorkflowUpdate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// vtctldClient implements VtctldClient.
type vtctldClient struct {
	addCellInfo                 *connect.Client[v19.AddCellInfoRequest, v19.AddCellInfoResponse]
	addCellsAlias               *connect.Client[v19.AddCellsAliasRequest, v19.AddCellsAliasResponse]
	applyRoutingRules           *connect.Client[v19.ApplyRoutingRulesRequest, v19.ApplyRoutingRulesResponse]
	applySchema                 *connect.Client[v19.ApplySchemaRequest, v19.ApplySchemaResponse]
	applyShardRoutingRules      *connect.Client[v19.ApplyShardRoutingRulesRequest, v19.ApplyShardRoutingRulesResponse]
	applyVSchema                *connect.Client[v19.ApplyVSchemaRequest, v19.ApplyVSchemaResponse]
	backup                      *connect.Client[v19.BackupRequest, v19.BackupResponse]
	backupShard                 *connect.Client[v19.BackupShardRequest, v19.BackupResponse]
	cancelSchemaMigration       *connect.Client[v19.CancelSchemaMigrationRequest, v19.CancelSchemaMigrationResponse]
	changeTabletType            *connect.Client[v19.ChangeTabletTypeRequest, v19.ChangeTabletTypeResponse]
	cleanupSchemaMigration      *connect.Client[v19.CleanupSchemaMigrationRequest, v19.CleanupSchemaMigrationResponse]
	completeSchemaMigration     *connect.Client[v19.CompleteSchemaMigrationRequest, v19.CompleteSchemaMigrationResponse]
	createKeyspace              *connect.Client[v19.CreateKeyspaceRequest, v19.CreateKeyspaceResponse]
	createShard                 *connect.Client[v19.CreateShardRequest, v19.CreateShardResponse]
	deleteCellInfo              *connect.Client[v19.DeleteCellInfoRequest, v19.DeleteCellInfoResponse]
	deleteCellsAlias            *connect.Client[v19.DeleteCellsAliasRequest, v19.DeleteCellsAliasResponse]
	deleteKeyspace              *connect.Client[v19.DeleteKeyspaceRequest, v19.DeleteKeyspaceResponse]
	deleteShards                *connect.Client[v19.DeleteShardsRequest, v19.DeleteShardsResponse]
	deleteSrvVSchema            *connect.Client[v19.DeleteSrvVSchemaRequest, v19.DeleteSrvVSchemaResponse]
	deleteTablets               *connect.Client[v19.DeleteTabletsRequest, v19.DeleteTabletsResponse]
	emergencyReparentShard      *connect.Client[v19.EmergencyReparentShardRequest, v19.EmergencyReparentShardResponse]
	executeFetchAsApp           *connect.Client[v19.ExecuteFetchAsAppRequest, v19.ExecuteFetchAsAppResponse]
	executeFetchAsDBA           *connect.Client[v19.ExecuteFetchAsDBARequest, v19.ExecuteFetchAsDBAResponse]
	executeHook                 *connect.Client[v19.ExecuteHookRequest, v19.ExecuteHookResponse]
	findAllShardsInKeyspace     *connect.Client[v19.FindAllShardsInKeyspaceRequest, v19.FindAllShardsInKeyspaceResponse]
	forceCutOverSchemaMigration *connect.Client[v19.ForceCutOverSchemaMigrationRequest, v19.ForceCutOverSchemaMigrationResponse]
	getBackups                  *connect.Client[v19.GetBackupsRequest, v19.GetBackupsResponse]
	getCellInfo                 *connect.Client[v19.GetCellInfoRequest, v19.GetCellInfoResponse]
	getCellInfoNames            *connect.Client[v19.GetCellInfoNamesRequest, v19.GetCellInfoNamesResponse]
	getCellsAliases             *connect.Client[v19.GetCellsAliasesRequest, v19.GetCellsAliasesResponse]
	getFullStatus               *connect.Client[v19.GetFullStatusRequest, v19.GetFullStatusResponse]
	getKeyspace                 *connect.Client[v19.GetKeyspaceRequest, v19.GetKeyspaceResponse]
	getKeyspaces                *connect.Client[v19.GetKeyspacesRequest, v19.GetKeyspacesResponse]
	getPermissions              *connect.Client[v19.GetPermissionsRequest, v19.GetPermissionsResponse]
	getRoutingRules             *connect.Client[v19.GetRoutingRulesRequest, v19.GetRoutingRulesResponse]
	getSchema                   *connect.Client[v19.GetSchemaRequest, v19.GetSchemaResponse]
	getSchemaMigrations         *connect.Client[v19.GetSchemaMigrationsRequest, v19.GetSchemaMigrationsResponse]
	getShardReplication         *connect.Client[v19.GetShardReplicationRequest, v19.GetShardReplicationResponse]
	getShard                    *connect.Client[v19.GetShardRequest, v19.GetShardResponse]
	getShardRoutingRules        *connect.Client[v19.GetShardRoutingRulesRequest, v19.GetShardRoutingRulesResponse]
	getSrvKeyspaceNames         *connect.Client[v19.GetSrvKeyspaceNamesRequest, v19.GetSrvKeyspaceNamesResponse]
	getSrvKeyspaces             *connect.Client[v19.GetSrvKeyspacesRequest, v19.GetSrvKeyspacesResponse]
	updateThrottlerConfig       *connect.Client[v19.UpdateThrottlerConfigRequest, v19.UpdateThrottlerConfigResponse]
	getSrvVSchema               *connect.Client[v19.GetSrvVSchemaRequest, v19.GetSrvVSchemaResponse]
	getSrvVSchemas              *connect.Client[v19.GetSrvVSchemasRequest, v19.GetSrvVSchemasResponse]
	getTablet                   *connect.Client[v19.GetTabletRequest, v19.GetTabletResponse]
	getTablets                  *connect.Client[v19.GetTabletsRequest, v19.GetTabletsResponse]
	getTopologyPath             *connect.Client[v19.GetTopologyPathRequest, v19.GetTopologyPathResponse]
	getVersion                  *connect.Client[v19.GetVersionRequest, v19.GetVersionResponse]
	getVSchema                  *connect.Client[v19.GetVSchemaRequest, v19.GetVSchemaResponse]
	getWorkflows                *connect.Client[v19.GetWorkflowsRequest, v19.GetWorkflowsResponse]
	initShardPrimary            *connect.Client[v19.InitShardPrimaryRequest, v19.InitShardPrimaryResponse]
	launchSchemaMigration       *connect.Client[v19.LaunchSchemaMigrationRequest, v19.LaunchSchemaMigrationResponse]
	lookupVindexCreate          *connect.Client[v19.LookupVindexCreateRequest, v19.LookupVindexCreateResponse]
	lookupVindexExternalize     *connect.Client[v19.LookupVindexExternalizeRequest, v19.LookupVindexExternalizeResponse]
	materializeCreate           *connect.Client[v19.MaterializeCreateRequest, v19.MaterializeCreateResponse]
	migrateCreate               *connect.Client[v19.MigrateCreateRequest, v19.WorkflowStatusResponse]
	mountRegister               *connect.Client[v19.MountRegisterRequest, v19.MountRegisterResponse]
	mountUnregister             *connect.Client[v19.MountUnregisterRequest, v19.MountUnregisterResponse]
	mountShow                   *connect.Client[v19.MountShowRequest, v19.MountShowResponse]
	mountList                   *connect.Client[v19.MountListRequest, v19.MountListResponse]
	moveTablesCreate            *connect.Client[v19.MoveTablesCreateRequest, v19.WorkflowStatusResponse]
	moveTablesComplete          *connect.Client[v19.MoveTablesCompleteRequest, v19.MoveTablesCompleteResponse]
	pingTablet                  *connect.Client[v19.PingTabletRequest, v19.PingTabletResponse]
	plannedReparentShard        *connect.Client[v19.PlannedReparentShardRequest, v19.PlannedReparentShardResponse]
	rebuildKeyspaceGraph        *connect.Client[v19.RebuildKeyspaceGraphRequest, v19.RebuildKeyspaceGraphResponse]
	rebuildVSchemaGraph         *connect.Client[v19.RebuildVSchemaGraphRequest, v19.RebuildVSchemaGraphResponse]
	refreshState                *connect.Client[v19.RefreshStateRequest, v19.RefreshStateResponse]
	refreshStateByShard         *connect.Client[v19.RefreshStateByShardRequest, v19.RefreshStateByShardResponse]
	reloadSchema                *connect.Client[v19.ReloadSchemaRequest, v19.ReloadSchemaResponse]
	reloadSchemaKeyspace        *connect.Client[v19.ReloadSchemaKeyspaceRequest, v19.ReloadSchemaKeyspaceResponse]
	reloadSchemaShard           *connect.Client[v19.ReloadSchemaShardRequest, v19.ReloadSchemaShardResponse]
	removeBackup                *connect.Client[v19.RemoveBackupRequest, v19.RemoveBackupResponse]
	removeKeyspaceCell          *connect.Client[v19.RemoveKeyspaceCellRequest, v19.RemoveKeyspaceCellResponse]
	removeShardCell             *connect.Client[v19.RemoveShardCellRequest, v19.RemoveShardCellResponse]
	reparentTablet              *connect.Client[v19.ReparentTabletRequest, v19.ReparentTabletResponse]
	reshardCreate               *connect.Client[v19.ReshardCreateRequest, v19.WorkflowStatusResponse]
	restoreFromBackup           *connect.Client[v19.RestoreFromBackupRequest, v19.RestoreFromBackupResponse]
	retrySchemaMigration        *connect.Client[v19.RetrySchemaMigrationRequest, v19.RetrySchemaMigrationResponse]
	runHealthCheck              *connect.Client[v19.RunHealthCheckRequest, v19.RunHealthCheckResponse]
	setKeyspaceDurabilityPolicy *connect.Client[v19.SetKeyspaceDurabilityPolicyRequest, v19.SetKeyspaceDurabilityPolicyResponse]
	setShardIsPrimaryServing    *connect.Client[v19.SetShardIsPrimaryServingRequest, v19.SetShardIsPrimaryServingResponse]
	setShardTabletControl       *connect.Client[v19.SetShardTabletControlRequest, v19.SetShardTabletControlResponse]
	setWritable                 *connect.Client[v19.SetWritableRequest, v19.SetWritableResponse]
	shardReplicationAdd         *connect.Client[v19.ShardReplicationAddRequest, v19.ShardReplicationAddResponse]
	shardReplicationFix         *connect.Client[v19.ShardReplicationFixRequest, v19.ShardReplicationFixResponse]
	shardReplicationPositions   *connect.Client[v19.ShardReplicationPositionsRequest, v19.ShardReplicationPositionsResponse]
	shardReplicationRemove      *connect.Client[v19.ShardReplicationRemoveRequest, v19.ShardReplicationRemoveResponse]
	sleepTablet                 *connect.Client[v19.SleepTabletRequest, v19.SleepTabletResponse]
	sourceShardAdd              *connect.Client[v19.SourceShardAddRequest, v19.SourceShardAddResponse]
	sourceShardDelete           *connect.Client[v19.SourceShardDeleteRequest, v19.SourceShardDeleteResponse]
	startReplication            *connect.Client[v19.StartReplicationRequest, v19.StartReplicationResponse]
	stopReplication             *connect.Client[v19.StopReplicationRequest, v19.StopReplicationResponse]
	tabletExternallyReparented  *connect.Client[v19.TabletExternallyReparentedRequest, v19.TabletExternallyReparentedResponse]
	updateCellInfo              *connect.Client[v19.UpdateCellInfoRequest, v19.UpdateCellInfoResponse]
	updateCellsAlias            *connect.Client[v19.UpdateCellsAliasRequest, v19.UpdateCellsAliasResponse]
	validate                    *connect.Client[v19.ValidateRequest, v19.ValidateResponse]
	validateKeyspace            *connect.Client[v19.ValidateKeyspaceRequest, v19.ValidateKeyspaceResponse]
	validateSchemaKeyspace      *connect.Client[v19.ValidateSchemaKeyspaceRequest, v19.ValidateSchemaKeyspaceResponse]
	validateShard               *connect.Client[v19.ValidateShardRequest, v19.ValidateShardResponse]
	validateVersionKeyspace     *connect.Client[v19.ValidateVersionKeyspaceRequest, v19.ValidateVersionKeyspaceResponse]
	validateVersionShard        *connect.Client[v19.ValidateVersionShardRequest, v19.ValidateVersionShardResponse]
	validateVSchema             *connect.Client[v19.ValidateVSchemaRequest, v19.ValidateVSchemaResponse]
	vDiffCreate                 *connect.Client[v19.VDiffCreateRequest, v19.VDiffCreateResponse]
	vDiffDelete                 *connect.Client[v19.VDiffDeleteRequest, v19.VDiffDeleteResponse]
	vDiffResume                 *connect.Client[v19.VDiffResumeRequest, v19.VDiffResumeResponse]
	vDiffShow                   *connect.Client[v19.VDiffShowRequest, v19.VDiffShowResponse]
	vDiffStop                   *connect.Client[v19.VDiffStopRequest, v19.VDiffStopResponse]
	workflowDelete              *connect.Client[v19.WorkflowDeleteRequest, v19.WorkflowDeleteResponse]
	workflowStatus              *connect.Client[v19.WorkflowStatusRequest, v19.WorkflowStatusResponse]
	workflowSwitchTraffic       *connect.Client[v19.WorkflowSwitchTrafficRequest, v19.WorkflowSwitchTrafficResponse]
	workflowUpdate              *connect.Client[v19.WorkflowUpdateRequest, v19.WorkflowUpdateResponse]
}

// AddCellInfo calls vtctlservice.Vtctld.AddCellInfo.
func (c *vtctldClient) AddCellInfo(ctx context.Context, req *connect.Request[v19.AddCellInfoRequest]) (*connect.Response[v19.AddCellInfoResponse], error) {
	return c.addCellInfo.CallUnary(ctx, req)
}

// AddCellsAlias calls vtctlservice.Vtctld.AddCellsAlias.
func (c *vtctldClient) AddCellsAlias(ctx context.Context, req *connect.Request[v19.AddCellsAliasRequest]) (*connect.Response[v19.AddCellsAliasResponse], error) {
	return c.addCellsAlias.CallUnary(ctx, req)
}

// ApplyRoutingRules calls vtctlservice.Vtctld.ApplyRoutingRules.
func (c *vtctldClient) ApplyRoutingRules(ctx context.Context, req *connect.Request[v19.ApplyRoutingRulesRequest]) (*connect.Response[v19.ApplyRoutingRulesResponse], error) {
	return c.applyRoutingRules.CallUnary(ctx, req)
}

// ApplySchema calls vtctlservice.Vtctld.ApplySchema.
func (c *vtctldClient) ApplySchema(ctx context.Context, req *connect.Request[v19.ApplySchemaRequest]) (*connect.Response[v19.ApplySchemaResponse], error) {
	return c.applySchema.CallUnary(ctx, req)
}

// ApplyShardRoutingRules calls vtctlservice.Vtctld.ApplyShardRoutingRules.
func (c *vtctldClient) ApplyShardRoutingRules(ctx context.Context, req *connect.Request[v19.ApplyShardRoutingRulesRequest]) (*connect.Response[v19.ApplyShardRoutingRulesResponse], error) {
	return c.applyShardRoutingRules.CallUnary(ctx, req)
}

// ApplyVSchema calls vtctlservice.Vtctld.ApplyVSchema.
func (c *vtctldClient) ApplyVSchema(ctx context.Context, req *connect.Request[v19.ApplyVSchemaRequest]) (*connect.Response[v19.ApplyVSchemaResponse], error) {
	return c.applyVSchema.CallUnary(ctx, req)
}

// Backup calls vtctlservice.Vtctld.Backup.
func (c *vtctldClient) Backup(ctx context.Context, req *connect.Request[v19.BackupRequest]) (*connect.ServerStreamForClient[v19.BackupResponse], error) {
	return c.backup.CallServerStream(ctx, req)
}

// BackupShard calls vtctlservice.Vtctld.BackupShard.
func (c *vtctldClient) BackupShard(ctx context.Context, req *connect.Request[v19.BackupShardRequest]) (*connect.ServerStreamForClient[v19.BackupResponse], error) {
	return c.backupShard.CallServerStream(ctx, req)
}

// CancelSchemaMigration calls vtctlservice.Vtctld.CancelSchemaMigration.
func (c *vtctldClient) CancelSchemaMigration(ctx context.Context, req *connect.Request[v19.CancelSchemaMigrationRequest]) (*connect.Response[v19.CancelSchemaMigrationResponse], error) {
	return c.cancelSchemaMigration.CallUnary(ctx, req)
}

// ChangeTabletType calls vtctlservice.Vtctld.ChangeTabletType.
func (c *vtctldClient) ChangeTabletType(ctx context.Context, req *connect.Request[v19.ChangeTabletTypeRequest]) (*connect.Response[v19.ChangeTabletTypeResponse], error) {
	return c.changeTabletType.CallUnary(ctx, req)
}

// CleanupSchemaMigration calls vtctlservice.Vtctld.CleanupSchemaMigration.
func (c *vtctldClient) CleanupSchemaMigration(ctx context.Context, req *connect.Request[v19.CleanupSchemaMigrationRequest]) (*connect.Response[v19.CleanupSchemaMigrationResponse], error) {
	return c.cleanupSchemaMigration.CallUnary(ctx, req)
}

// CompleteSchemaMigration calls vtctlservice.Vtctld.CompleteSchemaMigration.
func (c *vtctldClient) CompleteSchemaMigration(ctx context.Context, req *connect.Request[v19.CompleteSchemaMigrationRequest]) (*connect.Response[v19.CompleteSchemaMigrationResponse], error) {
	return c.completeSchemaMigration.CallUnary(ctx, req)
}

// CreateKeyspace calls vtctlservice.Vtctld.CreateKeyspace.
func (c *vtctldClient) CreateKeyspace(ctx context.Context, req *connect.Request[v19.CreateKeyspaceRequest]) (*connect.Response[v19.CreateKeyspaceResponse], error) {
	return c.createKeyspace.CallUnary(ctx, req)
}

// CreateShard calls vtctlservice.Vtctld.CreateShard.
func (c *vtctldClient) CreateShard(ctx context.Context, req *connect.Request[v19.CreateShardRequest]) (*connect.Response[v19.CreateShardResponse], error) {
	return c.createShard.CallUnary(ctx, req)
}

// DeleteCellInfo calls vtctlservice.Vtctld.DeleteCellInfo.
func (c *vtctldClient) DeleteCellInfo(ctx context.Context, req *connect.Request[v19.DeleteCellInfoRequest]) (*connect.Response[v19.DeleteCellInfoResponse], error) {
	return c.deleteCellInfo.CallUnary(ctx, req)
}

// DeleteCellsAlias calls vtctlservice.Vtctld.DeleteCellsAlias.
func (c *vtctldClient) DeleteCellsAlias(ctx context.Context, req *connect.Request[v19.DeleteCellsAliasRequest]) (*connect.Response[v19.DeleteCellsAliasResponse], error) {
	return c.deleteCellsAlias.CallUnary(ctx, req)
}

// DeleteKeyspace calls vtctlservice.Vtctld.DeleteKeyspace.
func (c *vtctldClient) DeleteKeyspace(ctx context.Context, req *connect.Request[v19.DeleteKeyspaceRequest]) (*connect.Response[v19.DeleteKeyspaceResponse], error) {
	return c.deleteKeyspace.CallUnary(ctx, req)
}

// DeleteShards calls vtctlservice.Vtctld.DeleteShards.
func (c *vtctldClient) DeleteShards(ctx context.Context, req *connect.Request[v19.DeleteShardsRequest]) (*connect.Response[v19.DeleteShardsResponse], error) {
	return c.deleteShards.CallUnary(ctx, req)
}

// DeleteSrvVSchema calls vtctlservice.Vtctld.DeleteSrvVSchema.
func (c *vtctldClient) DeleteSrvVSchema(ctx context.Context, req *connect.Request[v19.DeleteSrvVSchemaRequest]) (*connect.Response[v19.DeleteSrvVSchemaResponse], error) {
	return c.deleteSrvVSchema.CallUnary(ctx, req)
}

// DeleteTablets calls vtctlservice.Vtctld.DeleteTablets.
func (c *vtctldClient) DeleteTablets(ctx context.Context, req *connect.Request[v19.DeleteTabletsRequest]) (*connect.Response[v19.DeleteTabletsResponse], error) {
	return c.deleteTablets.CallUnary(ctx, req)
}

// EmergencyReparentShard calls vtctlservice.Vtctld.EmergencyReparentShard.
func (c *vtctldClient) EmergencyReparentShard(ctx context.Context, req *connect.Request[v19.EmergencyReparentShardRequest]) (*connect.Response[v19.EmergencyReparentShardResponse], error) {
	return c.emergencyReparentShard.CallUnary(ctx, req)
}

// ExecuteFetchAsApp calls vtctlservice.Vtctld.ExecuteFetchAsApp.
func (c *vtctldClient) ExecuteFetchAsApp(ctx context.Context, req *connect.Request[v19.ExecuteFetchAsAppRequest]) (*connect.Response[v19.ExecuteFetchAsAppResponse], error) {
	return c.executeFetchAsApp.CallUnary(ctx, req)
}

// ExecuteFetchAsDBA calls vtctlservice.Vtctld.ExecuteFetchAsDBA.
func (c *vtctldClient) ExecuteFetchAsDBA(ctx context.Context, req *connect.Request[v19.ExecuteFetchAsDBARequest]) (*connect.Response[v19.ExecuteFetchAsDBAResponse], error) {
	return c.executeFetchAsDBA.CallUnary(ctx, req)
}

// ExecuteHook calls vtctlservice.Vtctld.ExecuteHook.
func (c *vtctldClient) ExecuteHook(ctx context.Context, req *connect.Request[v19.ExecuteHookRequest]) (*connect.Response[v19.ExecuteHookResponse], error) {
	return c.executeHook.CallUnary(ctx, req)
}

// FindAllShardsInKeyspace calls vtctlservice.Vtctld.FindAllShardsInKeyspace.
func (c *vtctldClient) FindAllShardsInKeyspace(ctx context.Context, req *connect.Request[v19.FindAllShardsInKeyspaceRequest]) (*connect.Response[v19.FindAllShardsInKeyspaceResponse], error) {
	return c.findAllShardsInKeyspace.CallUnary(ctx, req)
}

// ForceCutOverSchemaMigration calls vtctlservice.Vtctld.ForceCutOverSchemaMigration.
func (c *vtctldClient) ForceCutOverSchemaMigration(ctx context.Context, req *connect.Request[v19.ForceCutOverSchemaMigrationRequest]) (*connect.Response[v19.ForceCutOverSchemaMigrationResponse], error) {
	return c.forceCutOverSchemaMigration.CallUnary(ctx, req)
}

// GetBackups calls vtctlservice.Vtctld.GetBackups.
func (c *vtctldClient) GetBackups(ctx context.Context, req *connect.Request[v19.GetBackupsRequest]) (*connect.Response[v19.GetBackupsResponse], error) {
	return c.getBackups.CallUnary(ctx, req)
}

// GetCellInfo calls vtctlservice.Vtctld.GetCellInfo.
func (c *vtctldClient) GetCellInfo(ctx context.Context, req *connect.Request[v19.GetCellInfoRequest]) (*connect.Response[v19.GetCellInfoResponse], error) {
	return c.getCellInfo.CallUnary(ctx, req)
}

// GetCellInfoNames calls vtctlservice.Vtctld.GetCellInfoNames.
func (c *vtctldClient) GetCellInfoNames(ctx context.Context, req *connect.Request[v19.GetCellInfoNamesRequest]) (*connect.Response[v19.GetCellInfoNamesResponse], error) {
	return c.getCellInfoNames.CallUnary(ctx, req)
}

// GetCellsAliases calls vtctlservice.Vtctld.GetCellsAliases.
func (c *vtctldClient) GetCellsAliases(ctx context.Context, req *connect.Request[v19.GetCellsAliasesRequest]) (*connect.Response[v19.GetCellsAliasesResponse], error) {
	return c.getCellsAliases.CallUnary(ctx, req)
}

// GetFullStatus calls vtctlservice.Vtctld.GetFullStatus.
func (c *vtctldClient) GetFullStatus(ctx context.Context, req *connect.Request[v19.GetFullStatusRequest]) (*connect.Response[v19.GetFullStatusResponse], error) {
	return c.getFullStatus.CallUnary(ctx, req)
}

// GetKeyspace calls vtctlservice.Vtctld.GetKeyspace.
func (c *vtctldClient) GetKeyspace(ctx context.Context, req *connect.Request[v19.GetKeyspaceRequest]) (*connect.Response[v19.GetKeyspaceResponse], error) {
	return c.getKeyspace.CallUnary(ctx, req)
}

// GetKeyspaces calls vtctlservice.Vtctld.GetKeyspaces.
func (c *vtctldClient) GetKeyspaces(ctx context.Context, req *connect.Request[v19.GetKeyspacesRequest]) (*connect.Response[v19.GetKeyspacesResponse], error) {
	return c.getKeyspaces.CallUnary(ctx, req)
}

// GetPermissions calls vtctlservice.Vtctld.GetPermissions.
func (c *vtctldClient) GetPermissions(ctx context.Context, req *connect.Request[v19.GetPermissionsRequest]) (*connect.Response[v19.GetPermissionsResponse], error) {
	return c.getPermissions.CallUnary(ctx, req)
}

// GetRoutingRules calls vtctlservice.Vtctld.GetRoutingRules.
func (c *vtctldClient) GetRoutingRules(ctx context.Context, req *connect.Request[v19.GetRoutingRulesRequest]) (*connect.Response[v19.GetRoutingRulesResponse], error) {
	return c.getRoutingRules.CallUnary(ctx, req)
}

// GetSchema calls vtctlservice.Vtctld.GetSchema.
func (c *vtctldClient) GetSchema(ctx context.Context, req *connect.Request[v19.GetSchemaRequest]) (*connect.Response[v19.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// GetSchemaMigrations calls vtctlservice.Vtctld.GetSchemaMigrations.
func (c *vtctldClient) GetSchemaMigrations(ctx context.Context, req *connect.Request[v19.GetSchemaMigrationsRequest]) (*connect.Response[v19.GetSchemaMigrationsResponse], error) {
	return c.getSchemaMigrations.CallUnary(ctx, req)
}

// GetShardReplication calls vtctlservice.Vtctld.GetShardReplication.
func (c *vtctldClient) GetShardReplication(ctx context.Context, req *connect.Request[v19.GetShardReplicationRequest]) (*connect.Response[v19.GetShardReplicationResponse], error) {
	return c.getShardReplication.CallUnary(ctx, req)
}

// GetShard calls vtctlservice.Vtctld.GetShard.
func (c *vtctldClient) GetShard(ctx context.Context, req *connect.Request[v19.GetShardRequest]) (*connect.Response[v19.GetShardResponse], error) {
	return c.getShard.CallUnary(ctx, req)
}

// GetShardRoutingRules calls vtctlservice.Vtctld.GetShardRoutingRules.
func (c *vtctldClient) GetShardRoutingRules(ctx context.Context, req *connect.Request[v19.GetShardRoutingRulesRequest]) (*connect.Response[v19.GetShardRoutingRulesResponse], error) {
	return c.getShardRoutingRules.CallUnary(ctx, req)
}

// GetSrvKeyspaceNames calls vtctlservice.Vtctld.GetSrvKeyspaceNames.
func (c *vtctldClient) GetSrvKeyspaceNames(ctx context.Context, req *connect.Request[v19.GetSrvKeyspaceNamesRequest]) (*connect.Response[v19.GetSrvKeyspaceNamesResponse], error) {
	return c.getSrvKeyspaceNames.CallUnary(ctx, req)
}

// GetSrvKeyspaces calls vtctlservice.Vtctld.GetSrvKeyspaces.
func (c *vtctldClient) GetSrvKeyspaces(ctx context.Context, req *connect.Request[v19.GetSrvKeyspacesRequest]) (*connect.Response[v19.GetSrvKeyspacesResponse], error) {
	return c.getSrvKeyspaces.CallUnary(ctx, req)
}

// UpdateThrottlerConfig calls vtctlservice.Vtctld.UpdateThrottlerConfig.
func (c *vtctldClient) UpdateThrottlerConfig(ctx context.Context, req *connect.Request[v19.UpdateThrottlerConfigRequest]) (*connect.Response[v19.UpdateThrottlerConfigResponse], error) {
	return c.updateThrottlerConfig.CallUnary(ctx, req)
}

// GetSrvVSchema calls vtctlservice.Vtctld.GetSrvVSchema.
func (c *vtctldClient) GetSrvVSchema(ctx context.Context, req *connect.Request[v19.GetSrvVSchemaRequest]) (*connect.Response[v19.GetSrvVSchemaResponse], error) {
	return c.getSrvVSchema.CallUnary(ctx, req)
}

// GetSrvVSchemas calls vtctlservice.Vtctld.GetSrvVSchemas.
func (c *vtctldClient) GetSrvVSchemas(ctx context.Context, req *connect.Request[v19.GetSrvVSchemasRequest]) (*connect.Response[v19.GetSrvVSchemasResponse], error) {
	return c.getSrvVSchemas.CallUnary(ctx, req)
}

// GetTablet calls vtctlservice.Vtctld.GetTablet.
func (c *vtctldClient) GetTablet(ctx context.Context, req *connect.Request[v19.GetTabletRequest]) (*connect.Response[v19.GetTabletResponse], error) {
	return c.getTablet.CallUnary(ctx, req)
}

// GetTablets calls vtctlservice.Vtctld.GetTablets.
func (c *vtctldClient) GetTablets(ctx context.Context, req *connect.Request[v19.GetTabletsRequest]) (*connect.Response[v19.GetTabletsResponse], error) {
	return c.getTablets.CallUnary(ctx, req)
}

// GetTopologyPath calls vtctlservice.Vtctld.GetTopologyPath.
func (c *vtctldClient) GetTopologyPath(ctx context.Context, req *connect.Request[v19.GetTopologyPathRequest]) (*connect.Response[v19.GetTopologyPathResponse], error) {
	return c.getTopologyPath.CallUnary(ctx, req)
}

// GetVersion calls vtctlservice.Vtctld.GetVersion.
func (c *vtctldClient) GetVersion(ctx context.Context, req *connect.Request[v19.GetVersionRequest]) (*connect.Response[v19.GetVersionResponse], error) {
	return c.getVersion.CallUnary(ctx, req)
}

// GetVSchema calls vtctlservice.Vtctld.GetVSchema.
func (c *vtctldClient) GetVSchema(ctx context.Context, req *connect.Request[v19.GetVSchemaRequest]) (*connect.Response[v19.GetVSchemaResponse], error) {
	return c.getVSchema.CallUnary(ctx, req)
}

// GetWorkflows calls vtctlservice.Vtctld.GetWorkflows.
func (c *vtctldClient) GetWorkflows(ctx context.Context, req *connect.Request[v19.GetWorkflowsRequest]) (*connect.Response[v19.GetWorkflowsResponse], error) {
	return c.getWorkflows.CallUnary(ctx, req)
}

// InitShardPrimary calls vtctlservice.Vtctld.InitShardPrimary.
func (c *vtctldClient) InitShardPrimary(ctx context.Context, req *connect.Request[v19.InitShardPrimaryRequest]) (*connect.Response[v19.InitShardPrimaryResponse], error) {
	return c.initShardPrimary.CallUnary(ctx, req)
}

// LaunchSchemaMigration calls vtctlservice.Vtctld.LaunchSchemaMigration.
func (c *vtctldClient) LaunchSchemaMigration(ctx context.Context, req *connect.Request[v19.LaunchSchemaMigrationRequest]) (*connect.Response[v19.LaunchSchemaMigrationResponse], error) {
	return c.launchSchemaMigration.CallUnary(ctx, req)
}

// LookupVindexCreate calls vtctlservice.Vtctld.LookupVindexCreate.
func (c *vtctldClient) LookupVindexCreate(ctx context.Context, req *connect.Request[v19.LookupVindexCreateRequest]) (*connect.Response[v19.LookupVindexCreateResponse], error) {
	return c.lookupVindexCreate.CallUnary(ctx, req)
}

// LookupVindexExternalize calls vtctlservice.Vtctld.LookupVindexExternalize.
func (c *vtctldClient) LookupVindexExternalize(ctx context.Context, req *connect.Request[v19.LookupVindexExternalizeRequest]) (*connect.Response[v19.LookupVindexExternalizeResponse], error) {
	return c.lookupVindexExternalize.CallUnary(ctx, req)
}

// MaterializeCreate calls vtctlservice.Vtctld.MaterializeCreate.
func (c *vtctldClient) MaterializeCreate(ctx context.Context, req *connect.Request[v19.MaterializeCreateRequest]) (*connect.Response[v19.MaterializeCreateResponse], error) {
	return c.materializeCreate.CallUnary(ctx, req)
}

// MigrateCreate calls vtctlservice.Vtctld.MigrateCreate.
func (c *vtctldClient) MigrateCreate(ctx context.Context, req *connect.Request[v19.MigrateCreateRequest]) (*connect.Response[v19.WorkflowStatusResponse], error) {
	return c.migrateCreate.CallUnary(ctx, req)
}

// MountRegister calls vtctlservice.Vtctld.MountRegister.
func (c *vtctldClient) MountRegister(ctx context.Context, req *connect.Request[v19.MountRegisterRequest]) (*connect.Response[v19.MountRegisterResponse], error) {
	return c.mountRegister.CallUnary(ctx, req)
}

// MountUnregister calls vtctlservice.Vtctld.MountUnregister.
func (c *vtctldClient) MountUnregister(ctx context.Context, req *connect.Request[v19.MountUnregisterRequest]) (*connect.Response[v19.MountUnregisterResponse], error) {
	return c.mountUnregister.CallUnary(ctx, req)
}

// MountShow calls vtctlservice.Vtctld.MountShow.
func (c *vtctldClient) MountShow(ctx context.Context, req *connect.Request[v19.MountShowRequest]) (*connect.Response[v19.MountShowResponse], error) {
	return c.mountShow.CallUnary(ctx, req)
}

// MountList calls vtctlservice.Vtctld.MountList.
func (c *vtctldClient) MountList(ctx context.Context, req *connect.Request[v19.MountListRequest]) (*connect.Response[v19.MountListResponse], error) {
	return c.mountList.CallUnary(ctx, req)
}

// MoveTablesCreate calls vtctlservice.Vtctld.MoveTablesCreate.
func (c *vtctldClient) MoveTablesCreate(ctx context.Context, req *connect.Request[v19.MoveTablesCreateRequest]) (*connect.Response[v19.WorkflowStatusResponse], error) {
	return c.moveTablesCreate.CallUnary(ctx, req)
}

// MoveTablesComplete calls vtctlservice.Vtctld.MoveTablesComplete.
func (c *vtctldClient) MoveTablesComplete(ctx context.Context, req *connect.Request[v19.MoveTablesCompleteRequest]) (*connect.Response[v19.MoveTablesCompleteResponse], error) {
	return c.moveTablesComplete.CallUnary(ctx, req)
}

// PingTablet calls vtctlservice.Vtctld.PingTablet.
func (c *vtctldClient) PingTablet(ctx context.Context, req *connect.Request[v19.PingTabletRequest]) (*connect.Response[v19.PingTabletResponse], error) {
	return c.pingTablet.CallUnary(ctx, req)
}

// PlannedReparentShard calls vtctlservice.Vtctld.PlannedReparentShard.
func (c *vtctldClient) PlannedReparentShard(ctx context.Context, req *connect.Request[v19.PlannedReparentShardRequest]) (*connect.Response[v19.PlannedReparentShardResponse], error) {
	return c.plannedReparentShard.CallUnary(ctx, req)
}

// RebuildKeyspaceGraph calls vtctlservice.Vtctld.RebuildKeyspaceGraph.
func (c *vtctldClient) RebuildKeyspaceGraph(ctx context.Context, req *connect.Request[v19.RebuildKeyspaceGraphRequest]) (*connect.Response[v19.RebuildKeyspaceGraphResponse], error) {
	return c.rebuildKeyspaceGraph.CallUnary(ctx, req)
}

// RebuildVSchemaGraph calls vtctlservice.Vtctld.RebuildVSchemaGraph.
func (c *vtctldClient) RebuildVSchemaGraph(ctx context.Context, req *connect.Request[v19.RebuildVSchemaGraphRequest]) (*connect.Response[v19.RebuildVSchemaGraphResponse], error) {
	return c.rebuildVSchemaGraph.CallUnary(ctx, req)
}

// RefreshState calls vtctlservice.Vtctld.RefreshState.
func (c *vtctldClient) RefreshState(ctx context.Context, req *connect.Request[v19.RefreshStateRequest]) (*connect.Response[v19.RefreshStateResponse], error) {
	return c.refreshState.CallUnary(ctx, req)
}

// RefreshStateByShard calls vtctlservice.Vtctld.RefreshStateByShard.
func (c *vtctldClient) RefreshStateByShard(ctx context.Context, req *connect.Request[v19.RefreshStateByShardRequest]) (*connect.Response[v19.RefreshStateByShardResponse], error) {
	return c.refreshStateByShard.CallUnary(ctx, req)
}

// ReloadSchema calls vtctlservice.Vtctld.ReloadSchema.
func (c *vtctldClient) ReloadSchema(ctx context.Context, req *connect.Request[v19.ReloadSchemaRequest]) (*connect.Response[v19.ReloadSchemaResponse], error) {
	return c.reloadSchema.CallUnary(ctx, req)
}

// ReloadSchemaKeyspace calls vtctlservice.Vtctld.ReloadSchemaKeyspace.
func (c *vtctldClient) ReloadSchemaKeyspace(ctx context.Context, req *connect.Request[v19.ReloadSchemaKeyspaceRequest]) (*connect.Response[v19.ReloadSchemaKeyspaceResponse], error) {
	return c.reloadSchemaKeyspace.CallUnary(ctx, req)
}

// ReloadSchemaShard calls vtctlservice.Vtctld.ReloadSchemaShard.
func (c *vtctldClient) ReloadSchemaShard(ctx context.Context, req *connect.Request[v19.ReloadSchemaShardRequest]) (*connect.Response[v19.ReloadSchemaShardResponse], error) {
	return c.reloadSchemaShard.CallUnary(ctx, req)
}

// RemoveBackup calls vtctlservice.Vtctld.RemoveBackup.
func (c *vtctldClient) RemoveBackup(ctx context.Context, req *connect.Request[v19.RemoveBackupRequest]) (*connect.Response[v19.RemoveBackupResponse], error) {
	return c.removeBackup.CallUnary(ctx, req)
}

// RemoveKeyspaceCell calls vtctlservice.Vtctld.RemoveKeyspaceCell.
func (c *vtctldClient) RemoveKeyspaceCell(ctx context.Context, req *connect.Request[v19.RemoveKeyspaceCellRequest]) (*connect.Response[v19.RemoveKeyspaceCellResponse], error) {
	return c.removeKeyspaceCell.CallUnary(ctx, req)
}

// RemoveShardCell calls vtctlservice.Vtctld.RemoveShardCell.
func (c *vtctldClient) RemoveShardCell(ctx context.Context, req *connect.Request[v19.RemoveShardCellRequest]) (*connect.Response[v19.RemoveShardCellResponse], error) {
	return c.removeShardCell.CallUnary(ctx, req)
}

// ReparentTablet calls vtctlservice.Vtctld.ReparentTablet.
func (c *vtctldClient) ReparentTablet(ctx context.Context, req *connect.Request[v19.ReparentTabletRequest]) (*connect.Response[v19.ReparentTabletResponse], error) {
	return c.reparentTablet.CallUnary(ctx, req)
}

// ReshardCreate calls vtctlservice.Vtctld.ReshardCreate.
func (c *vtctldClient) ReshardCreate(ctx context.Context, req *connect.Request[v19.ReshardCreateRequest]) (*connect.Response[v19.WorkflowStatusResponse], error) {
	return c.reshardCreate.CallUnary(ctx, req)
}

// RestoreFromBackup calls vtctlservice.Vtctld.RestoreFromBackup.
func (c *vtctldClient) RestoreFromBackup(ctx context.Context, req *connect.Request[v19.RestoreFromBackupRequest]) (*connect.ServerStreamForClient[v19.RestoreFromBackupResponse], error) {
	return c.restoreFromBackup.CallServerStream(ctx, req)
}

// RetrySchemaMigration calls vtctlservice.Vtctld.RetrySchemaMigration.
func (c *vtctldClient) RetrySchemaMigration(ctx context.Context, req *connect.Request[v19.RetrySchemaMigrationRequest]) (*connect.Response[v19.RetrySchemaMigrationResponse], error) {
	return c.retrySchemaMigration.CallUnary(ctx, req)
}

// RunHealthCheck calls vtctlservice.Vtctld.RunHealthCheck.
func (c *vtctldClient) RunHealthCheck(ctx context.Context, req *connect.Request[v19.RunHealthCheckRequest]) (*connect.Response[v19.RunHealthCheckResponse], error) {
	return c.runHealthCheck.CallUnary(ctx, req)
}

// SetKeyspaceDurabilityPolicy calls vtctlservice.Vtctld.SetKeyspaceDurabilityPolicy.
func (c *vtctldClient) SetKeyspaceDurabilityPolicy(ctx context.Context, req *connect.Request[v19.SetKeyspaceDurabilityPolicyRequest]) (*connect.Response[v19.SetKeyspaceDurabilityPolicyResponse], error) {
	return c.setKeyspaceDurabilityPolicy.CallUnary(ctx, req)
}

// SetShardIsPrimaryServing calls vtctlservice.Vtctld.SetShardIsPrimaryServing.
func (c *vtctldClient) SetShardIsPrimaryServing(ctx context.Context, req *connect.Request[v19.SetShardIsPrimaryServingRequest]) (*connect.Response[v19.SetShardIsPrimaryServingResponse], error) {
	return c.setShardIsPrimaryServing.CallUnary(ctx, req)
}

// SetShardTabletControl calls vtctlservice.Vtctld.SetShardTabletControl.
func (c *vtctldClient) SetShardTabletControl(ctx context.Context, req *connect.Request[v19.SetShardTabletControlRequest]) (*connect.Response[v19.SetShardTabletControlResponse], error) {
	return c.setShardTabletControl.CallUnary(ctx, req)
}

// SetWritable calls vtctlservice.Vtctld.SetWritable.
func (c *vtctldClient) SetWritable(ctx context.Context, req *connect.Request[v19.SetWritableRequest]) (*connect.Response[v19.SetWritableResponse], error) {
	return c.setWritable.CallUnary(ctx, req)
}

// ShardReplicationAdd calls vtctlservice.Vtctld.ShardReplicationAdd.
func (c *vtctldClient) ShardReplicationAdd(ctx context.Context, req *connect.Request[v19.ShardReplicationAddRequest]) (*connect.Response[v19.ShardReplicationAddResponse], error) {
	return c.shardReplicationAdd.CallUnary(ctx, req)
}

// ShardReplicationFix calls vtctlservice.Vtctld.ShardReplicationFix.
func (c *vtctldClient) ShardReplicationFix(ctx context.Context, req *connect.Request[v19.ShardReplicationFixRequest]) (*connect.Response[v19.ShardReplicationFixResponse], error) {
	return c.shardReplicationFix.CallUnary(ctx, req)
}

// ShardReplicationPositions calls vtctlservice.Vtctld.ShardReplicationPositions.
func (c *vtctldClient) ShardReplicationPositions(ctx context.Context, req *connect.Request[v19.ShardReplicationPositionsRequest]) (*connect.Response[v19.ShardReplicationPositionsResponse], error) {
	return c.shardReplicationPositions.CallUnary(ctx, req)
}

// ShardReplicationRemove calls vtctlservice.Vtctld.ShardReplicationRemove.
func (c *vtctldClient) ShardReplicationRemove(ctx context.Context, req *connect.Request[v19.ShardReplicationRemoveRequest]) (*connect.Response[v19.ShardReplicationRemoveResponse], error) {
	return c.shardReplicationRemove.CallUnary(ctx, req)
}

// SleepTablet calls vtctlservice.Vtctld.SleepTablet.
func (c *vtctldClient) SleepTablet(ctx context.Context, req *connect.Request[v19.SleepTabletRequest]) (*connect.Response[v19.SleepTabletResponse], error) {
	return c.sleepTablet.CallUnary(ctx, req)
}

// SourceShardAdd calls vtctlservice.Vtctld.SourceShardAdd.
func (c *vtctldClient) SourceShardAdd(ctx context.Context, req *connect.Request[v19.SourceShardAddRequest]) (*connect.Response[v19.SourceShardAddResponse], error) {
	return c.sourceShardAdd.CallUnary(ctx, req)
}

// SourceShardDelete calls vtctlservice.Vtctld.SourceShardDelete.
func (c *vtctldClient) SourceShardDelete(ctx context.Context, req *connect.Request[v19.SourceShardDeleteRequest]) (*connect.Response[v19.SourceShardDeleteResponse], error) {
	return c.sourceShardDelete.CallUnary(ctx, req)
}

// StartReplication calls vtctlservice.Vtctld.StartReplication.
func (c *vtctldClient) StartReplication(ctx context.Context, req *connect.Request[v19.StartReplicationRequest]) (*connect.Response[v19.StartReplicationResponse], error) {
	return c.startReplication.CallUnary(ctx, req)
}

// StopReplication calls vtctlservice.Vtctld.StopReplication.
func (c *vtctldClient) StopReplication(ctx context.Context, req *connect.Request[v19.StopReplicationRequest]) (*connect.Response[v19.StopReplicationResponse], error) {
	return c.stopReplication.CallUnary(ctx, req)
}

// TabletExternallyReparented calls vtctlservice.Vtctld.TabletExternallyReparented.
func (c *vtctldClient) TabletExternallyReparented(ctx context.Context, req *connect.Request[v19.TabletExternallyReparentedRequest]) (*connect.Response[v19.TabletExternallyReparentedResponse], error) {
	return c.tabletExternallyReparented.CallUnary(ctx, req)
}

// UpdateCellInfo calls vtctlservice.Vtctld.UpdateCellInfo.
func (c *vtctldClient) UpdateCellInfo(ctx context.Context, req *connect.Request[v19.UpdateCellInfoRequest]) (*connect.Response[v19.UpdateCellInfoResponse], error) {
	return c.updateCellInfo.CallUnary(ctx, req)
}

// UpdateCellsAlias calls vtctlservice.Vtctld.UpdateCellsAlias.
func (c *vtctldClient) UpdateCellsAlias(ctx context.Context, req *connect.Request[v19.UpdateCellsAliasRequest]) (*connect.Response[v19.UpdateCellsAliasResponse], error) {
	return c.updateCellsAlias.CallUnary(ctx, req)
}

// Validate calls vtctlservice.Vtctld.Validate.
func (c *vtctldClient) Validate(ctx context.Context, req *connect.Request[v19.ValidateRequest]) (*connect.Response[v19.ValidateResponse], error) {
	return c.validate.CallUnary(ctx, req)
}

// ValidateKeyspace calls vtctlservice.Vtctld.ValidateKeyspace.
func (c *vtctldClient) ValidateKeyspace(ctx context.Context, req *connect.Request[v19.ValidateKeyspaceRequest]) (*connect.Response[v19.ValidateKeyspaceResponse], error) {
	return c.validateKeyspace.CallUnary(ctx, req)
}

// ValidateSchemaKeyspace calls vtctlservice.Vtctld.ValidateSchemaKeyspace.
func (c *vtctldClient) ValidateSchemaKeyspace(ctx context.Context, req *connect.Request[v19.ValidateSchemaKeyspaceRequest]) (*connect.Response[v19.ValidateSchemaKeyspaceResponse], error) {
	return c.validateSchemaKeyspace.CallUnary(ctx, req)
}

// ValidateShard calls vtctlservice.Vtctld.ValidateShard.
func (c *vtctldClient) ValidateShard(ctx context.Context, req *connect.Request[v19.ValidateShardRequest]) (*connect.Response[v19.ValidateShardResponse], error) {
	return c.validateShard.CallUnary(ctx, req)
}

// ValidateVersionKeyspace calls vtctlservice.Vtctld.ValidateVersionKeyspace.
func (c *vtctldClient) ValidateVersionKeyspace(ctx context.Context, req *connect.Request[v19.ValidateVersionKeyspaceRequest]) (*connect.Response[v19.ValidateVersionKeyspaceResponse], error) {
	return c.validateVersionKeyspace.CallUnary(ctx, req)
}

// ValidateVersionShard calls vtctlservice.Vtctld.ValidateVersionShard.
func (c *vtctldClient) ValidateVersionShard(ctx context.Context, req *connect.Request[v19.ValidateVersionShardRequest]) (*connect.Response[v19.ValidateVersionShardResponse], error) {
	return c.validateVersionShard.CallUnary(ctx, req)
}

// ValidateVSchema calls vtctlservice.Vtctld.ValidateVSchema.
func (c *vtctldClient) ValidateVSchema(ctx context.Context, req *connect.Request[v19.ValidateVSchemaRequest]) (*connect.Response[v19.ValidateVSchemaResponse], error) {
	return c.validateVSchema.CallUnary(ctx, req)
}

// VDiffCreate calls vtctlservice.Vtctld.VDiffCreate.
func (c *vtctldClient) VDiffCreate(ctx context.Context, req *connect.Request[v19.VDiffCreateRequest]) (*connect.Response[v19.VDiffCreateResponse], error) {
	return c.vDiffCreate.CallUnary(ctx, req)
}

// VDiffDelete calls vtctlservice.Vtctld.VDiffDelete.
func (c *vtctldClient) VDiffDelete(ctx context.Context, req *connect.Request[v19.VDiffDeleteRequest]) (*connect.Response[v19.VDiffDeleteResponse], error) {
	return c.vDiffDelete.CallUnary(ctx, req)
}

// VDiffResume calls vtctlservice.Vtctld.VDiffResume.
func (c *vtctldClient) VDiffResume(ctx context.Context, req *connect.Request[v19.VDiffResumeRequest]) (*connect.Response[v19.VDiffResumeResponse], error) {
	return c.vDiffResume.CallUnary(ctx, req)
}

// VDiffShow calls vtctlservice.Vtctld.VDiffShow.
func (c *vtctldClient) VDiffShow(ctx context.Context, req *connect.Request[v19.VDiffShowRequest]) (*connect.Response[v19.VDiffShowResponse], error) {
	return c.vDiffShow.CallUnary(ctx, req)
}

// VDiffStop calls vtctlservice.Vtctld.VDiffStop.
func (c *vtctldClient) VDiffStop(ctx context.Context, req *connect.Request[v19.VDiffStopRequest]) (*connect.Response[v19.VDiffStopResponse], error) {
	return c.vDiffStop.CallUnary(ctx, req)
}

// WorkflowDelete calls vtctlservice.Vtctld.WorkflowDelete.
func (c *vtctldClient) WorkflowDelete(ctx context.Context, req *connect.Request[v19.WorkflowDeleteRequest]) (*connect.Response[v19.WorkflowDeleteResponse], error) {
	return c.workflowDelete.CallUnary(ctx, req)
}

// WorkflowStatus calls vtctlservice.Vtctld.WorkflowStatus.
func (c *vtctldClient) WorkflowStatus(ctx context.Context, req *connect.Request[v19.WorkflowStatusRequest]) (*connect.Response[v19.WorkflowStatusResponse], error) {
	return c.workflowStatus.CallUnary(ctx, req)
}

// WorkflowSwitchTraffic calls vtctlservice.Vtctld.WorkflowSwitchTraffic.
func (c *vtctldClient) WorkflowSwitchTraffic(ctx context.Context, req *connect.Request[v19.WorkflowSwitchTrafficRequest]) (*connect.Response[v19.WorkflowSwitchTrafficResponse], error) {
	return c.workflowSwitchTraffic.CallUnary(ctx, req)
}

// WorkflowUpdate calls vtctlservice.Vtctld.WorkflowUpdate.
func (c *vtctldClient) WorkflowUpdate(ctx context.Context, req *connect.Request[v19.WorkflowUpdateRequest]) (*connect.Response[v19.WorkflowUpdateResponse], error) {
	return c.workflowUpdate.CallUnary(ctx, req)
}

// VtctldHandler is an implementation of the vtctlservice.Vtctld service.
type VtctldHandler interface {
	// AddCellInfo registers a local topology service in a new cell by creating
	// the CellInfo with the provided parameters.
	AddCellInfo(context.Context, *connect.Request[v19.AddCellInfoRequest]) (*connect.Response[v19.AddCellInfoResponse], error)
	// AddCellsAlias defines a group of cells that can be referenced by a single
	// name (the alias).
	//
	// When routing query traffic, replica/rdonly traffic can be routed across
	// cells within the group (alias). Only primary traffic can be routed across
	// cells not in the same group (alias).
	AddCellsAlias(context.Context, *connect.Request[v19.AddCellsAliasRequest]) (*connect.Response[v19.AddCellsAliasResponse], error)
	// ApplyRoutingRules applies the VSchema routing rules.
	ApplyRoutingRules(context.Context, *connect.Request[v19.ApplyRoutingRulesRequest]) (*connect.Response[v19.ApplyRoutingRulesResponse], error)
	// ApplySchema applies a schema to a keyspace.
	ApplySchema(context.Context, *connect.Request[v19.ApplySchemaRequest]) (*connect.Response[v19.ApplySchemaResponse], error)
	// ApplyShardRoutingRules applies the VSchema shard routing rules.
	ApplyShardRoutingRules(context.Context, *connect.Request[v19.ApplyShardRoutingRulesRequest]) (*connect.Response[v19.ApplyShardRoutingRulesResponse], error)
	// ApplyVSchema applies a vschema to a keyspace.
	ApplyVSchema(context.Context, *connect.Request[v19.ApplyVSchemaRequest]) (*connect.Response[v19.ApplyVSchemaResponse], error)
	// Backup uses the BackupEngine and BackupStorage services on the specified
	// tablet to create and store a new backup.
	Backup(context.Context, *connect.Request[v19.BackupRequest], *connect.ServerStream[v19.BackupResponse]) error
	// BackupShard chooses a tablet in the shard and uses it to create a backup.
	BackupShard(context.Context, *connect.Request[v19.BackupShardRequest], *connect.ServerStream[v19.BackupResponse]) error
	// CancelSchemaMigration cancels one or all migrations, terminating any running ones as needed.
	CancelSchemaMigration(context.Context, *connect.Request[v19.CancelSchemaMigrationRequest]) (*connect.Response[v19.CancelSchemaMigrationResponse], error)
	// ChangeTabletType changes the db type for the specified tablet, if possible.
	// This is used primarily to arrange replicas, and it will not convert a
	// primary. For that, use InitShardPrimary.
	//
	// NOTE: This command automatically updates the serving graph.
	ChangeTabletType(context.Context, *connect.Request[v19.ChangeTabletTypeRequest]) (*connect.Response[v19.ChangeTabletTypeResponse], error)
	// CleanupSchemaMigration marks a schema migration as ready for artifact cleanup.
	CleanupSchemaMigration(context.Context, *connect.Request[v19.CleanupSchemaMigrationRequest]) (*connect.Response[v19.CleanupSchemaMigrationResponse], error)
	// CompleteSchemaMigration completes one or all migrations executed with --postpone-completion.
	CompleteSchemaMigration(context.Context, *connect.Request[v19.CompleteSchemaMigrationRequest]) (*connect.Response[v19.CompleteSchemaMigrationResponse], error)
	// CreateKeyspace creates the specified keyspace in the topology. For a
	// SNAPSHOT keyspace, the request must specify the name of a base keyspace,
	// as well as a snapshot time.
	CreateKeyspace(context.Context, *connect.Request[v19.CreateKeyspaceRequest]) (*connect.Response[v19.CreateKeyspaceResponse], error)
	// CreateShard creates the specified shard in the topology.
	CreateShard(context.Context, *connect.Request[v19.CreateShardRequest]) (*connect.Response[v19.CreateShardResponse], error)
	// DeleteCellInfo deletes the CellInfo for the provided cell. The cell cannot
	// be referenced by any Shard record in the topology.
	DeleteCellInfo(context.Context, *connect.Request[v19.DeleteCellInfoRequest]) (*connect.Response[v19.DeleteCellInfoResponse], error)
	// DeleteCellsAlias deletes the CellsAlias for the provided alias.
	DeleteCellsAlias(context.Context, *connect.Request[v19.DeleteCellsAliasRequest]) (*connect.Response[v19.DeleteCellsAliasResponse], error)
	// DeleteKeyspace deletes the specified keyspace from the topology. In
	// recursive mode, it also recursively deletes all shards in the keyspace.
	// Otherwise, the keyspace must be empty (have no shards), or DeleteKeyspace
	// returns an error.
	DeleteKeyspace(context.Context, *connect.Request[v19.DeleteKeyspaceRequest]) (*connect.Response[v19.DeleteKeyspaceResponse], error)
	// DeleteShards deletes the specified shards from the topology. In recursive
	// mode, it also deletes all tablets belonging to the shard. Otherwise, the
	// shard must be empty (have no tablets) or DeleteShards returns an error for
	// that shard.
	DeleteShards(context.Context, *connect.Request[v19.DeleteShardsRequest]) (*connect.Response[v19.DeleteShardsResponse], error)
	// DeleteSrvVSchema deletes the SrvVSchema object in the specified cell.
	DeleteSrvVSchema(context.Context, *connect.Request[v19.DeleteSrvVSchemaRequest]) (*connect.Response[v19.DeleteSrvVSchemaResponse], error)
	// DeleteTablets deletes one or more tablets from the topology.
	DeleteTablets(context.Context, *connect.Request[v19.DeleteTabletsRequest]) (*connect.Response[v19.DeleteTabletsResponse], error)
	// EmergencyReparentShard reparents the shard to the new primary. It assumes
	// the old primary is dead or otherwise not responding.
	EmergencyReparentShard(context.Context, *connect.Request[v19.EmergencyReparentShardRequest]) (*connect.Response[v19.EmergencyReparentShardResponse], error)
	// ExecuteFetchAsApp executes a SQL query on the remote tablet as the App user.
	ExecuteFetchAsApp(context.Context, *connect.Request[v19.ExecuteFetchAsAppRequest]) (*connect.Response[v19.ExecuteFetchAsAppResponse], error)
	// ExecuteFetchAsDBA executes a SQL query on the remote tablet as the DBA user.
	ExecuteFetchAsDBA(context.Context, *connect.Request[v19.ExecuteFetchAsDBARequest]) (*connect.Response[v19.ExecuteFetchAsDBAResponse], error)
	// ExecuteHook runs the hook on the tablet.
	ExecuteHook(context.Context, *connect.Request[v19.ExecuteHookRequest]) (*connect.Response[v19.ExecuteHookResponse], error)
	// FindAllShardsInKeyspace returns a map of shard names to shard references
	// for a given keyspace.
	FindAllShardsInKeyspace(context.Context, *connect.Request[v19.FindAllShardsInKeyspaceRequest]) (*connect.Response[v19.FindAllShardsInKeyspaceResponse], error)
	// ForceCutOverSchemaMigration marks a schema migration for forced cut-over.
	ForceCutOverSchemaMigration(context.Context, *connect.Request[v19.ForceCutOverSchemaMigrationRequest]) (*connect.Response[v19.ForceCutOverSchemaMigrationResponse], error)
	// GetBackups returns all the backups for a shard.
	GetBackups(context.Context, *connect.Request[v19.GetBackupsRequest]) (*connect.Response[v19.GetBackupsResponse], error)
	// GetCellInfo returns the information for a cell.
	GetCellInfo(context.Context, *connect.Request[v19.GetCellInfoRequest]) (*connect.Response[v19.GetCellInfoResponse], error)
	// GetCellInfoNames returns all the cells for which we have a CellInfo object,
	// meaning we have a topology service registered.
	GetCellInfoNames(context.Context, *connect.Request[v19.GetCellInfoNamesRequest]) (*connect.Response[v19.GetCellInfoNamesResponse], error)
	// GetCellsAliases returns a mapping of cell alias to cells identified by that
	// alias.
	GetCellsAliases(context.Context, *connect.Request[v19.GetCellsAliasesRequest]) (*connect.Response[v19.GetCellsAliasesResponse], error)
	// GetFullStatus returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	GetFullStatus(context.Context, *connect.Request[v19.GetFullStatusRequest]) (*connect.Response[v19.GetFullStatusResponse], error)
	// GetKeyspace reads the given keyspace from the topo and returns it.
	GetKeyspace(context.Context, *connect.Request[v19.GetKeyspaceRequest]) (*connect.Response[v19.GetKeyspaceResponse], error)
	// GetKeyspaces returns the keyspace struct of all keyspaces in the topo.
	GetKeyspaces(context.Context, *connect.Request[v19.GetKeyspacesRequest]) (*connect.Response[v19.GetKeyspacesResponse], error)
	// GetPermissions returns the permissions set on the remote tablet.
	GetPermissions(context.Context, *connect.Request[v19.GetPermissionsRequest]) (*connect.Response[v19.GetPermissionsResponse], error)
	// GetRoutingRules returns the VSchema routing rules.
	GetRoutingRules(context.Context, *connect.Request[v19.GetRoutingRulesRequest]) (*connect.Response[v19.GetRoutingRulesResponse], error)
	// GetSchema returns the schema for a tablet, or just the schema for the
	// specified tables in that tablet.
	GetSchema(context.Context, *connect.Request[v19.GetSchemaRequest]) (*connect.Response[v19.GetSchemaResponse], error)
	// GetSchemaMigrations returns one or more online schema migrations for the
	// specified keyspace, analagous to `SHOW VITESS_MIGRATIONS`.
	//
	// Different fields in the request message result in different filtering
	// behaviors. See the documentation on GetSchemaMigrationsRequest for details.
	GetSchemaMigrations(context.Context, *connect.Request[v19.GetSchemaMigrationsRequest]) (*connect.Response[v19.GetSchemaMigrationsResponse], error)
	// GetShardReplication returns the replication graph for a shard in a cell.
	GetShardReplication(context.Context, *connect.Request[v19.GetShardReplicationRequest]) (*connect.Response[v19.GetShardReplicationResponse], error)
	// GetShard returns information about a shard in the topology.
	GetShard(context.Context, *connect.Request[v19.GetShardRequest]) (*connect.Response[v19.GetShardResponse], error)
	// GetShardRoutingRules returns the VSchema shard routing rules.
	GetShardRoutingRules(context.Context, *connect.Request[v19.GetShardRoutingRulesRequest]) (*connect.Response[v19.GetShardRoutingRulesResponse], error)
	// GetSrvKeyspaceNames returns a mapping of cell name to the keyspaces served
	// in that cell.
	GetSrvKeyspaceNames(context.Context, *connect.Request[v19.GetSrvKeyspaceNamesRequest]) (*connect.Response[v19.GetSrvKeyspaceNamesResponse], error)
	// GetSrvKeyspaces returns the SrvKeyspaces for a keyspace in one or more
	// cells.
	GetSrvKeyspaces(context.Context, *connect.Request[v19.GetSrvKeyspacesRequest]) (*connect.Response[v19.GetSrvKeyspacesResponse], error)
	// UpdateThrottlerConfig updates the tablet throttler configuration
	UpdateThrottlerConfig(context.Context, *connect.Request[v19.UpdateThrottlerConfigRequest]) (*connect.Response[v19.UpdateThrottlerConfigResponse], error)
	// GetSrvVSchema returns the SrvVSchema for a cell.
	GetSrvVSchema(context.Context, *connect.Request[v19.GetSrvVSchemaRequest]) (*connect.Response[v19.GetSrvVSchemaResponse], error)
	// GetSrvVSchemas returns a mapping from cell name to SrvVSchema for all cells,
	// optionally filtered by cell name.
	GetSrvVSchemas(context.Context, *connect.Request[v19.GetSrvVSchemasRequest]) (*connect.Response[v19.GetSrvVSchemasResponse], error)
	// GetTablet returns information about a tablet.
	GetTablet(context.Context, *connect.Request[v19.GetTabletRequest]) (*connect.Response[v19.GetTabletResponse], error)
	// GetTablets returns tablets, optionally filtered by keyspace and shard.
	GetTablets(context.Context, *connect.Request[v19.GetTabletsRequest]) (*connect.Response[v19.GetTabletsResponse], error)
	// GetTopologyPath returns the topology cell at a given path.
	GetTopologyPath(context.Context, *connect.Request[v19.GetTopologyPathRequest]) (*connect.Response[v19.GetTopologyPathResponse], error)
	// GetVersion returns the version of a tablet from its debug vars.
	GetVersion(context.Context, *connect.Request[v19.GetVersionRequest]) (*connect.Response[v19.GetVersionResponse], error)
	// GetVSchema returns the vschema for a keyspace.
	GetVSchema(context.Context, *connect.Request[v19.GetVSchemaRequest]) (*connect.Response[v19.GetVSchemaResponse], error)
	// GetWorkflows returns a list of workflows for the given keyspace.
	GetWorkflows(context.Context, *connect.Request[v19.GetWorkflowsRequest]) (*connect.Response[v19.GetWorkflowsResponse], error)
	// InitShardPrimary sets the initial primary for a shard. Will make all other
	// tablets in the shard replicas of the provided primary.
	//
	// WARNING: This could cause data loss on an already replicating shard.
	// PlannedReparentShard or EmergencyReparentShard should be used in those
	// cases instead.
	InitShardPrimary(context.Context, *connect.Request[v19.InitShardPrimaryRequest]) (*connect.Response[v19.InitShardPrimaryResponse], error)
	// LaunchSchemaMigration launches one or all migrations executed with --postpone-launch.
	LaunchSchemaMigration(context.Context, *connect.Request[v19.LaunchSchemaMigrationRequest]) (*connect.Response[v19.LaunchSchemaMigrationResponse], error)
	LookupVindexCreate(context.Context, *connect.Request[v19.LookupVindexCreateRequest]) (*connect.Response[v19.LookupVindexCreateResponse], error)
	LookupVindexExternalize(context.Context, *connect.Request[v19.LookupVindexExternalizeRequest]) (*connect.Response[v19.LookupVindexExternalizeResponse], error)
	// MaterializeCreate creates a workflow to materialize one or more tables
	// from a source keyspace to a target keyspace using a provided expressions.
	MaterializeCreate(context.Context, *connect.Request[v19.MaterializeCreateRequest]) (*connect.Response[v19.MaterializeCreateResponse], error)
	// MigrateCreate creates a workflow which migrates one or more tables from an
	// external cluster into Vitess.
	MigrateCreate(context.Context, *connect.Request[v19.MigrateCreateRequest]) (*connect.Response[v19.WorkflowStatusResponse], error)
	// MountRegister registers a new external Vitess cluster.
	MountRegister(context.Context, *connect.Request[v19.MountRegisterRequest]) (*connect.Response[v19.MountRegisterResponse], error)
	// MountUnregister unregisters an external Vitess cluster.
	MountUnregister(context.Context, *connect.Request[v19.MountUnregisterRequest]) (*connect.Response[v19.MountUnregisterResponse], error)
	// MountShow returns information about an external Vitess cluster.
	MountShow(context.Context, *connect.Request[v19.MountShowRequest]) (*connect.Response[v19.MountShowResponse], error)
	// MountList lists all registered external Vitess clusters.
	MountList(context.Context, *connect.Request[v19.MountListRequest]) (*connect.Response[v19.MountListResponse], error)
	// MoveTablesCreate creates a workflow which moves one or more tables from a
	// source keyspace to a target keyspace.
	MoveTablesCreate(context.Context, *connect.Request[v19.MoveTablesCreateRequest]) (*connect.Response[v19.WorkflowStatusResponse], error)
	// MoveTablesComplete completes the move and cleans up the workflow and
	// its related artifacts.
	MoveTablesComplete(context.Context, *connect.Request[v19.MoveTablesCompleteRequest]) (*connect.Response[v19.MoveTablesCompleteResponse], error)
	// PingTablet checks that the specified tablet is awake and responding to RPCs.
	// This command can be blocked by other in-flight operations.
	PingTablet(context.Context, *connect.Request[v19.PingTabletRequest]) (*connect.Response[v19.PingTabletResponse], error)
	// PlannedReparentShard reparents the shard to the new primary, or away from
	// an old primary. Both the old and new primaries need to be reachable and
	// running.
	//
	// **NOTE**: The vtctld will not consider any replicas outside the cell the
	// current shard primary is in for promotion unless NewPrimary is explicitly
	// provided in the request.
	PlannedReparentShard(context.Context, *connect.Request[v19.PlannedReparentShardRequest]) (*connect.Response[v19.PlannedReparentShardResponse], error)
	// RebuildKeyspaceGraph rebuilds the serving data for a keyspace.
	//
	// This may trigger an update to all connected clients.
	RebuildKeyspaceGraph(context.Context, *connect.Request[v19.RebuildKeyspaceGraphRequest]) (*connect.Response[v19.RebuildKeyspaceGraphResponse], error)
	// RebuildVSchemaGraph rebuilds the per-cell SrvVSchema from the global
	// VSchema objects in the provided cells (or all cells in the topo none
	// provided).
	RebuildVSchemaGraph(context.Context, *connect.Request[v19.RebuildVSchemaGraphRequest]) (*connect.Response[v19.RebuildVSchemaGraphResponse], error)
	// RefreshState reloads the tablet record on the specified tablet.
	RefreshState(context.Context, *connect.Request[v19.RefreshStateRequest]) (*connect.Response[v19.RefreshStateResponse], error)
	// RefreshStateByShard calls RefreshState on all the tablets in the given shard.
	RefreshStateByShard(context.Context, *connect.Request[v19.RefreshStateByShardRequest]) (*connect.Response[v19.RefreshStateByShardResponse], error)
	// ReloadSchema instructs the remote tablet to reload its schema.
	ReloadSchema(context.Context, *connect.Request[v19.ReloadSchemaRequest]) (*connect.Response[v19.ReloadSchemaResponse], error)
	// ReloadSchemaKeyspace reloads the schema on all tablets in a keyspace.
	ReloadSchemaKeyspace(context.Context, *connect.Request[v19.ReloadSchemaKeyspaceRequest]) (*connect.Response[v19.ReloadSchemaKeyspaceResponse], error)
	// ReloadSchemaShard reloads the schema on all tablets in a shard.
	//
	// In general, we don't always expect all replicas to be ready to reload, and
	// the periodic schema reload makes them self-healing anyway. So, we do this
	// on a best-effort basis, and log warnings for any tablets that fail to
	// reload within the context deadline.
	ReloadSchemaShard(context.Context, *connect.Request[v19.ReloadSchemaShardRequest]) (*connect.Response[v19.ReloadSchemaShardResponse], error)
	// RemoveBackup removes a backup from the BackupStorage used by vtctld.
	RemoveBackup(context.Context, *connect.Request[v19.RemoveBackupRequest]) (*connect.Response[v19.RemoveBackupResponse], error)
	// RemoveKeyspaceCell removes the specified cell from the Cells list for all
	// shards in the specified keyspace (by calling RemoveShardCell on every
	// shard). It also removes the SrvKeyspace for that keyspace in that cell.
	RemoveKeyspaceCell(context.Context, *connect.Request[v19.RemoveKeyspaceCellRequest]) (*connect.Response[v19.RemoveKeyspaceCellResponse], error)
	// RemoveShardCell removes the specified cell from the specified shard's Cells
	// list.
	RemoveShardCell(context.Context, *connect.Request[v19.RemoveShardCellRequest]) (*connect.Response[v19.RemoveShardCellResponse], error)
	// ReparentTablet reparents a tablet to the current primary in the shard. This
	// only works if the current replica position matches the last known reparent
	// action.
	ReparentTablet(context.Context, *connect.Request[v19.ReparentTabletRequest]) (*connect.Response[v19.ReparentTabletResponse], error)
	// ReshardCreate creates a workflow to reshard a keyspace.
	ReshardCreate(context.Context, *connect.Request[v19.ReshardCreateRequest]) (*connect.Response[v19.WorkflowStatusResponse], error)
	// RestoreFromBackup stops mysqld for the given tablet and restores a backup.
	RestoreFromBackup(context.Context, *connect.Request[v19.RestoreFromBackupRequest], *connect.ServerStream[v19.RestoreFromBackupResponse]) error
	// RetrySchemaMigration marks a given schema migration for retry.
	RetrySchemaMigration(context.Context, *connect.Request[v19.RetrySchemaMigrationRequest]) (*connect.Response[v19.RetrySchemaMigrationResponse], error)
	// RunHealthCheck runs a healthcheck on the remote tablet.
	RunHealthCheck(context.Context, *connect.Request[v19.RunHealthCheckRequest]) (*connect.Response[v19.RunHealthCheckResponse], error)
	// SetKeyspaceDurabilityPolicy updates the DurabilityPolicy for a keyspace.
	SetKeyspaceDurabilityPolicy(context.Context, *connect.Request[v19.SetKeyspaceDurabilityPolicyRequest]) (*connect.Response[v19.SetKeyspaceDurabilityPolicyResponse], error)
	// SetShardIsPrimaryServing adds or removes a shard from serving.
	//
	// This is meant as an emergency function. It does not rebuild any serving
	// graph (i.e. it does not run RebuildKeyspaceGraph).
	SetShardIsPrimaryServing(context.Context, *connect.Request[v19.SetShardIsPrimaryServingRequest]) (*connect.Response[v19.SetShardIsPrimaryServingResponse], error)
	// SetShardTabletControl updates the TabletControl topo record for a shard and
	// tablet type.
	//
	// This should only be used for an emergency fix, or after a finished
	// Reshard. See the documentation on SetShardTabletControlRequest for more
	// information about the different update modes.
	SetShardTabletControl(context.Context, *connect.Request[v19.SetShardTabletControlRequest]) (*connect.Response[v19.SetShardTabletControlResponse], error)
	// SetWritable sets a tablet as read-write (writable=true) or read-only (writable=false).
	SetWritable(context.Context, *connect.Request[v19.SetWritableRequest]) (*connect.Response[v19.SetWritableResponse], error)
	// ShardReplicationAdd adds an entry to a topodata.ShardReplication object.
	//
	// It is a low-level function and should generally not be called.
	ShardReplicationAdd(context.Context, *connect.Request[v19.ShardReplicationAddRequest]) (*connect.Response[v19.ShardReplicationAddResponse], error)
	// ShardReplicationFix walks the replication graph for a shard in a cell and
	// attempts to fix the first problem encountered, returning information about
	// the problem fixed, if any.
	ShardReplicationFix(context.Context, *connect.Request[v19.ShardReplicationFixRequest]) (*connect.Response[v19.ShardReplicationFixResponse], error)
	// ShardReplicationPositions returns the replication position of each tablet
	// in a shard. This RPC makes a best-effort to return partial results. For
	// example, if one tablet in the shard graph is unreachable, then
	// ShardReplicationPositions will return non-error, and include valid results
	// for the reachable tablets.
	ShardReplicationPositions(context.Context, *connect.Request[v19.ShardReplicationPositionsRequest]) (*connect.Response[v19.ShardReplicationPositionsResponse], error)
	// ShardReplicationRemove removes an entry from a topodata.ShardReplication
	// object.
	//
	// It is a low-level function and should generally not be called.
	ShardReplicationRemove(context.Context, *connect.Request[v19.ShardReplicationRemoveRequest]) (*connect.Response[v19.ShardReplicationRemoveResponse], error)
	// SleepTablet blocks the aciton queue on the specified tablet for the
	// specified duration.
	//
	// This is typically used for testing.
	SleepTablet(context.Context, *connect.Request[v19.SleepTabletRequest]) (*connect.Response[v19.SleepTabletResponse], error)
	// SourceShardAdd adds the SourceShard record with the provided index. This
	// should be used only as an emergency function.
	//
	// It does not call RefreshState for the shard primary.
	SourceShardAdd(context.Context, *connect.Request[v19.SourceShardAddRequest]) (*connect.Response[v19.SourceShardAddResponse], error)
	// SourceShardDelete deletes the SourceShard record with the provided index.
	// This should be used only as an emergency cleanup function.
	//
	// It does not call RefreshState for the shard primary.
	SourceShardDelete(context.Context, *connect.Request[v19.SourceShardDeleteRequest]) (*connect.Response[v19.SourceShardDeleteResponse], error)
	// StartReplication starts replication on the specified tablet.
	StartReplication(context.Context, *connect.Request[v19.StartReplicationRequest]) (*connect.Response[v19.StartReplicationResponse], error)
	// StopReplication stops replication on the specified tablet.
	StopReplication(context.Context, *connect.Request[v19.StopReplicationRequest]) (*connect.Response[v19.StopReplicationResponse], error)
	// TabletExternallyReparented changes metadata in the topology server to
	// acknowledge a shard primary change performed by an external tool (e.g.
	// orchestrator).
	//
	// See the Reparenting guide for more information:
	// https://vitess.io/docs/user-guides/configuration-advanced/reparenting/#external-reparenting.
	TabletExternallyReparented(context.Context, *connect.Request[v19.TabletExternallyReparentedRequest]) (*connect.Response[v19.TabletExternallyReparentedResponse], error)
	// UpdateCellInfo updates the content of a CellInfo with the provided
	// parameters. Empty values are ignored. If the cell does not exist, the
	// CellInfo will be created.
	UpdateCellInfo(context.Context, *connect.Request[v19.UpdateCellInfoRequest]) (*connect.Response[v19.UpdateCellInfoResponse], error)
	// UpdateCellsAlias updates the content of a CellsAlias with the provided
	// parameters. Empty values are ignored. If the alias does not exist, the
	// CellsAlias will be created.
	UpdateCellsAlias(context.Context, *connect.Request[v19.UpdateCellsAliasRequest]) (*connect.Response[v19.UpdateCellsAliasResponse], error)
	// Validate validates that all nodes from the global replication graph are
	// reachable, and that all tablets in discoverable cells are consistent.
	Validate(context.Context, *connect.Request[v19.ValidateRequest]) (*connect.Response[v19.ValidateResponse], error)
	// ValidateKeyspace validates that all nodes reachable from the specified
	// keyspace are consistent.
	ValidateKeyspace(context.Context, *connect.Request[v19.ValidateKeyspaceRequest]) (*connect.Response[v19.ValidateKeyspaceResponse], error)
	// ValidateSchemaKeyspace validates that the schema on the primary tablet for shard 0 matches the schema on all of the other tablets in the keyspace.
	ValidateSchemaKeyspace(context.Context, *connect.Request[v19.ValidateSchemaKeyspaceRequest]) (*connect.Response[v19.ValidateSchemaKeyspaceResponse], error)
	// ValidateShard validates that all nodes reachable from the specified shard
	// are consistent.
	ValidateShard(context.Context, *connect.Request[v19.ValidateShardRequest]) (*connect.Response[v19.ValidateShardResponse], error)
	// ValidateVersionKeyspace validates that the version on the primary of shard 0 matches all of the other tablets in the keyspace.
	ValidateVersionKeyspace(context.Context, *connect.Request[v19.ValidateVersionKeyspaceRequest]) (*connect.Response[v19.ValidateVersionKeyspaceResponse], error)
	// ValidateVersionShard validates that the version on the primary matches all of the replicas.
	ValidateVersionShard(context.Context, *connect.Request[v19.ValidateVersionShardRequest]) (*connect.Response[v19.ValidateVersionShardResponse], error)
	// ValidateVSchema compares the schema of each primary tablet in "keyspace/shards..." to the vschema and errs if there are differences.
	ValidateVSchema(context.Context, *connect.Request[v19.ValidateVSchemaRequest]) (*connect.Response[v19.ValidateVSchemaResponse], error)
	VDiffCreate(context.Context, *connect.Request[v19.VDiffCreateRequest]) (*connect.Response[v19.VDiffCreateResponse], error)
	VDiffDelete(context.Context, *connect.Request[v19.VDiffDeleteRequest]) (*connect.Response[v19.VDiffDeleteResponse], error)
	VDiffResume(context.Context, *connect.Request[v19.VDiffResumeRequest]) (*connect.Response[v19.VDiffResumeResponse], error)
	VDiffShow(context.Context, *connect.Request[v19.VDiffShowRequest]) (*connect.Response[v19.VDiffShowResponse], error)
	VDiffStop(context.Context, *connect.Request[v19.VDiffStopRequest]) (*connect.Response[v19.VDiffStopResponse], error)
	// WorkflowDelete deletes a vreplication workflow.
	WorkflowDelete(context.Context, *connect.Request[v19.WorkflowDeleteRequest]) (*connect.Response[v19.WorkflowDeleteResponse], error)
	WorkflowStatus(context.Context, *connect.Request[v19.WorkflowStatusRequest]) (*connect.Response[v19.WorkflowStatusResponse], error)
	WorkflowSwitchTraffic(context.Context, *connect.Request[v19.WorkflowSwitchTrafficRequest]) (*connect.Response[v19.WorkflowSwitchTrafficResponse], error)
	// WorkflowUpdate updates the configuration of a vreplication workflow
	// using the provided updated parameters.
	WorkflowUpdate(context.Context, *connect.Request[v19.WorkflowUpdateRequest]) (*connect.Response[v19.WorkflowUpdateResponse], error)
}

// NewVtctldHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVtctldHandler(svc VtctldHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vtctldMethods := v191.File_vitess_vtctlservice_v19_vtctlservice_proto.Services().ByName("Vtctld").Methods()
	vtctldAddCellInfoHandler := connect.NewUnaryHandler(
		VtctldAddCellInfoProcedure,
		svc.AddCellInfo,
		connect.WithSchema(vtctldMethods.ByName("AddCellInfo")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldAddCellsAliasHandler := connect.NewUnaryHandler(
		VtctldAddCellsAliasProcedure,
		svc.AddCellsAlias,
		connect.WithSchema(vtctldMethods.ByName("AddCellsAlias")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldApplyRoutingRulesHandler := connect.NewUnaryHandler(
		VtctldApplyRoutingRulesProcedure,
		svc.ApplyRoutingRules,
		connect.WithSchema(vtctldMethods.ByName("ApplyRoutingRules")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldApplySchemaHandler := connect.NewUnaryHandler(
		VtctldApplySchemaProcedure,
		svc.ApplySchema,
		connect.WithSchema(vtctldMethods.ByName("ApplySchema")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldApplyShardRoutingRulesHandler := connect.NewUnaryHandler(
		VtctldApplyShardRoutingRulesProcedure,
		svc.ApplyShardRoutingRules,
		connect.WithSchema(vtctldMethods.ByName("ApplyShardRoutingRules")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldApplyVSchemaHandler := connect.NewUnaryHandler(
		VtctldApplyVSchemaProcedure,
		svc.ApplyVSchema,
		connect.WithSchema(vtctldMethods.ByName("ApplyVSchema")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldBackupHandler := connect.NewServerStreamHandler(
		VtctldBackupProcedure,
		svc.Backup,
		connect.WithSchema(vtctldMethods.ByName("Backup")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldBackupShardHandler := connect.NewServerStreamHandler(
		VtctldBackupShardProcedure,
		svc.BackupShard,
		connect.WithSchema(vtctldMethods.ByName("BackupShard")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldCancelSchemaMigrationHandler := connect.NewUnaryHandler(
		VtctldCancelSchemaMigrationProcedure,
		svc.CancelSchemaMigration,
		connect.WithSchema(vtctldMethods.ByName("CancelSchemaMigration")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldChangeTabletTypeHandler := connect.NewUnaryHandler(
		VtctldChangeTabletTypeProcedure,
		svc.ChangeTabletType,
		connect.WithSchema(vtctldMethods.ByName("ChangeTabletType")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldCleanupSchemaMigrationHandler := connect.NewUnaryHandler(
		VtctldCleanupSchemaMigrationProcedure,
		svc.CleanupSchemaMigration,
		connect.WithSchema(vtctldMethods.ByName("CleanupSchemaMigration")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldCompleteSchemaMigrationHandler := connect.NewUnaryHandler(
		VtctldCompleteSchemaMigrationProcedure,
		svc.CompleteSchemaMigration,
		connect.WithSchema(vtctldMethods.ByName("CompleteSchemaMigration")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldCreateKeyspaceHandler := connect.NewUnaryHandler(
		VtctldCreateKeyspaceProcedure,
		svc.CreateKeyspace,
		connect.WithSchema(vtctldMethods.ByName("CreateKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldCreateShardHandler := connect.NewUnaryHandler(
		VtctldCreateShardProcedure,
		svc.CreateShard,
		connect.WithSchema(vtctldMethods.ByName("CreateShard")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldDeleteCellInfoHandler := connect.NewUnaryHandler(
		VtctldDeleteCellInfoProcedure,
		svc.DeleteCellInfo,
		connect.WithSchema(vtctldMethods.ByName("DeleteCellInfo")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldDeleteCellsAliasHandler := connect.NewUnaryHandler(
		VtctldDeleteCellsAliasProcedure,
		svc.DeleteCellsAlias,
		connect.WithSchema(vtctldMethods.ByName("DeleteCellsAlias")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldDeleteKeyspaceHandler := connect.NewUnaryHandler(
		VtctldDeleteKeyspaceProcedure,
		svc.DeleteKeyspace,
		connect.WithSchema(vtctldMethods.ByName("DeleteKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldDeleteShardsHandler := connect.NewUnaryHandler(
		VtctldDeleteShardsProcedure,
		svc.DeleteShards,
		connect.WithSchema(vtctldMethods.ByName("DeleteShards")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldDeleteSrvVSchemaHandler := connect.NewUnaryHandler(
		VtctldDeleteSrvVSchemaProcedure,
		svc.DeleteSrvVSchema,
		connect.WithSchema(vtctldMethods.ByName("DeleteSrvVSchema")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldDeleteTabletsHandler := connect.NewUnaryHandler(
		VtctldDeleteTabletsProcedure,
		svc.DeleteTablets,
		connect.WithSchema(vtctldMethods.ByName("DeleteTablets")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldEmergencyReparentShardHandler := connect.NewUnaryHandler(
		VtctldEmergencyReparentShardProcedure,
		svc.EmergencyReparentShard,
		connect.WithSchema(vtctldMethods.ByName("EmergencyReparentShard")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldExecuteFetchAsAppHandler := connect.NewUnaryHandler(
		VtctldExecuteFetchAsAppProcedure,
		svc.ExecuteFetchAsApp,
		connect.WithSchema(vtctldMethods.ByName("ExecuteFetchAsApp")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldExecuteFetchAsDBAHandler := connect.NewUnaryHandler(
		VtctldExecuteFetchAsDBAProcedure,
		svc.ExecuteFetchAsDBA,
		connect.WithSchema(vtctldMethods.ByName("ExecuteFetchAsDBA")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldExecuteHookHandler := connect.NewUnaryHandler(
		VtctldExecuteHookProcedure,
		svc.ExecuteHook,
		connect.WithSchema(vtctldMethods.ByName("ExecuteHook")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldFindAllShardsInKeyspaceHandler := connect.NewUnaryHandler(
		VtctldFindAllShardsInKeyspaceProcedure,
		svc.FindAllShardsInKeyspace,
		connect.WithSchema(vtctldMethods.ByName("FindAllShardsInKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldForceCutOverSchemaMigrationHandler := connect.NewUnaryHandler(
		VtctldForceCutOverSchemaMigrationProcedure,
		svc.ForceCutOverSchemaMigration,
		connect.WithSchema(vtctldMethods.ByName("ForceCutOverSchemaMigration")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetBackupsHandler := connect.NewUnaryHandler(
		VtctldGetBackupsProcedure,
		svc.GetBackups,
		connect.WithSchema(vtctldMethods.ByName("GetBackups")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetCellInfoHandler := connect.NewUnaryHandler(
		VtctldGetCellInfoProcedure,
		svc.GetCellInfo,
		connect.WithSchema(vtctldMethods.ByName("GetCellInfo")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetCellInfoNamesHandler := connect.NewUnaryHandler(
		VtctldGetCellInfoNamesProcedure,
		svc.GetCellInfoNames,
		connect.WithSchema(vtctldMethods.ByName("GetCellInfoNames")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetCellsAliasesHandler := connect.NewUnaryHandler(
		VtctldGetCellsAliasesProcedure,
		svc.GetCellsAliases,
		connect.WithSchema(vtctldMethods.ByName("GetCellsAliases")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetFullStatusHandler := connect.NewUnaryHandler(
		VtctldGetFullStatusProcedure,
		svc.GetFullStatus,
		connect.WithSchema(vtctldMethods.ByName("GetFullStatus")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetKeyspaceHandler := connect.NewUnaryHandler(
		VtctldGetKeyspaceProcedure,
		svc.GetKeyspace,
		connect.WithSchema(vtctldMethods.ByName("GetKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetKeyspacesHandler := connect.NewUnaryHandler(
		VtctldGetKeyspacesProcedure,
		svc.GetKeyspaces,
		connect.WithSchema(vtctldMethods.ByName("GetKeyspaces")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetPermissionsHandler := connect.NewUnaryHandler(
		VtctldGetPermissionsProcedure,
		svc.GetPermissions,
		connect.WithSchema(vtctldMethods.ByName("GetPermissions")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetRoutingRulesHandler := connect.NewUnaryHandler(
		VtctldGetRoutingRulesProcedure,
		svc.GetRoutingRules,
		connect.WithSchema(vtctldMethods.ByName("GetRoutingRules")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetSchemaHandler := connect.NewUnaryHandler(
		VtctldGetSchemaProcedure,
		svc.GetSchema,
		connect.WithSchema(vtctldMethods.ByName("GetSchema")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetSchemaMigrationsHandler := connect.NewUnaryHandler(
		VtctldGetSchemaMigrationsProcedure,
		svc.GetSchemaMigrations,
		connect.WithSchema(vtctldMethods.ByName("GetSchemaMigrations")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetShardReplicationHandler := connect.NewUnaryHandler(
		VtctldGetShardReplicationProcedure,
		svc.GetShardReplication,
		connect.WithSchema(vtctldMethods.ByName("GetShardReplication")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetShardHandler := connect.NewUnaryHandler(
		VtctldGetShardProcedure,
		svc.GetShard,
		connect.WithSchema(vtctldMethods.ByName("GetShard")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetShardRoutingRulesHandler := connect.NewUnaryHandler(
		VtctldGetShardRoutingRulesProcedure,
		svc.GetShardRoutingRules,
		connect.WithSchema(vtctldMethods.ByName("GetShardRoutingRules")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetSrvKeyspaceNamesHandler := connect.NewUnaryHandler(
		VtctldGetSrvKeyspaceNamesProcedure,
		svc.GetSrvKeyspaceNames,
		connect.WithSchema(vtctldMethods.ByName("GetSrvKeyspaceNames")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetSrvKeyspacesHandler := connect.NewUnaryHandler(
		VtctldGetSrvKeyspacesProcedure,
		svc.GetSrvKeyspaces,
		connect.WithSchema(vtctldMethods.ByName("GetSrvKeyspaces")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldUpdateThrottlerConfigHandler := connect.NewUnaryHandler(
		VtctldUpdateThrottlerConfigProcedure,
		svc.UpdateThrottlerConfig,
		connect.WithSchema(vtctldMethods.ByName("UpdateThrottlerConfig")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetSrvVSchemaHandler := connect.NewUnaryHandler(
		VtctldGetSrvVSchemaProcedure,
		svc.GetSrvVSchema,
		connect.WithSchema(vtctldMethods.ByName("GetSrvVSchema")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetSrvVSchemasHandler := connect.NewUnaryHandler(
		VtctldGetSrvVSchemasProcedure,
		svc.GetSrvVSchemas,
		connect.WithSchema(vtctldMethods.ByName("GetSrvVSchemas")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetTabletHandler := connect.NewUnaryHandler(
		VtctldGetTabletProcedure,
		svc.GetTablet,
		connect.WithSchema(vtctldMethods.ByName("GetTablet")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetTabletsHandler := connect.NewUnaryHandler(
		VtctldGetTabletsProcedure,
		svc.GetTablets,
		connect.WithSchema(vtctldMethods.ByName("GetTablets")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetTopologyPathHandler := connect.NewUnaryHandler(
		VtctldGetTopologyPathProcedure,
		svc.GetTopologyPath,
		connect.WithSchema(vtctldMethods.ByName("GetTopologyPath")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetVersionHandler := connect.NewUnaryHandler(
		VtctldGetVersionProcedure,
		svc.GetVersion,
		connect.WithSchema(vtctldMethods.ByName("GetVersion")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetVSchemaHandler := connect.NewUnaryHandler(
		VtctldGetVSchemaProcedure,
		svc.GetVSchema,
		connect.WithSchema(vtctldMethods.ByName("GetVSchema")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldGetWorkflowsHandler := connect.NewUnaryHandler(
		VtctldGetWorkflowsProcedure,
		svc.GetWorkflows,
		connect.WithSchema(vtctldMethods.ByName("GetWorkflows")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldInitShardPrimaryHandler := connect.NewUnaryHandler(
		VtctldInitShardPrimaryProcedure,
		svc.InitShardPrimary,
		connect.WithSchema(vtctldMethods.ByName("InitShardPrimary")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldLaunchSchemaMigrationHandler := connect.NewUnaryHandler(
		VtctldLaunchSchemaMigrationProcedure,
		svc.LaunchSchemaMigration,
		connect.WithSchema(vtctldMethods.ByName("LaunchSchemaMigration")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldLookupVindexCreateHandler := connect.NewUnaryHandler(
		VtctldLookupVindexCreateProcedure,
		svc.LookupVindexCreate,
		connect.WithSchema(vtctldMethods.ByName("LookupVindexCreate")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldLookupVindexExternalizeHandler := connect.NewUnaryHandler(
		VtctldLookupVindexExternalizeProcedure,
		svc.LookupVindexExternalize,
		connect.WithSchema(vtctldMethods.ByName("LookupVindexExternalize")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldMaterializeCreateHandler := connect.NewUnaryHandler(
		VtctldMaterializeCreateProcedure,
		svc.MaterializeCreate,
		connect.WithSchema(vtctldMethods.ByName("MaterializeCreate")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldMigrateCreateHandler := connect.NewUnaryHandler(
		VtctldMigrateCreateProcedure,
		svc.MigrateCreate,
		connect.WithSchema(vtctldMethods.ByName("MigrateCreate")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldMountRegisterHandler := connect.NewUnaryHandler(
		VtctldMountRegisterProcedure,
		svc.MountRegister,
		connect.WithSchema(vtctldMethods.ByName("MountRegister")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldMountUnregisterHandler := connect.NewUnaryHandler(
		VtctldMountUnregisterProcedure,
		svc.MountUnregister,
		connect.WithSchema(vtctldMethods.ByName("MountUnregister")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldMountShowHandler := connect.NewUnaryHandler(
		VtctldMountShowProcedure,
		svc.MountShow,
		connect.WithSchema(vtctldMethods.ByName("MountShow")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldMountListHandler := connect.NewUnaryHandler(
		VtctldMountListProcedure,
		svc.MountList,
		connect.WithSchema(vtctldMethods.ByName("MountList")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldMoveTablesCreateHandler := connect.NewUnaryHandler(
		VtctldMoveTablesCreateProcedure,
		svc.MoveTablesCreate,
		connect.WithSchema(vtctldMethods.ByName("MoveTablesCreate")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldMoveTablesCompleteHandler := connect.NewUnaryHandler(
		VtctldMoveTablesCompleteProcedure,
		svc.MoveTablesComplete,
		connect.WithSchema(vtctldMethods.ByName("MoveTablesComplete")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldPingTabletHandler := connect.NewUnaryHandler(
		VtctldPingTabletProcedure,
		svc.PingTablet,
		connect.WithSchema(vtctldMethods.ByName("PingTablet")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldPlannedReparentShardHandler := connect.NewUnaryHandler(
		VtctldPlannedReparentShardProcedure,
		svc.PlannedReparentShard,
		connect.WithSchema(vtctldMethods.ByName("PlannedReparentShard")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldRebuildKeyspaceGraphHandler := connect.NewUnaryHandler(
		VtctldRebuildKeyspaceGraphProcedure,
		svc.RebuildKeyspaceGraph,
		connect.WithSchema(vtctldMethods.ByName("RebuildKeyspaceGraph")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldRebuildVSchemaGraphHandler := connect.NewUnaryHandler(
		VtctldRebuildVSchemaGraphProcedure,
		svc.RebuildVSchemaGraph,
		connect.WithSchema(vtctldMethods.ByName("RebuildVSchemaGraph")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldRefreshStateHandler := connect.NewUnaryHandler(
		VtctldRefreshStateProcedure,
		svc.RefreshState,
		connect.WithSchema(vtctldMethods.ByName("RefreshState")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldRefreshStateByShardHandler := connect.NewUnaryHandler(
		VtctldRefreshStateByShardProcedure,
		svc.RefreshStateByShard,
		connect.WithSchema(vtctldMethods.ByName("RefreshStateByShard")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldReloadSchemaHandler := connect.NewUnaryHandler(
		VtctldReloadSchemaProcedure,
		svc.ReloadSchema,
		connect.WithSchema(vtctldMethods.ByName("ReloadSchema")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldReloadSchemaKeyspaceHandler := connect.NewUnaryHandler(
		VtctldReloadSchemaKeyspaceProcedure,
		svc.ReloadSchemaKeyspace,
		connect.WithSchema(vtctldMethods.ByName("ReloadSchemaKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldReloadSchemaShardHandler := connect.NewUnaryHandler(
		VtctldReloadSchemaShardProcedure,
		svc.ReloadSchemaShard,
		connect.WithSchema(vtctldMethods.ByName("ReloadSchemaShard")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldRemoveBackupHandler := connect.NewUnaryHandler(
		VtctldRemoveBackupProcedure,
		svc.RemoveBackup,
		connect.WithSchema(vtctldMethods.ByName("RemoveBackup")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldRemoveKeyspaceCellHandler := connect.NewUnaryHandler(
		VtctldRemoveKeyspaceCellProcedure,
		svc.RemoveKeyspaceCell,
		connect.WithSchema(vtctldMethods.ByName("RemoveKeyspaceCell")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldRemoveShardCellHandler := connect.NewUnaryHandler(
		VtctldRemoveShardCellProcedure,
		svc.RemoveShardCell,
		connect.WithSchema(vtctldMethods.ByName("RemoveShardCell")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldReparentTabletHandler := connect.NewUnaryHandler(
		VtctldReparentTabletProcedure,
		svc.ReparentTablet,
		connect.WithSchema(vtctldMethods.ByName("ReparentTablet")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldReshardCreateHandler := connect.NewUnaryHandler(
		VtctldReshardCreateProcedure,
		svc.ReshardCreate,
		connect.WithSchema(vtctldMethods.ByName("ReshardCreate")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldRestoreFromBackupHandler := connect.NewServerStreamHandler(
		VtctldRestoreFromBackupProcedure,
		svc.RestoreFromBackup,
		connect.WithSchema(vtctldMethods.ByName("RestoreFromBackup")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldRetrySchemaMigrationHandler := connect.NewUnaryHandler(
		VtctldRetrySchemaMigrationProcedure,
		svc.RetrySchemaMigration,
		connect.WithSchema(vtctldMethods.ByName("RetrySchemaMigration")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldRunHealthCheckHandler := connect.NewUnaryHandler(
		VtctldRunHealthCheckProcedure,
		svc.RunHealthCheck,
		connect.WithSchema(vtctldMethods.ByName("RunHealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldSetKeyspaceDurabilityPolicyHandler := connect.NewUnaryHandler(
		VtctldSetKeyspaceDurabilityPolicyProcedure,
		svc.SetKeyspaceDurabilityPolicy,
		connect.WithSchema(vtctldMethods.ByName("SetKeyspaceDurabilityPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldSetShardIsPrimaryServingHandler := connect.NewUnaryHandler(
		VtctldSetShardIsPrimaryServingProcedure,
		svc.SetShardIsPrimaryServing,
		connect.WithSchema(vtctldMethods.ByName("SetShardIsPrimaryServing")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldSetShardTabletControlHandler := connect.NewUnaryHandler(
		VtctldSetShardTabletControlProcedure,
		svc.SetShardTabletControl,
		connect.WithSchema(vtctldMethods.ByName("SetShardTabletControl")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldSetWritableHandler := connect.NewUnaryHandler(
		VtctldSetWritableProcedure,
		svc.SetWritable,
		connect.WithSchema(vtctldMethods.ByName("SetWritable")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldShardReplicationAddHandler := connect.NewUnaryHandler(
		VtctldShardReplicationAddProcedure,
		svc.ShardReplicationAdd,
		connect.WithSchema(vtctldMethods.ByName("ShardReplicationAdd")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldShardReplicationFixHandler := connect.NewUnaryHandler(
		VtctldShardReplicationFixProcedure,
		svc.ShardReplicationFix,
		connect.WithSchema(vtctldMethods.ByName("ShardReplicationFix")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldShardReplicationPositionsHandler := connect.NewUnaryHandler(
		VtctldShardReplicationPositionsProcedure,
		svc.ShardReplicationPositions,
		connect.WithSchema(vtctldMethods.ByName("ShardReplicationPositions")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldShardReplicationRemoveHandler := connect.NewUnaryHandler(
		VtctldShardReplicationRemoveProcedure,
		svc.ShardReplicationRemove,
		connect.WithSchema(vtctldMethods.ByName("ShardReplicationRemove")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldSleepTabletHandler := connect.NewUnaryHandler(
		VtctldSleepTabletProcedure,
		svc.SleepTablet,
		connect.WithSchema(vtctldMethods.ByName("SleepTablet")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldSourceShardAddHandler := connect.NewUnaryHandler(
		VtctldSourceShardAddProcedure,
		svc.SourceShardAdd,
		connect.WithSchema(vtctldMethods.ByName("SourceShardAdd")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldSourceShardDeleteHandler := connect.NewUnaryHandler(
		VtctldSourceShardDeleteProcedure,
		svc.SourceShardDelete,
		connect.WithSchema(vtctldMethods.ByName("SourceShardDelete")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldStartReplicationHandler := connect.NewUnaryHandler(
		VtctldStartReplicationProcedure,
		svc.StartReplication,
		connect.WithSchema(vtctldMethods.ByName("StartReplication")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldStopReplicationHandler := connect.NewUnaryHandler(
		VtctldStopReplicationProcedure,
		svc.StopReplication,
		connect.WithSchema(vtctldMethods.ByName("StopReplication")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldTabletExternallyReparentedHandler := connect.NewUnaryHandler(
		VtctldTabletExternallyReparentedProcedure,
		svc.TabletExternallyReparented,
		connect.WithSchema(vtctldMethods.ByName("TabletExternallyReparented")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldUpdateCellInfoHandler := connect.NewUnaryHandler(
		VtctldUpdateCellInfoProcedure,
		svc.UpdateCellInfo,
		connect.WithSchema(vtctldMethods.ByName("UpdateCellInfo")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldUpdateCellsAliasHandler := connect.NewUnaryHandler(
		VtctldUpdateCellsAliasProcedure,
		svc.UpdateCellsAlias,
		connect.WithSchema(vtctldMethods.ByName("UpdateCellsAlias")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldValidateHandler := connect.NewUnaryHandler(
		VtctldValidateProcedure,
		svc.Validate,
		connect.WithSchema(vtctldMethods.ByName("Validate")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldValidateKeyspaceHandler := connect.NewUnaryHandler(
		VtctldValidateKeyspaceProcedure,
		svc.ValidateKeyspace,
		connect.WithSchema(vtctldMethods.ByName("ValidateKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldValidateSchemaKeyspaceHandler := connect.NewUnaryHandler(
		VtctldValidateSchemaKeyspaceProcedure,
		svc.ValidateSchemaKeyspace,
		connect.WithSchema(vtctldMethods.ByName("ValidateSchemaKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldValidateShardHandler := connect.NewUnaryHandler(
		VtctldValidateShardProcedure,
		svc.ValidateShard,
		connect.WithSchema(vtctldMethods.ByName("ValidateShard")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldValidateVersionKeyspaceHandler := connect.NewUnaryHandler(
		VtctldValidateVersionKeyspaceProcedure,
		svc.ValidateVersionKeyspace,
		connect.WithSchema(vtctldMethods.ByName("ValidateVersionKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldValidateVersionShardHandler := connect.NewUnaryHandler(
		VtctldValidateVersionShardProcedure,
		svc.ValidateVersionShard,
		connect.WithSchema(vtctldMethods.ByName("ValidateVersionShard")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldValidateVSchemaHandler := connect.NewUnaryHandler(
		VtctldValidateVSchemaProcedure,
		svc.ValidateVSchema,
		connect.WithSchema(vtctldMethods.ByName("ValidateVSchema")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldVDiffCreateHandler := connect.NewUnaryHandler(
		VtctldVDiffCreateProcedure,
		svc.VDiffCreate,
		connect.WithSchema(vtctldMethods.ByName("VDiffCreate")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldVDiffDeleteHandler := connect.NewUnaryHandler(
		VtctldVDiffDeleteProcedure,
		svc.VDiffDelete,
		connect.WithSchema(vtctldMethods.ByName("VDiffDelete")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldVDiffResumeHandler := connect.NewUnaryHandler(
		VtctldVDiffResumeProcedure,
		svc.VDiffResume,
		connect.WithSchema(vtctldMethods.ByName("VDiffResume")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldVDiffShowHandler := connect.NewUnaryHandler(
		VtctldVDiffShowProcedure,
		svc.VDiffShow,
		connect.WithSchema(vtctldMethods.ByName("VDiffShow")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldVDiffStopHandler := connect.NewUnaryHandler(
		VtctldVDiffStopProcedure,
		svc.VDiffStop,
		connect.WithSchema(vtctldMethods.ByName("VDiffStop")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldWorkflowDeleteHandler := connect.NewUnaryHandler(
		VtctldWorkflowDeleteProcedure,
		svc.WorkflowDelete,
		connect.WithSchema(vtctldMethods.ByName("WorkflowDelete")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldWorkflowStatusHandler := connect.NewUnaryHandler(
		VtctldWorkflowStatusProcedure,
		svc.WorkflowStatus,
		connect.WithSchema(vtctldMethods.ByName("WorkflowStatus")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldWorkflowSwitchTrafficHandler := connect.NewUnaryHandler(
		VtctldWorkflowSwitchTrafficProcedure,
		svc.WorkflowSwitchTraffic,
		connect.WithSchema(vtctldMethods.ByName("WorkflowSwitchTraffic")),
		connect.WithHandlerOptions(opts...),
	)
	vtctldWorkflowUpdateHandler := connect.NewUnaryHandler(
		VtctldWorkflowUpdateProcedure,
		svc.WorkflowUpdate,
		connect.WithSchema(vtctldMethods.ByName("WorkflowUpdate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/vtctlservice.Vtctld/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VtctldAddCellInfoProcedure:
			vtctldAddCellInfoHandler.ServeHTTP(w, r)
		case VtctldAddCellsAliasProcedure:
			vtctldAddCellsAliasHandler.ServeHTTP(w, r)
		case VtctldApplyRoutingRulesProcedure:
			vtctldApplyRoutingRulesHandler.ServeHTTP(w, r)
		case VtctldApplySchemaProcedure:
			vtctldApplySchemaHandler.ServeHTTP(w, r)
		case VtctldApplyShardRoutingRulesProcedure:
			vtctldApplyShardRoutingRulesHandler.ServeHTTP(w, r)
		case VtctldApplyVSchemaProcedure:
			vtctldApplyVSchemaHandler.ServeHTTP(w, r)
		case VtctldBackupProcedure:
			vtctldBackupHandler.ServeHTTP(w, r)
		case VtctldBackupShardProcedure:
			vtctldBackupShardHandler.ServeHTTP(w, r)
		case VtctldCancelSchemaMigrationProcedure:
			vtctldCancelSchemaMigrationHandler.ServeHTTP(w, r)
		case VtctldChangeTabletTypeProcedure:
			vtctldChangeTabletTypeHandler.ServeHTTP(w, r)
		case VtctldCleanupSchemaMigrationProcedure:
			vtctldCleanupSchemaMigrationHandler.ServeHTTP(w, r)
		case VtctldCompleteSchemaMigrationProcedure:
			vtctldCompleteSchemaMigrationHandler.ServeHTTP(w, r)
		case VtctldCreateKeyspaceProcedure:
			vtctldCreateKeyspaceHandler.ServeHTTP(w, r)
		case VtctldCreateShardProcedure:
			vtctldCreateShardHandler.ServeHTTP(w, r)
		case VtctldDeleteCellInfoProcedure:
			vtctldDeleteCellInfoHandler.ServeHTTP(w, r)
		case VtctldDeleteCellsAliasProcedure:
			vtctldDeleteCellsAliasHandler.ServeHTTP(w, r)
		case VtctldDeleteKeyspaceProcedure:
			vtctldDeleteKeyspaceHandler.ServeHTTP(w, r)
		case VtctldDeleteShardsProcedure:
			vtctldDeleteShardsHandler.ServeHTTP(w, r)
		case VtctldDeleteSrvVSchemaProcedure:
			vtctldDeleteSrvVSchemaHandler.ServeHTTP(w, r)
		case VtctldDeleteTabletsProcedure:
			vtctldDeleteTabletsHandler.ServeHTTP(w, r)
		case VtctldEmergencyReparentShardProcedure:
			vtctldEmergencyReparentShardHandler.ServeHTTP(w, r)
		case VtctldExecuteFetchAsAppProcedure:
			vtctldExecuteFetchAsAppHandler.ServeHTTP(w, r)
		case VtctldExecuteFetchAsDBAProcedure:
			vtctldExecuteFetchAsDBAHandler.ServeHTTP(w, r)
		case VtctldExecuteHookProcedure:
			vtctldExecuteHookHandler.ServeHTTP(w, r)
		case VtctldFindAllShardsInKeyspaceProcedure:
			vtctldFindAllShardsInKeyspaceHandler.ServeHTTP(w, r)
		case VtctldForceCutOverSchemaMigrationProcedure:
			vtctldForceCutOverSchemaMigrationHandler.ServeHTTP(w, r)
		case VtctldGetBackupsProcedure:
			vtctldGetBackupsHandler.ServeHTTP(w, r)
		case VtctldGetCellInfoProcedure:
			vtctldGetCellInfoHandler.ServeHTTP(w, r)
		case VtctldGetCellInfoNamesProcedure:
			vtctldGetCellInfoNamesHandler.ServeHTTP(w, r)
		case VtctldGetCellsAliasesProcedure:
			vtctldGetCellsAliasesHandler.ServeHTTP(w, r)
		case VtctldGetFullStatusProcedure:
			vtctldGetFullStatusHandler.ServeHTTP(w, r)
		case VtctldGetKeyspaceProcedure:
			vtctldGetKeyspaceHandler.ServeHTTP(w, r)
		case VtctldGetKeyspacesProcedure:
			vtctldGetKeyspacesHandler.ServeHTTP(w, r)
		case VtctldGetPermissionsProcedure:
			vtctldGetPermissionsHandler.ServeHTTP(w, r)
		case VtctldGetRoutingRulesProcedure:
			vtctldGetRoutingRulesHandler.ServeHTTP(w, r)
		case VtctldGetSchemaProcedure:
			vtctldGetSchemaHandler.ServeHTTP(w, r)
		case VtctldGetSchemaMigrationsProcedure:
			vtctldGetSchemaMigrationsHandler.ServeHTTP(w, r)
		case VtctldGetShardReplicationProcedure:
			vtctldGetShardReplicationHandler.ServeHTTP(w, r)
		case VtctldGetShardProcedure:
			vtctldGetShardHandler.ServeHTTP(w, r)
		case VtctldGetShardRoutingRulesProcedure:
			vtctldGetShardRoutingRulesHandler.ServeHTTP(w, r)
		case VtctldGetSrvKeyspaceNamesProcedure:
			vtctldGetSrvKeyspaceNamesHandler.ServeHTTP(w, r)
		case VtctldGetSrvKeyspacesProcedure:
			vtctldGetSrvKeyspacesHandler.ServeHTTP(w, r)
		case VtctldUpdateThrottlerConfigProcedure:
			vtctldUpdateThrottlerConfigHandler.ServeHTTP(w, r)
		case VtctldGetSrvVSchemaProcedure:
			vtctldGetSrvVSchemaHandler.ServeHTTP(w, r)
		case VtctldGetSrvVSchemasProcedure:
			vtctldGetSrvVSchemasHandler.ServeHTTP(w, r)
		case VtctldGetTabletProcedure:
			vtctldGetTabletHandler.ServeHTTP(w, r)
		case VtctldGetTabletsProcedure:
			vtctldGetTabletsHandler.ServeHTTP(w, r)
		case VtctldGetTopologyPathProcedure:
			vtctldGetTopologyPathHandler.ServeHTTP(w, r)
		case VtctldGetVersionProcedure:
			vtctldGetVersionHandler.ServeHTTP(w, r)
		case VtctldGetVSchemaProcedure:
			vtctldGetVSchemaHandler.ServeHTTP(w, r)
		case VtctldGetWorkflowsProcedure:
			vtctldGetWorkflowsHandler.ServeHTTP(w, r)
		case VtctldInitShardPrimaryProcedure:
			vtctldInitShardPrimaryHandler.ServeHTTP(w, r)
		case VtctldLaunchSchemaMigrationProcedure:
			vtctldLaunchSchemaMigrationHandler.ServeHTTP(w, r)
		case VtctldLookupVindexCreateProcedure:
			vtctldLookupVindexCreateHandler.ServeHTTP(w, r)
		case VtctldLookupVindexExternalizeProcedure:
			vtctldLookupVindexExternalizeHandler.ServeHTTP(w, r)
		case VtctldMaterializeCreateProcedure:
			vtctldMaterializeCreateHandler.ServeHTTP(w, r)
		case VtctldMigrateCreateProcedure:
			vtctldMigrateCreateHandler.ServeHTTP(w, r)
		case VtctldMountRegisterProcedure:
			vtctldMountRegisterHandler.ServeHTTP(w, r)
		case VtctldMountUnregisterProcedure:
			vtctldMountUnregisterHandler.ServeHTTP(w, r)
		case VtctldMountShowProcedure:
			vtctldMountShowHandler.ServeHTTP(w, r)
		case VtctldMountListProcedure:
			vtctldMountListHandler.ServeHTTP(w, r)
		case VtctldMoveTablesCreateProcedure:
			vtctldMoveTablesCreateHandler.ServeHTTP(w, r)
		case VtctldMoveTablesCompleteProcedure:
			vtctldMoveTablesCompleteHandler.ServeHTTP(w, r)
		case VtctldPingTabletProcedure:
			vtctldPingTabletHandler.ServeHTTP(w, r)
		case VtctldPlannedReparentShardProcedure:
			vtctldPlannedReparentShardHandler.ServeHTTP(w, r)
		case VtctldRebuildKeyspaceGraphProcedure:
			vtctldRebuildKeyspaceGraphHandler.ServeHTTP(w, r)
		case VtctldRebuildVSchemaGraphProcedure:
			vtctldRebuildVSchemaGraphHandler.ServeHTTP(w, r)
		case VtctldRefreshStateProcedure:
			vtctldRefreshStateHandler.ServeHTTP(w, r)
		case VtctldRefreshStateByShardProcedure:
			vtctldRefreshStateByShardHandler.ServeHTTP(w, r)
		case VtctldReloadSchemaProcedure:
			vtctldReloadSchemaHandler.ServeHTTP(w, r)
		case VtctldReloadSchemaKeyspaceProcedure:
			vtctldReloadSchemaKeyspaceHandler.ServeHTTP(w, r)
		case VtctldReloadSchemaShardProcedure:
			vtctldReloadSchemaShardHandler.ServeHTTP(w, r)
		case VtctldRemoveBackupProcedure:
			vtctldRemoveBackupHandler.ServeHTTP(w, r)
		case VtctldRemoveKeyspaceCellProcedure:
			vtctldRemoveKeyspaceCellHandler.ServeHTTP(w, r)
		case VtctldRemoveShardCellProcedure:
			vtctldRemoveShardCellHandler.ServeHTTP(w, r)
		case VtctldReparentTabletProcedure:
			vtctldReparentTabletHandler.ServeHTTP(w, r)
		case VtctldReshardCreateProcedure:
			vtctldReshardCreateHandler.ServeHTTP(w, r)
		case VtctldRestoreFromBackupProcedure:
			vtctldRestoreFromBackupHandler.ServeHTTP(w, r)
		case VtctldRetrySchemaMigrationProcedure:
			vtctldRetrySchemaMigrationHandler.ServeHTTP(w, r)
		case VtctldRunHealthCheckProcedure:
			vtctldRunHealthCheckHandler.ServeHTTP(w, r)
		case VtctldSetKeyspaceDurabilityPolicyProcedure:
			vtctldSetKeyspaceDurabilityPolicyHandler.ServeHTTP(w, r)
		case VtctldSetShardIsPrimaryServingProcedure:
			vtctldSetShardIsPrimaryServingHandler.ServeHTTP(w, r)
		case VtctldSetShardTabletControlProcedure:
			vtctldSetShardTabletControlHandler.ServeHTTP(w, r)
		case VtctldSetWritableProcedure:
			vtctldSetWritableHandler.ServeHTTP(w, r)
		case VtctldShardReplicationAddProcedure:
			vtctldShardReplicationAddHandler.ServeHTTP(w, r)
		case VtctldShardReplicationFixProcedure:
			vtctldShardReplicationFixHandler.ServeHTTP(w, r)
		case VtctldShardReplicationPositionsProcedure:
			vtctldShardReplicationPositionsHandler.ServeHTTP(w, r)
		case VtctldShardReplicationRemoveProcedure:
			vtctldShardReplicationRemoveHandler.ServeHTTP(w, r)
		case VtctldSleepTabletProcedure:
			vtctldSleepTabletHandler.ServeHTTP(w, r)
		case VtctldSourceShardAddProcedure:
			vtctldSourceShardAddHandler.ServeHTTP(w, r)
		case VtctldSourceShardDeleteProcedure:
			vtctldSourceShardDeleteHandler.ServeHTTP(w, r)
		case VtctldStartReplicationProcedure:
			vtctldStartReplicationHandler.ServeHTTP(w, r)
		case VtctldStopReplicationProcedure:
			vtctldStopReplicationHandler.ServeHTTP(w, r)
		case VtctldTabletExternallyReparentedProcedure:
			vtctldTabletExternallyReparentedHandler.ServeHTTP(w, r)
		case VtctldUpdateCellInfoProcedure:
			vtctldUpdateCellInfoHandler.ServeHTTP(w, r)
		case VtctldUpdateCellsAliasProcedure:
			vtctldUpdateCellsAliasHandler.ServeHTTP(w, r)
		case VtctldValidateProcedure:
			vtctldValidateHandler.ServeHTTP(w, r)
		case VtctldValidateKeyspaceProcedure:
			vtctldValidateKeyspaceHandler.ServeHTTP(w, r)
		case VtctldValidateSchemaKeyspaceProcedure:
			vtctldValidateSchemaKeyspaceHandler.ServeHTTP(w, r)
		case VtctldValidateShardProcedure:
			vtctldValidateShardHandler.ServeHTTP(w, r)
		case VtctldValidateVersionKeyspaceProcedure:
			vtctldValidateVersionKeyspaceHandler.ServeHTTP(w, r)
		case VtctldValidateVersionShardProcedure:
			vtctldValidateVersionShardHandler.ServeHTTP(w, r)
		case VtctldValidateVSchemaProcedure:
			vtctldValidateVSchemaHandler.ServeHTTP(w, r)
		case VtctldVDiffCreateProcedure:
			vtctldVDiffCreateHandler.ServeHTTP(w, r)
		case VtctldVDiffDeleteProcedure:
			vtctldVDiffDeleteHandler.ServeHTTP(w, r)
		case VtctldVDiffResumeProcedure:
			vtctldVDiffResumeHandler.ServeHTTP(w, r)
		case VtctldVDiffShowProcedure:
			vtctldVDiffShowHandler.ServeHTTP(w, r)
		case VtctldVDiffStopProcedure:
			vtctldVDiffStopHandler.ServeHTTP(w, r)
		case VtctldWorkflowDeleteProcedure:
			vtctldWorkflowDeleteHandler.ServeHTTP(w, r)
		case VtctldWorkflowStatusProcedure:
			vtctldWorkflowStatusHandler.ServeHTTP(w, r)
		case VtctldWorkflowSwitchTrafficProcedure:
			vtctldWorkflowSwitchTrafficHandler.ServeHTTP(w, r)
		case VtctldWorkflowUpdateProcedure:
			vtctldWorkflowUpdateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVtctldHandler returns CodeUnimplemented from all methods.
type UnimplementedVtctldHandler struct{}

func (UnimplementedVtctldHandler) AddCellInfo(context.Context, *connect.Request[v19.AddCellInfoRequest]) (*connect.Response[v19.AddCellInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.AddCellInfo is not implemented"))
}

func (UnimplementedVtctldHandler) AddCellsAlias(context.Context, *connect.Request[v19.AddCellsAliasRequest]) (*connect.Response[v19.AddCellsAliasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.AddCellsAlias is not implemented"))
}

func (UnimplementedVtctldHandler) ApplyRoutingRules(context.Context, *connect.Request[v19.ApplyRoutingRulesRequest]) (*connect.Response[v19.ApplyRoutingRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ApplyRoutingRules is not implemented"))
}

func (UnimplementedVtctldHandler) ApplySchema(context.Context, *connect.Request[v19.ApplySchemaRequest]) (*connect.Response[v19.ApplySchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ApplySchema is not implemented"))
}

func (UnimplementedVtctldHandler) ApplyShardRoutingRules(context.Context, *connect.Request[v19.ApplyShardRoutingRulesRequest]) (*connect.Response[v19.ApplyShardRoutingRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ApplyShardRoutingRules is not implemented"))
}

func (UnimplementedVtctldHandler) ApplyVSchema(context.Context, *connect.Request[v19.ApplyVSchemaRequest]) (*connect.Response[v19.ApplyVSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ApplyVSchema is not implemented"))
}

func (UnimplementedVtctldHandler) Backup(context.Context, *connect.Request[v19.BackupRequest], *connect.ServerStream[v19.BackupResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.Backup is not implemented"))
}

func (UnimplementedVtctldHandler) BackupShard(context.Context, *connect.Request[v19.BackupShardRequest], *connect.ServerStream[v19.BackupResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.BackupShard is not implemented"))
}

func (UnimplementedVtctldHandler) CancelSchemaMigration(context.Context, *connect.Request[v19.CancelSchemaMigrationRequest]) (*connect.Response[v19.CancelSchemaMigrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.CancelSchemaMigration is not implemented"))
}

func (UnimplementedVtctldHandler) ChangeTabletType(context.Context, *connect.Request[v19.ChangeTabletTypeRequest]) (*connect.Response[v19.ChangeTabletTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ChangeTabletType is not implemented"))
}

func (UnimplementedVtctldHandler) CleanupSchemaMigration(context.Context, *connect.Request[v19.CleanupSchemaMigrationRequest]) (*connect.Response[v19.CleanupSchemaMigrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.CleanupSchemaMigration is not implemented"))
}

func (UnimplementedVtctldHandler) CompleteSchemaMigration(context.Context, *connect.Request[v19.CompleteSchemaMigrationRequest]) (*connect.Response[v19.CompleteSchemaMigrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.CompleteSchemaMigration is not implemented"))
}

func (UnimplementedVtctldHandler) CreateKeyspace(context.Context, *connect.Request[v19.CreateKeyspaceRequest]) (*connect.Response[v19.CreateKeyspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.CreateKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) CreateShard(context.Context, *connect.Request[v19.CreateShardRequest]) (*connect.Response[v19.CreateShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.CreateShard is not implemented"))
}

func (UnimplementedVtctldHandler) DeleteCellInfo(context.Context, *connect.Request[v19.DeleteCellInfoRequest]) (*connect.Response[v19.DeleteCellInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.DeleteCellInfo is not implemented"))
}

func (UnimplementedVtctldHandler) DeleteCellsAlias(context.Context, *connect.Request[v19.DeleteCellsAliasRequest]) (*connect.Response[v19.DeleteCellsAliasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.DeleteCellsAlias is not implemented"))
}

func (UnimplementedVtctldHandler) DeleteKeyspace(context.Context, *connect.Request[v19.DeleteKeyspaceRequest]) (*connect.Response[v19.DeleteKeyspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.DeleteKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) DeleteShards(context.Context, *connect.Request[v19.DeleteShardsRequest]) (*connect.Response[v19.DeleteShardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.DeleteShards is not implemented"))
}

func (UnimplementedVtctldHandler) DeleteSrvVSchema(context.Context, *connect.Request[v19.DeleteSrvVSchemaRequest]) (*connect.Response[v19.DeleteSrvVSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.DeleteSrvVSchema is not implemented"))
}

func (UnimplementedVtctldHandler) DeleteTablets(context.Context, *connect.Request[v19.DeleteTabletsRequest]) (*connect.Response[v19.DeleteTabletsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.DeleteTablets is not implemented"))
}

func (UnimplementedVtctldHandler) EmergencyReparentShard(context.Context, *connect.Request[v19.EmergencyReparentShardRequest]) (*connect.Response[v19.EmergencyReparentShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.EmergencyReparentShard is not implemented"))
}

func (UnimplementedVtctldHandler) ExecuteFetchAsApp(context.Context, *connect.Request[v19.ExecuteFetchAsAppRequest]) (*connect.Response[v19.ExecuteFetchAsAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ExecuteFetchAsApp is not implemented"))
}

func (UnimplementedVtctldHandler) ExecuteFetchAsDBA(context.Context, *connect.Request[v19.ExecuteFetchAsDBARequest]) (*connect.Response[v19.ExecuteFetchAsDBAResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ExecuteFetchAsDBA is not implemented"))
}

func (UnimplementedVtctldHandler) ExecuteHook(context.Context, *connect.Request[v19.ExecuteHookRequest]) (*connect.Response[v19.ExecuteHookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ExecuteHook is not implemented"))
}

func (UnimplementedVtctldHandler) FindAllShardsInKeyspace(context.Context, *connect.Request[v19.FindAllShardsInKeyspaceRequest]) (*connect.Response[v19.FindAllShardsInKeyspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.FindAllShardsInKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) ForceCutOverSchemaMigration(context.Context, *connect.Request[v19.ForceCutOverSchemaMigrationRequest]) (*connect.Response[v19.ForceCutOverSchemaMigrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ForceCutOverSchemaMigration is not implemented"))
}

func (UnimplementedVtctldHandler) GetBackups(context.Context, *connect.Request[v19.GetBackupsRequest]) (*connect.Response[v19.GetBackupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetBackups is not implemented"))
}

func (UnimplementedVtctldHandler) GetCellInfo(context.Context, *connect.Request[v19.GetCellInfoRequest]) (*connect.Response[v19.GetCellInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetCellInfo is not implemented"))
}

func (UnimplementedVtctldHandler) GetCellInfoNames(context.Context, *connect.Request[v19.GetCellInfoNamesRequest]) (*connect.Response[v19.GetCellInfoNamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetCellInfoNames is not implemented"))
}

func (UnimplementedVtctldHandler) GetCellsAliases(context.Context, *connect.Request[v19.GetCellsAliasesRequest]) (*connect.Response[v19.GetCellsAliasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetCellsAliases is not implemented"))
}

func (UnimplementedVtctldHandler) GetFullStatus(context.Context, *connect.Request[v19.GetFullStatusRequest]) (*connect.Response[v19.GetFullStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetFullStatus is not implemented"))
}

func (UnimplementedVtctldHandler) GetKeyspace(context.Context, *connect.Request[v19.GetKeyspaceRequest]) (*connect.Response[v19.GetKeyspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) GetKeyspaces(context.Context, *connect.Request[v19.GetKeyspacesRequest]) (*connect.Response[v19.GetKeyspacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetKeyspaces is not implemented"))
}

func (UnimplementedVtctldHandler) GetPermissions(context.Context, *connect.Request[v19.GetPermissionsRequest]) (*connect.Response[v19.GetPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetPermissions is not implemented"))
}

func (UnimplementedVtctldHandler) GetRoutingRules(context.Context, *connect.Request[v19.GetRoutingRulesRequest]) (*connect.Response[v19.GetRoutingRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetRoutingRules is not implemented"))
}

func (UnimplementedVtctldHandler) GetSchema(context.Context, *connect.Request[v19.GetSchemaRequest]) (*connect.Response[v19.GetSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetSchema is not implemented"))
}

func (UnimplementedVtctldHandler) GetSchemaMigrations(context.Context, *connect.Request[v19.GetSchemaMigrationsRequest]) (*connect.Response[v19.GetSchemaMigrationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetSchemaMigrations is not implemented"))
}

func (UnimplementedVtctldHandler) GetShardReplication(context.Context, *connect.Request[v19.GetShardReplicationRequest]) (*connect.Response[v19.GetShardReplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetShardReplication is not implemented"))
}

func (UnimplementedVtctldHandler) GetShard(context.Context, *connect.Request[v19.GetShardRequest]) (*connect.Response[v19.GetShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetShard is not implemented"))
}

func (UnimplementedVtctldHandler) GetShardRoutingRules(context.Context, *connect.Request[v19.GetShardRoutingRulesRequest]) (*connect.Response[v19.GetShardRoutingRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetShardRoutingRules is not implemented"))
}

func (UnimplementedVtctldHandler) GetSrvKeyspaceNames(context.Context, *connect.Request[v19.GetSrvKeyspaceNamesRequest]) (*connect.Response[v19.GetSrvKeyspaceNamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetSrvKeyspaceNames is not implemented"))
}

func (UnimplementedVtctldHandler) GetSrvKeyspaces(context.Context, *connect.Request[v19.GetSrvKeyspacesRequest]) (*connect.Response[v19.GetSrvKeyspacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetSrvKeyspaces is not implemented"))
}

func (UnimplementedVtctldHandler) UpdateThrottlerConfig(context.Context, *connect.Request[v19.UpdateThrottlerConfigRequest]) (*connect.Response[v19.UpdateThrottlerConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.UpdateThrottlerConfig is not implemented"))
}

func (UnimplementedVtctldHandler) GetSrvVSchema(context.Context, *connect.Request[v19.GetSrvVSchemaRequest]) (*connect.Response[v19.GetSrvVSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetSrvVSchema is not implemented"))
}

func (UnimplementedVtctldHandler) GetSrvVSchemas(context.Context, *connect.Request[v19.GetSrvVSchemasRequest]) (*connect.Response[v19.GetSrvVSchemasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetSrvVSchemas is not implemented"))
}

func (UnimplementedVtctldHandler) GetTablet(context.Context, *connect.Request[v19.GetTabletRequest]) (*connect.Response[v19.GetTabletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetTablet is not implemented"))
}

func (UnimplementedVtctldHandler) GetTablets(context.Context, *connect.Request[v19.GetTabletsRequest]) (*connect.Response[v19.GetTabletsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetTablets is not implemented"))
}

func (UnimplementedVtctldHandler) GetTopologyPath(context.Context, *connect.Request[v19.GetTopologyPathRequest]) (*connect.Response[v19.GetTopologyPathResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetTopologyPath is not implemented"))
}

func (UnimplementedVtctldHandler) GetVersion(context.Context, *connect.Request[v19.GetVersionRequest]) (*connect.Response[v19.GetVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetVersion is not implemented"))
}

func (UnimplementedVtctldHandler) GetVSchema(context.Context, *connect.Request[v19.GetVSchemaRequest]) (*connect.Response[v19.GetVSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetVSchema is not implemented"))
}

func (UnimplementedVtctldHandler) GetWorkflows(context.Context, *connect.Request[v19.GetWorkflowsRequest]) (*connect.Response[v19.GetWorkflowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.GetWorkflows is not implemented"))
}

func (UnimplementedVtctldHandler) InitShardPrimary(context.Context, *connect.Request[v19.InitShardPrimaryRequest]) (*connect.Response[v19.InitShardPrimaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.InitShardPrimary is not implemented"))
}

func (UnimplementedVtctldHandler) LaunchSchemaMigration(context.Context, *connect.Request[v19.LaunchSchemaMigrationRequest]) (*connect.Response[v19.LaunchSchemaMigrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.LaunchSchemaMigration is not implemented"))
}

func (UnimplementedVtctldHandler) LookupVindexCreate(context.Context, *connect.Request[v19.LookupVindexCreateRequest]) (*connect.Response[v19.LookupVindexCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.LookupVindexCreate is not implemented"))
}

func (UnimplementedVtctldHandler) LookupVindexExternalize(context.Context, *connect.Request[v19.LookupVindexExternalizeRequest]) (*connect.Response[v19.LookupVindexExternalizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.LookupVindexExternalize is not implemented"))
}

func (UnimplementedVtctldHandler) MaterializeCreate(context.Context, *connect.Request[v19.MaterializeCreateRequest]) (*connect.Response[v19.MaterializeCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.MaterializeCreate is not implemented"))
}

func (UnimplementedVtctldHandler) MigrateCreate(context.Context, *connect.Request[v19.MigrateCreateRequest]) (*connect.Response[v19.WorkflowStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.MigrateCreate is not implemented"))
}

func (UnimplementedVtctldHandler) MountRegister(context.Context, *connect.Request[v19.MountRegisterRequest]) (*connect.Response[v19.MountRegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.MountRegister is not implemented"))
}

func (UnimplementedVtctldHandler) MountUnregister(context.Context, *connect.Request[v19.MountUnregisterRequest]) (*connect.Response[v19.MountUnregisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.MountUnregister is not implemented"))
}

func (UnimplementedVtctldHandler) MountShow(context.Context, *connect.Request[v19.MountShowRequest]) (*connect.Response[v19.MountShowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.MountShow is not implemented"))
}

func (UnimplementedVtctldHandler) MountList(context.Context, *connect.Request[v19.MountListRequest]) (*connect.Response[v19.MountListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.MountList is not implemented"))
}

func (UnimplementedVtctldHandler) MoveTablesCreate(context.Context, *connect.Request[v19.MoveTablesCreateRequest]) (*connect.Response[v19.WorkflowStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.MoveTablesCreate is not implemented"))
}

func (UnimplementedVtctldHandler) MoveTablesComplete(context.Context, *connect.Request[v19.MoveTablesCompleteRequest]) (*connect.Response[v19.MoveTablesCompleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.MoveTablesComplete is not implemented"))
}

func (UnimplementedVtctldHandler) PingTablet(context.Context, *connect.Request[v19.PingTabletRequest]) (*connect.Response[v19.PingTabletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.PingTablet is not implemented"))
}

func (UnimplementedVtctldHandler) PlannedReparentShard(context.Context, *connect.Request[v19.PlannedReparentShardRequest]) (*connect.Response[v19.PlannedReparentShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.PlannedReparentShard is not implemented"))
}

func (UnimplementedVtctldHandler) RebuildKeyspaceGraph(context.Context, *connect.Request[v19.RebuildKeyspaceGraphRequest]) (*connect.Response[v19.RebuildKeyspaceGraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.RebuildKeyspaceGraph is not implemented"))
}

func (UnimplementedVtctldHandler) RebuildVSchemaGraph(context.Context, *connect.Request[v19.RebuildVSchemaGraphRequest]) (*connect.Response[v19.RebuildVSchemaGraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.RebuildVSchemaGraph is not implemented"))
}

func (UnimplementedVtctldHandler) RefreshState(context.Context, *connect.Request[v19.RefreshStateRequest]) (*connect.Response[v19.RefreshStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.RefreshState is not implemented"))
}

func (UnimplementedVtctldHandler) RefreshStateByShard(context.Context, *connect.Request[v19.RefreshStateByShardRequest]) (*connect.Response[v19.RefreshStateByShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.RefreshStateByShard is not implemented"))
}

func (UnimplementedVtctldHandler) ReloadSchema(context.Context, *connect.Request[v19.ReloadSchemaRequest]) (*connect.Response[v19.ReloadSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ReloadSchema is not implemented"))
}

func (UnimplementedVtctldHandler) ReloadSchemaKeyspace(context.Context, *connect.Request[v19.ReloadSchemaKeyspaceRequest]) (*connect.Response[v19.ReloadSchemaKeyspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ReloadSchemaKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) ReloadSchemaShard(context.Context, *connect.Request[v19.ReloadSchemaShardRequest]) (*connect.Response[v19.ReloadSchemaShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ReloadSchemaShard is not implemented"))
}

func (UnimplementedVtctldHandler) RemoveBackup(context.Context, *connect.Request[v19.RemoveBackupRequest]) (*connect.Response[v19.RemoveBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.RemoveBackup is not implemented"))
}

func (UnimplementedVtctldHandler) RemoveKeyspaceCell(context.Context, *connect.Request[v19.RemoveKeyspaceCellRequest]) (*connect.Response[v19.RemoveKeyspaceCellResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.RemoveKeyspaceCell is not implemented"))
}

func (UnimplementedVtctldHandler) RemoveShardCell(context.Context, *connect.Request[v19.RemoveShardCellRequest]) (*connect.Response[v19.RemoveShardCellResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.RemoveShardCell is not implemented"))
}

func (UnimplementedVtctldHandler) ReparentTablet(context.Context, *connect.Request[v19.ReparentTabletRequest]) (*connect.Response[v19.ReparentTabletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ReparentTablet is not implemented"))
}

func (UnimplementedVtctldHandler) ReshardCreate(context.Context, *connect.Request[v19.ReshardCreateRequest]) (*connect.Response[v19.WorkflowStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ReshardCreate is not implemented"))
}

func (UnimplementedVtctldHandler) RestoreFromBackup(context.Context, *connect.Request[v19.RestoreFromBackupRequest], *connect.ServerStream[v19.RestoreFromBackupResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.RestoreFromBackup is not implemented"))
}

func (UnimplementedVtctldHandler) RetrySchemaMigration(context.Context, *connect.Request[v19.RetrySchemaMigrationRequest]) (*connect.Response[v19.RetrySchemaMigrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.RetrySchemaMigration is not implemented"))
}

func (UnimplementedVtctldHandler) RunHealthCheck(context.Context, *connect.Request[v19.RunHealthCheckRequest]) (*connect.Response[v19.RunHealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.RunHealthCheck is not implemented"))
}

func (UnimplementedVtctldHandler) SetKeyspaceDurabilityPolicy(context.Context, *connect.Request[v19.SetKeyspaceDurabilityPolicyRequest]) (*connect.Response[v19.SetKeyspaceDurabilityPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.SetKeyspaceDurabilityPolicy is not implemented"))
}

func (UnimplementedVtctldHandler) SetShardIsPrimaryServing(context.Context, *connect.Request[v19.SetShardIsPrimaryServingRequest]) (*connect.Response[v19.SetShardIsPrimaryServingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.SetShardIsPrimaryServing is not implemented"))
}

func (UnimplementedVtctldHandler) SetShardTabletControl(context.Context, *connect.Request[v19.SetShardTabletControlRequest]) (*connect.Response[v19.SetShardTabletControlResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.SetShardTabletControl is not implemented"))
}

func (UnimplementedVtctldHandler) SetWritable(context.Context, *connect.Request[v19.SetWritableRequest]) (*connect.Response[v19.SetWritableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.SetWritable is not implemented"))
}

func (UnimplementedVtctldHandler) ShardReplicationAdd(context.Context, *connect.Request[v19.ShardReplicationAddRequest]) (*connect.Response[v19.ShardReplicationAddResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ShardReplicationAdd is not implemented"))
}

func (UnimplementedVtctldHandler) ShardReplicationFix(context.Context, *connect.Request[v19.ShardReplicationFixRequest]) (*connect.Response[v19.ShardReplicationFixResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ShardReplicationFix is not implemented"))
}

func (UnimplementedVtctldHandler) ShardReplicationPositions(context.Context, *connect.Request[v19.ShardReplicationPositionsRequest]) (*connect.Response[v19.ShardReplicationPositionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ShardReplicationPositions is not implemented"))
}

func (UnimplementedVtctldHandler) ShardReplicationRemove(context.Context, *connect.Request[v19.ShardReplicationRemoveRequest]) (*connect.Response[v19.ShardReplicationRemoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ShardReplicationRemove is not implemented"))
}

func (UnimplementedVtctldHandler) SleepTablet(context.Context, *connect.Request[v19.SleepTabletRequest]) (*connect.Response[v19.SleepTabletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.SleepTablet is not implemented"))
}

func (UnimplementedVtctldHandler) SourceShardAdd(context.Context, *connect.Request[v19.SourceShardAddRequest]) (*connect.Response[v19.SourceShardAddResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.SourceShardAdd is not implemented"))
}

func (UnimplementedVtctldHandler) SourceShardDelete(context.Context, *connect.Request[v19.SourceShardDeleteRequest]) (*connect.Response[v19.SourceShardDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.SourceShardDelete is not implemented"))
}

func (UnimplementedVtctldHandler) StartReplication(context.Context, *connect.Request[v19.StartReplicationRequest]) (*connect.Response[v19.StartReplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.StartReplication is not implemented"))
}

func (UnimplementedVtctldHandler) StopReplication(context.Context, *connect.Request[v19.StopReplicationRequest]) (*connect.Response[v19.StopReplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.StopReplication is not implemented"))
}

func (UnimplementedVtctldHandler) TabletExternallyReparented(context.Context, *connect.Request[v19.TabletExternallyReparentedRequest]) (*connect.Response[v19.TabletExternallyReparentedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.TabletExternallyReparented is not implemented"))
}

func (UnimplementedVtctldHandler) UpdateCellInfo(context.Context, *connect.Request[v19.UpdateCellInfoRequest]) (*connect.Response[v19.UpdateCellInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.UpdateCellInfo is not implemented"))
}

func (UnimplementedVtctldHandler) UpdateCellsAlias(context.Context, *connect.Request[v19.UpdateCellsAliasRequest]) (*connect.Response[v19.UpdateCellsAliasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.UpdateCellsAlias is not implemented"))
}

func (UnimplementedVtctldHandler) Validate(context.Context, *connect.Request[v19.ValidateRequest]) (*connect.Response[v19.ValidateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.Validate is not implemented"))
}

func (UnimplementedVtctldHandler) ValidateKeyspace(context.Context, *connect.Request[v19.ValidateKeyspaceRequest]) (*connect.Response[v19.ValidateKeyspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ValidateKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) ValidateSchemaKeyspace(context.Context, *connect.Request[v19.ValidateSchemaKeyspaceRequest]) (*connect.Response[v19.ValidateSchemaKeyspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ValidateSchemaKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) ValidateShard(context.Context, *connect.Request[v19.ValidateShardRequest]) (*connect.Response[v19.ValidateShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ValidateShard is not implemented"))
}

func (UnimplementedVtctldHandler) ValidateVersionKeyspace(context.Context, *connect.Request[v19.ValidateVersionKeyspaceRequest]) (*connect.Response[v19.ValidateVersionKeyspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ValidateVersionKeyspace is not implemented"))
}

func (UnimplementedVtctldHandler) ValidateVersionShard(context.Context, *connect.Request[v19.ValidateVersionShardRequest]) (*connect.Response[v19.ValidateVersionShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ValidateVersionShard is not implemented"))
}

func (UnimplementedVtctldHandler) ValidateVSchema(context.Context, *connect.Request[v19.ValidateVSchemaRequest]) (*connect.Response[v19.ValidateVSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.ValidateVSchema is not implemented"))
}

func (UnimplementedVtctldHandler) VDiffCreate(context.Context, *connect.Request[v19.VDiffCreateRequest]) (*connect.Response[v19.VDiffCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.VDiffCreate is not implemented"))
}

func (UnimplementedVtctldHandler) VDiffDelete(context.Context, *connect.Request[v19.VDiffDeleteRequest]) (*connect.Response[v19.VDiffDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.VDiffDelete is not implemented"))
}

func (UnimplementedVtctldHandler) VDiffResume(context.Context, *connect.Request[v19.VDiffResumeRequest]) (*connect.Response[v19.VDiffResumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.VDiffResume is not implemented"))
}

func (UnimplementedVtctldHandler) VDiffShow(context.Context, *connect.Request[v19.VDiffShowRequest]) (*connect.Response[v19.VDiffShowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.VDiffShow is not implemented"))
}

func (UnimplementedVtctldHandler) VDiffStop(context.Context, *connect.Request[v19.VDiffStopRequest]) (*connect.Response[v19.VDiffStopResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.VDiffStop is not implemented"))
}

func (UnimplementedVtctldHandler) WorkflowDelete(context.Context, *connect.Request[v19.WorkflowDeleteRequest]) (*connect.Response[v19.WorkflowDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.WorkflowDelete is not implemented"))
}

func (UnimplementedVtctldHandler) WorkflowStatus(context.Context, *connect.Request[v19.WorkflowStatusRequest]) (*connect.Response[v19.WorkflowStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.WorkflowStatus is not implemented"))
}

func (UnimplementedVtctldHandler) WorkflowSwitchTraffic(context.Context, *connect.Request[v19.WorkflowSwitchTrafficRequest]) (*connect.Response[v19.WorkflowSwitchTrafficResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.WorkflowSwitchTraffic is not implemented"))
}

func (UnimplementedVtctldHandler) WorkflowUpdate(context.Context, *connect.Request[v19.WorkflowUpdateRequest]) (*connect.Response[v19.WorkflowUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vtctlservice.Vtctld.WorkflowUpdate is not implemented"))
}
