//
//Copyright 2020 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
// This package contains the types used by VTAdmin (and later an RPC service).

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vitess/vtadmin/v16/vtadmin.proto

package vtadminv16connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v16 "github.com/planetscale/vitess-types/gen/vitess/vtadmin/v16"
	v161 "github.com/planetscale/vitess-types/gen/vitess/vtctldata/v16"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// VTAdminName is the fully-qualified name of the VTAdmin service.
	VTAdminName = "vtadmin.VTAdmin"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VTAdminCreateKeyspaceProcedure is the fully-qualified name of the VTAdmin's CreateKeyspace RPC.
	VTAdminCreateKeyspaceProcedure = "/vtadmin.VTAdmin/CreateKeyspace"
	// VTAdminCreateShardProcedure is the fully-qualified name of the VTAdmin's CreateShard RPC.
	VTAdminCreateShardProcedure = "/vtadmin.VTAdmin/CreateShard"
	// VTAdminDeleteKeyspaceProcedure is the fully-qualified name of the VTAdmin's DeleteKeyspace RPC.
	VTAdminDeleteKeyspaceProcedure = "/vtadmin.VTAdmin/DeleteKeyspace"
	// VTAdminDeleteShardsProcedure is the fully-qualified name of the VTAdmin's DeleteShards RPC.
	VTAdminDeleteShardsProcedure = "/vtadmin.VTAdmin/DeleteShards"
	// VTAdminDeleteTabletProcedure is the fully-qualified name of the VTAdmin's DeleteTablet RPC.
	VTAdminDeleteTabletProcedure = "/vtadmin.VTAdmin/DeleteTablet"
	// VTAdminEmergencyFailoverShardProcedure is the fully-qualified name of the VTAdmin's
	// EmergencyFailoverShard RPC.
	VTAdminEmergencyFailoverShardProcedure = "/vtadmin.VTAdmin/EmergencyFailoverShard"
	// VTAdminFindSchemaProcedure is the fully-qualified name of the VTAdmin's FindSchema RPC.
	VTAdminFindSchemaProcedure = "/vtadmin.VTAdmin/FindSchema"
	// VTAdminGetBackupsProcedure is the fully-qualified name of the VTAdmin's GetBackups RPC.
	VTAdminGetBackupsProcedure = "/vtadmin.VTAdmin/GetBackups"
	// VTAdminGetCellInfosProcedure is the fully-qualified name of the VTAdmin's GetCellInfos RPC.
	VTAdminGetCellInfosProcedure = "/vtadmin.VTAdmin/GetCellInfos"
	// VTAdminGetCellsAliasesProcedure is the fully-qualified name of the VTAdmin's GetCellsAliases RPC.
	VTAdminGetCellsAliasesProcedure = "/vtadmin.VTAdmin/GetCellsAliases"
	// VTAdminGetClustersProcedure is the fully-qualified name of the VTAdmin's GetClusters RPC.
	VTAdminGetClustersProcedure = "/vtadmin.VTAdmin/GetClusters"
	// VTAdminGetFullStatusProcedure is the fully-qualified name of the VTAdmin's GetFullStatus RPC.
	VTAdminGetFullStatusProcedure = "/vtadmin.VTAdmin/GetFullStatus"
	// VTAdminGetGatesProcedure is the fully-qualified name of the VTAdmin's GetGates RPC.
	VTAdminGetGatesProcedure = "/vtadmin.VTAdmin/GetGates"
	// VTAdminGetKeyspaceProcedure is the fully-qualified name of the VTAdmin's GetKeyspace RPC.
	VTAdminGetKeyspaceProcedure = "/vtadmin.VTAdmin/GetKeyspace"
	// VTAdminGetKeyspacesProcedure is the fully-qualified name of the VTAdmin's GetKeyspaces RPC.
	VTAdminGetKeyspacesProcedure = "/vtadmin.VTAdmin/GetKeyspaces"
	// VTAdminGetSchemaProcedure is the fully-qualified name of the VTAdmin's GetSchema RPC.
	VTAdminGetSchemaProcedure = "/vtadmin.VTAdmin/GetSchema"
	// VTAdminGetSchemasProcedure is the fully-qualified name of the VTAdmin's GetSchemas RPC.
	VTAdminGetSchemasProcedure = "/vtadmin.VTAdmin/GetSchemas"
	// VTAdminGetShardReplicationPositionsProcedure is the fully-qualified name of the VTAdmin's
	// GetShardReplicationPositions RPC.
	VTAdminGetShardReplicationPositionsProcedure = "/vtadmin.VTAdmin/GetShardReplicationPositions"
	// VTAdminGetSrvVSchemaProcedure is the fully-qualified name of the VTAdmin's GetSrvVSchema RPC.
	VTAdminGetSrvVSchemaProcedure = "/vtadmin.VTAdmin/GetSrvVSchema"
	// VTAdminGetSrvVSchemasProcedure is the fully-qualified name of the VTAdmin's GetSrvVSchemas RPC.
	VTAdminGetSrvVSchemasProcedure = "/vtadmin.VTAdmin/GetSrvVSchemas"
	// VTAdminGetTabletProcedure is the fully-qualified name of the VTAdmin's GetTablet RPC.
	VTAdminGetTabletProcedure = "/vtadmin.VTAdmin/GetTablet"
	// VTAdminGetTabletsProcedure is the fully-qualified name of the VTAdmin's GetTablets RPC.
	VTAdminGetTabletsProcedure = "/vtadmin.VTAdmin/GetTablets"
	// VTAdminGetTopologyPathProcedure is the fully-qualified name of the VTAdmin's GetTopologyPath RPC.
	VTAdminGetTopologyPathProcedure = "/vtadmin.VTAdmin/GetTopologyPath"
	// VTAdminGetVSchemaProcedure is the fully-qualified name of the VTAdmin's GetVSchema RPC.
	VTAdminGetVSchemaProcedure = "/vtadmin.VTAdmin/GetVSchema"
	// VTAdminGetVSchemasProcedure is the fully-qualified name of the VTAdmin's GetVSchemas RPC.
	VTAdminGetVSchemasProcedure = "/vtadmin.VTAdmin/GetVSchemas"
	// VTAdminGetVtctldsProcedure is the fully-qualified name of the VTAdmin's GetVtctlds RPC.
	VTAdminGetVtctldsProcedure = "/vtadmin.VTAdmin/GetVtctlds"
	// VTAdminGetWorkflowProcedure is the fully-qualified name of the VTAdmin's GetWorkflow RPC.
	VTAdminGetWorkflowProcedure = "/vtadmin.VTAdmin/GetWorkflow"
	// VTAdminGetWorkflowsProcedure is the fully-qualified name of the VTAdmin's GetWorkflows RPC.
	VTAdminGetWorkflowsProcedure = "/vtadmin.VTAdmin/GetWorkflows"
	// VTAdminPingTabletProcedure is the fully-qualified name of the VTAdmin's PingTablet RPC.
	VTAdminPingTabletProcedure = "/vtadmin.VTAdmin/PingTablet"
	// VTAdminPlannedFailoverShardProcedure is the fully-qualified name of the VTAdmin's
	// PlannedFailoverShard RPC.
	VTAdminPlannedFailoverShardProcedure = "/vtadmin.VTAdmin/PlannedFailoverShard"
	// VTAdminRebuildKeyspaceGraphProcedure is the fully-qualified name of the VTAdmin's
	// RebuildKeyspaceGraph RPC.
	VTAdminRebuildKeyspaceGraphProcedure = "/vtadmin.VTAdmin/RebuildKeyspaceGraph"
	// VTAdminRefreshStateProcedure is the fully-qualified name of the VTAdmin's RefreshState RPC.
	VTAdminRefreshStateProcedure = "/vtadmin.VTAdmin/RefreshState"
	// VTAdminRefreshTabletReplicationSourceProcedure is the fully-qualified name of the VTAdmin's
	// RefreshTabletReplicationSource RPC.
	VTAdminRefreshTabletReplicationSourceProcedure = "/vtadmin.VTAdmin/RefreshTabletReplicationSource"
	// VTAdminReloadSchemasProcedure is the fully-qualified name of the VTAdmin's ReloadSchemas RPC.
	VTAdminReloadSchemasProcedure = "/vtadmin.VTAdmin/ReloadSchemas"
	// VTAdminReloadSchemaShardProcedure is the fully-qualified name of the VTAdmin's ReloadSchemaShard
	// RPC.
	VTAdminReloadSchemaShardProcedure = "/vtadmin.VTAdmin/ReloadSchemaShard"
	// VTAdminRemoveKeyspaceCellProcedure is the fully-qualified name of the VTAdmin's
	// RemoveKeyspaceCell RPC.
	VTAdminRemoveKeyspaceCellProcedure = "/vtadmin.VTAdmin/RemoveKeyspaceCell"
	// VTAdminRunHealthCheckProcedure is the fully-qualified name of the VTAdmin's RunHealthCheck RPC.
	VTAdminRunHealthCheckProcedure = "/vtadmin.VTAdmin/RunHealthCheck"
	// VTAdminSetReadOnlyProcedure is the fully-qualified name of the VTAdmin's SetReadOnly RPC.
	VTAdminSetReadOnlyProcedure = "/vtadmin.VTAdmin/SetReadOnly"
	// VTAdminSetReadWriteProcedure is the fully-qualified name of the VTAdmin's SetReadWrite RPC.
	VTAdminSetReadWriteProcedure = "/vtadmin.VTAdmin/SetReadWrite"
	// VTAdminStartReplicationProcedure is the fully-qualified name of the VTAdmin's StartReplication
	// RPC.
	VTAdminStartReplicationProcedure = "/vtadmin.VTAdmin/StartReplication"
	// VTAdminStopReplicationProcedure is the fully-qualified name of the VTAdmin's StopReplication RPC.
	VTAdminStopReplicationProcedure = "/vtadmin.VTAdmin/StopReplication"
	// VTAdminTabletExternallyPromotedProcedure is the fully-qualified name of the VTAdmin's
	// TabletExternallyPromoted RPC.
	VTAdminTabletExternallyPromotedProcedure = "/vtadmin.VTAdmin/TabletExternallyPromoted"
	// VTAdminValidateProcedure is the fully-qualified name of the VTAdmin's Validate RPC.
	VTAdminValidateProcedure = "/vtadmin.VTAdmin/Validate"
	// VTAdminValidateKeyspaceProcedure is the fully-qualified name of the VTAdmin's ValidateKeyspace
	// RPC.
	VTAdminValidateKeyspaceProcedure = "/vtadmin.VTAdmin/ValidateKeyspace"
	// VTAdminValidateSchemaKeyspaceProcedure is the fully-qualified name of the VTAdmin's
	// ValidateSchemaKeyspace RPC.
	VTAdminValidateSchemaKeyspaceProcedure = "/vtadmin.VTAdmin/ValidateSchemaKeyspace"
	// VTAdminValidateShardProcedure is the fully-qualified name of the VTAdmin's ValidateShard RPC.
	VTAdminValidateShardProcedure = "/vtadmin.VTAdmin/ValidateShard"
	// VTAdminValidateVersionKeyspaceProcedure is the fully-qualified name of the VTAdmin's
	// ValidateVersionKeyspace RPC.
	VTAdminValidateVersionKeyspaceProcedure = "/vtadmin.VTAdmin/ValidateVersionKeyspace"
	// VTAdminValidateVersionShardProcedure is the fully-qualified name of the VTAdmin's
	// ValidateVersionShard RPC.
	VTAdminValidateVersionShardProcedure = "/vtadmin.VTAdmin/ValidateVersionShard"
	// VTAdminVTExplainProcedure is the fully-qualified name of the VTAdmin's VTExplain RPC.
	VTAdminVTExplainProcedure = "/vtadmin.VTAdmin/VTExplain"
)

// VTAdminClient is a client for the vtadmin.VTAdmin service.
type VTAdminClient interface {
	// CreateKeyspace creates a new keyspace in the given cluster.
	CreateKeyspace(context.Context, *connect_go.Request[v16.CreateKeyspaceRequest]) (*connect_go.Response[v16.CreateKeyspaceResponse], error)
	// CreateShard creates a new shard in the given cluster and keyspace.
	CreateShard(context.Context, *connect_go.Request[v16.CreateShardRequest]) (*connect_go.Response[v161.CreateShardResponse], error)
	// DeleteKeyspace deletes a keyspace in the given cluster.
	DeleteKeyspace(context.Context, *connect_go.Request[v16.DeleteKeyspaceRequest]) (*connect_go.Response[v161.DeleteKeyspaceResponse], error)
	// DeleteShard deletes one or more shards in the given cluster and keyspace.
	DeleteShards(context.Context, *connect_go.Request[v16.DeleteShardsRequest]) (*connect_go.Response[v161.DeleteShardsResponse], error)
	// DeleteTablet deletes a tablet from the topology
	DeleteTablet(context.Context, *connect_go.Request[v16.DeleteTabletRequest]) (*connect_go.Response[v16.DeleteTabletResponse], error)
	// EmergencyFailoverShard fails over a shard to a new primary. It assumes
	// the old primary is dead or otherwise not responding.
	EmergencyFailoverShard(context.Context, *connect_go.Request[v16.EmergencyFailoverShardRequest]) (*connect_go.Response[v16.EmergencyFailoverShardResponse], error)
	// FindSchema returns a single Schema that matches the provided table name
	// across all specified clusters IDs. Not specifying a set of cluster IDs
	// causes the search to span all configured clusters.
	//
	// An error occurs if either no table exists across any of the clusters with
	// the specified table name, or if multiple tables exist with that name.
	FindSchema(context.Context, *connect_go.Request[v16.FindSchemaRequest]) (*connect_go.Response[v16.Schema], error)
	// GetBackups returns backups grouped by cluster.
	GetBackups(context.Context, *connect_go.Request[v16.GetBackupsRequest]) (*connect_go.Response[v16.GetBackupsResponse], error)
	// GetCellInfos returns the CellInfo objects for the specified clusters.
	//
	// Callers may optionally restrict the set of CellInfos, or restrict the
	// response to include only cell names.
	GetCellInfos(context.Context, *connect_go.Request[v16.GetCellInfosRequest]) (*connect_go.Response[v16.GetCellInfosResponse], error)
	// GetCellsAliases returns the CellsAliases data for the specified clusters.
	GetCellsAliases(context.Context, *connect_go.Request[v16.GetCellsAliasesRequest]) (*connect_go.Response[v16.GetCellsAliasesResponse], error)
	// GetClusters returns all configured clusters.
	GetClusters(context.Context, *connect_go.Request[v16.GetClustersRequest]) (*connect_go.Response[v16.GetClustersResponse], error)
	// GetFullStatus returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	GetFullStatus(context.Context, *connect_go.Request[v16.GetFullStatusRequest]) (*connect_go.Response[v161.GetFullStatusResponse], error)
	// GetGates returns all gates across all the specified clusters.
	GetGates(context.Context, *connect_go.Request[v16.GetGatesRequest]) (*connect_go.Response[v16.GetGatesResponse], error)
	// GetKeyspace returns a keyspace by name in the specified cluster.
	GetKeyspace(context.Context, *connect_go.Request[v16.GetKeyspaceRequest]) (*connect_go.Response[v16.Keyspace], error)
	// GetKeyspaces returns all keyspaces across the specified clusters.
	GetKeyspaces(context.Context, *connect_go.Request[v16.GetKeyspacesRequest]) (*connect_go.Response[v16.GetKeyspacesResponse], error)
	// GetSchema returns the schema for the specified (cluster, keyspace, table)
	// tuple.
	GetSchema(context.Context, *connect_go.Request[v16.GetSchemaRequest]) (*connect_go.Response[v16.Schema], error)
	// GetSchemas returns all schemas across the specified clusters.
	GetSchemas(context.Context, *connect_go.Request[v16.GetSchemasRequest]) (*connect_go.Response[v16.GetSchemasResponse], error)
	// GetShardReplicationPositions returns shard replication positions grouped
	// by cluster.
	GetShardReplicationPositions(context.Context, *connect_go.Request[v16.GetShardReplicationPositionsRequest]) (*connect_go.Response[v16.GetShardReplicationPositionsResponse], error)
	// GetSrvVSchema returns the SrvVSchema for the given cluster and cell.
	GetSrvVSchema(context.Context, *connect_go.Request[v16.GetSrvVSchemaRequest]) (*connect_go.Response[v16.SrvVSchema], error)
	// GetSrvVSchemas returns all SrvVSchemas across all (or specified) clusters
	// and cells.
	GetSrvVSchemas(context.Context, *connect_go.Request[v16.GetSrvVSchemasRequest]) (*connect_go.Response[v16.GetSrvVSchemasResponse], error)
	// GetTablet looks up a tablet by hostname across all clusters and returns
	// the result.
	GetTablet(context.Context, *connect_go.Request[v16.GetTabletRequest]) (*connect_go.Response[v16.Tablet], error)
	// GetTablets returns all tablets across all the specified clusters.
	GetTablets(context.Context, *connect_go.Request[v16.GetTabletsRequest]) (*connect_go.Response[v16.GetTabletsResponse], error)
	// GetTopologyPath returns the cell located at the specified path in the topology server.
	GetTopologyPath(context.Context, *connect_go.Request[v16.GetTopologyPathRequest]) (*connect_go.Response[v161.GetTopologyPathResponse], error)
	// GetVSchema returns a VSchema for the specified keyspace in the specified
	// cluster.
	GetVSchema(context.Context, *connect_go.Request[v16.GetVSchemaRequest]) (*connect_go.Response[v16.VSchema], error)
	// GetVSchemas returns the VSchemas for all specified clusters.
	GetVSchemas(context.Context, *connect_go.Request[v16.GetVSchemasRequest]) (*connect_go.Response[v16.GetVSchemasResponse], error)
	// GetVtctlds returns the Vtctlds for all specified clusters.
	GetVtctlds(context.Context, *connect_go.Request[v16.GetVtctldsRequest]) (*connect_go.Response[v16.GetVtctldsResponse], error)
	// GetWorkflow returns a single Workflow for a given cluster, keyspace, and
	// workflow name.
	GetWorkflow(context.Context, *connect_go.Request[v16.GetWorkflowRequest]) (*connect_go.Response[v16.Workflow], error)
	// GetWorkflows returns the Workflows for all specified clusters.
	GetWorkflows(context.Context, *connect_go.Request[v16.GetWorkflowsRequest]) (*connect_go.Response[v16.GetWorkflowsResponse], error)
	// PingTablet checks that the specified tablet is awake and responding to
	// RPCs. This command can be blocked by other in-flight operations.
	PingTablet(context.Context, *connect_go.Request[v16.PingTabletRequest]) (*connect_go.Response[v16.PingTabletResponse], error)
	// PlannedFailoverShard fails over the shard to a new primary, or away from
	// an old primary. Both the old and new primaries must be reachable and
	// running.
	//
	// NOTE: A planned failover will not consider replicas outside the current
	// shard primary's cell as promotion candidates unless NewPrimary is
	// explicitly provided in the request.
	PlannedFailoverShard(context.Context, *connect_go.Request[v16.PlannedFailoverShardRequest]) (*connect_go.Response[v16.PlannedFailoverShardResponse], error)
	// RebuildKeyspaceGraph rebuilds the serving data for a keyspace.
	RebuildKeyspaceGraph(context.Context, *connect_go.Request[v16.RebuildKeyspaceGraphRequest]) (*connect_go.Response[v16.RebuildKeyspaceGraphResponse], error)
	// RefreshState reloads the tablet record on the specified tablet.
	RefreshState(context.Context, *connect_go.Request[v16.RefreshStateRequest]) (*connect_go.Response[v16.RefreshStateResponse], error)
	// RefreshTabletReplicationSource performs a `CHANGE REPLICATION SOURCE TO`
	// on a tablet to replicate from the current primary in the shard.
	RefreshTabletReplicationSource(context.Context, *connect_go.Request[v16.RefreshTabletReplicationSourceRequest]) (*connect_go.Response[v16.RefreshTabletReplicationSourceResponse], error)
	// ReloadSchemas reloads the schema definition across keyspaces, shards, or
	// tablets in one or more clusters, depending on the request fields (see
	// ReloadSchemasRequest for details).
	ReloadSchemas(context.Context, *connect_go.Request[v16.ReloadSchemasRequest]) (*connect_go.Response[v16.ReloadSchemasResponse], error)
	// ReloadSchemaShard reloads the schema on all tablets in a shard. This is done on a best-effort basis.
	ReloadSchemaShard(context.Context, *connect_go.Request[v16.ReloadSchemaShardRequest]) (*connect_go.Response[v16.ReloadSchemaShardResponse], error)
	// RemoveKeyspaceCell removes the cell from the Cells list for all shards in the keyspace, and the SrvKeyspace for that keyspace in that cell.
	RemoveKeyspaceCell(context.Context, *connect_go.Request[v16.RemoveKeyspaceCellRequest]) (*connect_go.Response[v16.RemoveKeyspaceCellResponse], error)
	// RunHealthCheck runs a healthcheck on the tablet.
	RunHealthCheck(context.Context, *connect_go.Request[v16.RunHealthCheckRequest]) (*connect_go.Response[v16.RunHealthCheckResponse], error)
	// SetReadOnly sets the tablet to read-only mode.
	SetReadOnly(context.Context, *connect_go.Request[v16.SetReadOnlyRequest]) (*connect_go.Response[v16.SetReadOnlyResponse], error)
	// SetReadWrite sets the tablet to read-write mode.
	SetReadWrite(context.Context, *connect_go.Request[v16.SetReadWriteRequest]) (*connect_go.Response[v16.SetReadWriteResponse], error)
	// StartReplication runs the underlying database command to start
	// replication on a tablet.
	StartReplication(context.Context, *connect_go.Request[v16.StartReplicationRequest]) (*connect_go.Response[v16.StartReplicationResponse], error)
	// StopReplication runs the underlying database command to stop replication
	// on a tablet
	StopReplication(context.Context, *connect_go.Request[v16.StopReplicationRequest]) (*connect_go.Response[v16.StopReplicationResponse], error)
	// TabletExternallyPromoted updates the metadata in a cluster's topology
	// to acknowledge a shard primary change performed by an external tool
	// (e.g. orchestrator*).
	//
	// See the Reparenting guide for more information:
	// https://vitess.io/docs/user-guides/configuration-advanced/reparenting/#external-reparenting.
	//
	// * "orchestrator" here refers to external orchestrator, not the newer,
	// Vitess-aware orchestrator, VTOrc.
	TabletExternallyPromoted(context.Context, *connect_go.Request[v16.TabletExternallyPromotedRequest]) (*connect_go.Response[v16.TabletExternallyPromotedResponse], error)
	// Validate validates all nodes in a cluster that are reachable from the global replication graph,
	// as well as all tablets in discoverable cells, are consistent
	Validate(context.Context, *connect_go.Request[v16.ValidateRequest]) (*connect_go.Response[v161.ValidateResponse], error)
	// ValidateKeyspace validates that all nodes reachable from the specified
	// keyspace are consistent.
	ValidateKeyspace(context.Context, *connect_go.Request[v16.ValidateKeyspaceRequest]) (*connect_go.Response[v161.ValidateKeyspaceResponse], error)
	// ValidateSchemaKeyspace validates that the schema on the primary tablet
	// for shard 0 matches the schema on all of the other tablets in the
	// keyspace.
	ValidateSchemaKeyspace(context.Context, *connect_go.Request[v16.ValidateSchemaKeyspaceRequest]) (*connect_go.Response[v161.ValidateSchemaKeyspaceResponse], error)
	// ValidateShard validates that that all nodes reachable from the specified shard are consistent.
	ValidateShard(context.Context, *connect_go.Request[v16.ValidateShardRequest]) (*connect_go.Response[v161.ValidateShardResponse], error)
	// ValidateVersionKeyspace validates that the version on the primary of
	// shard 0 matches all of the other tablets in the keyspace.
	ValidateVersionKeyspace(context.Context, *connect_go.Request[v16.ValidateVersionKeyspaceRequest]) (*connect_go.Response[v161.ValidateVersionKeyspaceResponse], error)
	// ValidateVersionShard validates that the version on the primary matches all of the replicas.
	ValidateVersionShard(context.Context, *connect_go.Request[v16.ValidateVersionShardRequest]) (*connect_go.Response[v161.ValidateVersionShardResponse], error)
	// VTExplain provides information on how Vitess plans to execute a
	// particular query.
	VTExplain(context.Context, *connect_go.Request[v16.VTExplainRequest]) (*connect_go.Response[v16.VTExplainResponse], error)
}

// NewVTAdminClient constructs a client for the vtadmin.VTAdmin service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVTAdminClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VTAdminClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vTAdminClient{
		createKeyspace: connect_go.NewClient[v16.CreateKeyspaceRequest, v16.CreateKeyspaceResponse](
			httpClient,
			baseURL+VTAdminCreateKeyspaceProcedure,
			opts...,
		),
		createShard: connect_go.NewClient[v16.CreateShardRequest, v161.CreateShardResponse](
			httpClient,
			baseURL+VTAdminCreateShardProcedure,
			opts...,
		),
		deleteKeyspace: connect_go.NewClient[v16.DeleteKeyspaceRequest, v161.DeleteKeyspaceResponse](
			httpClient,
			baseURL+VTAdminDeleteKeyspaceProcedure,
			opts...,
		),
		deleteShards: connect_go.NewClient[v16.DeleteShardsRequest, v161.DeleteShardsResponse](
			httpClient,
			baseURL+VTAdminDeleteShardsProcedure,
			opts...,
		),
		deleteTablet: connect_go.NewClient[v16.DeleteTabletRequest, v16.DeleteTabletResponse](
			httpClient,
			baseURL+VTAdminDeleteTabletProcedure,
			opts...,
		),
		emergencyFailoverShard: connect_go.NewClient[v16.EmergencyFailoverShardRequest, v16.EmergencyFailoverShardResponse](
			httpClient,
			baseURL+VTAdminEmergencyFailoverShardProcedure,
			opts...,
		),
		findSchema: connect_go.NewClient[v16.FindSchemaRequest, v16.Schema](
			httpClient,
			baseURL+VTAdminFindSchemaProcedure,
			opts...,
		),
		getBackups: connect_go.NewClient[v16.GetBackupsRequest, v16.GetBackupsResponse](
			httpClient,
			baseURL+VTAdminGetBackupsProcedure,
			opts...,
		),
		getCellInfos: connect_go.NewClient[v16.GetCellInfosRequest, v16.GetCellInfosResponse](
			httpClient,
			baseURL+VTAdminGetCellInfosProcedure,
			opts...,
		),
		getCellsAliases: connect_go.NewClient[v16.GetCellsAliasesRequest, v16.GetCellsAliasesResponse](
			httpClient,
			baseURL+VTAdminGetCellsAliasesProcedure,
			opts...,
		),
		getClusters: connect_go.NewClient[v16.GetClustersRequest, v16.GetClustersResponse](
			httpClient,
			baseURL+VTAdminGetClustersProcedure,
			opts...,
		),
		getFullStatus: connect_go.NewClient[v16.GetFullStatusRequest, v161.GetFullStatusResponse](
			httpClient,
			baseURL+VTAdminGetFullStatusProcedure,
			opts...,
		),
		getGates: connect_go.NewClient[v16.GetGatesRequest, v16.GetGatesResponse](
			httpClient,
			baseURL+VTAdminGetGatesProcedure,
			opts...,
		),
		getKeyspace: connect_go.NewClient[v16.GetKeyspaceRequest, v16.Keyspace](
			httpClient,
			baseURL+VTAdminGetKeyspaceProcedure,
			opts...,
		),
		getKeyspaces: connect_go.NewClient[v16.GetKeyspacesRequest, v16.GetKeyspacesResponse](
			httpClient,
			baseURL+VTAdminGetKeyspacesProcedure,
			opts...,
		),
		getSchema: connect_go.NewClient[v16.GetSchemaRequest, v16.Schema](
			httpClient,
			baseURL+VTAdminGetSchemaProcedure,
			opts...,
		),
		getSchemas: connect_go.NewClient[v16.GetSchemasRequest, v16.GetSchemasResponse](
			httpClient,
			baseURL+VTAdminGetSchemasProcedure,
			opts...,
		),
		getShardReplicationPositions: connect_go.NewClient[v16.GetShardReplicationPositionsRequest, v16.GetShardReplicationPositionsResponse](
			httpClient,
			baseURL+VTAdminGetShardReplicationPositionsProcedure,
			opts...,
		),
		getSrvVSchema: connect_go.NewClient[v16.GetSrvVSchemaRequest, v16.SrvVSchema](
			httpClient,
			baseURL+VTAdminGetSrvVSchemaProcedure,
			opts...,
		),
		getSrvVSchemas: connect_go.NewClient[v16.GetSrvVSchemasRequest, v16.GetSrvVSchemasResponse](
			httpClient,
			baseURL+VTAdminGetSrvVSchemasProcedure,
			opts...,
		),
		getTablet: connect_go.NewClient[v16.GetTabletRequest, v16.Tablet](
			httpClient,
			baseURL+VTAdminGetTabletProcedure,
			opts...,
		),
		getTablets: connect_go.NewClient[v16.GetTabletsRequest, v16.GetTabletsResponse](
			httpClient,
			baseURL+VTAdminGetTabletsProcedure,
			opts...,
		),
		getTopologyPath: connect_go.NewClient[v16.GetTopologyPathRequest, v161.GetTopologyPathResponse](
			httpClient,
			baseURL+VTAdminGetTopologyPathProcedure,
			opts...,
		),
		getVSchema: connect_go.NewClient[v16.GetVSchemaRequest, v16.VSchema](
			httpClient,
			baseURL+VTAdminGetVSchemaProcedure,
			opts...,
		),
		getVSchemas: connect_go.NewClient[v16.GetVSchemasRequest, v16.GetVSchemasResponse](
			httpClient,
			baseURL+VTAdminGetVSchemasProcedure,
			opts...,
		),
		getVtctlds: connect_go.NewClient[v16.GetVtctldsRequest, v16.GetVtctldsResponse](
			httpClient,
			baseURL+VTAdminGetVtctldsProcedure,
			opts...,
		),
		getWorkflow: connect_go.NewClient[v16.GetWorkflowRequest, v16.Workflow](
			httpClient,
			baseURL+VTAdminGetWorkflowProcedure,
			opts...,
		),
		getWorkflows: connect_go.NewClient[v16.GetWorkflowsRequest, v16.GetWorkflowsResponse](
			httpClient,
			baseURL+VTAdminGetWorkflowsProcedure,
			opts...,
		),
		pingTablet: connect_go.NewClient[v16.PingTabletRequest, v16.PingTabletResponse](
			httpClient,
			baseURL+VTAdminPingTabletProcedure,
			opts...,
		),
		plannedFailoverShard: connect_go.NewClient[v16.PlannedFailoverShardRequest, v16.PlannedFailoverShardResponse](
			httpClient,
			baseURL+VTAdminPlannedFailoverShardProcedure,
			opts...,
		),
		rebuildKeyspaceGraph: connect_go.NewClient[v16.RebuildKeyspaceGraphRequest, v16.RebuildKeyspaceGraphResponse](
			httpClient,
			baseURL+VTAdminRebuildKeyspaceGraphProcedure,
			opts...,
		),
		refreshState: connect_go.NewClient[v16.RefreshStateRequest, v16.RefreshStateResponse](
			httpClient,
			baseURL+VTAdminRefreshStateProcedure,
			opts...,
		),
		refreshTabletReplicationSource: connect_go.NewClient[v16.RefreshTabletReplicationSourceRequest, v16.RefreshTabletReplicationSourceResponse](
			httpClient,
			baseURL+VTAdminRefreshTabletReplicationSourceProcedure,
			opts...,
		),
		reloadSchemas: connect_go.NewClient[v16.ReloadSchemasRequest, v16.ReloadSchemasResponse](
			httpClient,
			baseURL+VTAdminReloadSchemasProcedure,
			opts...,
		),
		reloadSchemaShard: connect_go.NewClient[v16.ReloadSchemaShardRequest, v16.ReloadSchemaShardResponse](
			httpClient,
			baseURL+VTAdminReloadSchemaShardProcedure,
			opts...,
		),
		removeKeyspaceCell: connect_go.NewClient[v16.RemoveKeyspaceCellRequest, v16.RemoveKeyspaceCellResponse](
			httpClient,
			baseURL+VTAdminRemoveKeyspaceCellProcedure,
			opts...,
		),
		runHealthCheck: connect_go.NewClient[v16.RunHealthCheckRequest, v16.RunHealthCheckResponse](
			httpClient,
			baseURL+VTAdminRunHealthCheckProcedure,
			opts...,
		),
		setReadOnly: connect_go.NewClient[v16.SetReadOnlyRequest, v16.SetReadOnlyResponse](
			httpClient,
			baseURL+VTAdminSetReadOnlyProcedure,
			opts...,
		),
		setReadWrite: connect_go.NewClient[v16.SetReadWriteRequest, v16.SetReadWriteResponse](
			httpClient,
			baseURL+VTAdminSetReadWriteProcedure,
			opts...,
		),
		startReplication: connect_go.NewClient[v16.StartReplicationRequest, v16.StartReplicationResponse](
			httpClient,
			baseURL+VTAdminStartReplicationProcedure,
			opts...,
		),
		stopReplication: connect_go.NewClient[v16.StopReplicationRequest, v16.StopReplicationResponse](
			httpClient,
			baseURL+VTAdminStopReplicationProcedure,
			opts...,
		),
		tabletExternallyPromoted: connect_go.NewClient[v16.TabletExternallyPromotedRequest, v16.TabletExternallyPromotedResponse](
			httpClient,
			baseURL+VTAdminTabletExternallyPromotedProcedure,
			opts...,
		),
		validate: connect_go.NewClient[v16.ValidateRequest, v161.ValidateResponse](
			httpClient,
			baseURL+VTAdminValidateProcedure,
			opts...,
		),
		validateKeyspace: connect_go.NewClient[v16.ValidateKeyspaceRequest, v161.ValidateKeyspaceResponse](
			httpClient,
			baseURL+VTAdminValidateKeyspaceProcedure,
			opts...,
		),
		validateSchemaKeyspace: connect_go.NewClient[v16.ValidateSchemaKeyspaceRequest, v161.ValidateSchemaKeyspaceResponse](
			httpClient,
			baseURL+VTAdminValidateSchemaKeyspaceProcedure,
			opts...,
		),
		validateShard: connect_go.NewClient[v16.ValidateShardRequest, v161.ValidateShardResponse](
			httpClient,
			baseURL+VTAdminValidateShardProcedure,
			opts...,
		),
		validateVersionKeyspace: connect_go.NewClient[v16.ValidateVersionKeyspaceRequest, v161.ValidateVersionKeyspaceResponse](
			httpClient,
			baseURL+VTAdminValidateVersionKeyspaceProcedure,
			opts...,
		),
		validateVersionShard: connect_go.NewClient[v16.ValidateVersionShardRequest, v161.ValidateVersionShardResponse](
			httpClient,
			baseURL+VTAdminValidateVersionShardProcedure,
			opts...,
		),
		vTExplain: connect_go.NewClient[v16.VTExplainRequest, v16.VTExplainResponse](
			httpClient,
			baseURL+VTAdminVTExplainProcedure,
			opts...,
		),
	}
}

// vTAdminClient implements VTAdminClient.
type vTAdminClient struct {
	createKeyspace                 *connect_go.Client[v16.CreateKeyspaceRequest, v16.CreateKeyspaceResponse]
	createShard                    *connect_go.Client[v16.CreateShardRequest, v161.CreateShardResponse]
	deleteKeyspace                 *connect_go.Client[v16.DeleteKeyspaceRequest, v161.DeleteKeyspaceResponse]
	deleteShards                   *connect_go.Client[v16.DeleteShardsRequest, v161.DeleteShardsResponse]
	deleteTablet                   *connect_go.Client[v16.DeleteTabletRequest, v16.DeleteTabletResponse]
	emergencyFailoverShard         *connect_go.Client[v16.EmergencyFailoverShardRequest, v16.EmergencyFailoverShardResponse]
	findSchema                     *connect_go.Client[v16.FindSchemaRequest, v16.Schema]
	getBackups                     *connect_go.Client[v16.GetBackupsRequest, v16.GetBackupsResponse]
	getCellInfos                   *connect_go.Client[v16.GetCellInfosRequest, v16.GetCellInfosResponse]
	getCellsAliases                *connect_go.Client[v16.GetCellsAliasesRequest, v16.GetCellsAliasesResponse]
	getClusters                    *connect_go.Client[v16.GetClustersRequest, v16.GetClustersResponse]
	getFullStatus                  *connect_go.Client[v16.GetFullStatusRequest, v161.GetFullStatusResponse]
	getGates                       *connect_go.Client[v16.GetGatesRequest, v16.GetGatesResponse]
	getKeyspace                    *connect_go.Client[v16.GetKeyspaceRequest, v16.Keyspace]
	getKeyspaces                   *connect_go.Client[v16.GetKeyspacesRequest, v16.GetKeyspacesResponse]
	getSchema                      *connect_go.Client[v16.GetSchemaRequest, v16.Schema]
	getSchemas                     *connect_go.Client[v16.GetSchemasRequest, v16.GetSchemasResponse]
	getShardReplicationPositions   *connect_go.Client[v16.GetShardReplicationPositionsRequest, v16.GetShardReplicationPositionsResponse]
	getSrvVSchema                  *connect_go.Client[v16.GetSrvVSchemaRequest, v16.SrvVSchema]
	getSrvVSchemas                 *connect_go.Client[v16.GetSrvVSchemasRequest, v16.GetSrvVSchemasResponse]
	getTablet                      *connect_go.Client[v16.GetTabletRequest, v16.Tablet]
	getTablets                     *connect_go.Client[v16.GetTabletsRequest, v16.GetTabletsResponse]
	getTopologyPath                *connect_go.Client[v16.GetTopologyPathRequest, v161.GetTopologyPathResponse]
	getVSchema                     *connect_go.Client[v16.GetVSchemaRequest, v16.VSchema]
	getVSchemas                    *connect_go.Client[v16.GetVSchemasRequest, v16.GetVSchemasResponse]
	getVtctlds                     *connect_go.Client[v16.GetVtctldsRequest, v16.GetVtctldsResponse]
	getWorkflow                    *connect_go.Client[v16.GetWorkflowRequest, v16.Workflow]
	getWorkflows                   *connect_go.Client[v16.GetWorkflowsRequest, v16.GetWorkflowsResponse]
	pingTablet                     *connect_go.Client[v16.PingTabletRequest, v16.PingTabletResponse]
	plannedFailoverShard           *connect_go.Client[v16.PlannedFailoverShardRequest, v16.PlannedFailoverShardResponse]
	rebuildKeyspaceGraph           *connect_go.Client[v16.RebuildKeyspaceGraphRequest, v16.RebuildKeyspaceGraphResponse]
	refreshState                   *connect_go.Client[v16.RefreshStateRequest, v16.RefreshStateResponse]
	refreshTabletReplicationSource *connect_go.Client[v16.RefreshTabletReplicationSourceRequest, v16.RefreshTabletReplicationSourceResponse]
	reloadSchemas                  *connect_go.Client[v16.ReloadSchemasRequest, v16.ReloadSchemasResponse]
	reloadSchemaShard              *connect_go.Client[v16.ReloadSchemaShardRequest, v16.ReloadSchemaShardResponse]
	removeKeyspaceCell             *connect_go.Client[v16.RemoveKeyspaceCellRequest, v16.RemoveKeyspaceCellResponse]
	runHealthCheck                 *connect_go.Client[v16.RunHealthCheckRequest, v16.RunHealthCheckResponse]
	setReadOnly                    *connect_go.Client[v16.SetReadOnlyRequest, v16.SetReadOnlyResponse]
	setReadWrite                   *connect_go.Client[v16.SetReadWriteRequest, v16.SetReadWriteResponse]
	startReplication               *connect_go.Client[v16.StartReplicationRequest, v16.StartReplicationResponse]
	stopReplication                *connect_go.Client[v16.StopReplicationRequest, v16.StopReplicationResponse]
	tabletExternallyPromoted       *connect_go.Client[v16.TabletExternallyPromotedRequest, v16.TabletExternallyPromotedResponse]
	validate                       *connect_go.Client[v16.ValidateRequest, v161.ValidateResponse]
	validateKeyspace               *connect_go.Client[v16.ValidateKeyspaceRequest, v161.ValidateKeyspaceResponse]
	validateSchemaKeyspace         *connect_go.Client[v16.ValidateSchemaKeyspaceRequest, v161.ValidateSchemaKeyspaceResponse]
	validateShard                  *connect_go.Client[v16.ValidateShardRequest, v161.ValidateShardResponse]
	validateVersionKeyspace        *connect_go.Client[v16.ValidateVersionKeyspaceRequest, v161.ValidateVersionKeyspaceResponse]
	validateVersionShard           *connect_go.Client[v16.ValidateVersionShardRequest, v161.ValidateVersionShardResponse]
	vTExplain                      *connect_go.Client[v16.VTExplainRequest, v16.VTExplainResponse]
}

// CreateKeyspace calls vtadmin.VTAdmin.CreateKeyspace.
func (c *vTAdminClient) CreateKeyspace(ctx context.Context, req *connect_go.Request[v16.CreateKeyspaceRequest]) (*connect_go.Response[v16.CreateKeyspaceResponse], error) {
	return c.createKeyspace.CallUnary(ctx, req)
}

// CreateShard calls vtadmin.VTAdmin.CreateShard.
func (c *vTAdminClient) CreateShard(ctx context.Context, req *connect_go.Request[v16.CreateShardRequest]) (*connect_go.Response[v161.CreateShardResponse], error) {
	return c.createShard.CallUnary(ctx, req)
}

// DeleteKeyspace calls vtadmin.VTAdmin.DeleteKeyspace.
func (c *vTAdminClient) DeleteKeyspace(ctx context.Context, req *connect_go.Request[v16.DeleteKeyspaceRequest]) (*connect_go.Response[v161.DeleteKeyspaceResponse], error) {
	return c.deleteKeyspace.CallUnary(ctx, req)
}

// DeleteShards calls vtadmin.VTAdmin.DeleteShards.
func (c *vTAdminClient) DeleteShards(ctx context.Context, req *connect_go.Request[v16.DeleteShardsRequest]) (*connect_go.Response[v161.DeleteShardsResponse], error) {
	return c.deleteShards.CallUnary(ctx, req)
}

// DeleteTablet calls vtadmin.VTAdmin.DeleteTablet.
func (c *vTAdminClient) DeleteTablet(ctx context.Context, req *connect_go.Request[v16.DeleteTabletRequest]) (*connect_go.Response[v16.DeleteTabletResponse], error) {
	return c.deleteTablet.CallUnary(ctx, req)
}

// EmergencyFailoverShard calls vtadmin.VTAdmin.EmergencyFailoverShard.
func (c *vTAdminClient) EmergencyFailoverShard(ctx context.Context, req *connect_go.Request[v16.EmergencyFailoverShardRequest]) (*connect_go.Response[v16.EmergencyFailoverShardResponse], error) {
	return c.emergencyFailoverShard.CallUnary(ctx, req)
}

// FindSchema calls vtadmin.VTAdmin.FindSchema.
func (c *vTAdminClient) FindSchema(ctx context.Context, req *connect_go.Request[v16.FindSchemaRequest]) (*connect_go.Response[v16.Schema], error) {
	return c.findSchema.CallUnary(ctx, req)
}

// GetBackups calls vtadmin.VTAdmin.GetBackups.
func (c *vTAdminClient) GetBackups(ctx context.Context, req *connect_go.Request[v16.GetBackupsRequest]) (*connect_go.Response[v16.GetBackupsResponse], error) {
	return c.getBackups.CallUnary(ctx, req)
}

// GetCellInfos calls vtadmin.VTAdmin.GetCellInfos.
func (c *vTAdminClient) GetCellInfos(ctx context.Context, req *connect_go.Request[v16.GetCellInfosRequest]) (*connect_go.Response[v16.GetCellInfosResponse], error) {
	return c.getCellInfos.CallUnary(ctx, req)
}

// GetCellsAliases calls vtadmin.VTAdmin.GetCellsAliases.
func (c *vTAdminClient) GetCellsAliases(ctx context.Context, req *connect_go.Request[v16.GetCellsAliasesRequest]) (*connect_go.Response[v16.GetCellsAliasesResponse], error) {
	return c.getCellsAliases.CallUnary(ctx, req)
}

// GetClusters calls vtadmin.VTAdmin.GetClusters.
func (c *vTAdminClient) GetClusters(ctx context.Context, req *connect_go.Request[v16.GetClustersRequest]) (*connect_go.Response[v16.GetClustersResponse], error) {
	return c.getClusters.CallUnary(ctx, req)
}

// GetFullStatus calls vtadmin.VTAdmin.GetFullStatus.
func (c *vTAdminClient) GetFullStatus(ctx context.Context, req *connect_go.Request[v16.GetFullStatusRequest]) (*connect_go.Response[v161.GetFullStatusResponse], error) {
	return c.getFullStatus.CallUnary(ctx, req)
}

// GetGates calls vtadmin.VTAdmin.GetGates.
func (c *vTAdminClient) GetGates(ctx context.Context, req *connect_go.Request[v16.GetGatesRequest]) (*connect_go.Response[v16.GetGatesResponse], error) {
	return c.getGates.CallUnary(ctx, req)
}

// GetKeyspace calls vtadmin.VTAdmin.GetKeyspace.
func (c *vTAdminClient) GetKeyspace(ctx context.Context, req *connect_go.Request[v16.GetKeyspaceRequest]) (*connect_go.Response[v16.Keyspace], error) {
	return c.getKeyspace.CallUnary(ctx, req)
}

// GetKeyspaces calls vtadmin.VTAdmin.GetKeyspaces.
func (c *vTAdminClient) GetKeyspaces(ctx context.Context, req *connect_go.Request[v16.GetKeyspacesRequest]) (*connect_go.Response[v16.GetKeyspacesResponse], error) {
	return c.getKeyspaces.CallUnary(ctx, req)
}

// GetSchema calls vtadmin.VTAdmin.GetSchema.
func (c *vTAdminClient) GetSchema(ctx context.Context, req *connect_go.Request[v16.GetSchemaRequest]) (*connect_go.Response[v16.Schema], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// GetSchemas calls vtadmin.VTAdmin.GetSchemas.
func (c *vTAdminClient) GetSchemas(ctx context.Context, req *connect_go.Request[v16.GetSchemasRequest]) (*connect_go.Response[v16.GetSchemasResponse], error) {
	return c.getSchemas.CallUnary(ctx, req)
}

// GetShardReplicationPositions calls vtadmin.VTAdmin.GetShardReplicationPositions.
func (c *vTAdminClient) GetShardReplicationPositions(ctx context.Context, req *connect_go.Request[v16.GetShardReplicationPositionsRequest]) (*connect_go.Response[v16.GetShardReplicationPositionsResponse], error) {
	return c.getShardReplicationPositions.CallUnary(ctx, req)
}

// GetSrvVSchema calls vtadmin.VTAdmin.GetSrvVSchema.
func (c *vTAdminClient) GetSrvVSchema(ctx context.Context, req *connect_go.Request[v16.GetSrvVSchemaRequest]) (*connect_go.Response[v16.SrvVSchema], error) {
	return c.getSrvVSchema.CallUnary(ctx, req)
}

// GetSrvVSchemas calls vtadmin.VTAdmin.GetSrvVSchemas.
func (c *vTAdminClient) GetSrvVSchemas(ctx context.Context, req *connect_go.Request[v16.GetSrvVSchemasRequest]) (*connect_go.Response[v16.GetSrvVSchemasResponse], error) {
	return c.getSrvVSchemas.CallUnary(ctx, req)
}

// GetTablet calls vtadmin.VTAdmin.GetTablet.
func (c *vTAdminClient) GetTablet(ctx context.Context, req *connect_go.Request[v16.GetTabletRequest]) (*connect_go.Response[v16.Tablet], error) {
	return c.getTablet.CallUnary(ctx, req)
}

// GetTablets calls vtadmin.VTAdmin.GetTablets.
func (c *vTAdminClient) GetTablets(ctx context.Context, req *connect_go.Request[v16.GetTabletsRequest]) (*connect_go.Response[v16.GetTabletsResponse], error) {
	return c.getTablets.CallUnary(ctx, req)
}

// GetTopologyPath calls vtadmin.VTAdmin.GetTopologyPath.
func (c *vTAdminClient) GetTopologyPath(ctx context.Context, req *connect_go.Request[v16.GetTopologyPathRequest]) (*connect_go.Response[v161.GetTopologyPathResponse], error) {
	return c.getTopologyPath.CallUnary(ctx, req)
}

// GetVSchema calls vtadmin.VTAdmin.GetVSchema.
func (c *vTAdminClient) GetVSchema(ctx context.Context, req *connect_go.Request[v16.GetVSchemaRequest]) (*connect_go.Response[v16.VSchema], error) {
	return c.getVSchema.CallUnary(ctx, req)
}

// GetVSchemas calls vtadmin.VTAdmin.GetVSchemas.
func (c *vTAdminClient) GetVSchemas(ctx context.Context, req *connect_go.Request[v16.GetVSchemasRequest]) (*connect_go.Response[v16.GetVSchemasResponse], error) {
	return c.getVSchemas.CallUnary(ctx, req)
}

// GetVtctlds calls vtadmin.VTAdmin.GetVtctlds.
func (c *vTAdminClient) GetVtctlds(ctx context.Context, req *connect_go.Request[v16.GetVtctldsRequest]) (*connect_go.Response[v16.GetVtctldsResponse], error) {
	return c.getVtctlds.CallUnary(ctx, req)
}

// GetWorkflow calls vtadmin.VTAdmin.GetWorkflow.
func (c *vTAdminClient) GetWorkflow(ctx context.Context, req *connect_go.Request[v16.GetWorkflowRequest]) (*connect_go.Response[v16.Workflow], error) {
	return c.getWorkflow.CallUnary(ctx, req)
}

// GetWorkflows calls vtadmin.VTAdmin.GetWorkflows.
func (c *vTAdminClient) GetWorkflows(ctx context.Context, req *connect_go.Request[v16.GetWorkflowsRequest]) (*connect_go.Response[v16.GetWorkflowsResponse], error) {
	return c.getWorkflows.CallUnary(ctx, req)
}

// PingTablet calls vtadmin.VTAdmin.PingTablet.
func (c *vTAdminClient) PingTablet(ctx context.Context, req *connect_go.Request[v16.PingTabletRequest]) (*connect_go.Response[v16.PingTabletResponse], error) {
	return c.pingTablet.CallUnary(ctx, req)
}

// PlannedFailoverShard calls vtadmin.VTAdmin.PlannedFailoverShard.
func (c *vTAdminClient) PlannedFailoverShard(ctx context.Context, req *connect_go.Request[v16.PlannedFailoverShardRequest]) (*connect_go.Response[v16.PlannedFailoverShardResponse], error) {
	return c.plannedFailoverShard.CallUnary(ctx, req)
}

// RebuildKeyspaceGraph calls vtadmin.VTAdmin.RebuildKeyspaceGraph.
func (c *vTAdminClient) RebuildKeyspaceGraph(ctx context.Context, req *connect_go.Request[v16.RebuildKeyspaceGraphRequest]) (*connect_go.Response[v16.RebuildKeyspaceGraphResponse], error) {
	return c.rebuildKeyspaceGraph.CallUnary(ctx, req)
}

// RefreshState calls vtadmin.VTAdmin.RefreshState.
func (c *vTAdminClient) RefreshState(ctx context.Context, req *connect_go.Request[v16.RefreshStateRequest]) (*connect_go.Response[v16.RefreshStateResponse], error) {
	return c.refreshState.CallUnary(ctx, req)
}

// RefreshTabletReplicationSource calls vtadmin.VTAdmin.RefreshTabletReplicationSource.
func (c *vTAdminClient) RefreshTabletReplicationSource(ctx context.Context, req *connect_go.Request[v16.RefreshTabletReplicationSourceRequest]) (*connect_go.Response[v16.RefreshTabletReplicationSourceResponse], error) {
	return c.refreshTabletReplicationSource.CallUnary(ctx, req)
}

// ReloadSchemas calls vtadmin.VTAdmin.ReloadSchemas.
func (c *vTAdminClient) ReloadSchemas(ctx context.Context, req *connect_go.Request[v16.ReloadSchemasRequest]) (*connect_go.Response[v16.ReloadSchemasResponse], error) {
	return c.reloadSchemas.CallUnary(ctx, req)
}

// ReloadSchemaShard calls vtadmin.VTAdmin.ReloadSchemaShard.
func (c *vTAdminClient) ReloadSchemaShard(ctx context.Context, req *connect_go.Request[v16.ReloadSchemaShardRequest]) (*connect_go.Response[v16.ReloadSchemaShardResponse], error) {
	return c.reloadSchemaShard.CallUnary(ctx, req)
}

// RemoveKeyspaceCell calls vtadmin.VTAdmin.RemoveKeyspaceCell.
func (c *vTAdminClient) RemoveKeyspaceCell(ctx context.Context, req *connect_go.Request[v16.RemoveKeyspaceCellRequest]) (*connect_go.Response[v16.RemoveKeyspaceCellResponse], error) {
	return c.removeKeyspaceCell.CallUnary(ctx, req)
}

// RunHealthCheck calls vtadmin.VTAdmin.RunHealthCheck.
func (c *vTAdminClient) RunHealthCheck(ctx context.Context, req *connect_go.Request[v16.RunHealthCheckRequest]) (*connect_go.Response[v16.RunHealthCheckResponse], error) {
	return c.runHealthCheck.CallUnary(ctx, req)
}

// SetReadOnly calls vtadmin.VTAdmin.SetReadOnly.
func (c *vTAdminClient) SetReadOnly(ctx context.Context, req *connect_go.Request[v16.SetReadOnlyRequest]) (*connect_go.Response[v16.SetReadOnlyResponse], error) {
	return c.setReadOnly.CallUnary(ctx, req)
}

// SetReadWrite calls vtadmin.VTAdmin.SetReadWrite.
func (c *vTAdminClient) SetReadWrite(ctx context.Context, req *connect_go.Request[v16.SetReadWriteRequest]) (*connect_go.Response[v16.SetReadWriteResponse], error) {
	return c.setReadWrite.CallUnary(ctx, req)
}

// StartReplication calls vtadmin.VTAdmin.StartReplication.
func (c *vTAdminClient) StartReplication(ctx context.Context, req *connect_go.Request[v16.StartReplicationRequest]) (*connect_go.Response[v16.StartReplicationResponse], error) {
	return c.startReplication.CallUnary(ctx, req)
}

// StopReplication calls vtadmin.VTAdmin.StopReplication.
func (c *vTAdminClient) StopReplication(ctx context.Context, req *connect_go.Request[v16.StopReplicationRequest]) (*connect_go.Response[v16.StopReplicationResponse], error) {
	return c.stopReplication.CallUnary(ctx, req)
}

// TabletExternallyPromoted calls vtadmin.VTAdmin.TabletExternallyPromoted.
func (c *vTAdminClient) TabletExternallyPromoted(ctx context.Context, req *connect_go.Request[v16.TabletExternallyPromotedRequest]) (*connect_go.Response[v16.TabletExternallyPromotedResponse], error) {
	return c.tabletExternallyPromoted.CallUnary(ctx, req)
}

// Validate calls vtadmin.VTAdmin.Validate.
func (c *vTAdminClient) Validate(ctx context.Context, req *connect_go.Request[v16.ValidateRequest]) (*connect_go.Response[v161.ValidateResponse], error) {
	return c.validate.CallUnary(ctx, req)
}

// ValidateKeyspace calls vtadmin.VTAdmin.ValidateKeyspace.
func (c *vTAdminClient) ValidateKeyspace(ctx context.Context, req *connect_go.Request[v16.ValidateKeyspaceRequest]) (*connect_go.Response[v161.ValidateKeyspaceResponse], error) {
	return c.validateKeyspace.CallUnary(ctx, req)
}

// ValidateSchemaKeyspace calls vtadmin.VTAdmin.ValidateSchemaKeyspace.
func (c *vTAdminClient) ValidateSchemaKeyspace(ctx context.Context, req *connect_go.Request[v16.ValidateSchemaKeyspaceRequest]) (*connect_go.Response[v161.ValidateSchemaKeyspaceResponse], error) {
	return c.validateSchemaKeyspace.CallUnary(ctx, req)
}

// ValidateShard calls vtadmin.VTAdmin.ValidateShard.
func (c *vTAdminClient) ValidateShard(ctx context.Context, req *connect_go.Request[v16.ValidateShardRequest]) (*connect_go.Response[v161.ValidateShardResponse], error) {
	return c.validateShard.CallUnary(ctx, req)
}

// ValidateVersionKeyspace calls vtadmin.VTAdmin.ValidateVersionKeyspace.
func (c *vTAdminClient) ValidateVersionKeyspace(ctx context.Context, req *connect_go.Request[v16.ValidateVersionKeyspaceRequest]) (*connect_go.Response[v161.ValidateVersionKeyspaceResponse], error) {
	return c.validateVersionKeyspace.CallUnary(ctx, req)
}

// ValidateVersionShard calls vtadmin.VTAdmin.ValidateVersionShard.
func (c *vTAdminClient) ValidateVersionShard(ctx context.Context, req *connect_go.Request[v16.ValidateVersionShardRequest]) (*connect_go.Response[v161.ValidateVersionShardResponse], error) {
	return c.validateVersionShard.CallUnary(ctx, req)
}

// VTExplain calls vtadmin.VTAdmin.VTExplain.
func (c *vTAdminClient) VTExplain(ctx context.Context, req *connect_go.Request[v16.VTExplainRequest]) (*connect_go.Response[v16.VTExplainResponse], error) {
	return c.vTExplain.CallUnary(ctx, req)
}

// VTAdminHandler is an implementation of the vtadmin.VTAdmin service.
type VTAdminHandler interface {
	// CreateKeyspace creates a new keyspace in the given cluster.
	CreateKeyspace(context.Context, *connect_go.Request[v16.CreateKeyspaceRequest]) (*connect_go.Response[v16.CreateKeyspaceResponse], error)
	// CreateShard creates a new shard in the given cluster and keyspace.
	CreateShard(context.Context, *connect_go.Request[v16.CreateShardRequest]) (*connect_go.Response[v161.CreateShardResponse], error)
	// DeleteKeyspace deletes a keyspace in the given cluster.
	DeleteKeyspace(context.Context, *connect_go.Request[v16.DeleteKeyspaceRequest]) (*connect_go.Response[v161.DeleteKeyspaceResponse], error)
	// DeleteShard deletes one or more shards in the given cluster and keyspace.
	DeleteShards(context.Context, *connect_go.Request[v16.DeleteShardsRequest]) (*connect_go.Response[v161.DeleteShardsResponse], error)
	// DeleteTablet deletes a tablet from the topology
	DeleteTablet(context.Context, *connect_go.Request[v16.DeleteTabletRequest]) (*connect_go.Response[v16.DeleteTabletResponse], error)
	// EmergencyFailoverShard fails over a shard to a new primary. It assumes
	// the old primary is dead or otherwise not responding.
	EmergencyFailoverShard(context.Context, *connect_go.Request[v16.EmergencyFailoverShardRequest]) (*connect_go.Response[v16.EmergencyFailoverShardResponse], error)
	// FindSchema returns a single Schema that matches the provided table name
	// across all specified clusters IDs. Not specifying a set of cluster IDs
	// causes the search to span all configured clusters.
	//
	// An error occurs if either no table exists across any of the clusters with
	// the specified table name, or if multiple tables exist with that name.
	FindSchema(context.Context, *connect_go.Request[v16.FindSchemaRequest]) (*connect_go.Response[v16.Schema], error)
	// GetBackups returns backups grouped by cluster.
	GetBackups(context.Context, *connect_go.Request[v16.GetBackupsRequest]) (*connect_go.Response[v16.GetBackupsResponse], error)
	// GetCellInfos returns the CellInfo objects for the specified clusters.
	//
	// Callers may optionally restrict the set of CellInfos, or restrict the
	// response to include only cell names.
	GetCellInfos(context.Context, *connect_go.Request[v16.GetCellInfosRequest]) (*connect_go.Response[v16.GetCellInfosResponse], error)
	// GetCellsAliases returns the CellsAliases data for the specified clusters.
	GetCellsAliases(context.Context, *connect_go.Request[v16.GetCellsAliasesRequest]) (*connect_go.Response[v16.GetCellsAliasesResponse], error)
	// GetClusters returns all configured clusters.
	GetClusters(context.Context, *connect_go.Request[v16.GetClustersRequest]) (*connect_go.Response[v16.GetClustersResponse], error)
	// GetFullStatus returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	GetFullStatus(context.Context, *connect_go.Request[v16.GetFullStatusRequest]) (*connect_go.Response[v161.GetFullStatusResponse], error)
	// GetGates returns all gates across all the specified clusters.
	GetGates(context.Context, *connect_go.Request[v16.GetGatesRequest]) (*connect_go.Response[v16.GetGatesResponse], error)
	// GetKeyspace returns a keyspace by name in the specified cluster.
	GetKeyspace(context.Context, *connect_go.Request[v16.GetKeyspaceRequest]) (*connect_go.Response[v16.Keyspace], error)
	// GetKeyspaces returns all keyspaces across the specified clusters.
	GetKeyspaces(context.Context, *connect_go.Request[v16.GetKeyspacesRequest]) (*connect_go.Response[v16.GetKeyspacesResponse], error)
	// GetSchema returns the schema for the specified (cluster, keyspace, table)
	// tuple.
	GetSchema(context.Context, *connect_go.Request[v16.GetSchemaRequest]) (*connect_go.Response[v16.Schema], error)
	// GetSchemas returns all schemas across the specified clusters.
	GetSchemas(context.Context, *connect_go.Request[v16.GetSchemasRequest]) (*connect_go.Response[v16.GetSchemasResponse], error)
	// GetShardReplicationPositions returns shard replication positions grouped
	// by cluster.
	GetShardReplicationPositions(context.Context, *connect_go.Request[v16.GetShardReplicationPositionsRequest]) (*connect_go.Response[v16.GetShardReplicationPositionsResponse], error)
	// GetSrvVSchema returns the SrvVSchema for the given cluster and cell.
	GetSrvVSchema(context.Context, *connect_go.Request[v16.GetSrvVSchemaRequest]) (*connect_go.Response[v16.SrvVSchema], error)
	// GetSrvVSchemas returns all SrvVSchemas across all (or specified) clusters
	// and cells.
	GetSrvVSchemas(context.Context, *connect_go.Request[v16.GetSrvVSchemasRequest]) (*connect_go.Response[v16.GetSrvVSchemasResponse], error)
	// GetTablet looks up a tablet by hostname across all clusters and returns
	// the result.
	GetTablet(context.Context, *connect_go.Request[v16.GetTabletRequest]) (*connect_go.Response[v16.Tablet], error)
	// GetTablets returns all tablets across all the specified clusters.
	GetTablets(context.Context, *connect_go.Request[v16.GetTabletsRequest]) (*connect_go.Response[v16.GetTabletsResponse], error)
	// GetTopologyPath returns the cell located at the specified path in the topology server.
	GetTopologyPath(context.Context, *connect_go.Request[v16.GetTopologyPathRequest]) (*connect_go.Response[v161.GetTopologyPathResponse], error)
	// GetVSchema returns a VSchema for the specified keyspace in the specified
	// cluster.
	GetVSchema(context.Context, *connect_go.Request[v16.GetVSchemaRequest]) (*connect_go.Response[v16.VSchema], error)
	// GetVSchemas returns the VSchemas for all specified clusters.
	GetVSchemas(context.Context, *connect_go.Request[v16.GetVSchemasRequest]) (*connect_go.Response[v16.GetVSchemasResponse], error)
	// GetVtctlds returns the Vtctlds for all specified clusters.
	GetVtctlds(context.Context, *connect_go.Request[v16.GetVtctldsRequest]) (*connect_go.Response[v16.GetVtctldsResponse], error)
	// GetWorkflow returns a single Workflow for a given cluster, keyspace, and
	// workflow name.
	GetWorkflow(context.Context, *connect_go.Request[v16.GetWorkflowRequest]) (*connect_go.Response[v16.Workflow], error)
	// GetWorkflows returns the Workflows for all specified clusters.
	GetWorkflows(context.Context, *connect_go.Request[v16.GetWorkflowsRequest]) (*connect_go.Response[v16.GetWorkflowsResponse], error)
	// PingTablet checks that the specified tablet is awake and responding to
	// RPCs. This command can be blocked by other in-flight operations.
	PingTablet(context.Context, *connect_go.Request[v16.PingTabletRequest]) (*connect_go.Response[v16.PingTabletResponse], error)
	// PlannedFailoverShard fails over the shard to a new primary, or away from
	// an old primary. Both the old and new primaries must be reachable and
	// running.
	//
	// NOTE: A planned failover will not consider replicas outside the current
	// shard primary's cell as promotion candidates unless NewPrimary is
	// explicitly provided in the request.
	PlannedFailoverShard(context.Context, *connect_go.Request[v16.PlannedFailoverShardRequest]) (*connect_go.Response[v16.PlannedFailoverShardResponse], error)
	// RebuildKeyspaceGraph rebuilds the serving data for a keyspace.
	RebuildKeyspaceGraph(context.Context, *connect_go.Request[v16.RebuildKeyspaceGraphRequest]) (*connect_go.Response[v16.RebuildKeyspaceGraphResponse], error)
	// RefreshState reloads the tablet record on the specified tablet.
	RefreshState(context.Context, *connect_go.Request[v16.RefreshStateRequest]) (*connect_go.Response[v16.RefreshStateResponse], error)
	// RefreshTabletReplicationSource performs a `CHANGE REPLICATION SOURCE TO`
	// on a tablet to replicate from the current primary in the shard.
	RefreshTabletReplicationSource(context.Context, *connect_go.Request[v16.RefreshTabletReplicationSourceRequest]) (*connect_go.Response[v16.RefreshTabletReplicationSourceResponse], error)
	// ReloadSchemas reloads the schema definition across keyspaces, shards, or
	// tablets in one or more clusters, depending on the request fields (see
	// ReloadSchemasRequest for details).
	ReloadSchemas(context.Context, *connect_go.Request[v16.ReloadSchemasRequest]) (*connect_go.Response[v16.ReloadSchemasResponse], error)
	// ReloadSchemaShard reloads the schema on all tablets in a shard. This is done on a best-effort basis.
	ReloadSchemaShard(context.Context, *connect_go.Request[v16.ReloadSchemaShardRequest]) (*connect_go.Response[v16.ReloadSchemaShardResponse], error)
	// RemoveKeyspaceCell removes the cell from the Cells list for all shards in the keyspace, and the SrvKeyspace for that keyspace in that cell.
	RemoveKeyspaceCell(context.Context, *connect_go.Request[v16.RemoveKeyspaceCellRequest]) (*connect_go.Response[v16.RemoveKeyspaceCellResponse], error)
	// RunHealthCheck runs a healthcheck on the tablet.
	RunHealthCheck(context.Context, *connect_go.Request[v16.RunHealthCheckRequest]) (*connect_go.Response[v16.RunHealthCheckResponse], error)
	// SetReadOnly sets the tablet to read-only mode.
	SetReadOnly(context.Context, *connect_go.Request[v16.SetReadOnlyRequest]) (*connect_go.Response[v16.SetReadOnlyResponse], error)
	// SetReadWrite sets the tablet to read-write mode.
	SetReadWrite(context.Context, *connect_go.Request[v16.SetReadWriteRequest]) (*connect_go.Response[v16.SetReadWriteResponse], error)
	// StartReplication runs the underlying database command to start
	// replication on a tablet.
	StartReplication(context.Context, *connect_go.Request[v16.StartReplicationRequest]) (*connect_go.Response[v16.StartReplicationResponse], error)
	// StopReplication runs the underlying database command to stop replication
	// on a tablet
	StopReplication(context.Context, *connect_go.Request[v16.StopReplicationRequest]) (*connect_go.Response[v16.StopReplicationResponse], error)
	// TabletExternallyPromoted updates the metadata in a cluster's topology
	// to acknowledge a shard primary change performed by an external tool
	// (e.g. orchestrator*).
	//
	// See the Reparenting guide for more information:
	// https://vitess.io/docs/user-guides/configuration-advanced/reparenting/#external-reparenting.
	//
	// * "orchestrator" here refers to external orchestrator, not the newer,
	// Vitess-aware orchestrator, VTOrc.
	TabletExternallyPromoted(context.Context, *connect_go.Request[v16.TabletExternallyPromotedRequest]) (*connect_go.Response[v16.TabletExternallyPromotedResponse], error)
	// Validate validates all nodes in a cluster that are reachable from the global replication graph,
	// as well as all tablets in discoverable cells, are consistent
	Validate(context.Context, *connect_go.Request[v16.ValidateRequest]) (*connect_go.Response[v161.ValidateResponse], error)
	// ValidateKeyspace validates that all nodes reachable from the specified
	// keyspace are consistent.
	ValidateKeyspace(context.Context, *connect_go.Request[v16.ValidateKeyspaceRequest]) (*connect_go.Response[v161.ValidateKeyspaceResponse], error)
	// ValidateSchemaKeyspace validates that the schema on the primary tablet
	// for shard 0 matches the schema on all of the other tablets in the
	// keyspace.
	ValidateSchemaKeyspace(context.Context, *connect_go.Request[v16.ValidateSchemaKeyspaceRequest]) (*connect_go.Response[v161.ValidateSchemaKeyspaceResponse], error)
	// ValidateShard validates that that all nodes reachable from the specified shard are consistent.
	ValidateShard(context.Context, *connect_go.Request[v16.ValidateShardRequest]) (*connect_go.Response[v161.ValidateShardResponse], error)
	// ValidateVersionKeyspace validates that the version on the primary of
	// shard 0 matches all of the other tablets in the keyspace.
	ValidateVersionKeyspace(context.Context, *connect_go.Request[v16.ValidateVersionKeyspaceRequest]) (*connect_go.Response[v161.ValidateVersionKeyspaceResponse], error)
	// ValidateVersionShard validates that the version on the primary matches all of the replicas.
	ValidateVersionShard(context.Context, *connect_go.Request[v16.ValidateVersionShardRequest]) (*connect_go.Response[v161.ValidateVersionShardResponse], error)
	// VTExplain provides information on how Vitess plans to execute a
	// particular query.
	VTExplain(context.Context, *connect_go.Request[v16.VTExplainRequest]) (*connect_go.Response[v16.VTExplainResponse], error)
}

// NewVTAdminHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVTAdminHandler(svc VTAdminHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(VTAdminCreateKeyspaceProcedure, connect_go.NewUnaryHandler(
		VTAdminCreateKeyspaceProcedure,
		svc.CreateKeyspace,
		opts...,
	))
	mux.Handle(VTAdminCreateShardProcedure, connect_go.NewUnaryHandler(
		VTAdminCreateShardProcedure,
		svc.CreateShard,
		opts...,
	))
	mux.Handle(VTAdminDeleteKeyspaceProcedure, connect_go.NewUnaryHandler(
		VTAdminDeleteKeyspaceProcedure,
		svc.DeleteKeyspace,
		opts...,
	))
	mux.Handle(VTAdminDeleteShardsProcedure, connect_go.NewUnaryHandler(
		VTAdminDeleteShardsProcedure,
		svc.DeleteShards,
		opts...,
	))
	mux.Handle(VTAdminDeleteTabletProcedure, connect_go.NewUnaryHandler(
		VTAdminDeleteTabletProcedure,
		svc.DeleteTablet,
		opts...,
	))
	mux.Handle(VTAdminEmergencyFailoverShardProcedure, connect_go.NewUnaryHandler(
		VTAdminEmergencyFailoverShardProcedure,
		svc.EmergencyFailoverShard,
		opts...,
	))
	mux.Handle(VTAdminFindSchemaProcedure, connect_go.NewUnaryHandler(
		VTAdminFindSchemaProcedure,
		svc.FindSchema,
		opts...,
	))
	mux.Handle(VTAdminGetBackupsProcedure, connect_go.NewUnaryHandler(
		VTAdminGetBackupsProcedure,
		svc.GetBackups,
		opts...,
	))
	mux.Handle(VTAdminGetCellInfosProcedure, connect_go.NewUnaryHandler(
		VTAdminGetCellInfosProcedure,
		svc.GetCellInfos,
		opts...,
	))
	mux.Handle(VTAdminGetCellsAliasesProcedure, connect_go.NewUnaryHandler(
		VTAdminGetCellsAliasesProcedure,
		svc.GetCellsAliases,
		opts...,
	))
	mux.Handle(VTAdminGetClustersProcedure, connect_go.NewUnaryHandler(
		VTAdminGetClustersProcedure,
		svc.GetClusters,
		opts...,
	))
	mux.Handle(VTAdminGetFullStatusProcedure, connect_go.NewUnaryHandler(
		VTAdminGetFullStatusProcedure,
		svc.GetFullStatus,
		opts...,
	))
	mux.Handle(VTAdminGetGatesProcedure, connect_go.NewUnaryHandler(
		VTAdminGetGatesProcedure,
		svc.GetGates,
		opts...,
	))
	mux.Handle(VTAdminGetKeyspaceProcedure, connect_go.NewUnaryHandler(
		VTAdminGetKeyspaceProcedure,
		svc.GetKeyspace,
		opts...,
	))
	mux.Handle(VTAdminGetKeyspacesProcedure, connect_go.NewUnaryHandler(
		VTAdminGetKeyspacesProcedure,
		svc.GetKeyspaces,
		opts...,
	))
	mux.Handle(VTAdminGetSchemaProcedure, connect_go.NewUnaryHandler(
		VTAdminGetSchemaProcedure,
		svc.GetSchema,
		opts...,
	))
	mux.Handle(VTAdminGetSchemasProcedure, connect_go.NewUnaryHandler(
		VTAdminGetSchemasProcedure,
		svc.GetSchemas,
		opts...,
	))
	mux.Handle(VTAdminGetShardReplicationPositionsProcedure, connect_go.NewUnaryHandler(
		VTAdminGetShardReplicationPositionsProcedure,
		svc.GetShardReplicationPositions,
		opts...,
	))
	mux.Handle(VTAdminGetSrvVSchemaProcedure, connect_go.NewUnaryHandler(
		VTAdminGetSrvVSchemaProcedure,
		svc.GetSrvVSchema,
		opts...,
	))
	mux.Handle(VTAdminGetSrvVSchemasProcedure, connect_go.NewUnaryHandler(
		VTAdminGetSrvVSchemasProcedure,
		svc.GetSrvVSchemas,
		opts...,
	))
	mux.Handle(VTAdminGetTabletProcedure, connect_go.NewUnaryHandler(
		VTAdminGetTabletProcedure,
		svc.GetTablet,
		opts...,
	))
	mux.Handle(VTAdminGetTabletsProcedure, connect_go.NewUnaryHandler(
		VTAdminGetTabletsProcedure,
		svc.GetTablets,
		opts...,
	))
	mux.Handle(VTAdminGetTopologyPathProcedure, connect_go.NewUnaryHandler(
		VTAdminGetTopologyPathProcedure,
		svc.GetTopologyPath,
		opts...,
	))
	mux.Handle(VTAdminGetVSchemaProcedure, connect_go.NewUnaryHandler(
		VTAdminGetVSchemaProcedure,
		svc.GetVSchema,
		opts...,
	))
	mux.Handle(VTAdminGetVSchemasProcedure, connect_go.NewUnaryHandler(
		VTAdminGetVSchemasProcedure,
		svc.GetVSchemas,
		opts...,
	))
	mux.Handle(VTAdminGetVtctldsProcedure, connect_go.NewUnaryHandler(
		VTAdminGetVtctldsProcedure,
		svc.GetVtctlds,
		opts...,
	))
	mux.Handle(VTAdminGetWorkflowProcedure, connect_go.NewUnaryHandler(
		VTAdminGetWorkflowProcedure,
		svc.GetWorkflow,
		opts...,
	))
	mux.Handle(VTAdminGetWorkflowsProcedure, connect_go.NewUnaryHandler(
		VTAdminGetWorkflowsProcedure,
		svc.GetWorkflows,
		opts...,
	))
	mux.Handle(VTAdminPingTabletProcedure, connect_go.NewUnaryHandler(
		VTAdminPingTabletProcedure,
		svc.PingTablet,
		opts...,
	))
	mux.Handle(VTAdminPlannedFailoverShardProcedure, connect_go.NewUnaryHandler(
		VTAdminPlannedFailoverShardProcedure,
		svc.PlannedFailoverShard,
		opts...,
	))
	mux.Handle(VTAdminRebuildKeyspaceGraphProcedure, connect_go.NewUnaryHandler(
		VTAdminRebuildKeyspaceGraphProcedure,
		svc.RebuildKeyspaceGraph,
		opts...,
	))
	mux.Handle(VTAdminRefreshStateProcedure, connect_go.NewUnaryHandler(
		VTAdminRefreshStateProcedure,
		svc.RefreshState,
		opts...,
	))
	mux.Handle(VTAdminRefreshTabletReplicationSourceProcedure, connect_go.NewUnaryHandler(
		VTAdminRefreshTabletReplicationSourceProcedure,
		svc.RefreshTabletReplicationSource,
		opts...,
	))
	mux.Handle(VTAdminReloadSchemasProcedure, connect_go.NewUnaryHandler(
		VTAdminReloadSchemasProcedure,
		svc.ReloadSchemas,
		opts...,
	))
	mux.Handle(VTAdminReloadSchemaShardProcedure, connect_go.NewUnaryHandler(
		VTAdminReloadSchemaShardProcedure,
		svc.ReloadSchemaShard,
		opts...,
	))
	mux.Handle(VTAdminRemoveKeyspaceCellProcedure, connect_go.NewUnaryHandler(
		VTAdminRemoveKeyspaceCellProcedure,
		svc.RemoveKeyspaceCell,
		opts...,
	))
	mux.Handle(VTAdminRunHealthCheckProcedure, connect_go.NewUnaryHandler(
		VTAdminRunHealthCheckProcedure,
		svc.RunHealthCheck,
		opts...,
	))
	mux.Handle(VTAdminSetReadOnlyProcedure, connect_go.NewUnaryHandler(
		VTAdminSetReadOnlyProcedure,
		svc.SetReadOnly,
		opts...,
	))
	mux.Handle(VTAdminSetReadWriteProcedure, connect_go.NewUnaryHandler(
		VTAdminSetReadWriteProcedure,
		svc.SetReadWrite,
		opts...,
	))
	mux.Handle(VTAdminStartReplicationProcedure, connect_go.NewUnaryHandler(
		VTAdminStartReplicationProcedure,
		svc.StartReplication,
		opts...,
	))
	mux.Handle(VTAdminStopReplicationProcedure, connect_go.NewUnaryHandler(
		VTAdminStopReplicationProcedure,
		svc.StopReplication,
		opts...,
	))
	mux.Handle(VTAdminTabletExternallyPromotedProcedure, connect_go.NewUnaryHandler(
		VTAdminTabletExternallyPromotedProcedure,
		svc.TabletExternallyPromoted,
		opts...,
	))
	mux.Handle(VTAdminValidateProcedure, connect_go.NewUnaryHandler(
		VTAdminValidateProcedure,
		svc.Validate,
		opts...,
	))
	mux.Handle(VTAdminValidateKeyspaceProcedure, connect_go.NewUnaryHandler(
		VTAdminValidateKeyspaceProcedure,
		svc.ValidateKeyspace,
		opts...,
	))
	mux.Handle(VTAdminValidateSchemaKeyspaceProcedure, connect_go.NewUnaryHandler(
		VTAdminValidateSchemaKeyspaceProcedure,
		svc.ValidateSchemaKeyspace,
		opts...,
	))
	mux.Handle(VTAdminValidateShardProcedure, connect_go.NewUnaryHandler(
		VTAdminValidateShardProcedure,
		svc.ValidateShard,
		opts...,
	))
	mux.Handle(VTAdminValidateVersionKeyspaceProcedure, connect_go.NewUnaryHandler(
		VTAdminValidateVersionKeyspaceProcedure,
		svc.ValidateVersionKeyspace,
		opts...,
	))
	mux.Handle(VTAdminValidateVersionShardProcedure, connect_go.NewUnaryHandler(
		VTAdminValidateVersionShardProcedure,
		svc.ValidateVersionShard,
		opts...,
	))
	mux.Handle(VTAdminVTExplainProcedure, connect_go.NewUnaryHandler(
		VTAdminVTExplainProcedure,
		svc.VTExplain,
		opts...,
	))
	return "/vtadmin.VTAdmin/", mux
}

// UnimplementedVTAdminHandler returns CodeUnimplemented from all methods.
type UnimplementedVTAdminHandler struct{}

func (UnimplementedVTAdminHandler) CreateKeyspace(context.Context, *connect_go.Request[v16.CreateKeyspaceRequest]) (*connect_go.Response[v16.CreateKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.CreateKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) CreateShard(context.Context, *connect_go.Request[v16.CreateShardRequest]) (*connect_go.Response[v161.CreateShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.CreateShard is not implemented"))
}

func (UnimplementedVTAdminHandler) DeleteKeyspace(context.Context, *connect_go.Request[v16.DeleteKeyspaceRequest]) (*connect_go.Response[v161.DeleteKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.DeleteKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) DeleteShards(context.Context, *connect_go.Request[v16.DeleteShardsRequest]) (*connect_go.Response[v161.DeleteShardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.DeleteShards is not implemented"))
}

func (UnimplementedVTAdminHandler) DeleteTablet(context.Context, *connect_go.Request[v16.DeleteTabletRequest]) (*connect_go.Response[v16.DeleteTabletResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.DeleteTablet is not implemented"))
}

func (UnimplementedVTAdminHandler) EmergencyFailoverShard(context.Context, *connect_go.Request[v16.EmergencyFailoverShardRequest]) (*connect_go.Response[v16.EmergencyFailoverShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.EmergencyFailoverShard is not implemented"))
}

func (UnimplementedVTAdminHandler) FindSchema(context.Context, *connect_go.Request[v16.FindSchemaRequest]) (*connect_go.Response[v16.Schema], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.FindSchema is not implemented"))
}

func (UnimplementedVTAdminHandler) GetBackups(context.Context, *connect_go.Request[v16.GetBackupsRequest]) (*connect_go.Response[v16.GetBackupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetBackups is not implemented"))
}

func (UnimplementedVTAdminHandler) GetCellInfos(context.Context, *connect_go.Request[v16.GetCellInfosRequest]) (*connect_go.Response[v16.GetCellInfosResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetCellInfos is not implemented"))
}

func (UnimplementedVTAdminHandler) GetCellsAliases(context.Context, *connect_go.Request[v16.GetCellsAliasesRequest]) (*connect_go.Response[v16.GetCellsAliasesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetCellsAliases is not implemented"))
}

func (UnimplementedVTAdminHandler) GetClusters(context.Context, *connect_go.Request[v16.GetClustersRequest]) (*connect_go.Response[v16.GetClustersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetClusters is not implemented"))
}

func (UnimplementedVTAdminHandler) GetFullStatus(context.Context, *connect_go.Request[v16.GetFullStatusRequest]) (*connect_go.Response[v161.GetFullStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetFullStatus is not implemented"))
}

func (UnimplementedVTAdminHandler) GetGates(context.Context, *connect_go.Request[v16.GetGatesRequest]) (*connect_go.Response[v16.GetGatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetGates is not implemented"))
}

func (UnimplementedVTAdminHandler) GetKeyspace(context.Context, *connect_go.Request[v16.GetKeyspaceRequest]) (*connect_go.Response[v16.Keyspace], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) GetKeyspaces(context.Context, *connect_go.Request[v16.GetKeyspacesRequest]) (*connect_go.Response[v16.GetKeyspacesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetKeyspaces is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSchema(context.Context, *connect_go.Request[v16.GetSchemaRequest]) (*connect_go.Response[v16.Schema], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetSchema is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSchemas(context.Context, *connect_go.Request[v16.GetSchemasRequest]) (*connect_go.Response[v16.GetSchemasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetSchemas is not implemented"))
}

func (UnimplementedVTAdminHandler) GetShardReplicationPositions(context.Context, *connect_go.Request[v16.GetShardReplicationPositionsRequest]) (*connect_go.Response[v16.GetShardReplicationPositionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetShardReplicationPositions is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSrvVSchema(context.Context, *connect_go.Request[v16.GetSrvVSchemaRequest]) (*connect_go.Response[v16.SrvVSchema], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetSrvVSchema is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSrvVSchemas(context.Context, *connect_go.Request[v16.GetSrvVSchemasRequest]) (*connect_go.Response[v16.GetSrvVSchemasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetSrvVSchemas is not implemented"))
}

func (UnimplementedVTAdminHandler) GetTablet(context.Context, *connect_go.Request[v16.GetTabletRequest]) (*connect_go.Response[v16.Tablet], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetTablet is not implemented"))
}

func (UnimplementedVTAdminHandler) GetTablets(context.Context, *connect_go.Request[v16.GetTabletsRequest]) (*connect_go.Response[v16.GetTabletsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetTablets is not implemented"))
}

func (UnimplementedVTAdminHandler) GetTopologyPath(context.Context, *connect_go.Request[v16.GetTopologyPathRequest]) (*connect_go.Response[v161.GetTopologyPathResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetTopologyPath is not implemented"))
}

func (UnimplementedVTAdminHandler) GetVSchema(context.Context, *connect_go.Request[v16.GetVSchemaRequest]) (*connect_go.Response[v16.VSchema], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetVSchema is not implemented"))
}

func (UnimplementedVTAdminHandler) GetVSchemas(context.Context, *connect_go.Request[v16.GetVSchemasRequest]) (*connect_go.Response[v16.GetVSchemasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetVSchemas is not implemented"))
}

func (UnimplementedVTAdminHandler) GetVtctlds(context.Context, *connect_go.Request[v16.GetVtctldsRequest]) (*connect_go.Response[v16.GetVtctldsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetVtctlds is not implemented"))
}

func (UnimplementedVTAdminHandler) GetWorkflow(context.Context, *connect_go.Request[v16.GetWorkflowRequest]) (*connect_go.Response[v16.Workflow], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetWorkflow is not implemented"))
}

func (UnimplementedVTAdminHandler) GetWorkflows(context.Context, *connect_go.Request[v16.GetWorkflowsRequest]) (*connect_go.Response[v16.GetWorkflowsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetWorkflows is not implemented"))
}

func (UnimplementedVTAdminHandler) PingTablet(context.Context, *connect_go.Request[v16.PingTabletRequest]) (*connect_go.Response[v16.PingTabletResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.PingTablet is not implemented"))
}

func (UnimplementedVTAdminHandler) PlannedFailoverShard(context.Context, *connect_go.Request[v16.PlannedFailoverShardRequest]) (*connect_go.Response[v16.PlannedFailoverShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.PlannedFailoverShard is not implemented"))
}

func (UnimplementedVTAdminHandler) RebuildKeyspaceGraph(context.Context, *connect_go.Request[v16.RebuildKeyspaceGraphRequest]) (*connect_go.Response[v16.RebuildKeyspaceGraphResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.RebuildKeyspaceGraph is not implemented"))
}

func (UnimplementedVTAdminHandler) RefreshState(context.Context, *connect_go.Request[v16.RefreshStateRequest]) (*connect_go.Response[v16.RefreshStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.RefreshState is not implemented"))
}

func (UnimplementedVTAdminHandler) RefreshTabletReplicationSource(context.Context, *connect_go.Request[v16.RefreshTabletReplicationSourceRequest]) (*connect_go.Response[v16.RefreshTabletReplicationSourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.RefreshTabletReplicationSource is not implemented"))
}

func (UnimplementedVTAdminHandler) ReloadSchemas(context.Context, *connect_go.Request[v16.ReloadSchemasRequest]) (*connect_go.Response[v16.ReloadSchemasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ReloadSchemas is not implemented"))
}

func (UnimplementedVTAdminHandler) ReloadSchemaShard(context.Context, *connect_go.Request[v16.ReloadSchemaShardRequest]) (*connect_go.Response[v16.ReloadSchemaShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ReloadSchemaShard is not implemented"))
}

func (UnimplementedVTAdminHandler) RemoveKeyspaceCell(context.Context, *connect_go.Request[v16.RemoveKeyspaceCellRequest]) (*connect_go.Response[v16.RemoveKeyspaceCellResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.RemoveKeyspaceCell is not implemented"))
}

func (UnimplementedVTAdminHandler) RunHealthCheck(context.Context, *connect_go.Request[v16.RunHealthCheckRequest]) (*connect_go.Response[v16.RunHealthCheckResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.RunHealthCheck is not implemented"))
}

func (UnimplementedVTAdminHandler) SetReadOnly(context.Context, *connect_go.Request[v16.SetReadOnlyRequest]) (*connect_go.Response[v16.SetReadOnlyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.SetReadOnly is not implemented"))
}

func (UnimplementedVTAdminHandler) SetReadWrite(context.Context, *connect_go.Request[v16.SetReadWriteRequest]) (*connect_go.Response[v16.SetReadWriteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.SetReadWrite is not implemented"))
}

func (UnimplementedVTAdminHandler) StartReplication(context.Context, *connect_go.Request[v16.StartReplicationRequest]) (*connect_go.Response[v16.StartReplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.StartReplication is not implemented"))
}

func (UnimplementedVTAdminHandler) StopReplication(context.Context, *connect_go.Request[v16.StopReplicationRequest]) (*connect_go.Response[v16.StopReplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.StopReplication is not implemented"))
}

func (UnimplementedVTAdminHandler) TabletExternallyPromoted(context.Context, *connect_go.Request[v16.TabletExternallyPromotedRequest]) (*connect_go.Response[v16.TabletExternallyPromotedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.TabletExternallyPromoted is not implemented"))
}

func (UnimplementedVTAdminHandler) Validate(context.Context, *connect_go.Request[v16.ValidateRequest]) (*connect_go.Response[v161.ValidateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.Validate is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateKeyspace(context.Context, *connect_go.Request[v16.ValidateKeyspaceRequest]) (*connect_go.Response[v161.ValidateKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ValidateKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateSchemaKeyspace(context.Context, *connect_go.Request[v16.ValidateSchemaKeyspaceRequest]) (*connect_go.Response[v161.ValidateSchemaKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ValidateSchemaKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateShard(context.Context, *connect_go.Request[v16.ValidateShardRequest]) (*connect_go.Response[v161.ValidateShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ValidateShard is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateVersionKeyspace(context.Context, *connect_go.Request[v16.ValidateVersionKeyspaceRequest]) (*connect_go.Response[v161.ValidateVersionKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ValidateVersionKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateVersionShard(context.Context, *connect_go.Request[v16.ValidateVersionShardRequest]) (*connect_go.Response[v161.ValidateVersionShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ValidateVersionShard is not implemented"))
}

func (UnimplementedVTAdminHandler) VTExplain(context.Context, *connect_go.Request[v16.VTExplainRequest]) (*connect_go.Response[v16.VTExplainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.VTExplain is not implemented"))
}
