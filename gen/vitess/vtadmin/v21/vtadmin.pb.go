//
//Copyright 2020 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This package contains the types used by VTAdmin (and later an RPC service).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: vitess/vtadmin/v21/vtadmin.proto

package vtadminv21

import (
	v215 "github.com/planetscale/vitess-types/gen/vitess/logutil/v21"
	v21 "github.com/planetscale/vitess-types/gen/vitess/mysqlctl/v21"
	v213 "github.com/planetscale/vitess-types/gen/vitess/tabletmanagerdata/v21"
	v211 "github.com/planetscale/vitess-types/gen/vitess/topodata/v21"
	v214 "github.com/planetscale/vitess-types/gen/vitess/vschema/v21"
	v212 "github.com/planetscale/vitess-types/gen/vitess/vtctldata/v21"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Tablet_ServingState int32

const (
	Tablet_UNKNOWN     Tablet_ServingState = 0
	Tablet_SERVING     Tablet_ServingState = 1
	Tablet_NOT_SERVING Tablet_ServingState = 2
)

// Enum value maps for Tablet_ServingState.
var (
	Tablet_ServingState_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVING",
		2: "NOT_SERVING",
	}
	Tablet_ServingState_value = map[string]int32{
		"UNKNOWN":     0,
		"SERVING":     1,
		"NOT_SERVING": 2,
	}
)

func (x Tablet_ServingState) Enum() *Tablet_ServingState {
	p := new(Tablet_ServingState)
	*p = x
	return p
}

func (x Tablet_ServingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tablet_ServingState) Descriptor() protoreflect.EnumDescriptor {
	return file_vitess_vtadmin_v21_vtadmin_proto_enumTypes[0].Descriptor()
}

func (Tablet_ServingState) Type() protoreflect.EnumType {
	return &file_vitess_vtadmin_v21_vtadmin_proto_enumTypes[0]
}

func (x Tablet_ServingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tablet_ServingState.Descriptor instead.
func (Tablet_ServingState) EnumDescriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{11, 0}
}

// Cluster represents information about a Vitess cluster.
type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ClusterBackup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster        `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Backup  *v21.BackupInfo `protobuf:"bytes,2,opt,name=backup,proto3" json:"backup,omitempty"`
}

func (x *ClusterBackup) Reset() {
	*x = ClusterBackup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterBackup) ProtoMessage() {}

func (x *ClusterBackup) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterBackup.ProtoReflect.Descriptor instead.
func (*ClusterBackup) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterBackup) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterBackup) GetBackup() *v21.BackupInfo {
	if x != nil {
		return x.Backup
	}
	return nil
}

type ClusterCellsAliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster                    `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Aliases map[string]*v211.CellsAlias `protobuf:"bytes,2,rep,name=aliases,proto3" json:"aliases,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClusterCellsAliases) Reset() {
	*x = ClusterCellsAliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCellsAliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCellsAliases) ProtoMessage() {}

func (x *ClusterCellsAliases) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCellsAliases.ProtoReflect.Descriptor instead.
func (*ClusterCellsAliases) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterCellsAliases) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterCellsAliases) GetAliases() map[string]*v211.CellsAlias {
	if x != nil {
		return x.Aliases
	}
	return nil
}

type ClusterCellInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// CellInfo contains the data for the cell.
	//
	// It may be nil if the GetCellsInfosRequest specified NamesOnly.
	CellInfo *v211.CellInfo `protobuf:"bytes,3,opt,name=cell_info,json=cellInfo,proto3" json:"cell_info,omitempty"`
}

func (x *ClusterCellInfo) Reset() {
	*x = ClusterCellInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterCellInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterCellInfo) ProtoMessage() {}

func (x *ClusterCellInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterCellInfo.ProtoReflect.Descriptor instead.
func (*ClusterCellInfo) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{3}
}

func (x *ClusterCellInfo) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterCellInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterCellInfo) GetCellInfo() *v211.CellInfo {
	if x != nil {
		return x.CellInfo
	}
	return nil
}

type ClusterShardReplicationPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster      *Cluster                                `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Keyspace     string                                  `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard        string                                  `protobuf:"bytes,3,opt,name=shard,proto3" json:"shard,omitempty"`
	PositionInfo *v212.ShardReplicationPositionsResponse `protobuf:"bytes,4,opt,name=position_info,json=positionInfo,proto3" json:"position_info,omitempty"`
}

func (x *ClusterShardReplicationPosition) Reset() {
	*x = ClusterShardReplicationPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterShardReplicationPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterShardReplicationPosition) ProtoMessage() {}

func (x *ClusterShardReplicationPosition) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterShardReplicationPosition.ProtoReflect.Descriptor instead.
func (*ClusterShardReplicationPosition) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterShardReplicationPosition) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClusterShardReplicationPosition) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ClusterShardReplicationPosition) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *ClusterShardReplicationPosition) GetPositionInfo() *v212.ShardReplicationPositionsResponse {
	if x != nil {
		return x.PositionInfo
	}
	return nil
}

type ClusterWorkflows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflows []*Workflow `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	// Warnings is a list of non-fatal errors encountered when fetching
	// workflows for a particular cluster.
	Warnings []string `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *ClusterWorkflows) Reset() {
	*x = ClusterWorkflows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterWorkflows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterWorkflows) ProtoMessage() {}

func (x *ClusterWorkflows) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterWorkflows.ProtoReflect.Descriptor instead.
func (*ClusterWorkflows) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{5}
}

func (x *ClusterWorkflows) GetWorkflows() []*Workflow {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *ClusterWorkflows) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// Keyspace represents information about a keyspace in a particular Vitess
// cluster.
type Keyspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster  *Cluster               `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Keyspace *v212.Keyspace         `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shards   map[string]*v212.Shard `protobuf:"bytes,3,rep,name=shards,proto3" json:"shards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Keyspace) Reset() {
	*x = Keyspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keyspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyspace) ProtoMessage() {}

func (x *Keyspace) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keyspace.ProtoReflect.Descriptor instead.
func (*Keyspace) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{6}
}

func (x *Keyspace) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *Keyspace) GetKeyspace() *v212.Keyspace {
	if x != nil {
		return x.Keyspace
	}
	return nil
}

func (x *Keyspace) GetShards() map[string]*v212.Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster          *Cluster                `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Keyspace         string                  `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	TableDefinitions []*v213.TableDefinition `protobuf:"bytes,3,rep,name=table_definitions,json=tableDefinitions,proto3" json:"table_definitions,omitempty"`
	// TableSizes is a mapping of table name to TableSize information.
	TableSizes map[string]*Schema_TableSize `protobuf:"bytes,4,rep,name=table_sizes,json=tableSizes,proto3" json:"table_sizes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{7}
}

func (x *Schema) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *Schema) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *Schema) GetTableDefinitions() []*v213.TableDefinition {
	if x != nil {
		return x.TableDefinitions
	}
	return nil
}

func (x *Schema) GetTableSizes() map[string]*Schema_TableSize {
	if x != nil {
		return x.TableSizes
	}
	return nil
}

type SchemaMigration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster         *Cluster              `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	SchemaMigration *v212.SchemaMigration `protobuf:"bytes,2,opt,name=schema_migration,json=schemaMigration,proto3" json:"schema_migration,omitempty"`
}

func (x *SchemaMigration) Reset() {
	*x = SchemaMigration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMigration) ProtoMessage() {}

func (x *SchemaMigration) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMigration.ProtoReflect.Descriptor instead.
func (*SchemaMigration) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{8}
}

func (x *SchemaMigration) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *SchemaMigration) GetSchemaMigration() *v212.SchemaMigration {
	if x != nil {
		return x.SchemaMigration
	}
	return nil
}

// Shard groups the vtctldata information about a shard record together with
// the Vitess cluster it belongs to.
type Shard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster    `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Shard   *v212.Shard `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
}

func (x *Shard) Reset() {
	*x = Shard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shard) ProtoMessage() {}

func (x *Shard) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shard.ProtoReflect.Descriptor instead.
func (*Shard) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{9}
}

func (x *Shard) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *Shard) GetShard() *v212.Shard {
	if x != nil {
		return x.Shard
	}
	return nil
}

type SrvVSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cell       string           `protobuf:"bytes,1,opt,name=cell,proto3" json:"cell,omitempty"`
	Cluster    *Cluster         `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	SrvVSchema *v214.SrvVSchema `protobuf:"bytes,3,opt,name=srv_v_schema,json=srvVSchema,proto3" json:"srv_v_schema,omitempty"`
}

func (x *SrvVSchema) Reset() {
	*x = SrvVSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrvVSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrvVSchema) ProtoMessage() {}

func (x *SrvVSchema) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrvVSchema.ProtoReflect.Descriptor instead.
func (*SrvVSchema) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{10}
}

func (x *SrvVSchema) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

func (x *SrvVSchema) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *SrvVSchema) GetSrvVSchema() *v214.SrvVSchema {
	if x != nil {
		return x.SrvVSchema
	}
	return nil
}

// Tablet groups the topo information of a tablet together with the Vitess
// cluster it belongs to.
type Tablet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster            `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tablet  *v211.Tablet        `protobuf:"bytes,2,opt,name=tablet,proto3" json:"tablet,omitempty"`
	State   Tablet_ServingState `protobuf:"varint,3,opt,name=state,proto3,enum=vitess.vtadmin.v21.Tablet_ServingState" json:"state,omitempty"`
	FQDN    string              `protobuf:"bytes,4,opt,name=FQDN,proto3" json:"FQDN,omitempty"`
}

func (x *Tablet) Reset() {
	*x = Tablet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tablet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tablet) ProtoMessage() {}

func (x *Tablet) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tablet.ProtoReflect.Descriptor instead.
func (*Tablet) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{11}
}

func (x *Tablet) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *Tablet) GetTablet() *v211.Tablet {
	if x != nil {
		return x.Tablet
	}
	return nil
}

func (x *Tablet) GetState() Tablet_ServingState {
	if x != nil {
		return x.State
	}
	return Tablet_UNKNOWN
}

func (x *Tablet) GetFQDN() string {
	if x != nil {
		return x.FQDN
	}
	return ""
}

// VSchema represents the vschema for a keyspace in the cluster it belongs to.
type VSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name is the name of the keyspace this VSchema is for.
	Name    string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	VSchema *v214.Keyspace `protobuf:"bytes,3,opt,name=v_schema,json=vSchema,proto3" json:"v_schema,omitempty"`
}

func (x *VSchema) Reset() {
	*x = VSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSchema) ProtoMessage() {}

func (x *VSchema) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSchema.ProtoReflect.Descriptor instead.
func (*VSchema) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{12}
}

func (x *VSchema) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *VSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VSchema) GetVSchema() *v214.Keyspace {
	if x != nil {
		return x.VSchema
	}
	return nil
}

// Vtctld represents information about a single Vtctld host.
type Vtctld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Cluster  *Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	FQDN     string   `protobuf:"bytes,3,opt,name=FQDN,proto3" json:"FQDN,omitempty"`
}

func (x *Vtctld) Reset() {
	*x = Vtctld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vtctld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vtctld) ProtoMessage() {}

func (x *Vtctld) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vtctld.ProtoReflect.Descriptor instead.
func (*Vtctld) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{13}
}

func (x *Vtctld) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Vtctld) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *Vtctld) GetFQDN() string {
	if x != nil {
		return x.FQDN
	}
	return ""
}

// VTGate represents information about a single VTGate host.
type VTGate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hostname is the shortname of the VTGate.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Pool is group the VTGate serves queries for. Some deployments segment
	// VTGates into groups or pools, based on the workloads they serve queries
	// for. Use of this field is optional.
	Pool string `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	// Cell is the topology cell the VTGate is in.
	Cell string `protobuf:"bytes,3,opt,name=cell,proto3" json:"cell,omitempty"`
	// Cluster is the cluster the VTGate serves.
	Cluster *Cluster `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Keyspaces is the list of keyspaces-to-watch for the VTGate.
	Keyspaces []string `protobuf:"bytes,5,rep,name=keyspaces,proto3" json:"keyspaces,omitempty"`
	FQDN      string   `protobuf:"bytes,6,opt,name=FQDN,proto3" json:"FQDN,omitempty"`
}

func (x *VTGate) Reset() {
	*x = VTGate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VTGate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VTGate) ProtoMessage() {}

func (x *VTGate) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VTGate.ProtoReflect.Descriptor instead.
func (*VTGate) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{14}
}

func (x *VTGate) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *VTGate) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *VTGate) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

func (x *VTGate) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *VTGate) GetKeyspaces() []string {
	if x != nil {
		return x.Keyspaces
	}
	return nil
}

func (x *VTGate) GetFQDN() string {
	if x != nil {
		return x.FQDN
	}
	return ""
}

type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster  *Cluster       `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Keyspace string         `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Workflow *v212.Workflow `protobuf:"bytes,3,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{15}
}

func (x *Workflow) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *Workflow) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *Workflow) GetWorkflow() *v212.Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

type ApplySchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Request   *v212.ApplySchemaRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *ApplySchemaRequest) Reset() {
	*x = ApplySchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplySchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplySchemaRequest) ProtoMessage() {}

func (x *ApplySchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplySchemaRequest.ProtoReflect.Descriptor instead.
func (*ApplySchemaRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{16}
}

func (x *ApplySchemaRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ApplySchemaRequest) GetRequest() *v212.ApplySchemaRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type CancelSchemaMigrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                             `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Request   *v212.CancelSchemaMigrationRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *CancelSchemaMigrationRequest) Reset() {
	*x = CancelSchemaMigrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSchemaMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSchemaMigrationRequest) ProtoMessage() {}

func (x *CancelSchemaMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSchemaMigrationRequest.ProtoReflect.Descriptor instead.
func (*CancelSchemaMigrationRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{17}
}

func (x *CancelSchemaMigrationRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CancelSchemaMigrationRequest) GetRequest() *v212.CancelSchemaMigrationRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type CleanupSchemaMigrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                              `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Request   *v212.CleanupSchemaMigrationRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *CleanupSchemaMigrationRequest) Reset() {
	*x = CleanupSchemaMigrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanupSchemaMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupSchemaMigrationRequest) ProtoMessage() {}

func (x *CleanupSchemaMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupSchemaMigrationRequest.ProtoReflect.Descriptor instead.
func (*CleanupSchemaMigrationRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{18}
}

func (x *CleanupSchemaMigrationRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CleanupSchemaMigrationRequest) GetRequest() *v212.CleanupSchemaMigrationRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type CompleteSchemaMigrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                               `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Request   *v212.CompleteSchemaMigrationRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *CompleteSchemaMigrationRequest) Reset() {
	*x = CompleteSchemaMigrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteSchemaMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteSchemaMigrationRequest) ProtoMessage() {}

func (x *CompleteSchemaMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteSchemaMigrationRequest.ProtoReflect.Descriptor instead.
func (*CompleteSchemaMigrationRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{19}
}

func (x *CompleteSchemaMigrationRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CompleteSchemaMigrationRequest) GetRequest() *v212.CompleteSchemaMigrationRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type ConcludeTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Dtid      string `protobuf:"bytes,2,opt,name=dtid,proto3" json:"dtid,omitempty"`
}

func (x *ConcludeTransactionRequest) Reset() {
	*x = ConcludeTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcludeTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcludeTransactionRequest) ProtoMessage() {}

func (x *ConcludeTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcludeTransactionRequest.ProtoReflect.Descriptor instead.
func (*ConcludeTransactionRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{20}
}

func (x *ConcludeTransactionRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ConcludeTransactionRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

type CreateKeyspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                      `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Options   *v212.CreateKeyspaceRequest `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateKeyspaceRequest) Reset() {
	*x = CreateKeyspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyspaceRequest) ProtoMessage() {}

func (x *CreateKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*CreateKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{21}
}

func (x *CreateKeyspaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateKeyspaceRequest) GetOptions() *v212.CreateKeyspaceRequest {
	if x != nil {
		return x.Options
	}
	return nil
}

type CreateKeyspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyspace *Keyspace `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
}

func (x *CreateKeyspaceResponse) Reset() {
	*x = CreateKeyspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyspaceResponse) ProtoMessage() {}

func (x *CreateKeyspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyspaceResponse.ProtoReflect.Descriptor instead.
func (*CreateKeyspaceResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{22}
}

func (x *CreateKeyspaceResponse) GetKeyspace() *Keyspace {
	if x != nil {
		return x.Keyspace
	}
	return nil
}

type CreateShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Options   *v212.CreateShardRequest `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateShardRequest) Reset() {
	*x = CreateShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShardRequest) ProtoMessage() {}

func (x *CreateShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShardRequest.ProtoReflect.Descriptor instead.
func (*CreateShardRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{23}
}

func (x *CreateShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateShardRequest) GetOptions() *v212.CreateShardRequest {
	if x != nil {
		return x.Options
	}
	return nil
}

type DeleteKeyspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                      `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Options   *v212.DeleteKeyspaceRequest `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *DeleteKeyspaceRequest) Reset() {
	*x = DeleteKeyspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyspaceRequest) ProtoMessage() {}

func (x *DeleteKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteKeyspaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteKeyspaceRequest) GetOptions() *v212.DeleteKeyspaceRequest {
	if x != nil {
		return x.Options
	}
	return nil
}

type DeleteShardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                    `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Options   *v212.DeleteShardsRequest `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *DeleteShardsRequest) Reset() {
	*x = DeleteShardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShardsRequest) ProtoMessage() {}

func (x *DeleteShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShardsRequest.ProtoReflect.Descriptor instead.
func (*DeleteShardsRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteShardsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteShardsRequest) GetOptions() *v212.DeleteShardsRequest {
	if x != nil {
		return x.Options
	}
	return nil
}

type DeleteTabletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias        *v211.TabletAlias `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	ClusterIds   []string          `protobuf:"bytes,2,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
	AllowPrimary bool              `protobuf:"varint,3,opt,name=allow_primary,json=allowPrimary,proto3" json:"allow_primary,omitempty"`
}

func (x *DeleteTabletRequest) Reset() {
	*x = DeleteTabletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTabletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTabletRequest) ProtoMessage() {}

func (x *DeleteTabletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTabletRequest.ProtoReflect.Descriptor instead.
func (*DeleteTabletRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteTabletRequest) GetAlias() *v211.TabletAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *DeleteTabletRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

func (x *DeleteTabletRequest) GetAllowPrimary() bool {
	if x != nil {
		return x.AllowPrimary
	}
	return false
}

type DeleteTabletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Cluster *Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *DeleteTabletResponse) Reset() {
	*x = DeleteTabletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTabletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTabletResponse) ProtoMessage() {}

func (x *DeleteTabletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTabletResponse.ProtoReflect.Descriptor instead.
func (*DeleteTabletResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteTabletResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeleteTabletResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type EmergencyFailoverShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                              `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Options   *v212.EmergencyReparentShardRequest `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *EmergencyFailoverShardRequest) Reset() {
	*x = EmergencyFailoverShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmergencyFailoverShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmergencyFailoverShardRequest) ProtoMessage() {}

func (x *EmergencyFailoverShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmergencyFailoverShardRequest.ProtoReflect.Descriptor instead.
func (*EmergencyFailoverShardRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{28}
}

func (x *EmergencyFailoverShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *EmergencyFailoverShardRequest) GetOptions() *v212.EmergencyReparentShardRequest {
	if x != nil {
		return x.Options
	}
	return nil
}

type EmergencyFailoverShardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster  *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Keyspace string   `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard    string   `protobuf:"bytes,3,opt,name=shard,proto3" json:"shard,omitempty"`
	// PromotedPrimary is the tablet alias that was promoted to shard primary.
	// If NewPrimary was set in the request options, then this will be the
	// same tablet alias. Otherwise, it will be the alias of the tablet found
	// to be most up-to-date in the shard.
	PromotedPrimary *v211.TabletAlias `protobuf:"bytes,4,opt,name=promoted_primary,json=promotedPrimary,proto3" json:"promoted_primary,omitempty"`
	Events          []*v215.Event     `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *EmergencyFailoverShardResponse) Reset() {
	*x = EmergencyFailoverShardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmergencyFailoverShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmergencyFailoverShardResponse) ProtoMessage() {}

func (x *EmergencyFailoverShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmergencyFailoverShardResponse.ProtoReflect.Descriptor instead.
func (*EmergencyFailoverShardResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{29}
}

func (x *EmergencyFailoverShardResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *EmergencyFailoverShardResponse) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *EmergencyFailoverShardResponse) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *EmergencyFailoverShardResponse) GetPromotedPrimary() *v211.TabletAlias {
	if x != nil {
		return x.PromotedPrimary
	}
	return nil
}

func (x *EmergencyFailoverShardResponse) GetEvents() []*v215.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type FindSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table            string                     `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	ClusterIds       []string                   `protobuf:"bytes,2,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
	TableSizeOptions *GetSchemaTableSizeOptions `protobuf:"bytes,3,opt,name=table_size_options,json=tableSizeOptions,proto3" json:"table_size_options,omitempty"`
}

func (x *FindSchemaRequest) Reset() {
	*x = FindSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSchemaRequest) ProtoMessage() {}

func (x *FindSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSchemaRequest.ProtoReflect.Descriptor instead.
func (*FindSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{30}
}

func (x *FindSchemaRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *FindSchemaRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

func (x *FindSchemaRequest) GetTableSizeOptions() *GetSchemaTableSizeOptions {
	if x != nil {
		return x.TableSizeOptions
	}
	return nil
}

type GetBackupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
	// Keyspaces, if set, limits backups to just the specified keyspaces.
	// Applies to all clusters in the request.
	Keyspaces []string `protobuf:"bytes,2,rep,name=keyspaces,proto3" json:"keyspaces,omitempty"`
	// KeyspaceShards, if set, limits backups to just the specified
	// keyspace/shards. Applies to all clusters in the request.
	//
	// This field takes precedence over Keyspaces. If KeyspaceShards is set,
	// Keyspaces is ignored.
	KeyspaceShards []string `protobuf:"bytes,3,rep,name=keyspace_shards,json=keyspaceShards,proto3" json:"keyspace_shards,omitempty"`
	// RequestOptions controls the per-shard request options when making
	// GetBackups requests to vtctlds. Note that the Keyspace and Shard fields
	// of this field are ignored; it is used only to specify Limit and Detailed
	// fields.
	RequestOptions *v212.GetBackupsRequest `protobuf:"bytes,4,opt,name=request_options,json=requestOptions,proto3" json:"request_options,omitempty"`
}

func (x *GetBackupsRequest) Reset() {
	*x = GetBackupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBackupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackupsRequest) ProtoMessage() {}

func (x *GetBackupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackupsRequest.ProtoReflect.Descriptor instead.
func (*GetBackupsRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{31}
}

func (x *GetBackupsRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

func (x *GetBackupsRequest) GetKeyspaces() []string {
	if x != nil {
		return x.Keyspaces
	}
	return nil
}

func (x *GetBackupsRequest) GetKeyspaceShards() []string {
	if x != nil {
		return x.KeyspaceShards
	}
	return nil
}

func (x *GetBackupsRequest) GetRequestOptions() *v212.GetBackupsRequest {
	if x != nil {
		return x.RequestOptions
	}
	return nil
}

type GetBackupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backups []*ClusterBackup `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
}

func (x *GetBackupsResponse) Reset() {
	*x = GetBackupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackupsResponse) ProtoMessage() {}

func (x *GetBackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackupsResponse.ProtoReflect.Descriptor instead.
func (*GetBackupsResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{32}
}

func (x *GetBackupsResponse) GetBackups() []*ClusterBackup {
	if x != nil {
		return x.Backups
	}
	return nil
}

type GetCellInfosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
	// Cells, if specified, limits the response to include only CellInfo objects
	// with those names. If omitted, all CellInfo objects in each cluster are
	// returned.
	//
	// Mutually-exclusive with NamesOnly. If both are set, this field takes
	// precedence.
	Cells []string `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
	// Return only the cell names in each cluster; the actual CellInfo objects
	// will be empty.
	NamesOnly bool `protobuf:"varint,3,opt,name=names_only,json=namesOnly,proto3" json:"names_only,omitempty"`
}

func (x *GetCellInfosRequest) Reset() {
	*x = GetCellInfosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCellInfosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCellInfosRequest) ProtoMessage() {}

func (x *GetCellInfosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCellInfosRequest.ProtoReflect.Descriptor instead.
func (*GetCellInfosRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{33}
}

func (x *GetCellInfosRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

func (x *GetCellInfosRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *GetCellInfosRequest) GetNamesOnly() bool {
	if x != nil {
		return x.NamesOnly
	}
	return false
}

type GetCellInfosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellInfos []*ClusterCellInfo `protobuf:"bytes,1,rep,name=cell_infos,json=cellInfos,proto3" json:"cell_infos,omitempty"`
}

func (x *GetCellInfosResponse) Reset() {
	*x = GetCellInfosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCellInfosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCellInfosResponse) ProtoMessage() {}

func (x *GetCellInfosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCellInfosResponse.ProtoReflect.Descriptor instead.
func (*GetCellInfosResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{34}
}

func (x *GetCellInfosResponse) GetCellInfos() []*ClusterCellInfo {
	if x != nil {
		return x.CellInfos
	}
	return nil
}

type GetCellsAliasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *GetCellsAliasesRequest) Reset() {
	*x = GetCellsAliasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCellsAliasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCellsAliasesRequest) ProtoMessage() {}

func (x *GetCellsAliasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCellsAliasesRequest.ProtoReflect.Descriptor instead.
func (*GetCellsAliasesRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{35}
}

func (x *GetCellsAliasesRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type GetCellsAliasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aliases []*ClusterCellsAliases `protobuf:"bytes,1,rep,name=aliases,proto3" json:"aliases,omitempty"`
}

func (x *GetCellsAliasesResponse) Reset() {
	*x = GetCellsAliasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCellsAliasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCellsAliasesResponse) ProtoMessage() {}

func (x *GetCellsAliasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCellsAliasesResponse.ProtoReflect.Descriptor instead.
func (*GetCellsAliasesResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{36}
}

func (x *GetCellsAliasesResponse) GetAliases() []*ClusterCellsAliases {
	if x != nil {
		return x.Aliases
	}
	return nil
}

type GetClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetClustersRequest) Reset() {
	*x = GetClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClustersRequest) ProtoMessage() {}

func (x *GetClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClustersRequest.ProtoReflect.Descriptor instead.
func (*GetClustersRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{37}
}

type GetClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *GetClustersResponse) Reset() {
	*x = GetClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClustersResponse) ProtoMessage() {}

func (x *GetClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClustersResponse.ProtoReflect.Descriptor instead.
func (*GetClustersResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{38}
}

func (x *GetClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type GetFullStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string            `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Alias     *v211.TabletAlias `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *GetFullStatusRequest) Reset() {
	*x = GetFullStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullStatusRequest) ProtoMessage() {}

func (x *GetFullStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullStatusRequest.ProtoReflect.Descriptor instead.
func (*GetFullStatusRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{39}
}

func (x *GetFullStatusRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetFullStatusRequest) GetAlias() *v211.TabletAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

type GetGatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *GetGatesRequest) Reset() {
	*x = GetGatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatesRequest) ProtoMessage() {}

func (x *GetGatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatesRequest.ProtoReflect.Descriptor instead.
func (*GetGatesRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{40}
}

func (x *GetGatesRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type GetGatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gates []*VTGate `protobuf:"bytes,1,rep,name=gates,proto3" json:"gates,omitempty"`
}

func (x *GetGatesResponse) Reset() {
	*x = GetGatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatesResponse) ProtoMessage() {}

func (x *GetGatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatesResponse.ProtoReflect.Descriptor instead.
func (*GetGatesResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{41}
}

func (x *GetGatesResponse) GetGates() []*VTGate {
	if x != nil {
		return x.Gates
	}
	return nil
}

type GetKeyspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace  string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
}

func (x *GetKeyspaceRequest) Reset() {
	*x = GetKeyspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyspaceRequest) ProtoMessage() {}

func (x *GetKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*GetKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{42}
}

func (x *GetKeyspaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetKeyspaceRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

type GetKeyspacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *GetKeyspacesRequest) Reset() {
	*x = GetKeyspacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyspacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyspacesRequest) ProtoMessage() {}

func (x *GetKeyspacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyspacesRequest.ProtoReflect.Descriptor instead.
func (*GetKeyspacesRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{43}
}

func (x *GetKeyspacesRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type GetKeyspacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyspaces []*Keyspace `protobuf:"bytes,1,rep,name=keyspaces,proto3" json:"keyspaces,omitempty"`
}

func (x *GetKeyspacesResponse) Reset() {
	*x = GetKeyspacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyspacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyspacesResponse) ProtoMessage() {}

func (x *GetKeyspacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyspacesResponse.ProtoReflect.Descriptor instead.
func (*GetKeyspacesResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{44}
}

func (x *GetKeyspacesResponse) GetKeyspaces() []*Keyspace {
	if x != nil {
		return x.Keyspaces
	}
	return nil
}

type GetSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId        string                     `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace         string                     `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Table            string                     `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	TableSizeOptions *GetSchemaTableSizeOptions `protobuf:"bytes,4,opt,name=table_size_options,json=tableSizeOptions,proto3" json:"table_size_options,omitempty"`
}

func (x *GetSchemaRequest) Reset() {
	*x = GetSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRequest) ProtoMessage() {}

func (x *GetSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{45}
}

func (x *GetSchemaRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetSchemaRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *GetSchemaRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *GetSchemaRequest) GetTableSizeOptions() *GetSchemaTableSizeOptions {
	if x != nil {
		return x.TableSizeOptions
	}
	return nil
}

type GetSchemasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterIds       []string                   `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
	TableSizeOptions *GetSchemaTableSizeOptions `protobuf:"bytes,2,opt,name=table_size_options,json=tableSizeOptions,proto3" json:"table_size_options,omitempty"`
}

func (x *GetSchemasRequest) Reset() {
	*x = GetSchemasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemasRequest) ProtoMessage() {}

func (x *GetSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemasRequest.ProtoReflect.Descriptor instead.
func (*GetSchemasRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{46}
}

func (x *GetSchemasRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

func (x *GetSchemasRequest) GetTableSizeOptions() *GetSchemaTableSizeOptions {
	if x != nil {
		return x.TableSizeOptions
	}
	return nil
}

type GetSchemasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schemas []*Schema `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
}

func (x *GetSchemasResponse) Reset() {
	*x = GetSchemasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemasResponse) ProtoMessage() {}

func (x *GetSchemasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemasResponse.ProtoReflect.Descriptor instead.
func (*GetSchemasResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{47}
}

func (x *GetSchemasResponse) GetSchemas() []*Schema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

type GetSchemaMigrationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterRequests []*GetSchemaMigrationsRequest_ClusterRequest `protobuf:"bytes,1,rep,name=cluster_requests,json=clusterRequests,proto3" json:"cluster_requests,omitempty"`
}

func (x *GetSchemaMigrationsRequest) Reset() {
	*x = GetSchemaMigrationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaMigrationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaMigrationsRequest) ProtoMessage() {}

func (x *GetSchemaMigrationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaMigrationsRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaMigrationsRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{48}
}

func (x *GetSchemaMigrationsRequest) GetClusterRequests() []*GetSchemaMigrationsRequest_ClusterRequest {
	if x != nil {
		return x.ClusterRequests
	}
	return nil
}

type GetSchemaMigrationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaMigrations []*SchemaMigration `protobuf:"bytes,1,rep,name=schema_migrations,json=schemaMigrations,proto3" json:"schema_migrations,omitempty"`
}

func (x *GetSchemaMigrationsResponse) Reset() {
	*x = GetSchemaMigrationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaMigrationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaMigrationsResponse) ProtoMessage() {}

func (x *GetSchemaMigrationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaMigrationsResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaMigrationsResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{49}
}

func (x *GetSchemaMigrationsResponse) GetSchemaMigrations() []*SchemaMigration {
	if x != nil {
		return x.SchemaMigrations
	}
	return nil
}

type GetShardReplicationPositionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
	// Keyspaces, if set, limits replication positions to just the specified
	// keyspaces. Applies to all clusters in the request.
	Keyspaces []string `protobuf:"bytes,2,rep,name=keyspaces,proto3" json:"keyspaces,omitempty"`
	// KeyspaceShards, if set, limits replicatin positions to just the specified
	// keyspace/shards. Applies to all clusters in the request.
	//
	// This field takes precedence over Keyspaces. If KeyspaceShards is set,
	// Keyspaces is ignored.
	KeyspaceShards []string `protobuf:"bytes,3,rep,name=keyspace_shards,json=keyspaceShards,proto3" json:"keyspace_shards,omitempty"`
}

func (x *GetShardReplicationPositionsRequest) Reset() {
	*x = GetShardReplicationPositionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShardReplicationPositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardReplicationPositionsRequest) ProtoMessage() {}

func (x *GetShardReplicationPositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardReplicationPositionsRequest.ProtoReflect.Descriptor instead.
func (*GetShardReplicationPositionsRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{50}
}

func (x *GetShardReplicationPositionsRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

func (x *GetShardReplicationPositionsRequest) GetKeyspaces() []string {
	if x != nil {
		return x.Keyspaces
	}
	return nil
}

func (x *GetShardReplicationPositionsRequest) GetKeyspaceShards() []string {
	if x != nil {
		return x.KeyspaceShards
	}
	return nil
}

type GetShardReplicationPositionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicationPositions []*ClusterShardReplicationPosition `protobuf:"bytes,1,rep,name=replication_positions,json=replicationPositions,proto3" json:"replication_positions,omitempty"`
}

func (x *GetShardReplicationPositionsResponse) Reset() {
	*x = GetShardReplicationPositionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShardReplicationPositionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardReplicationPositionsResponse) ProtoMessage() {}

func (x *GetShardReplicationPositionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardReplicationPositionsResponse.ProtoReflect.Descriptor instead.
func (*GetShardReplicationPositionsResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{51}
}

func (x *GetShardReplicationPositionsResponse) GetReplicationPositions() []*ClusterShardReplicationPosition {
	if x != nil {
		return x.ReplicationPositions
	}
	return nil
}

type GetSrvKeyspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace  string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// Cells is a list of cells to lookup a SrvKeyspace for. Leaving this empty is
	// equivalent to specifying all cells in the topo.
	Cells []string `protobuf:"bytes,3,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (x *GetSrvKeyspaceRequest) Reset() {
	*x = GetSrvKeyspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSrvKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvKeyspaceRequest) ProtoMessage() {}

func (x *GetSrvKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*GetSrvKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{52}
}

func (x *GetSrvKeyspaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetSrvKeyspaceRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *GetSrvKeyspaceRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

type GetSrvKeyspacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional list of cluster IDs to filter specific clusters
	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
	// Cells is a list of cells to lookup a SrvKeyspace for. Leaving this empty is
	// equivalent to specifying all cells in the topo.
	Cells []string `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (x *GetSrvKeyspacesRequest) Reset() {
	*x = GetSrvKeyspacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSrvKeyspacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvKeyspacesRequest) ProtoMessage() {}

func (x *GetSrvKeyspacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvKeyspacesRequest.ProtoReflect.Descriptor instead.
func (*GetSrvKeyspacesRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{53}
}

func (x *GetSrvKeyspacesRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

func (x *GetSrvKeyspacesRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

type GetSrvKeyspacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GetSrvKeyspaces responses for each keyspace
	SrvKeyspaces map[string]*v212.GetSrvKeyspacesResponse `protobuf:"bytes,1,rep,name=srv_keyspaces,json=srvKeyspaces,proto3" json:"srv_keyspaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSrvKeyspacesResponse) Reset() {
	*x = GetSrvKeyspacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSrvKeyspacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvKeyspacesResponse) ProtoMessage() {}

func (x *GetSrvKeyspacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvKeyspacesResponse.ProtoReflect.Descriptor instead.
func (*GetSrvKeyspacesResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{54}
}

func (x *GetSrvKeyspacesResponse) GetSrvKeyspaces() map[string]*v212.GetSrvKeyspacesResponse {
	if x != nil {
		return x.SrvKeyspaces
	}
	return nil
}

type GetSrvVSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Cell      string `protobuf:"bytes,2,opt,name=cell,proto3" json:"cell,omitempty"`
}

func (x *GetSrvVSchemaRequest) Reset() {
	*x = GetSrvVSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSrvVSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvVSchemaRequest) ProtoMessage() {}

func (x *GetSrvVSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvVSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSrvVSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{55}
}

func (x *GetSrvVSchemaRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetSrvVSchemaRequest) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

type GetSrvVSchemasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
	Cells      []string `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (x *GetSrvVSchemasRequest) Reset() {
	*x = GetSrvVSchemasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSrvVSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvVSchemasRequest) ProtoMessage() {}

func (x *GetSrvVSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvVSchemasRequest.ProtoReflect.Descriptor instead.
func (*GetSrvVSchemasRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{56}
}

func (x *GetSrvVSchemasRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

func (x *GetSrvVSchemasRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

type GetSrvVSchemasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrvVSchemas []*SrvVSchema `protobuf:"bytes,1,rep,name=srv_v_schemas,json=srvVSchemas,proto3" json:"srv_v_schemas,omitempty"`
}

func (x *GetSrvVSchemasResponse) Reset() {
	*x = GetSrvVSchemasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSrvVSchemasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSrvVSchemasResponse) ProtoMessage() {}

func (x *GetSrvVSchemasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSrvVSchemasResponse.ProtoReflect.Descriptor instead.
func (*GetSrvVSchemasResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{57}
}

func (x *GetSrvVSchemasResponse) GetSrvVSchemas() []*SrvVSchema {
	if x != nil {
		return x.SrvVSchemas
	}
	return nil
}

type GetSchemaTableSizeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateSizes          bool `protobuf:"varint,1,opt,name=aggregate_sizes,json=aggregateSizes,proto3" json:"aggregate_sizes,omitempty"`
	IncludeNonServingShards bool `protobuf:"varint,2,opt,name=include_non_serving_shards,json=includeNonServingShards,proto3" json:"include_non_serving_shards,omitempty"`
}

func (x *GetSchemaTableSizeOptions) Reset() {
	*x = GetSchemaTableSizeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaTableSizeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaTableSizeOptions) ProtoMessage() {}

func (x *GetSchemaTableSizeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaTableSizeOptions.ProtoReflect.Descriptor instead.
func (*GetSchemaTableSizeOptions) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{58}
}

func (x *GetSchemaTableSizeOptions) GetAggregateSizes() bool {
	if x != nil {
		return x.AggregateSizes
	}
	return false
}

func (x *GetSchemaTableSizeOptions) GetIncludeNonServingShards() bool {
	if x != nil {
		return x.IncludeNonServingShards
	}
	return false
}

type GetTabletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique (per cluster) tablet alias.
	Alias *v211.TabletAlias `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// ClusterIDs is an optional parameter to narrow the scope of the search, if
	// the caller knows which cluster the tablet may be in, or, to disambiguate
	// if multiple clusters have a tablet with the same hostname.
	ClusterIds []string `protobuf:"bytes,2,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *GetTabletRequest) Reset() {
	*x = GetTabletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTabletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletRequest) ProtoMessage() {}

func (x *GetTabletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletRequest.ProtoReflect.Descriptor instead.
func (*GetTabletRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{59}
}

func (x *GetTabletRequest) GetAlias() *v211.TabletAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *GetTabletRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type GetTabletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *GetTabletsRequest) Reset() {
	*x = GetTabletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTabletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletsRequest) ProtoMessage() {}

func (x *GetTabletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletsRequest.ProtoReflect.Descriptor instead.
func (*GetTabletsRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{60}
}

func (x *GetTabletsRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type GetTabletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tablets []*Tablet `protobuf:"bytes,1,rep,name=tablets,proto3" json:"tablets,omitempty"`
}

func (x *GetTabletsResponse) Reset() {
	*x = GetTabletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTabletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletsResponse) ProtoMessage() {}

func (x *GetTabletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletsResponse.ProtoReflect.Descriptor instead.
func (*GetTabletsResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{61}
}

func (x *GetTabletsResponse) GetTablets() []*Tablet {
	if x != nil {
		return x.Tablets
	}
	return nil
}

type GetTopologyPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Path      string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *GetTopologyPathRequest) Reset() {
	*x = GetTopologyPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopologyPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopologyPathRequest) ProtoMessage() {}

func (x *GetTopologyPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopologyPathRequest.ProtoReflect.Descriptor instead.
func (*GetTopologyPathRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{62}
}

func (x *GetTopologyPathRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetTopologyPathRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type GetUnresolvedTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace   string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	AbandonAge int64  `protobuf:"varint,3,opt,name=abandon_age,json=abandonAge,proto3" json:"abandon_age,omitempty"`
}

func (x *GetUnresolvedTransactionsRequest) Reset() {
	*x = GetUnresolvedTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnresolvedTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnresolvedTransactionsRequest) ProtoMessage() {}

func (x *GetUnresolvedTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnresolvedTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetUnresolvedTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{63}
}

func (x *GetUnresolvedTransactionsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetUnresolvedTransactionsRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *GetUnresolvedTransactionsRequest) GetAbandonAge() int64 {
	if x != nil {
		return x.AbandonAge
	}
	return 0
}

type GetVSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace  string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
}

func (x *GetVSchemaRequest) Reset() {
	*x = GetVSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVSchemaRequest) ProtoMessage() {}

func (x *GetVSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetVSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{64}
}

func (x *GetVSchemaRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetVSchemaRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

type GetVSchemasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *GetVSchemasRequest) Reset() {
	*x = GetVSchemasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVSchemasRequest) ProtoMessage() {}

func (x *GetVSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVSchemasRequest.ProtoReflect.Descriptor instead.
func (*GetVSchemasRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{65}
}

func (x *GetVSchemasRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type GetVSchemasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VSchemas []*VSchema `protobuf:"bytes,1,rep,name=v_schemas,json=vSchemas,proto3" json:"v_schemas,omitempty"`
}

func (x *GetVSchemasResponse) Reset() {
	*x = GetVSchemasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVSchemasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVSchemasResponse) ProtoMessage() {}

func (x *GetVSchemasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVSchemasResponse.ProtoReflect.Descriptor instead.
func (*GetVSchemasResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{66}
}

func (x *GetVSchemasResponse) GetVSchemas() []*VSchema {
	if x != nil {
		return x.VSchemas
	}
	return nil
}

type GetVtctldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *GetVtctldsRequest) Reset() {
	*x = GetVtctldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVtctldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVtctldsRequest) ProtoMessage() {}

func (x *GetVtctldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVtctldsRequest.ProtoReflect.Descriptor instead.
func (*GetVtctldsRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{67}
}

func (x *GetVtctldsRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type GetVtctldsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vtctlds []*Vtctld `protobuf:"bytes,1,rep,name=vtctlds,proto3" json:"vtctlds,omitempty"`
}

func (x *GetVtctldsResponse) Reset() {
	*x = GetVtctldsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVtctldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVtctldsResponse) ProtoMessage() {}

func (x *GetVtctldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVtctldsResponse.ProtoReflect.Descriptor instead.
func (*GetVtctldsResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{68}
}

func (x *GetVtctldsResponse) GetVtctlds() []*Vtctld {
	if x != nil {
		return x.Vtctlds
	}
	return nil
}

type GetWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace   string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ActiveOnly bool   `protobuf:"varint,4,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
}

func (x *GetWorkflowRequest) Reset() {
	*x = GetWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowRequest) ProtoMessage() {}

func (x *GetWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{69}
}

func (x *GetWorkflowRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetWorkflowRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *GetWorkflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetWorkflowRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

type GetWorkflowStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace  string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetWorkflowStatusRequest) Reset() {
	*x = GetWorkflowStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowStatusRequest) ProtoMessage() {}

func (x *GetWorkflowStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowStatusRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowStatusRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{70}
}

func (x *GetWorkflowStatusRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetWorkflowStatusRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *GetWorkflowStatusRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StartWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace  string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Workflow  string `protobuf:"bytes,3,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *StartWorkflowRequest) Reset() {
	*x = StartWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowRequest) ProtoMessage() {}

func (x *StartWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowRequest.ProtoReflect.Descriptor instead.
func (*StartWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{71}
}

func (x *StartWorkflowRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StartWorkflowRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *StartWorkflowRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

type StopWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace  string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Workflow  string `protobuf:"bytes,3,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *StopWorkflowRequest) Reset() {
	*x = StopWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopWorkflowRequest) ProtoMessage() {}

func (x *StopWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopWorkflowRequest.ProtoReflect.Descriptor instead.
func (*StopWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{72}
}

func (x *StopWorkflowRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StopWorkflowRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *StopWorkflowRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

type GetWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterIds []string `protobuf:"bytes,1,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
	// ActiveOnly specifies whether to return workflows that are currently
	// active (running or paused) instead of all workflows.
	ActiveOnly bool `protobuf:"varint,2,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
	// Keyspaces is a list of keyspaces to restrict the workflow search to. Note
	// that the keyspaces list applies across all cluster IDs in the request.
	//
	// If, for example, you have two clusters, each with a keyspace called "foo"
	// and want the workflows from "foo" in cluster1 but not from cluster2, you
	// must make two requests.
	//
	// Keyspaces and IgnoreKeyspaces are mutually-exclusive, and Keyspaces takes
	// precedence; if Keyspaces is a non-empty list, then IgnoreKeyspaces is
	// ignored completely.
	Keyspaces []string `protobuf:"bytes,3,rep,name=keyspaces,proto3" json:"keyspaces,omitempty"`
	// IgnoreKeyspaces is a list of keyspaces to skip during the workflow
	// search. It has the same semantics as the Keyspaces parameter, so refer to
	// that documentation for more details.
	IgnoreKeyspaces []string `protobuf:"bytes,4,rep,name=ignore_keyspaces,json=ignoreKeyspaces,proto3" json:"ignore_keyspaces,omitempty"`
}

func (x *GetWorkflowsRequest) Reset() {
	*x = GetWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowsRequest) ProtoMessage() {}

func (x *GetWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{73}
}

func (x *GetWorkflowsRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

func (x *GetWorkflowsRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

func (x *GetWorkflowsRequest) GetKeyspaces() []string {
	if x != nil {
		return x.Keyspaces
	}
	return nil
}

func (x *GetWorkflowsRequest) GetIgnoreKeyspaces() []string {
	if x != nil {
		return x.IgnoreKeyspaces
	}
	return nil
}

type GetWorkflowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowsByCluster map[string]*ClusterWorkflows `protobuf:"bytes,1,rep,name=workflows_by_cluster,json=workflowsByCluster,proto3" json:"workflows_by_cluster,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetWorkflowsResponse) Reset() {
	*x = GetWorkflowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowsResponse) ProtoMessage() {}

func (x *GetWorkflowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowsResponse.ProtoReflect.Descriptor instead.
func (*GetWorkflowsResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{74}
}

func (x *GetWorkflowsResponse) GetWorkflowsByCluster() map[string]*ClusterWorkflows {
	if x != nil {
		return x.WorkflowsByCluster
	}
	return nil
}

type LaunchSchemaMigrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                             `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Request   *v212.LaunchSchemaMigrationRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *LaunchSchemaMigrationRequest) Reset() {
	*x = LaunchSchemaMigrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchSchemaMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchSchemaMigrationRequest) ProtoMessage() {}

func (x *LaunchSchemaMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchSchemaMigrationRequest.ProtoReflect.Descriptor instead.
func (*LaunchSchemaMigrationRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{75}
}

func (x *LaunchSchemaMigrationRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *LaunchSchemaMigrationRequest) GetRequest() *v212.LaunchSchemaMigrationRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type MoveTablesCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                        `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Request   *v212.MoveTablesCreateRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *MoveTablesCreateRequest) Reset() {
	*x = MoveTablesCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveTablesCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTablesCreateRequest) ProtoMessage() {}

func (x *MoveTablesCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTablesCreateRequest.ProtoReflect.Descriptor instead.
func (*MoveTablesCreateRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{76}
}

func (x *MoveTablesCreateRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveTablesCreateRequest) GetRequest() *v212.MoveTablesCreateRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type PingTabletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique (per cluster) tablet alias of the standard form: "$cell-$uid"
	Alias *v211.TabletAlias `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// ClusterIDs is an optional parameter to narrow the scope of the search, if
	// the caller knows which cluster the tablet may be in, or, to disambiguate
	// if multiple clusters have a tablet with the same hostname.
	ClusterIds []string `protobuf:"bytes,2,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *PingTabletRequest) Reset() {
	*x = PingTabletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingTabletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingTabletRequest) ProtoMessage() {}

func (x *PingTabletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingTabletRequest.ProtoReflect.Descriptor instead.
func (*PingTabletRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{77}
}

func (x *PingTabletRequest) GetAlias() *v211.TabletAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *PingTabletRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type PingTabletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Cluster *Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *PingTabletResponse) Reset() {
	*x = PingTabletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingTabletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingTabletResponse) ProtoMessage() {}

func (x *PingTabletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingTabletResponse.ProtoReflect.Descriptor instead.
func (*PingTabletResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{78}
}

func (x *PingTabletResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PingTabletResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type PlannedFailoverShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                            `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Options   *v212.PlannedReparentShardRequest `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *PlannedFailoverShardRequest) Reset() {
	*x = PlannedFailoverShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlannedFailoverShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlannedFailoverShardRequest) ProtoMessage() {}

func (x *PlannedFailoverShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlannedFailoverShardRequest.ProtoReflect.Descriptor instead.
func (*PlannedFailoverShardRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{79}
}

func (x *PlannedFailoverShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PlannedFailoverShardRequest) GetOptions() *v212.PlannedReparentShardRequest {
	if x != nil {
		return x.Options
	}
	return nil
}

type PlannedFailoverShardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster  *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Keyspace string   `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard    string   `protobuf:"bytes,3,opt,name=shard,proto3" json:"shard,omitempty"`
	// PromotedPrimary is the tablet alias that was promoted to shard primary.
	// If NewPrimary was set in the request options, then this will be the
	// same tablet alias. Otherwise, it will be the alias of the tablet found
	// to be most up-to-date in the shard.
	PromotedPrimary *v211.TabletAlias `protobuf:"bytes,4,opt,name=promoted_primary,json=promotedPrimary,proto3" json:"promoted_primary,omitempty"`
	Events          []*v215.Event     `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *PlannedFailoverShardResponse) Reset() {
	*x = PlannedFailoverShardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlannedFailoverShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlannedFailoverShardResponse) ProtoMessage() {}

func (x *PlannedFailoverShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlannedFailoverShardResponse.ProtoReflect.Descriptor instead.
func (*PlannedFailoverShardResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{80}
}

func (x *PlannedFailoverShardResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *PlannedFailoverShardResponse) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *PlannedFailoverShardResponse) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *PlannedFailoverShardResponse) GetPromotedPrimary() *v211.TabletAlias {
	if x != nil {
		return x.PromotedPrimary
	}
	return nil
}

func (x *PlannedFailoverShardResponse) GetEvents() []*v215.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type RebuildKeyspaceGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace     string   `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Cells        []string `protobuf:"bytes,3,rep,name=cells,proto3" json:"cells,omitempty"`
	AllowPartial bool     `protobuf:"varint,4,opt,name=allow_partial,json=allowPartial,proto3" json:"allow_partial,omitempty"`
}

func (x *RebuildKeyspaceGraphRequest) Reset() {
	*x = RebuildKeyspaceGraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildKeyspaceGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildKeyspaceGraphRequest) ProtoMessage() {}

func (x *RebuildKeyspaceGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildKeyspaceGraphRequest.ProtoReflect.Descriptor instead.
func (*RebuildKeyspaceGraphRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{81}
}

func (x *RebuildKeyspaceGraphRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RebuildKeyspaceGraphRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *RebuildKeyspaceGraphRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *RebuildKeyspaceGraphRequest) GetAllowPartial() bool {
	if x != nil {
		return x.AllowPartial
	}
	return false
}

type RebuildKeyspaceGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RebuildKeyspaceGraphResponse) Reset() {
	*x = RebuildKeyspaceGraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildKeyspaceGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildKeyspaceGraphResponse) ProtoMessage() {}

func (x *RebuildKeyspaceGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildKeyspaceGraphResponse.ProtoReflect.Descriptor instead.
func (*RebuildKeyspaceGraphResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{82}
}

func (x *RebuildKeyspaceGraphResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type RefreshStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias      *v211.TabletAlias `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	ClusterIds []string          `protobuf:"bytes,2,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *RefreshStateRequest) Reset() {
	*x = RefreshStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshStateRequest) ProtoMessage() {}

func (x *RefreshStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshStateRequest.ProtoReflect.Descriptor instead.
func (*RefreshStateRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{83}
}

func (x *RefreshStateRequest) GetAlias() *v211.TabletAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *RefreshStateRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type RefreshStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Cluster *Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *RefreshStateResponse) Reset() {
	*x = RefreshStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshStateResponse) ProtoMessage() {}

func (x *RefreshStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshStateResponse.ProtoReflect.Descriptor instead.
func (*RefreshStateResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{84}
}

func (x *RefreshStateResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RefreshStateResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type ReloadSchemasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keyspaces, if set, will reload schemas across one or more keyspaces. A
	// keyspace not existing in a cluster will not fail the overall request.
	//
	// Superceded by KeyspaceShards and Tablets, in that order.
	Keyspaces []string `protobuf:"bytes,1,rep,name=keyspaces,proto3" json:"keyspaces,omitempty"`
	// KeyspaceShards, if set, will reload schemas across one or more shards.
	// Each element must be a valid keyspace/shard according to
	// topoproto.ParseKeyspaceShard. A shard not existing in a cluster will not
	// fail the overall request.
	//
	// Supercedes Keyspaces, and is superceded by Tablets.
	KeyspaceShards []string `protobuf:"bytes,2,rep,name=keyspace_shards,json=keyspaceShards,proto3" json:"keyspace_shards,omitempty"`
	// Tablets, if set will reload schemas across one or more tablets.
	// Supercedes both Keyspaces and KeyspaceShards.
	Tablets []*v211.TabletAlias `protobuf:"bytes,3,rep,name=tablets,proto3" json:"tablets,omitempty"`
	// ClusterIds optionally restricts the reload operation to clusters with
	// the specified IDs. An empty list of ClusterIds will operate on all
	// clusters.
	ClusterIds []string `protobuf:"bytes,4,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
	// Concurrency controls the number of tablets to reload at any given time.
	// Its semantics depend on whether the request is for keyspace, shard, or
	// tablet mode.
	//
	// In Keyspaces mode, Concurrency is the number of tablets to reload at once
	// *per keyspace*.
	//
	// In KeyspaceShards mode, Concurrency is the number of tablets to reload at
	// once *per shard*.
	//
	// In Tablets mode, Concurrency is the number of tablets to reload at once
	// *per cluster*.
	Concurrency int32 `protobuf:"varint,5,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	// WaitPosition is the replication position that replicating tablets should
	// reach prior to reloading their schemas.
	//
	// Does not apply in Tablets mode.
	WaitPosition string `protobuf:"bytes,6,opt,name=wait_position,json=waitPosition,proto3" json:"wait_position,omitempty"`
	// IncludePrimary, if set, will reload the schemas on PRIMARY tablets as
	// well as REPLICA and RDONLY.
	//
	// Does not apply in Tablets mode.
	IncludePrimary bool `protobuf:"varint,7,opt,name=include_primary,json=includePrimary,proto3" json:"include_primary,omitempty"`
}

func (x *ReloadSchemasRequest) Reset() {
	*x = ReloadSchemasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemasRequest) ProtoMessage() {}

func (x *ReloadSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemasRequest.ProtoReflect.Descriptor instead.
func (*ReloadSchemasRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{85}
}

func (x *ReloadSchemasRequest) GetKeyspaces() []string {
	if x != nil {
		return x.Keyspaces
	}
	return nil
}

func (x *ReloadSchemasRequest) GetKeyspaceShards() []string {
	if x != nil {
		return x.KeyspaceShards
	}
	return nil
}

func (x *ReloadSchemasRequest) GetTablets() []*v211.TabletAlias {
	if x != nil {
		return x.Tablets
	}
	return nil
}

func (x *ReloadSchemasRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

func (x *ReloadSchemasRequest) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *ReloadSchemasRequest) GetWaitPosition() string {
	if x != nil {
		return x.WaitPosition
	}
	return ""
}

func (x *ReloadSchemasRequest) GetIncludePrimary() bool {
	if x != nil {
		return x.IncludePrimary
	}
	return false
}

type ReloadSchemasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KeyspaceResults is the list of KeyspaceResult objects for a ReloadSchemas
	// operation. It is only set when the request mandates Keyspaces mode (see
	// ReloadSchemasRequest).
	KeyspaceResults []*ReloadSchemasResponse_KeyspaceResult `protobuf:"bytes,1,rep,name=keyspace_results,json=keyspaceResults,proto3" json:"keyspace_results,omitempty"`
	// ShardResults is the list of ShardResult objects for a ReloadSchemas
	// operation. It is only set when the request mandates KeyspaceShards mode
	// (see ReloadSchemasRequest).
	ShardResults []*ReloadSchemasResponse_ShardResult `protobuf:"bytes,2,rep,name=shard_results,json=shardResults,proto3" json:"shard_results,omitempty"`
	// TabletResults is the list of TabletResult objects for a ReloadSchemas
	// operation. It is only set when the request mandates Tablets mode (see
	// ReloadSchemasRequest).
	TabletResults []*ReloadSchemasResponse_TabletResult `protobuf:"bytes,3,rep,name=tablet_results,json=tabletResults,proto3" json:"tablet_results,omitempty"`
}

func (x *ReloadSchemasResponse) Reset() {
	*x = ReloadSchemasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadSchemasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemasResponse) ProtoMessage() {}

func (x *ReloadSchemasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemasResponse.ProtoReflect.Descriptor instead.
func (*ReloadSchemasResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{86}
}

func (x *ReloadSchemasResponse) GetKeyspaceResults() []*ReloadSchemasResponse_KeyspaceResult {
	if x != nil {
		return x.KeyspaceResults
	}
	return nil
}

func (x *ReloadSchemasResponse) GetShardResults() []*ReloadSchemasResponse_ShardResult {
	if x != nil {
		return x.ShardResults
	}
	return nil
}

func (x *ReloadSchemasResponse) GetTabletResults() []*ReloadSchemasResponse_TabletResult {
	if x != nil {
		return x.TabletResults
	}
	return nil
}

type ReloadSchemaShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId      string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace       string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard          string `protobuf:"bytes,3,opt,name=shard,proto3" json:"shard,omitempty"`
	WaitPosition   string `protobuf:"bytes,4,opt,name=wait_position,json=waitPosition,proto3" json:"wait_position,omitempty"`
	IncludePrimary bool   `protobuf:"varint,5,opt,name=include_primary,json=includePrimary,proto3" json:"include_primary,omitempty"`
	Concurrency    int32  `protobuf:"varint,6,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
}

func (x *ReloadSchemaShardRequest) Reset() {
	*x = ReloadSchemaShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadSchemaShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemaShardRequest) ProtoMessage() {}

func (x *ReloadSchemaShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemaShardRequest.ProtoReflect.Descriptor instead.
func (*ReloadSchemaShardRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{87}
}

func (x *ReloadSchemaShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ReloadSchemaShardRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ReloadSchemaShardRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *ReloadSchemaShardRequest) GetWaitPosition() string {
	if x != nil {
		return x.WaitPosition
	}
	return ""
}

func (x *ReloadSchemaShardRequest) GetIncludePrimary() bool {
	if x != nil {
		return x.IncludePrimary
	}
	return false
}

func (x *ReloadSchemaShardRequest) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

type ReloadSchemaShardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*v215.Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ReloadSchemaShardResponse) Reset() {
	*x = ReloadSchemaShardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadSchemaShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemaShardResponse) ProtoMessage() {}

func (x *ReloadSchemaShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemaShardResponse.ProtoReflect.Descriptor instead.
func (*ReloadSchemaShardResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{88}
}

func (x *ReloadSchemaShardResponse) GetEvents() []*v215.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type RefreshTabletReplicationSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias      *v211.TabletAlias `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	ClusterIds []string          `protobuf:"bytes,2,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *RefreshTabletReplicationSourceRequest) Reset() {
	*x = RefreshTabletReplicationSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTabletReplicationSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTabletReplicationSourceRequest) ProtoMessage() {}

func (x *RefreshTabletReplicationSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTabletReplicationSourceRequest.ProtoReflect.Descriptor instead.
func (*RefreshTabletReplicationSourceRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{89}
}

func (x *RefreshTabletReplicationSourceRequest) GetAlias() *v211.TabletAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *RefreshTabletReplicationSourceRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type RefreshTabletReplicationSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyspace string            `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard    string            `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Primary  *v211.TabletAlias `protobuf:"bytes,3,opt,name=primary,proto3" json:"primary,omitempty"`
	Cluster  *Cluster          `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *RefreshTabletReplicationSourceResponse) Reset() {
	*x = RefreshTabletReplicationSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTabletReplicationSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTabletReplicationSourceResponse) ProtoMessage() {}

func (x *RefreshTabletReplicationSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTabletReplicationSourceResponse.ProtoReflect.Descriptor instead.
func (*RefreshTabletReplicationSourceResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{90}
}

func (x *RefreshTabletReplicationSourceResponse) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *RefreshTabletReplicationSourceResponse) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *RefreshTabletReplicationSourceResponse) GetPrimary() *v211.TabletAlias {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *RefreshTabletReplicationSourceResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type RemoveKeyspaceCellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace  string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Cell      string `protobuf:"bytes,3,opt,name=cell,proto3" json:"cell,omitempty"`
	Force     bool   `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	Recursive bool   `protobuf:"varint,5,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *RemoveKeyspaceCellRequest) Reset() {
	*x = RemoveKeyspaceCellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveKeyspaceCellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveKeyspaceCellRequest) ProtoMessage() {}

func (x *RemoveKeyspaceCellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveKeyspaceCellRequest.ProtoReflect.Descriptor instead.
func (*RemoveKeyspaceCellRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{91}
}

func (x *RemoveKeyspaceCellRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RemoveKeyspaceCellRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *RemoveKeyspaceCellRequest) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

func (x *RemoveKeyspaceCellRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *RemoveKeyspaceCellRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type RemoveKeyspaceCellResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RemoveKeyspaceCellResponse) Reset() {
	*x = RemoveKeyspaceCellResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveKeyspaceCellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveKeyspaceCellResponse) ProtoMessage() {}

func (x *RemoveKeyspaceCellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveKeyspaceCellResponse.ProtoReflect.Descriptor instead.
func (*RemoveKeyspaceCellResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{92}
}

func (x *RemoveKeyspaceCellResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type RetrySchemaMigrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                            `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Request   *v212.RetrySchemaMigrationRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *RetrySchemaMigrationRequest) Reset() {
	*x = RetrySchemaMigrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrySchemaMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrySchemaMigrationRequest) ProtoMessage() {}

func (x *RetrySchemaMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrySchemaMigrationRequest.ProtoReflect.Descriptor instead.
func (*RetrySchemaMigrationRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{93}
}

func (x *RetrySchemaMigrationRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RetrySchemaMigrationRequest) GetRequest() *v212.RetrySchemaMigrationRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type RunHealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias      *v211.TabletAlias `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	ClusterIds []string          `protobuf:"bytes,2,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *RunHealthCheckRequest) Reset() {
	*x = RunHealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunHealthCheckRequest) ProtoMessage() {}

func (x *RunHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*RunHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{94}
}

func (x *RunHealthCheckRequest) GetAlias() *v211.TabletAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *RunHealthCheckRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type RunHealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Cluster *Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *RunHealthCheckResponse) Reset() {
	*x = RunHealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunHealthCheckResponse) ProtoMessage() {}

func (x *RunHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*RunHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{95}
}

func (x *RunHealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RunHealthCheckResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type SetReadOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias      *v211.TabletAlias `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	ClusterIds []string          `protobuf:"bytes,2,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *SetReadOnlyRequest) Reset() {
	*x = SetReadOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReadOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReadOnlyRequest) ProtoMessage() {}

func (x *SetReadOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReadOnlyRequest.ProtoReflect.Descriptor instead.
func (*SetReadOnlyRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{96}
}

func (x *SetReadOnlyRequest) GetAlias() *v211.TabletAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *SetReadOnlyRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type SetReadOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetReadOnlyResponse) Reset() {
	*x = SetReadOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReadOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReadOnlyResponse) ProtoMessage() {}

func (x *SetReadOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReadOnlyResponse.ProtoReflect.Descriptor instead.
func (*SetReadOnlyResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{97}
}

type SetReadWriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias      *v211.TabletAlias `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	ClusterIds []string          `protobuf:"bytes,2,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *SetReadWriteRequest) Reset() {
	*x = SetReadWriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReadWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReadWriteRequest) ProtoMessage() {}

func (x *SetReadWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReadWriteRequest.ProtoReflect.Descriptor instead.
func (*SetReadWriteRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{98}
}

func (x *SetReadWriteRequest) GetAlias() *v211.TabletAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *SetReadWriteRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type SetReadWriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetReadWriteResponse) Reset() {
	*x = SetReadWriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReadWriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReadWriteResponse) ProtoMessage() {}

func (x *SetReadWriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReadWriteResponse.ProtoReflect.Descriptor instead.
func (*SetReadWriteResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{99}
}

type StartReplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias      *v211.TabletAlias `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	ClusterIds []string          `protobuf:"bytes,2,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *StartReplicationRequest) Reset() {
	*x = StartReplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicationRequest) ProtoMessage() {}

func (x *StartReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicationRequest.ProtoReflect.Descriptor instead.
func (*StartReplicationRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{100}
}

func (x *StartReplicationRequest) GetAlias() *v211.TabletAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *StartReplicationRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type StartReplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Cluster *Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *StartReplicationResponse) Reset() {
	*x = StartReplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicationResponse) ProtoMessage() {}

func (x *StartReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicationResponse.ProtoReflect.Descriptor instead.
func (*StartReplicationResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{101}
}

func (x *StartReplicationResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StartReplicationResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type StopReplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias      *v211.TabletAlias `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	ClusterIds []string          `protobuf:"bytes,2,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *StopReplicationRequest) Reset() {
	*x = StopReplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationRequest) ProtoMessage() {}

func (x *StopReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationRequest.ProtoReflect.Descriptor instead.
func (*StopReplicationRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{102}
}

func (x *StopReplicationRequest) GetAlias() *v211.TabletAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *StopReplicationRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type StopReplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Cluster *Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *StopReplicationResponse) Reset() {
	*x = StopReplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationResponse) ProtoMessage() {}

func (x *StopReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationResponse.ProtoReflect.Descriptor instead.
func (*StopReplicationResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{103}
}

func (x *StopReplicationResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StopReplicationResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type TabletExternallyPromotedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tablet is the alias of the tablet that was promoted externally and should
	// be updated to the shard primary in the topo.
	Alias      *v211.TabletAlias `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	ClusterIds []string          `protobuf:"bytes,2,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *TabletExternallyPromotedRequest) Reset() {
	*x = TabletExternallyPromotedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletExternallyPromotedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletExternallyPromotedRequest) ProtoMessage() {}

func (x *TabletExternallyPromotedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletExternallyPromotedRequest.ProtoReflect.Descriptor instead.
func (*TabletExternallyPromotedRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{104}
}

func (x *TabletExternallyPromotedRequest) GetAlias() *v211.TabletAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *TabletExternallyPromotedRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type TabletExternallyPromotedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster    *Cluster          `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Keyspace   string            `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard      string            `protobuf:"bytes,3,opt,name=shard,proto3" json:"shard,omitempty"`
	NewPrimary *v211.TabletAlias `protobuf:"bytes,4,opt,name=new_primary,json=newPrimary,proto3" json:"new_primary,omitempty"`
	OldPrimary *v211.TabletAlias `protobuf:"bytes,5,opt,name=old_primary,json=oldPrimary,proto3" json:"old_primary,omitempty"`
}

func (x *TabletExternallyPromotedResponse) Reset() {
	*x = TabletExternallyPromotedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletExternallyPromotedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletExternallyPromotedResponse) ProtoMessage() {}

func (x *TabletExternallyPromotedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletExternallyPromotedResponse.ProtoReflect.Descriptor instead.
func (*TabletExternallyPromotedResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{105}
}

func (x *TabletExternallyPromotedResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *TabletExternallyPromotedResponse) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *TabletExternallyPromotedResponse) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *TabletExternallyPromotedResponse) GetNewPrimary() *v211.TabletAlias {
	if x != nil {
		return x.NewPrimary
	}
	return nil
}

func (x *TabletExternallyPromotedResponse) GetOldPrimary() *v211.TabletAlias {
	if x != nil {
		return x.OldPrimary
	}
	return nil
}

type TabletExternallyReparentedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias      *v211.TabletAlias `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	ClusterIds []string          `protobuf:"bytes,2,rep,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
}

func (x *TabletExternallyReparentedRequest) Reset() {
	*x = TabletExternallyReparentedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletExternallyReparentedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletExternallyReparentedRequest) ProtoMessage() {}

func (x *TabletExternallyReparentedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletExternallyReparentedRequest.ProtoReflect.Descriptor instead.
func (*TabletExternallyReparentedRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{106}
}

func (x *TabletExternallyReparentedRequest) GetAlias() *v211.TabletAlias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *TabletExternallyReparentedRequest) GetClusterIds() []string {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

type ValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	PingTablets bool   `protobuf:"varint,2,opt,name=ping_tablets,json=pingTablets,proto3" json:"ping_tablets,omitempty"`
}

func (x *ValidateRequest) Reset() {
	*x = ValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRequest) ProtoMessage() {}

func (x *ValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRequest.ProtoReflect.Descriptor instead.
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{107}
}

func (x *ValidateRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ValidateRequest) GetPingTablets() bool {
	if x != nil {
		return x.PingTablets
	}
	return false
}

type ValidateKeyspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace    string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	PingTablets bool   `protobuf:"varint,3,opt,name=ping_tablets,json=pingTablets,proto3" json:"ping_tablets,omitempty"`
}

func (x *ValidateKeyspaceRequest) Reset() {
	*x = ValidateKeyspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateKeyspaceRequest) ProtoMessage() {}

func (x *ValidateKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*ValidateKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{108}
}

func (x *ValidateKeyspaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ValidateKeyspaceRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ValidateKeyspaceRequest) GetPingTablets() bool {
	if x != nil {
		return x.PingTablets
	}
	return false
}

type ValidateSchemaKeyspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace  string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
}

func (x *ValidateSchemaKeyspaceRequest) Reset() {
	*x = ValidateSchemaKeyspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateSchemaKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSchemaKeyspaceRequest) ProtoMessage() {}

func (x *ValidateSchemaKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSchemaKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*ValidateSchemaKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{109}
}

func (x *ValidateSchemaKeyspaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ValidateSchemaKeyspaceRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

type ValidateShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace    string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard       string `protobuf:"bytes,3,opt,name=shard,proto3" json:"shard,omitempty"`
	PingTablets bool   `protobuf:"varint,4,opt,name=ping_tablets,json=pingTablets,proto3" json:"ping_tablets,omitempty"`
}

func (x *ValidateShardRequest) Reset() {
	*x = ValidateShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateShardRequest) ProtoMessage() {}

func (x *ValidateShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateShardRequest.ProtoReflect.Descriptor instead.
func (*ValidateShardRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{110}
}

func (x *ValidateShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ValidateShardRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ValidateShardRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *ValidateShardRequest) GetPingTablets() bool {
	if x != nil {
		return x.PingTablets
	}
	return false
}

type ValidateVersionKeyspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace  string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
}

func (x *ValidateVersionKeyspaceRequest) Reset() {
	*x = ValidateVersionKeyspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateVersionKeyspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateVersionKeyspaceRequest) ProtoMessage() {}

func (x *ValidateVersionKeyspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateVersionKeyspaceRequest.ProtoReflect.Descriptor instead.
func (*ValidateVersionKeyspaceRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{111}
}

func (x *ValidateVersionKeyspaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ValidateVersionKeyspaceRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

type ValidateVersionShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Keyspace  string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard     string `protobuf:"bytes,3,opt,name=shard,proto3" json:"shard,omitempty"`
}

func (x *ValidateVersionShardRequest) Reset() {
	*x = ValidateVersionShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateVersionShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateVersionShardRequest) ProtoMessage() {}

func (x *ValidateVersionShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateVersionShardRequest.ProtoReflect.Descriptor instead.
func (*ValidateVersionShardRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{112}
}

func (x *ValidateVersionShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ValidateVersionShardRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ValidateVersionShardRequest) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

type VTExplainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster  string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Keyspace string `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Sql      string `protobuf:"bytes,3,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (x *VTExplainRequest) Reset() {
	*x = VTExplainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VTExplainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VTExplainRequest) ProtoMessage() {}

func (x *VTExplainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VTExplainRequest.ProtoReflect.Descriptor instead.
func (*VTExplainRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{113}
}

func (x *VTExplainRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *VTExplainRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *VTExplainRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

type VTExplainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *VTExplainResponse) Reset() {
	*x = VTExplainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VTExplainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VTExplainResponse) ProtoMessage() {}

func (x *VTExplainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VTExplainResponse.ProtoReflect.Descriptor instead.
func (*VTExplainResponse) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{114}
}

func (x *VTExplainResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type Schema_ShardTableSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowCount   uint64 `protobuf:"varint,1,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	DataLength uint64 `protobuf:"varint,2,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`
}

func (x *Schema_ShardTableSize) Reset() {
	*x = Schema_ShardTableSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_ShardTableSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_ShardTableSize) ProtoMessage() {}

func (x *Schema_ShardTableSize) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_ShardTableSize.ProtoReflect.Descriptor instead.
func (*Schema_ShardTableSize) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Schema_ShardTableSize) GetRowCount() uint64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *Schema_ShardTableSize) GetDataLength() uint64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

// TableSize aggregates table size information across all shards containing
// in the given keyspace and cluster, as well as per-shard size information.
type Schema_TableSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowCount   uint64                            `protobuf:"varint,1,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	DataLength uint64                            `protobuf:"varint,2,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`
	ByShard    map[string]*Schema_ShardTableSize `protobuf:"bytes,3,rep,name=by_shard,json=byShard,proto3" json:"by_shard,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Schema_TableSize) Reset() {
	*x = Schema_TableSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_TableSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_TableSize) ProtoMessage() {}

func (x *Schema_TableSize) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_TableSize.ProtoReflect.Descriptor instead.
func (*Schema_TableSize) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{7, 2}
}

func (x *Schema_TableSize) GetRowCount() uint64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *Schema_TableSize) GetDataLength() uint64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *Schema_TableSize) GetByShard() map[string]*Schema_ShardTableSize {
	if x != nil {
		return x.ByShard
	}
	return nil
}

type GetSchemaMigrationsRequest_ClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                           `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Request   *v212.GetSchemaMigrationsRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetSchemaMigrationsRequest_ClusterRequest) Reset() {
	*x = GetSchemaMigrationsRequest_ClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaMigrationsRequest_ClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaMigrationsRequest_ClusterRequest) ProtoMessage() {}

func (x *GetSchemaMigrationsRequest_ClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaMigrationsRequest_ClusterRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaMigrationsRequest_ClusterRequest) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{48, 0}
}

func (x *GetSchemaMigrationsRequest_ClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetSchemaMigrationsRequest_ClusterRequest) GetRequest() *v212.GetSchemaMigrationsRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

// KeyspaceResult is a grouping of a Keyspace and any log events that
// occurred in that keyspace during a schema reload (usually associated with
// partial errors - ReloadSchemas requests are best-effort).
//
// It is only set when a ReloadSchemas request mandates Keyspaces mode
// (see ReloadSchemasRequest).
type ReloadSchemasResponse_KeyspaceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyspace *Keyspace     `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Events   []*v215.Event `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ReloadSchemasResponse_KeyspaceResult) Reset() {
	*x = ReloadSchemasResponse_KeyspaceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadSchemasResponse_KeyspaceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemasResponse_KeyspaceResult) ProtoMessage() {}

func (x *ReloadSchemasResponse_KeyspaceResult) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemasResponse_KeyspaceResult.ProtoReflect.Descriptor instead.
func (*ReloadSchemasResponse_KeyspaceResult) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{86, 0}
}

func (x *ReloadSchemasResponse_KeyspaceResult) GetKeyspace() *Keyspace {
	if x != nil {
		return x.Keyspace
	}
	return nil
}

func (x *ReloadSchemasResponse_KeyspaceResult) GetEvents() []*v215.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

// ShardResult is a grouping of a Shard and any log events that occurred in
// that shard during a schema reload (usually associated with partial
// errors - ReloadSchemas requests are best-effort).
//
// It is only set when a ReloadSchemas request mandates KeyspaceShards mode
// (see ReloadSchemasRequest).
type ReloadSchemasResponse_ShardResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shard  *Shard        `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	Events []*v215.Event `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ReloadSchemasResponse_ShardResult) Reset() {
	*x = ReloadSchemasResponse_ShardResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadSchemasResponse_ShardResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemasResponse_ShardResult) ProtoMessage() {}

func (x *ReloadSchemasResponse_ShardResult) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemasResponse_ShardResult.ProtoReflect.Descriptor instead.
func (*ReloadSchemasResponse_ShardResult) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{86, 1}
}

func (x *ReloadSchemasResponse_ShardResult) GetShard() *Shard {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *ReloadSchemasResponse_ShardResult) GetEvents() []*v215.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

// TabletResult is a grouping of a Tablet and the result of reloading that
// Tablet's schema. Result will either be the string "ok", or the error
// message from that tablet. Note ReloadSchemas is best-effort, so tablet's
// failing to reload is not treated as an overall failure.
//
// It is only set when a ReloadSchemas request mandates Tablets mode (see
// ReloadSchemasRequest).
type ReloadSchemasResponse_TabletResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tablet *Tablet `protobuf:"bytes,1,opt,name=tablet,proto3" json:"tablet,omitempty"`
	Result string  `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ReloadSchemasResponse_TabletResult) Reset() {
	*x = ReloadSchemasResponse_TabletResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadSchemasResponse_TabletResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemasResponse_TabletResult) ProtoMessage() {}

func (x *ReloadSchemasResponse_TabletResult) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemasResponse_TabletResult.ProtoReflect.Descriptor instead.
func (*ReloadSchemasResponse_TabletResult) Descriptor() ([]byte, []int) {
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP(), []int{86, 2}
}

func (x *ReloadSchemasResponse_TabletResult) GetTablet() *Tablet {
	if x != nil {
		return x.Tablet
	}
	return nil
}

func (x *ReloadSchemasResponse_TabletResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

var File_vitess_vtadmin_v21_vtadmin_proto protoreflect.FileDescriptor

var file_vitess_vtadmin_v21_vtadmin_proto_rawDesc = []byte{
	0x0a, 0x20, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x76, 0x32, 0x31, 0x2f, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x1a, 0x20, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x6c,
	0x6f, 0x67, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x76, 0x32, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2f, 0x76, 0x32, 0x31, 0x2f, 0x6d, 0x79,
	0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x32, 0x31, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x76, 0x32, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x32, 0x31, 0x2f, 0x76, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x32, 0x31, 0x2f, 0x76,
	0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d,
	0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a,
	0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x35,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x22, 0xf9,
	0x01, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a,
	0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x5b, 0x0a,
	0x0c, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98, 0x01, 0x0a, 0x0f, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x65, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x1f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x12, 0x5c, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x6a, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x97, 0x02, 0x0a,
	0x08, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x3a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74,
	0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x56,
	0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x05, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4b, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x1a, 0x63, 0x0a,
	0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x1a, 0xfe, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4c,
	0x0a, 0x08, 0x62, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x1a, 0x65, 0x0a, 0x0c,
	0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x50,
	0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x71, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x0a, 0x53, 0x72, 0x76, 0x56, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x0c, 0x73, 0x72, 0x76, 0x5f, 0x76, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x72, 0x76, 0x56, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x0a, 0x73, 0x72, 0x76, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22,
	0x82, 0x02, 0x0a, 0x06, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x51, 0x44, 0x4e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x51, 0x44, 0x4e, 0x22, 0x39, 0x0a, 0x0c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x22, 0x8d, 0x01, 0x0a, 0x07, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x76,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x07, 0x76, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x22, 0x6f, 0x0a, 0x06, 0x56, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x51, 0x44, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x46, 0x51, 0x44, 0x4e, 0x22, 0xb5, 0x01, 0x0a, 0x06, 0x56, 0x54, 0x47, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x65, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6b,
	0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x51, 0x44,
	0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x51, 0x44, 0x4e, 0x22, 0x99, 0x01,
	0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3a, 0x0a,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x77, 0x0a, 0x12, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63,
	0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74,
	0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x8f, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63,
	0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x4f, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x74, 0x69, 0x64, 0x22, 0x7d, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x52, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x77, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x7d, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x79,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0x65, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x45, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x1e, 0x45, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x12, 0x4b, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x31, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x5b, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcd, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63,
	0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x51, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x22,
	0x6b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x5a, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63,
	0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x39, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x22, 0x5c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x32, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x44, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x56, 0x54, 0x47, 0x61, 0x74, 0x65, 0x52, 0x05, 0x67, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x36, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x52, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0xc0, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x91, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x22, 0x83, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x68, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x7b, 0x0a, 0x0e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x68, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x53, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x65, 0x6c, 0x6c, 0x73, 0x22, 0x4f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x4b, 0x65,
	0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76,
	0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x0d, 0x73, 0x72, 0x76, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x6e, 0x0a, 0x11, 0x53, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x56,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c,
	0x22, 0x4e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x22, 0x5c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x72,
	0x76, 0x5f, 0x76, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x72, 0x76, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x0b, 0x73, 0x72, 0x76, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x22, 0x81,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x22, 0x6b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22,
	0x34, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x73, 0x22, 0x4b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x7e,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x22, 0x4e,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x35,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x56, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x76, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x08, 0x76, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x22, 0x34, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x74, 0x63,
	0x74, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x4a, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x56, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x52,
	0x07, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0x69, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x14, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x6c, 0x0a, 0x13, 0x53, 0x74, 0x6f,
	0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0xa0, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x42, 0x79,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x6b, 0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x11, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x22, 0x63, 0x0a, 0x12, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x50, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12,
	0x4b, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x93, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x36, 0x0a, 0x1c, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6e, 0x0a,
	0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x65, 0x0a,
	0x14, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x22, 0xaa, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6b,
	0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x22, 0x85, 0x05, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x6b,
	0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0f, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x5a, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x0e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x7d, 0x0a, 0x0e, 0x4b,
	0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x6c, 0x6f, 0x67, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x71, 0x0a, 0x0b, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x5a, 0x0a,
	0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a,
	0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x18, 0x52, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x77, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x4e, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6c, 0x6f,
	0x67, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x26, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x19, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22, 0x34, 0x0a, 0x1a, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x70, 0x0a,
	0x15, 0x52, 0x75, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22,
	0x67, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x16,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x69, 0x0a, 0x18, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x68, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x22, 0x7a, 0x0a, 0x1f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x91,
	0x02, 0x0a, 0x20, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x0b,
	0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x41, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x22, 0x7c, 0x0a, 0x21, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x22, 0x53, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x5a,
	0x0a, 0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0x6e, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x22, 0x5a, 0x0a, 0x10, 0x56, 0x54, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c,
	0x22, 0x2f, 0x0a, 0x11, 0x56, 0x54, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xf5, 0x36, 0x0a, 0x07, 0x56, 0x54, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x62, 0x0a,
	0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x26, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74,
	0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74,
	0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x29, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x29, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x27, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74,
	0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x12, 0x27, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x45, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x12, 0x31, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x46,
	0x69, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x25, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x25, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x27, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x24,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x12, 0x25, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x78, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x4b,
	0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x2a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x4b, 0x65,
	0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x28,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x72,
	0x76, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x53, 0x72, 0x76, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x29, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x72, 0x76, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x72, 0x76, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x12, 0x24, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74,
	0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x34, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x25, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x56,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x56, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x00,
	0x12, 0x63, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x12, 0x27, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x28, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63,
	0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x27, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a,
	0x15, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6f, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x25,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7b, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x14,
	0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x12, 0x2f, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0c, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99,
	0x01, 0x0a, 0x1e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x39, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0d, 0x52, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x28, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x72, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x2d, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a,
	0x14, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0e,
	0x52, 0x75, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x29,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x26, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6c, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x32, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01,
	0x0a, 0x18, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x6c, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x33, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x32, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x71, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63,
	0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x31, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x63,
	0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0d, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x28, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32,
	0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x32, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d,
	0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x74, 0x63, 0x74, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x09, 0x56, 0x54, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e,
	0x56, 0x54, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x32, 0x31, 0x2e, 0x56, 0x54, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x2f, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x74, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x32, 0x31, 0x3b, 0x76, 0x74, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x76,
	0x32, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vitess_vtadmin_v21_vtadmin_proto_rawDescOnce sync.Once
	file_vitess_vtadmin_v21_vtadmin_proto_rawDescData = file_vitess_vtadmin_v21_vtadmin_proto_rawDesc
)

func file_vitess_vtadmin_v21_vtadmin_proto_rawDescGZIP() []byte {
	file_vitess_vtadmin_v21_vtadmin_proto_rawDescOnce.Do(func() {
		file_vitess_vtadmin_v21_vtadmin_proto_rawDescData = protoimpl.X.CompressGZIP(file_vitess_vtadmin_v21_vtadmin_proto_rawDescData)
	})
	return file_vitess_vtadmin_v21_vtadmin_proto_rawDescData
}

var file_vitess_vtadmin_v21_vtadmin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vitess_vtadmin_v21_vtadmin_proto_msgTypes = make([]protoimpl.MessageInfo, 127)
var file_vitess_vtadmin_v21_vtadmin_proto_goTypes = []any{
	(Tablet_ServingState)(0),                          // 0: vitess.vtadmin.v21.Tablet.ServingState
	(*Cluster)(nil),                                   // 1: vitess.vtadmin.v21.Cluster
	(*ClusterBackup)(nil),                             // 2: vitess.vtadmin.v21.ClusterBackup
	(*ClusterCellsAliases)(nil),                       // 3: vitess.vtadmin.v21.ClusterCellsAliases
	(*ClusterCellInfo)(nil),                           // 4: vitess.vtadmin.v21.ClusterCellInfo
	(*ClusterShardReplicationPosition)(nil),           // 5: vitess.vtadmin.v21.ClusterShardReplicationPosition
	(*ClusterWorkflows)(nil),                          // 6: vitess.vtadmin.v21.ClusterWorkflows
	(*Keyspace)(nil),                                  // 7: vitess.vtadmin.v21.Keyspace
	(*Schema)(nil),                                    // 8: vitess.vtadmin.v21.Schema
	(*SchemaMigration)(nil),                           // 9: vitess.vtadmin.v21.SchemaMigration
	(*Shard)(nil),                                     // 10: vitess.vtadmin.v21.Shard
	(*SrvVSchema)(nil),                                // 11: vitess.vtadmin.v21.SrvVSchema
	(*Tablet)(nil),                                    // 12: vitess.vtadmin.v21.Tablet
	(*VSchema)(nil),                                   // 13: vitess.vtadmin.v21.VSchema
	(*Vtctld)(nil),                                    // 14: vitess.vtadmin.v21.Vtctld
	(*VTGate)(nil),                                    // 15: vitess.vtadmin.v21.VTGate
	(*Workflow)(nil),                                  // 16: vitess.vtadmin.v21.Workflow
	(*ApplySchemaRequest)(nil),                        // 17: vitess.vtadmin.v21.ApplySchemaRequest
	(*CancelSchemaMigrationRequest)(nil),              // 18: vitess.vtadmin.v21.CancelSchemaMigrationRequest
	(*CleanupSchemaMigrationRequest)(nil),             // 19: vitess.vtadmin.v21.CleanupSchemaMigrationRequest
	(*CompleteSchemaMigrationRequest)(nil),            // 20: vitess.vtadmin.v21.CompleteSchemaMigrationRequest
	(*ConcludeTransactionRequest)(nil),                // 21: vitess.vtadmin.v21.ConcludeTransactionRequest
	(*CreateKeyspaceRequest)(nil),                     // 22: vitess.vtadmin.v21.CreateKeyspaceRequest
	(*CreateKeyspaceResponse)(nil),                    // 23: vitess.vtadmin.v21.CreateKeyspaceResponse
	(*CreateShardRequest)(nil),                        // 24: vitess.vtadmin.v21.CreateShardRequest
	(*DeleteKeyspaceRequest)(nil),                     // 25: vitess.vtadmin.v21.DeleteKeyspaceRequest
	(*DeleteShardsRequest)(nil),                       // 26: vitess.vtadmin.v21.DeleteShardsRequest
	(*DeleteTabletRequest)(nil),                       // 27: vitess.vtadmin.v21.DeleteTabletRequest
	(*DeleteTabletResponse)(nil),                      // 28: vitess.vtadmin.v21.DeleteTabletResponse
	(*EmergencyFailoverShardRequest)(nil),             // 29: vitess.vtadmin.v21.EmergencyFailoverShardRequest
	(*EmergencyFailoverShardResponse)(nil),            // 30: vitess.vtadmin.v21.EmergencyFailoverShardResponse
	(*FindSchemaRequest)(nil),                         // 31: vitess.vtadmin.v21.FindSchemaRequest
	(*GetBackupsRequest)(nil),                         // 32: vitess.vtadmin.v21.GetBackupsRequest
	(*GetBackupsResponse)(nil),                        // 33: vitess.vtadmin.v21.GetBackupsResponse
	(*GetCellInfosRequest)(nil),                       // 34: vitess.vtadmin.v21.GetCellInfosRequest
	(*GetCellInfosResponse)(nil),                      // 35: vitess.vtadmin.v21.GetCellInfosResponse
	(*GetCellsAliasesRequest)(nil),                    // 36: vitess.vtadmin.v21.GetCellsAliasesRequest
	(*GetCellsAliasesResponse)(nil),                   // 37: vitess.vtadmin.v21.GetCellsAliasesResponse
	(*GetClustersRequest)(nil),                        // 38: vitess.vtadmin.v21.GetClustersRequest
	(*GetClustersResponse)(nil),                       // 39: vitess.vtadmin.v21.GetClustersResponse
	(*GetFullStatusRequest)(nil),                      // 40: vitess.vtadmin.v21.GetFullStatusRequest
	(*GetGatesRequest)(nil),                           // 41: vitess.vtadmin.v21.GetGatesRequest
	(*GetGatesResponse)(nil),                          // 42: vitess.vtadmin.v21.GetGatesResponse
	(*GetKeyspaceRequest)(nil),                        // 43: vitess.vtadmin.v21.GetKeyspaceRequest
	(*GetKeyspacesRequest)(nil),                       // 44: vitess.vtadmin.v21.GetKeyspacesRequest
	(*GetKeyspacesResponse)(nil),                      // 45: vitess.vtadmin.v21.GetKeyspacesResponse
	(*GetSchemaRequest)(nil),                          // 46: vitess.vtadmin.v21.GetSchemaRequest
	(*GetSchemasRequest)(nil),                         // 47: vitess.vtadmin.v21.GetSchemasRequest
	(*GetSchemasResponse)(nil),                        // 48: vitess.vtadmin.v21.GetSchemasResponse
	(*GetSchemaMigrationsRequest)(nil),                // 49: vitess.vtadmin.v21.GetSchemaMigrationsRequest
	(*GetSchemaMigrationsResponse)(nil),               // 50: vitess.vtadmin.v21.GetSchemaMigrationsResponse
	(*GetShardReplicationPositionsRequest)(nil),       // 51: vitess.vtadmin.v21.GetShardReplicationPositionsRequest
	(*GetShardReplicationPositionsResponse)(nil),      // 52: vitess.vtadmin.v21.GetShardReplicationPositionsResponse
	(*GetSrvKeyspaceRequest)(nil),                     // 53: vitess.vtadmin.v21.GetSrvKeyspaceRequest
	(*GetSrvKeyspacesRequest)(nil),                    // 54: vitess.vtadmin.v21.GetSrvKeyspacesRequest
	(*GetSrvKeyspacesResponse)(nil),                   // 55: vitess.vtadmin.v21.GetSrvKeyspacesResponse
	(*GetSrvVSchemaRequest)(nil),                      // 56: vitess.vtadmin.v21.GetSrvVSchemaRequest
	(*GetSrvVSchemasRequest)(nil),                     // 57: vitess.vtadmin.v21.GetSrvVSchemasRequest
	(*GetSrvVSchemasResponse)(nil),                    // 58: vitess.vtadmin.v21.GetSrvVSchemasResponse
	(*GetSchemaTableSizeOptions)(nil),                 // 59: vitess.vtadmin.v21.GetSchemaTableSizeOptions
	(*GetTabletRequest)(nil),                          // 60: vitess.vtadmin.v21.GetTabletRequest
	(*GetTabletsRequest)(nil),                         // 61: vitess.vtadmin.v21.GetTabletsRequest
	(*GetTabletsResponse)(nil),                        // 62: vitess.vtadmin.v21.GetTabletsResponse
	(*GetTopologyPathRequest)(nil),                    // 63: vitess.vtadmin.v21.GetTopologyPathRequest
	(*GetUnresolvedTransactionsRequest)(nil),          // 64: vitess.vtadmin.v21.GetUnresolvedTransactionsRequest
	(*GetVSchemaRequest)(nil),                         // 65: vitess.vtadmin.v21.GetVSchemaRequest
	(*GetVSchemasRequest)(nil),                        // 66: vitess.vtadmin.v21.GetVSchemasRequest
	(*GetVSchemasResponse)(nil),                       // 67: vitess.vtadmin.v21.GetVSchemasResponse
	(*GetVtctldsRequest)(nil),                         // 68: vitess.vtadmin.v21.GetVtctldsRequest
	(*GetVtctldsResponse)(nil),                        // 69: vitess.vtadmin.v21.GetVtctldsResponse
	(*GetWorkflowRequest)(nil),                        // 70: vitess.vtadmin.v21.GetWorkflowRequest
	(*GetWorkflowStatusRequest)(nil),                  // 71: vitess.vtadmin.v21.GetWorkflowStatusRequest
	(*StartWorkflowRequest)(nil),                      // 72: vitess.vtadmin.v21.StartWorkflowRequest
	(*StopWorkflowRequest)(nil),                       // 73: vitess.vtadmin.v21.StopWorkflowRequest
	(*GetWorkflowsRequest)(nil),                       // 74: vitess.vtadmin.v21.GetWorkflowsRequest
	(*GetWorkflowsResponse)(nil),                      // 75: vitess.vtadmin.v21.GetWorkflowsResponse
	(*LaunchSchemaMigrationRequest)(nil),              // 76: vitess.vtadmin.v21.LaunchSchemaMigrationRequest
	(*MoveTablesCreateRequest)(nil),                   // 77: vitess.vtadmin.v21.MoveTablesCreateRequest
	(*PingTabletRequest)(nil),                         // 78: vitess.vtadmin.v21.PingTabletRequest
	(*PingTabletResponse)(nil),                        // 79: vitess.vtadmin.v21.PingTabletResponse
	(*PlannedFailoverShardRequest)(nil),               // 80: vitess.vtadmin.v21.PlannedFailoverShardRequest
	(*PlannedFailoverShardResponse)(nil),              // 81: vitess.vtadmin.v21.PlannedFailoverShardResponse
	(*RebuildKeyspaceGraphRequest)(nil),               // 82: vitess.vtadmin.v21.RebuildKeyspaceGraphRequest
	(*RebuildKeyspaceGraphResponse)(nil),              // 83: vitess.vtadmin.v21.RebuildKeyspaceGraphResponse
	(*RefreshStateRequest)(nil),                       // 84: vitess.vtadmin.v21.RefreshStateRequest
	(*RefreshStateResponse)(nil),                      // 85: vitess.vtadmin.v21.RefreshStateResponse
	(*ReloadSchemasRequest)(nil),                      // 86: vitess.vtadmin.v21.ReloadSchemasRequest
	(*ReloadSchemasResponse)(nil),                     // 87: vitess.vtadmin.v21.ReloadSchemasResponse
	(*ReloadSchemaShardRequest)(nil),                  // 88: vitess.vtadmin.v21.ReloadSchemaShardRequest
	(*ReloadSchemaShardResponse)(nil),                 // 89: vitess.vtadmin.v21.ReloadSchemaShardResponse
	(*RefreshTabletReplicationSourceRequest)(nil),     // 90: vitess.vtadmin.v21.RefreshTabletReplicationSourceRequest
	(*RefreshTabletReplicationSourceResponse)(nil),    // 91: vitess.vtadmin.v21.RefreshTabletReplicationSourceResponse
	(*RemoveKeyspaceCellRequest)(nil),                 // 92: vitess.vtadmin.v21.RemoveKeyspaceCellRequest
	(*RemoveKeyspaceCellResponse)(nil),                // 93: vitess.vtadmin.v21.RemoveKeyspaceCellResponse
	(*RetrySchemaMigrationRequest)(nil),               // 94: vitess.vtadmin.v21.RetrySchemaMigrationRequest
	(*RunHealthCheckRequest)(nil),                     // 95: vitess.vtadmin.v21.RunHealthCheckRequest
	(*RunHealthCheckResponse)(nil),                    // 96: vitess.vtadmin.v21.RunHealthCheckResponse
	(*SetReadOnlyRequest)(nil),                        // 97: vitess.vtadmin.v21.SetReadOnlyRequest
	(*SetReadOnlyResponse)(nil),                       // 98: vitess.vtadmin.v21.SetReadOnlyResponse
	(*SetReadWriteRequest)(nil),                       // 99: vitess.vtadmin.v21.SetReadWriteRequest
	(*SetReadWriteResponse)(nil),                      // 100: vitess.vtadmin.v21.SetReadWriteResponse
	(*StartReplicationRequest)(nil),                   // 101: vitess.vtadmin.v21.StartReplicationRequest
	(*StartReplicationResponse)(nil),                  // 102: vitess.vtadmin.v21.StartReplicationResponse
	(*StopReplicationRequest)(nil),                    // 103: vitess.vtadmin.v21.StopReplicationRequest
	(*StopReplicationResponse)(nil),                   // 104: vitess.vtadmin.v21.StopReplicationResponse
	(*TabletExternallyPromotedRequest)(nil),           // 105: vitess.vtadmin.v21.TabletExternallyPromotedRequest
	(*TabletExternallyPromotedResponse)(nil),          // 106: vitess.vtadmin.v21.TabletExternallyPromotedResponse
	(*TabletExternallyReparentedRequest)(nil),         // 107: vitess.vtadmin.v21.TabletExternallyReparentedRequest
	(*ValidateRequest)(nil),                           // 108: vitess.vtadmin.v21.ValidateRequest
	(*ValidateKeyspaceRequest)(nil),                   // 109: vitess.vtadmin.v21.ValidateKeyspaceRequest
	(*ValidateSchemaKeyspaceRequest)(nil),             // 110: vitess.vtadmin.v21.ValidateSchemaKeyspaceRequest
	(*ValidateShardRequest)(nil),                      // 111: vitess.vtadmin.v21.ValidateShardRequest
	(*ValidateVersionKeyspaceRequest)(nil),            // 112: vitess.vtadmin.v21.ValidateVersionKeyspaceRequest
	(*ValidateVersionShardRequest)(nil),               // 113: vitess.vtadmin.v21.ValidateVersionShardRequest
	(*VTExplainRequest)(nil),                          // 114: vitess.vtadmin.v21.VTExplainRequest
	(*VTExplainResponse)(nil),                         // 115: vitess.vtadmin.v21.VTExplainResponse
	nil,                                               // 116: vitess.vtadmin.v21.ClusterCellsAliases.AliasesEntry
	nil,                                               // 117: vitess.vtadmin.v21.Keyspace.ShardsEntry
	nil,                                               // 118: vitess.vtadmin.v21.Schema.TableSizesEntry
	(*Schema_ShardTableSize)(nil),                     // 119: vitess.vtadmin.v21.Schema.ShardTableSize
	(*Schema_TableSize)(nil),                          // 120: vitess.vtadmin.v21.Schema.TableSize
	nil,                                               // 121: vitess.vtadmin.v21.Schema.TableSize.ByShardEntry
	(*GetSchemaMigrationsRequest_ClusterRequest)(nil), // 122: vitess.vtadmin.v21.GetSchemaMigrationsRequest.ClusterRequest
	nil, // 123: vitess.vtadmin.v21.GetSrvKeyspacesResponse.SrvKeyspacesEntry
	nil, // 124: vitess.vtadmin.v21.GetWorkflowsResponse.WorkflowsByClusterEntry
	(*ReloadSchemasResponse_KeyspaceResult)(nil),   // 125: vitess.vtadmin.v21.ReloadSchemasResponse.KeyspaceResult
	(*ReloadSchemasResponse_ShardResult)(nil),      // 126: vitess.vtadmin.v21.ReloadSchemasResponse.ShardResult
	(*ReloadSchemasResponse_TabletResult)(nil),     // 127: vitess.vtadmin.v21.ReloadSchemasResponse.TabletResult
	(*v21.BackupInfo)(nil),                         // 128: vitess.mysqlctl.v21.BackupInfo
	(*v211.CellInfo)(nil),                          // 129: vitess.topodata.v21.CellInfo
	(*v212.ShardReplicationPositionsResponse)(nil), // 130: vitess.vtctldata.v21.ShardReplicationPositionsResponse
	(*v212.Keyspace)(nil),                          // 131: vitess.vtctldata.v21.Keyspace
	(*v213.TableDefinition)(nil),                   // 132: vitess.tabletmanagerdata.v21.TableDefinition
	(*v212.SchemaMigration)(nil),                   // 133: vitess.vtctldata.v21.SchemaMigration
	(*v212.Shard)(nil),                             // 134: vitess.vtctldata.v21.Shard
	(*v214.SrvVSchema)(nil),                        // 135: vitess.vschema.v21.SrvVSchema
	(*v211.Tablet)(nil),                            // 136: vitess.topodata.v21.Tablet
	(*v214.Keyspace)(nil),                          // 137: vitess.vschema.v21.Keyspace
	(*v212.Workflow)(nil),                          // 138: vitess.vtctldata.v21.Workflow
	(*v212.ApplySchemaRequest)(nil),                // 139: vitess.vtctldata.v21.ApplySchemaRequest
	(*v212.CancelSchemaMigrationRequest)(nil),      // 140: vitess.vtctldata.v21.CancelSchemaMigrationRequest
	(*v212.CleanupSchemaMigrationRequest)(nil),     // 141: vitess.vtctldata.v21.CleanupSchemaMigrationRequest
	(*v212.CompleteSchemaMigrationRequest)(nil),    // 142: vitess.vtctldata.v21.CompleteSchemaMigrationRequest
	(*v212.CreateKeyspaceRequest)(nil),             // 143: vitess.vtctldata.v21.CreateKeyspaceRequest
	(*v212.CreateShardRequest)(nil),                // 144: vitess.vtctldata.v21.CreateShardRequest
	(*v212.DeleteKeyspaceRequest)(nil),             // 145: vitess.vtctldata.v21.DeleteKeyspaceRequest
	(*v212.DeleteShardsRequest)(nil),               // 146: vitess.vtctldata.v21.DeleteShardsRequest
	(*v211.TabletAlias)(nil),                       // 147: vitess.topodata.v21.TabletAlias
	(*v212.EmergencyReparentShardRequest)(nil),     // 148: vitess.vtctldata.v21.EmergencyReparentShardRequest
	(*v215.Event)(nil),                             // 149: vitess.logutil.v21.Event
	(*v212.GetBackupsRequest)(nil),                 // 150: vitess.vtctldata.v21.GetBackupsRequest
	(*v212.LaunchSchemaMigrationRequest)(nil),      // 151: vitess.vtctldata.v21.LaunchSchemaMigrationRequest
	(*v212.MoveTablesCreateRequest)(nil),           // 152: vitess.vtctldata.v21.MoveTablesCreateRequest
	(*v212.PlannedReparentShardRequest)(nil),       // 153: vitess.vtctldata.v21.PlannedReparentShardRequest
	(*v212.RetrySchemaMigrationRequest)(nil),       // 154: vitess.vtctldata.v21.RetrySchemaMigrationRequest
	(*v211.CellsAlias)(nil),                        // 155: vitess.topodata.v21.CellsAlias
	(*v212.GetSchemaMigrationsRequest)(nil),        // 156: vitess.vtctldata.v21.GetSchemaMigrationsRequest
	(*v212.GetSrvKeyspacesResponse)(nil),           // 157: vitess.vtctldata.v21.GetSrvKeyspacesResponse
	(*v212.ApplySchemaResponse)(nil),               // 158: vitess.vtctldata.v21.ApplySchemaResponse
	(*v212.CancelSchemaMigrationResponse)(nil),     // 159: vitess.vtctldata.v21.CancelSchemaMigrationResponse
	(*v212.CleanupSchemaMigrationResponse)(nil),    // 160: vitess.vtctldata.v21.CleanupSchemaMigrationResponse
	(*v212.CompleteSchemaMigrationResponse)(nil),   // 161: vitess.vtctldata.v21.CompleteSchemaMigrationResponse
	(*v212.ConcludeTransactionResponse)(nil),       // 162: vitess.vtctldata.v21.ConcludeTransactionResponse
	(*v212.CreateShardResponse)(nil),               // 163: vitess.vtctldata.v21.CreateShardResponse
	(*v212.DeleteKeyspaceResponse)(nil),            // 164: vitess.vtctldata.v21.DeleteKeyspaceResponse
	(*v212.DeleteShardsResponse)(nil),              // 165: vitess.vtctldata.v21.DeleteShardsResponse
	(*v212.GetFullStatusResponse)(nil),             // 166: vitess.vtctldata.v21.GetFullStatusResponse
	(*v212.GetTopologyPathResponse)(nil),           // 167: vitess.vtctldata.v21.GetTopologyPathResponse
	(*v212.GetUnresolvedTransactionsResponse)(nil), // 168: vitess.vtctldata.v21.GetUnresolvedTransactionsResponse
	(*v212.WorkflowStatusResponse)(nil),            // 169: vitess.vtctldata.v21.WorkflowStatusResponse
	(*v212.WorkflowUpdateResponse)(nil),            // 170: vitess.vtctldata.v21.WorkflowUpdateResponse
	(*v212.LaunchSchemaMigrationResponse)(nil),     // 171: vitess.vtctldata.v21.LaunchSchemaMigrationResponse
	(*v212.RetrySchemaMigrationResponse)(nil),      // 172: vitess.vtctldata.v21.RetrySchemaMigrationResponse
	(*v212.ValidateResponse)(nil),                  // 173: vitess.vtctldata.v21.ValidateResponse
	(*v212.ValidateKeyspaceResponse)(nil),          // 174: vitess.vtctldata.v21.ValidateKeyspaceResponse
	(*v212.ValidateSchemaKeyspaceResponse)(nil),    // 175: vitess.vtctldata.v21.ValidateSchemaKeyspaceResponse
	(*v212.ValidateShardResponse)(nil),             // 176: vitess.vtctldata.v21.ValidateShardResponse
	(*v212.ValidateVersionKeyspaceResponse)(nil),   // 177: vitess.vtctldata.v21.ValidateVersionKeyspaceResponse
	(*v212.ValidateVersionShardResponse)(nil),      // 178: vitess.vtctldata.v21.ValidateVersionShardResponse
}
var file_vitess_vtadmin_v21_vtadmin_proto_depIdxs = []int32{
	1,   // 0: vitess.vtadmin.v21.ClusterBackup.cluster:type_name -> vitess.vtadmin.v21.Cluster
	128, // 1: vitess.vtadmin.v21.ClusterBackup.backup:type_name -> vitess.mysqlctl.v21.BackupInfo
	1,   // 2: vitess.vtadmin.v21.ClusterCellsAliases.cluster:type_name -> vitess.vtadmin.v21.Cluster
	116, // 3: vitess.vtadmin.v21.ClusterCellsAliases.aliases:type_name -> vitess.vtadmin.v21.ClusterCellsAliases.AliasesEntry
	1,   // 4: vitess.vtadmin.v21.ClusterCellInfo.cluster:type_name -> vitess.vtadmin.v21.Cluster
	129, // 5: vitess.vtadmin.v21.ClusterCellInfo.cell_info:type_name -> vitess.topodata.v21.CellInfo
	1,   // 6: vitess.vtadmin.v21.ClusterShardReplicationPosition.cluster:type_name -> vitess.vtadmin.v21.Cluster
	130, // 7: vitess.vtadmin.v21.ClusterShardReplicationPosition.position_info:type_name -> vitess.vtctldata.v21.ShardReplicationPositionsResponse
	16,  // 8: vitess.vtadmin.v21.ClusterWorkflows.workflows:type_name -> vitess.vtadmin.v21.Workflow
	1,   // 9: vitess.vtadmin.v21.Keyspace.cluster:type_name -> vitess.vtadmin.v21.Cluster
	131, // 10: vitess.vtadmin.v21.Keyspace.keyspace:type_name -> vitess.vtctldata.v21.Keyspace
	117, // 11: vitess.vtadmin.v21.Keyspace.shards:type_name -> vitess.vtadmin.v21.Keyspace.ShardsEntry
	1,   // 12: vitess.vtadmin.v21.Schema.cluster:type_name -> vitess.vtadmin.v21.Cluster
	132, // 13: vitess.vtadmin.v21.Schema.table_definitions:type_name -> vitess.tabletmanagerdata.v21.TableDefinition
	118, // 14: vitess.vtadmin.v21.Schema.table_sizes:type_name -> vitess.vtadmin.v21.Schema.TableSizesEntry
	1,   // 15: vitess.vtadmin.v21.SchemaMigration.cluster:type_name -> vitess.vtadmin.v21.Cluster
	133, // 16: vitess.vtadmin.v21.SchemaMigration.schema_migration:type_name -> vitess.vtctldata.v21.SchemaMigration
	1,   // 17: vitess.vtadmin.v21.Shard.cluster:type_name -> vitess.vtadmin.v21.Cluster
	134, // 18: vitess.vtadmin.v21.Shard.shard:type_name -> vitess.vtctldata.v21.Shard
	1,   // 19: vitess.vtadmin.v21.SrvVSchema.cluster:type_name -> vitess.vtadmin.v21.Cluster
	135, // 20: vitess.vtadmin.v21.SrvVSchema.srv_v_schema:type_name -> vitess.vschema.v21.SrvVSchema
	1,   // 21: vitess.vtadmin.v21.Tablet.cluster:type_name -> vitess.vtadmin.v21.Cluster
	136, // 22: vitess.vtadmin.v21.Tablet.tablet:type_name -> vitess.topodata.v21.Tablet
	0,   // 23: vitess.vtadmin.v21.Tablet.state:type_name -> vitess.vtadmin.v21.Tablet.ServingState
	1,   // 24: vitess.vtadmin.v21.VSchema.cluster:type_name -> vitess.vtadmin.v21.Cluster
	137, // 25: vitess.vtadmin.v21.VSchema.v_schema:type_name -> vitess.vschema.v21.Keyspace
	1,   // 26: vitess.vtadmin.v21.Vtctld.cluster:type_name -> vitess.vtadmin.v21.Cluster
	1,   // 27: vitess.vtadmin.v21.VTGate.cluster:type_name -> vitess.vtadmin.v21.Cluster
	1,   // 28: vitess.vtadmin.v21.Workflow.cluster:type_name -> vitess.vtadmin.v21.Cluster
	138, // 29: vitess.vtadmin.v21.Workflow.workflow:type_name -> vitess.vtctldata.v21.Workflow
	139, // 30: vitess.vtadmin.v21.ApplySchemaRequest.request:type_name -> vitess.vtctldata.v21.ApplySchemaRequest
	140, // 31: vitess.vtadmin.v21.CancelSchemaMigrationRequest.request:type_name -> vitess.vtctldata.v21.CancelSchemaMigrationRequest
	141, // 32: vitess.vtadmin.v21.CleanupSchemaMigrationRequest.request:type_name -> vitess.vtctldata.v21.CleanupSchemaMigrationRequest
	142, // 33: vitess.vtadmin.v21.CompleteSchemaMigrationRequest.request:type_name -> vitess.vtctldata.v21.CompleteSchemaMigrationRequest
	143, // 34: vitess.vtadmin.v21.CreateKeyspaceRequest.options:type_name -> vitess.vtctldata.v21.CreateKeyspaceRequest
	7,   // 35: vitess.vtadmin.v21.CreateKeyspaceResponse.keyspace:type_name -> vitess.vtadmin.v21.Keyspace
	144, // 36: vitess.vtadmin.v21.CreateShardRequest.options:type_name -> vitess.vtctldata.v21.CreateShardRequest
	145, // 37: vitess.vtadmin.v21.DeleteKeyspaceRequest.options:type_name -> vitess.vtctldata.v21.DeleteKeyspaceRequest
	146, // 38: vitess.vtadmin.v21.DeleteShardsRequest.options:type_name -> vitess.vtctldata.v21.DeleteShardsRequest
	147, // 39: vitess.vtadmin.v21.DeleteTabletRequest.alias:type_name -> vitess.topodata.v21.TabletAlias
	1,   // 40: vitess.vtadmin.v21.DeleteTabletResponse.cluster:type_name -> vitess.vtadmin.v21.Cluster
	148, // 41: vitess.vtadmin.v21.EmergencyFailoverShardRequest.options:type_name -> vitess.vtctldata.v21.EmergencyReparentShardRequest
	1,   // 42: vitess.vtadmin.v21.EmergencyFailoverShardResponse.cluster:type_name -> vitess.vtadmin.v21.Cluster
	147, // 43: vitess.vtadmin.v21.EmergencyFailoverShardResponse.promoted_primary:type_name -> vitess.topodata.v21.TabletAlias
	149, // 44: vitess.vtadmin.v21.EmergencyFailoverShardResponse.events:type_name -> vitess.logutil.v21.Event
	59,  // 45: vitess.vtadmin.v21.FindSchemaRequest.table_size_options:type_name -> vitess.vtadmin.v21.GetSchemaTableSizeOptions
	150, // 46: vitess.vtadmin.v21.GetBackupsRequest.request_options:type_name -> vitess.vtctldata.v21.GetBackupsRequest
	2,   // 47: vitess.vtadmin.v21.GetBackupsResponse.backups:type_name -> vitess.vtadmin.v21.ClusterBackup
	4,   // 48: vitess.vtadmin.v21.GetCellInfosResponse.cell_infos:type_name -> vitess.vtadmin.v21.ClusterCellInfo
	3,   // 49: vitess.vtadmin.v21.GetCellsAliasesResponse.aliases:type_name -> vitess.vtadmin.v21.ClusterCellsAliases
	1,   // 50: vitess.vtadmin.v21.GetClustersResponse.clusters:type_name -> vitess.vtadmin.v21.Cluster
	147, // 51: vitess.vtadmin.v21.GetFullStatusRequest.alias:type_name -> vitess.topodata.v21.TabletAlias
	15,  // 52: vitess.vtadmin.v21.GetGatesResponse.gates:type_name -> vitess.vtadmin.v21.VTGate
	7,   // 53: vitess.vtadmin.v21.GetKeyspacesResponse.keyspaces:type_name -> vitess.vtadmin.v21.Keyspace
	59,  // 54: vitess.vtadmin.v21.GetSchemaRequest.table_size_options:type_name -> vitess.vtadmin.v21.GetSchemaTableSizeOptions
	59,  // 55: vitess.vtadmin.v21.GetSchemasRequest.table_size_options:type_name -> vitess.vtadmin.v21.GetSchemaTableSizeOptions
	8,   // 56: vitess.vtadmin.v21.GetSchemasResponse.schemas:type_name -> vitess.vtadmin.v21.Schema
	122, // 57: vitess.vtadmin.v21.GetSchemaMigrationsRequest.cluster_requests:type_name -> vitess.vtadmin.v21.GetSchemaMigrationsRequest.ClusterRequest
	9,   // 58: vitess.vtadmin.v21.GetSchemaMigrationsResponse.schema_migrations:type_name -> vitess.vtadmin.v21.SchemaMigration
	5,   // 59: vitess.vtadmin.v21.GetShardReplicationPositionsResponse.replication_positions:type_name -> vitess.vtadmin.v21.ClusterShardReplicationPosition
	123, // 60: vitess.vtadmin.v21.GetSrvKeyspacesResponse.srv_keyspaces:type_name -> vitess.vtadmin.v21.GetSrvKeyspacesResponse.SrvKeyspacesEntry
	11,  // 61: vitess.vtadmin.v21.GetSrvVSchemasResponse.srv_v_schemas:type_name -> vitess.vtadmin.v21.SrvVSchema
	147, // 62: vitess.vtadmin.v21.GetTabletRequest.alias:type_name -> vitess.topodata.v21.TabletAlias
	12,  // 63: vitess.vtadmin.v21.GetTabletsResponse.tablets:type_name -> vitess.vtadmin.v21.Tablet
	13,  // 64: vitess.vtadmin.v21.GetVSchemasResponse.v_schemas:type_name -> vitess.vtadmin.v21.VSchema
	14,  // 65: vitess.vtadmin.v21.GetVtctldsResponse.vtctlds:type_name -> vitess.vtadmin.v21.Vtctld
	124, // 66: vitess.vtadmin.v21.GetWorkflowsResponse.workflows_by_cluster:type_name -> vitess.vtadmin.v21.GetWorkflowsResponse.WorkflowsByClusterEntry
	151, // 67: vitess.vtadmin.v21.LaunchSchemaMigrationRequest.request:type_name -> vitess.vtctldata.v21.LaunchSchemaMigrationRequest
	152, // 68: vitess.vtadmin.v21.MoveTablesCreateRequest.request:type_name -> vitess.vtctldata.v21.MoveTablesCreateRequest
	147, // 69: vitess.vtadmin.v21.PingTabletRequest.alias:type_name -> vitess.topodata.v21.TabletAlias
	1,   // 70: vitess.vtadmin.v21.PingTabletResponse.cluster:type_name -> vitess.vtadmin.v21.Cluster
	153, // 71: vitess.vtadmin.v21.PlannedFailoverShardRequest.options:type_name -> vitess.vtctldata.v21.PlannedReparentShardRequest
	1,   // 72: vitess.vtadmin.v21.PlannedFailoverShardResponse.cluster:type_name -> vitess.vtadmin.v21.Cluster
	147, // 73: vitess.vtadmin.v21.PlannedFailoverShardResponse.promoted_primary:type_name -> vitess.topodata.v21.TabletAlias
	149, // 74: vitess.vtadmin.v21.PlannedFailoverShardResponse.events:type_name -> vitess.logutil.v21.Event
	147, // 75: vitess.vtadmin.v21.RefreshStateRequest.alias:type_name -> vitess.topodata.v21.TabletAlias
	1,   // 76: vitess.vtadmin.v21.RefreshStateResponse.cluster:type_name -> vitess.vtadmin.v21.Cluster
	147, // 77: vitess.vtadmin.v21.ReloadSchemasRequest.tablets:type_name -> vitess.topodata.v21.TabletAlias
	125, // 78: vitess.vtadmin.v21.ReloadSchemasResponse.keyspace_results:type_name -> vitess.vtadmin.v21.ReloadSchemasResponse.KeyspaceResult
	126, // 79: vitess.vtadmin.v21.ReloadSchemasResponse.shard_results:type_name -> vitess.vtadmin.v21.ReloadSchemasResponse.ShardResult
	127, // 80: vitess.vtadmin.v21.ReloadSchemasResponse.tablet_results:type_name -> vitess.vtadmin.v21.ReloadSchemasResponse.TabletResult
	149, // 81: vitess.vtadmin.v21.ReloadSchemaShardResponse.events:type_name -> vitess.logutil.v21.Event
	147, // 82: vitess.vtadmin.v21.RefreshTabletReplicationSourceRequest.alias:type_name -> vitess.topodata.v21.TabletAlias
	147, // 83: vitess.vtadmin.v21.RefreshTabletReplicationSourceResponse.primary:type_name -> vitess.topodata.v21.TabletAlias
	1,   // 84: vitess.vtadmin.v21.RefreshTabletReplicationSourceResponse.cluster:type_name -> vitess.vtadmin.v21.Cluster
	154, // 85: vitess.vtadmin.v21.RetrySchemaMigrationRequest.request:type_name -> vitess.vtctldata.v21.RetrySchemaMigrationRequest
	147, // 86: vitess.vtadmin.v21.RunHealthCheckRequest.alias:type_name -> vitess.topodata.v21.TabletAlias
	1,   // 87: vitess.vtadmin.v21.RunHealthCheckResponse.cluster:type_name -> vitess.vtadmin.v21.Cluster
	147, // 88: vitess.vtadmin.v21.SetReadOnlyRequest.alias:type_name -> vitess.topodata.v21.TabletAlias
	147, // 89: vitess.vtadmin.v21.SetReadWriteRequest.alias:type_name -> vitess.topodata.v21.TabletAlias
	147, // 90: vitess.vtadmin.v21.StartReplicationRequest.alias:type_name -> vitess.topodata.v21.TabletAlias
	1,   // 91: vitess.vtadmin.v21.StartReplicationResponse.cluster:type_name -> vitess.vtadmin.v21.Cluster
	147, // 92: vitess.vtadmin.v21.StopReplicationRequest.alias:type_name -> vitess.topodata.v21.TabletAlias
	1,   // 93: vitess.vtadmin.v21.StopReplicationResponse.cluster:type_name -> vitess.vtadmin.v21.Cluster
	147, // 94: vitess.vtadmin.v21.TabletExternallyPromotedRequest.alias:type_name -> vitess.topodata.v21.TabletAlias
	1,   // 95: vitess.vtadmin.v21.TabletExternallyPromotedResponse.cluster:type_name -> vitess.vtadmin.v21.Cluster
	147, // 96: vitess.vtadmin.v21.TabletExternallyPromotedResponse.new_primary:type_name -> vitess.topodata.v21.TabletAlias
	147, // 97: vitess.vtadmin.v21.TabletExternallyPromotedResponse.old_primary:type_name -> vitess.topodata.v21.TabletAlias
	147, // 98: vitess.vtadmin.v21.TabletExternallyReparentedRequest.alias:type_name -> vitess.topodata.v21.TabletAlias
	155, // 99: vitess.vtadmin.v21.ClusterCellsAliases.AliasesEntry.value:type_name -> vitess.topodata.v21.CellsAlias
	134, // 100: vitess.vtadmin.v21.Keyspace.ShardsEntry.value:type_name -> vitess.vtctldata.v21.Shard
	120, // 101: vitess.vtadmin.v21.Schema.TableSizesEntry.value:type_name -> vitess.vtadmin.v21.Schema.TableSize
	121, // 102: vitess.vtadmin.v21.Schema.TableSize.by_shard:type_name -> vitess.vtadmin.v21.Schema.TableSize.ByShardEntry
	119, // 103: vitess.vtadmin.v21.Schema.TableSize.ByShardEntry.value:type_name -> vitess.vtadmin.v21.Schema.ShardTableSize
	156, // 104: vitess.vtadmin.v21.GetSchemaMigrationsRequest.ClusterRequest.request:type_name -> vitess.vtctldata.v21.GetSchemaMigrationsRequest
	157, // 105: vitess.vtadmin.v21.GetSrvKeyspacesResponse.SrvKeyspacesEntry.value:type_name -> vitess.vtctldata.v21.GetSrvKeyspacesResponse
	6,   // 106: vitess.vtadmin.v21.GetWorkflowsResponse.WorkflowsByClusterEntry.value:type_name -> vitess.vtadmin.v21.ClusterWorkflows
	7,   // 107: vitess.vtadmin.v21.ReloadSchemasResponse.KeyspaceResult.keyspace:type_name -> vitess.vtadmin.v21.Keyspace
	149, // 108: vitess.vtadmin.v21.ReloadSchemasResponse.KeyspaceResult.events:type_name -> vitess.logutil.v21.Event
	10,  // 109: vitess.vtadmin.v21.ReloadSchemasResponse.ShardResult.shard:type_name -> vitess.vtadmin.v21.Shard
	149, // 110: vitess.vtadmin.v21.ReloadSchemasResponse.ShardResult.events:type_name -> vitess.logutil.v21.Event
	12,  // 111: vitess.vtadmin.v21.ReloadSchemasResponse.TabletResult.tablet:type_name -> vitess.vtadmin.v21.Tablet
	17,  // 112: vitess.vtadmin.v21.VTAdmin.ApplySchema:input_type -> vitess.vtadmin.v21.ApplySchemaRequest
	18,  // 113: vitess.vtadmin.v21.VTAdmin.CancelSchemaMigration:input_type -> vitess.vtadmin.v21.CancelSchemaMigrationRequest
	19,  // 114: vitess.vtadmin.v21.VTAdmin.CleanupSchemaMigration:input_type -> vitess.vtadmin.v21.CleanupSchemaMigrationRequest
	20,  // 115: vitess.vtadmin.v21.VTAdmin.CompleteSchemaMigration:input_type -> vitess.vtadmin.v21.CompleteSchemaMigrationRequest
	21,  // 116: vitess.vtadmin.v21.VTAdmin.ConcludeTransaction:input_type -> vitess.vtadmin.v21.ConcludeTransactionRequest
	22,  // 117: vitess.vtadmin.v21.VTAdmin.CreateKeyspace:input_type -> vitess.vtadmin.v21.CreateKeyspaceRequest
	24,  // 118: vitess.vtadmin.v21.VTAdmin.CreateShard:input_type -> vitess.vtadmin.v21.CreateShardRequest
	25,  // 119: vitess.vtadmin.v21.VTAdmin.DeleteKeyspace:input_type -> vitess.vtadmin.v21.DeleteKeyspaceRequest
	26,  // 120: vitess.vtadmin.v21.VTAdmin.DeleteShards:input_type -> vitess.vtadmin.v21.DeleteShardsRequest
	27,  // 121: vitess.vtadmin.v21.VTAdmin.DeleteTablet:input_type -> vitess.vtadmin.v21.DeleteTabletRequest
	29,  // 122: vitess.vtadmin.v21.VTAdmin.EmergencyFailoverShard:input_type -> vitess.vtadmin.v21.EmergencyFailoverShardRequest
	31,  // 123: vitess.vtadmin.v21.VTAdmin.FindSchema:input_type -> vitess.vtadmin.v21.FindSchemaRequest
	32,  // 124: vitess.vtadmin.v21.VTAdmin.GetBackups:input_type -> vitess.vtadmin.v21.GetBackupsRequest
	34,  // 125: vitess.vtadmin.v21.VTAdmin.GetCellInfos:input_type -> vitess.vtadmin.v21.GetCellInfosRequest
	36,  // 126: vitess.vtadmin.v21.VTAdmin.GetCellsAliases:input_type -> vitess.vtadmin.v21.GetCellsAliasesRequest
	38,  // 127: vitess.vtadmin.v21.VTAdmin.GetClusters:input_type -> vitess.vtadmin.v21.GetClustersRequest
	40,  // 128: vitess.vtadmin.v21.VTAdmin.GetFullStatus:input_type -> vitess.vtadmin.v21.GetFullStatusRequest
	41,  // 129: vitess.vtadmin.v21.VTAdmin.GetGates:input_type -> vitess.vtadmin.v21.GetGatesRequest
	43,  // 130: vitess.vtadmin.v21.VTAdmin.GetKeyspace:input_type -> vitess.vtadmin.v21.GetKeyspaceRequest
	44,  // 131: vitess.vtadmin.v21.VTAdmin.GetKeyspaces:input_type -> vitess.vtadmin.v21.GetKeyspacesRequest
	46,  // 132: vitess.vtadmin.v21.VTAdmin.GetSchema:input_type -> vitess.vtadmin.v21.GetSchemaRequest
	47,  // 133: vitess.vtadmin.v21.VTAdmin.GetSchemas:input_type -> vitess.vtadmin.v21.GetSchemasRequest
	49,  // 134: vitess.vtadmin.v21.VTAdmin.GetSchemaMigrations:input_type -> vitess.vtadmin.v21.GetSchemaMigrationsRequest
	51,  // 135: vitess.vtadmin.v21.VTAdmin.GetShardReplicationPositions:input_type -> vitess.vtadmin.v21.GetShardReplicationPositionsRequest
	53,  // 136: vitess.vtadmin.v21.VTAdmin.GetSrvKeyspace:input_type -> vitess.vtadmin.v21.GetSrvKeyspaceRequest
	54,  // 137: vitess.vtadmin.v21.VTAdmin.GetSrvKeyspaces:input_type -> vitess.vtadmin.v21.GetSrvKeyspacesRequest
	56,  // 138: vitess.vtadmin.v21.VTAdmin.GetSrvVSchema:input_type -> vitess.vtadmin.v21.GetSrvVSchemaRequest
	57,  // 139: vitess.vtadmin.v21.VTAdmin.GetSrvVSchemas:input_type -> vitess.vtadmin.v21.GetSrvVSchemasRequest
	60,  // 140: vitess.vtadmin.v21.VTAdmin.GetTablet:input_type -> vitess.vtadmin.v21.GetTabletRequest
	61,  // 141: vitess.vtadmin.v21.VTAdmin.GetTablets:input_type -> vitess.vtadmin.v21.GetTabletsRequest
	63,  // 142: vitess.vtadmin.v21.VTAdmin.GetTopologyPath:input_type -> vitess.vtadmin.v21.GetTopologyPathRequest
	64,  // 143: vitess.vtadmin.v21.VTAdmin.GetUnresolvedTransactions:input_type -> vitess.vtadmin.v21.GetUnresolvedTransactionsRequest
	65,  // 144: vitess.vtadmin.v21.VTAdmin.GetVSchema:input_type -> vitess.vtadmin.v21.GetVSchemaRequest
	66,  // 145: vitess.vtadmin.v21.VTAdmin.GetVSchemas:input_type -> vitess.vtadmin.v21.GetVSchemasRequest
	68,  // 146: vitess.vtadmin.v21.VTAdmin.GetVtctlds:input_type -> vitess.vtadmin.v21.GetVtctldsRequest
	70,  // 147: vitess.vtadmin.v21.VTAdmin.GetWorkflow:input_type -> vitess.vtadmin.v21.GetWorkflowRequest
	74,  // 148: vitess.vtadmin.v21.VTAdmin.GetWorkflows:input_type -> vitess.vtadmin.v21.GetWorkflowsRequest
	71,  // 149: vitess.vtadmin.v21.VTAdmin.GetWorkflowStatus:input_type -> vitess.vtadmin.v21.GetWorkflowStatusRequest
	72,  // 150: vitess.vtadmin.v21.VTAdmin.StartWorkflow:input_type -> vitess.vtadmin.v21.StartWorkflowRequest
	73,  // 151: vitess.vtadmin.v21.VTAdmin.StopWorkflow:input_type -> vitess.vtadmin.v21.StopWorkflowRequest
	76,  // 152: vitess.vtadmin.v21.VTAdmin.LaunchSchemaMigration:input_type -> vitess.vtadmin.v21.LaunchSchemaMigrationRequest
	77,  // 153: vitess.vtadmin.v21.VTAdmin.MoveTablesCreate:input_type -> vitess.vtadmin.v21.MoveTablesCreateRequest
	78,  // 154: vitess.vtadmin.v21.VTAdmin.PingTablet:input_type -> vitess.vtadmin.v21.PingTabletRequest
	80,  // 155: vitess.vtadmin.v21.VTAdmin.PlannedFailoverShard:input_type -> vitess.vtadmin.v21.PlannedFailoverShardRequest
	82,  // 156: vitess.vtadmin.v21.VTAdmin.RebuildKeyspaceGraph:input_type -> vitess.vtadmin.v21.RebuildKeyspaceGraphRequest
	84,  // 157: vitess.vtadmin.v21.VTAdmin.RefreshState:input_type -> vitess.vtadmin.v21.RefreshStateRequest
	90,  // 158: vitess.vtadmin.v21.VTAdmin.RefreshTabletReplicationSource:input_type -> vitess.vtadmin.v21.RefreshTabletReplicationSourceRequest
	86,  // 159: vitess.vtadmin.v21.VTAdmin.ReloadSchemas:input_type -> vitess.vtadmin.v21.ReloadSchemasRequest
	88,  // 160: vitess.vtadmin.v21.VTAdmin.ReloadSchemaShard:input_type -> vitess.vtadmin.v21.ReloadSchemaShardRequest
	92,  // 161: vitess.vtadmin.v21.VTAdmin.RemoveKeyspaceCell:input_type -> vitess.vtadmin.v21.RemoveKeyspaceCellRequest
	94,  // 162: vitess.vtadmin.v21.VTAdmin.RetrySchemaMigration:input_type -> vitess.vtadmin.v21.RetrySchemaMigrationRequest
	95,  // 163: vitess.vtadmin.v21.VTAdmin.RunHealthCheck:input_type -> vitess.vtadmin.v21.RunHealthCheckRequest
	97,  // 164: vitess.vtadmin.v21.VTAdmin.SetReadOnly:input_type -> vitess.vtadmin.v21.SetReadOnlyRequest
	99,  // 165: vitess.vtadmin.v21.VTAdmin.SetReadWrite:input_type -> vitess.vtadmin.v21.SetReadWriteRequest
	101, // 166: vitess.vtadmin.v21.VTAdmin.StartReplication:input_type -> vitess.vtadmin.v21.StartReplicationRequest
	103, // 167: vitess.vtadmin.v21.VTAdmin.StopReplication:input_type -> vitess.vtadmin.v21.StopReplicationRequest
	105, // 168: vitess.vtadmin.v21.VTAdmin.TabletExternallyPromoted:input_type -> vitess.vtadmin.v21.TabletExternallyPromotedRequest
	108, // 169: vitess.vtadmin.v21.VTAdmin.Validate:input_type -> vitess.vtadmin.v21.ValidateRequest
	109, // 170: vitess.vtadmin.v21.VTAdmin.ValidateKeyspace:input_type -> vitess.vtadmin.v21.ValidateKeyspaceRequest
	110, // 171: vitess.vtadmin.v21.VTAdmin.ValidateSchemaKeyspace:input_type -> vitess.vtadmin.v21.ValidateSchemaKeyspaceRequest
	111, // 172: vitess.vtadmin.v21.VTAdmin.ValidateShard:input_type -> vitess.vtadmin.v21.ValidateShardRequest
	112, // 173: vitess.vtadmin.v21.VTAdmin.ValidateVersionKeyspace:input_type -> vitess.vtadmin.v21.ValidateVersionKeyspaceRequest
	113, // 174: vitess.vtadmin.v21.VTAdmin.ValidateVersionShard:input_type -> vitess.vtadmin.v21.ValidateVersionShardRequest
	114, // 175: vitess.vtadmin.v21.VTAdmin.VTExplain:input_type -> vitess.vtadmin.v21.VTExplainRequest
	158, // 176: vitess.vtadmin.v21.VTAdmin.ApplySchema:output_type -> vitess.vtctldata.v21.ApplySchemaResponse
	159, // 177: vitess.vtadmin.v21.VTAdmin.CancelSchemaMigration:output_type -> vitess.vtctldata.v21.CancelSchemaMigrationResponse
	160, // 178: vitess.vtadmin.v21.VTAdmin.CleanupSchemaMigration:output_type -> vitess.vtctldata.v21.CleanupSchemaMigrationResponse
	161, // 179: vitess.vtadmin.v21.VTAdmin.CompleteSchemaMigration:output_type -> vitess.vtctldata.v21.CompleteSchemaMigrationResponse
	162, // 180: vitess.vtadmin.v21.VTAdmin.ConcludeTransaction:output_type -> vitess.vtctldata.v21.ConcludeTransactionResponse
	23,  // 181: vitess.vtadmin.v21.VTAdmin.CreateKeyspace:output_type -> vitess.vtadmin.v21.CreateKeyspaceResponse
	163, // 182: vitess.vtadmin.v21.VTAdmin.CreateShard:output_type -> vitess.vtctldata.v21.CreateShardResponse
	164, // 183: vitess.vtadmin.v21.VTAdmin.DeleteKeyspace:output_type -> vitess.vtctldata.v21.DeleteKeyspaceResponse
	165, // 184: vitess.vtadmin.v21.VTAdmin.DeleteShards:output_type -> vitess.vtctldata.v21.DeleteShardsResponse
	28,  // 185: vitess.vtadmin.v21.VTAdmin.DeleteTablet:output_type -> vitess.vtadmin.v21.DeleteTabletResponse
	30,  // 186: vitess.vtadmin.v21.VTAdmin.EmergencyFailoverShard:output_type -> vitess.vtadmin.v21.EmergencyFailoverShardResponse
	8,   // 187: vitess.vtadmin.v21.VTAdmin.FindSchema:output_type -> vitess.vtadmin.v21.Schema
	33,  // 188: vitess.vtadmin.v21.VTAdmin.GetBackups:output_type -> vitess.vtadmin.v21.GetBackupsResponse
	35,  // 189: vitess.vtadmin.v21.VTAdmin.GetCellInfos:output_type -> vitess.vtadmin.v21.GetCellInfosResponse
	37,  // 190: vitess.vtadmin.v21.VTAdmin.GetCellsAliases:output_type -> vitess.vtadmin.v21.GetCellsAliasesResponse
	39,  // 191: vitess.vtadmin.v21.VTAdmin.GetClusters:output_type -> vitess.vtadmin.v21.GetClustersResponse
	166, // 192: vitess.vtadmin.v21.VTAdmin.GetFullStatus:output_type -> vitess.vtctldata.v21.GetFullStatusResponse
	42,  // 193: vitess.vtadmin.v21.VTAdmin.GetGates:output_type -> vitess.vtadmin.v21.GetGatesResponse
	7,   // 194: vitess.vtadmin.v21.VTAdmin.GetKeyspace:output_type -> vitess.vtadmin.v21.Keyspace
	45,  // 195: vitess.vtadmin.v21.VTAdmin.GetKeyspaces:output_type -> vitess.vtadmin.v21.GetKeyspacesResponse
	8,   // 196: vitess.vtadmin.v21.VTAdmin.GetSchema:output_type -> vitess.vtadmin.v21.Schema
	48,  // 197: vitess.vtadmin.v21.VTAdmin.GetSchemas:output_type -> vitess.vtadmin.v21.GetSchemasResponse
	50,  // 198: vitess.vtadmin.v21.VTAdmin.GetSchemaMigrations:output_type -> vitess.vtadmin.v21.GetSchemaMigrationsResponse
	52,  // 199: vitess.vtadmin.v21.VTAdmin.GetShardReplicationPositions:output_type -> vitess.vtadmin.v21.GetShardReplicationPositionsResponse
	157, // 200: vitess.vtadmin.v21.VTAdmin.GetSrvKeyspace:output_type -> vitess.vtctldata.v21.GetSrvKeyspacesResponse
	55,  // 201: vitess.vtadmin.v21.VTAdmin.GetSrvKeyspaces:output_type -> vitess.vtadmin.v21.GetSrvKeyspacesResponse
	11,  // 202: vitess.vtadmin.v21.VTAdmin.GetSrvVSchema:output_type -> vitess.vtadmin.v21.SrvVSchema
	58,  // 203: vitess.vtadmin.v21.VTAdmin.GetSrvVSchemas:output_type -> vitess.vtadmin.v21.GetSrvVSchemasResponse
	12,  // 204: vitess.vtadmin.v21.VTAdmin.GetTablet:output_type -> vitess.vtadmin.v21.Tablet
	62,  // 205: vitess.vtadmin.v21.VTAdmin.GetTablets:output_type -> vitess.vtadmin.v21.GetTabletsResponse
	167, // 206: vitess.vtadmin.v21.VTAdmin.GetTopologyPath:output_type -> vitess.vtctldata.v21.GetTopologyPathResponse
	168, // 207: vitess.vtadmin.v21.VTAdmin.GetUnresolvedTransactions:output_type -> vitess.vtctldata.v21.GetUnresolvedTransactionsResponse
	13,  // 208: vitess.vtadmin.v21.VTAdmin.GetVSchema:output_type -> vitess.vtadmin.v21.VSchema
	67,  // 209: vitess.vtadmin.v21.VTAdmin.GetVSchemas:output_type -> vitess.vtadmin.v21.GetVSchemasResponse
	69,  // 210: vitess.vtadmin.v21.VTAdmin.GetVtctlds:output_type -> vitess.vtadmin.v21.GetVtctldsResponse
	16,  // 211: vitess.vtadmin.v21.VTAdmin.GetWorkflow:output_type -> vitess.vtadmin.v21.Workflow
	75,  // 212: vitess.vtadmin.v21.VTAdmin.GetWorkflows:output_type -> vitess.vtadmin.v21.GetWorkflowsResponse
	169, // 213: vitess.vtadmin.v21.VTAdmin.GetWorkflowStatus:output_type -> vitess.vtctldata.v21.WorkflowStatusResponse
	170, // 214: vitess.vtadmin.v21.VTAdmin.StartWorkflow:output_type -> vitess.vtctldata.v21.WorkflowUpdateResponse
	170, // 215: vitess.vtadmin.v21.VTAdmin.StopWorkflow:output_type -> vitess.vtctldata.v21.WorkflowUpdateResponse
	171, // 216: vitess.vtadmin.v21.VTAdmin.LaunchSchemaMigration:output_type -> vitess.vtctldata.v21.LaunchSchemaMigrationResponse
	169, // 217: vitess.vtadmin.v21.VTAdmin.MoveTablesCreate:output_type -> vitess.vtctldata.v21.WorkflowStatusResponse
	79,  // 218: vitess.vtadmin.v21.VTAdmin.PingTablet:output_type -> vitess.vtadmin.v21.PingTabletResponse
	81,  // 219: vitess.vtadmin.v21.VTAdmin.PlannedFailoverShard:output_type -> vitess.vtadmin.v21.PlannedFailoverShardResponse
	83,  // 220: vitess.vtadmin.v21.VTAdmin.RebuildKeyspaceGraph:output_type -> vitess.vtadmin.v21.RebuildKeyspaceGraphResponse
	85,  // 221: vitess.vtadmin.v21.VTAdmin.RefreshState:output_type -> vitess.vtadmin.v21.RefreshStateResponse
	91,  // 222: vitess.vtadmin.v21.VTAdmin.RefreshTabletReplicationSource:output_type -> vitess.vtadmin.v21.RefreshTabletReplicationSourceResponse
	87,  // 223: vitess.vtadmin.v21.VTAdmin.ReloadSchemas:output_type -> vitess.vtadmin.v21.ReloadSchemasResponse
	89,  // 224: vitess.vtadmin.v21.VTAdmin.ReloadSchemaShard:output_type -> vitess.vtadmin.v21.ReloadSchemaShardResponse
	93,  // 225: vitess.vtadmin.v21.VTAdmin.RemoveKeyspaceCell:output_type -> vitess.vtadmin.v21.RemoveKeyspaceCellResponse
	172, // 226: vitess.vtadmin.v21.VTAdmin.RetrySchemaMigration:output_type -> vitess.vtctldata.v21.RetrySchemaMigrationResponse
	96,  // 227: vitess.vtadmin.v21.VTAdmin.RunHealthCheck:output_type -> vitess.vtadmin.v21.RunHealthCheckResponse
	98,  // 228: vitess.vtadmin.v21.VTAdmin.SetReadOnly:output_type -> vitess.vtadmin.v21.SetReadOnlyResponse
	100, // 229: vitess.vtadmin.v21.VTAdmin.SetReadWrite:output_type -> vitess.vtadmin.v21.SetReadWriteResponse
	102, // 230: vitess.vtadmin.v21.VTAdmin.StartReplication:output_type -> vitess.vtadmin.v21.StartReplicationResponse
	104, // 231: vitess.vtadmin.v21.VTAdmin.StopReplication:output_type -> vitess.vtadmin.v21.StopReplicationResponse
	106, // 232: vitess.vtadmin.v21.VTAdmin.TabletExternallyPromoted:output_type -> vitess.vtadmin.v21.TabletExternallyPromotedResponse
	173, // 233: vitess.vtadmin.v21.VTAdmin.Validate:output_type -> vitess.vtctldata.v21.ValidateResponse
	174, // 234: vitess.vtadmin.v21.VTAdmin.ValidateKeyspace:output_type -> vitess.vtctldata.v21.ValidateKeyspaceResponse
	175, // 235: vitess.vtadmin.v21.VTAdmin.ValidateSchemaKeyspace:output_type -> vitess.vtctldata.v21.ValidateSchemaKeyspaceResponse
	176, // 236: vitess.vtadmin.v21.VTAdmin.ValidateShard:output_type -> vitess.vtctldata.v21.ValidateShardResponse
	177, // 237: vitess.vtadmin.v21.VTAdmin.ValidateVersionKeyspace:output_type -> vitess.vtctldata.v21.ValidateVersionKeyspaceResponse
	178, // 238: vitess.vtadmin.v21.VTAdmin.ValidateVersionShard:output_type -> vitess.vtctldata.v21.ValidateVersionShardResponse
	115, // 239: vitess.vtadmin.v21.VTAdmin.VTExplain:output_type -> vitess.vtadmin.v21.VTExplainResponse
	176, // [176:240] is the sub-list for method output_type
	112, // [112:176] is the sub-list for method input_type
	112, // [112:112] is the sub-list for extension type_name
	112, // [112:112] is the sub-list for extension extendee
	0,   // [0:112] is the sub-list for field type_name
}

func init() { file_vitess_vtadmin_v21_vtadmin_proto_init() }
func file_vitess_vtadmin_v21_vtadmin_proto_init() {
	if File_vitess_vtadmin_v21_vtadmin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterBackup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterCellsAliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterCellInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterShardReplicationPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterWorkflows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Keyspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SchemaMigration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Shard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SrvVSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Tablet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*VSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Vtctld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*VTGate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Workflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ApplySchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CancelSchemaMigrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CleanupSchemaMigrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CompleteSchemaMigrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ConcludeTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CreateKeyspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CreateKeyspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CreateShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteKeyspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteShardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTabletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTabletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*EmergencyFailoverShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*EmergencyFailoverShardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*FindSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GetBackupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*GetBackupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*GetCellInfosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GetCellInfosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GetCellsAliasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GetCellsAliasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*GetClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*GetClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*GetFullStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*GetGatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*GetGatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*GetKeyspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*GetKeyspacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*GetKeyspacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaMigrationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaMigrationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*GetShardReplicationPositionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*GetShardReplicationPositionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*GetSrvKeyspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*GetSrvKeyspacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*GetSrvKeyspacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*GetSrvVSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*GetSrvVSchemasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*GetSrvVSchemasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaTableSizeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*GetTabletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*GetTabletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*GetTabletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*GetTopologyPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*GetUnresolvedTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*GetVSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*GetVSchemasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*GetVSchemasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*GetVtctldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*GetVtctldsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*GetWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*GetWorkflowStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*StartWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*StopWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*GetWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*GetWorkflowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*LaunchSchemaMigrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*MoveTablesCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*PingTabletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*PingTabletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*PlannedFailoverShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*PlannedFailoverShardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*RebuildKeyspaceGraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*RebuildKeyspaceGraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*ReloadSchemasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*ReloadSchemasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*ReloadSchemaShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*ReloadSchemaShardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshTabletReplicationSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshTabletReplicationSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveKeyspaceCellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveKeyspaceCellResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*RetrySchemaMigrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*RunHealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*RunHealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*SetReadOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*SetReadOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*SetReadWriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*SetReadWriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*StartReplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*StartReplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*StopReplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*StopReplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*TabletExternallyPromotedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*TabletExternallyPromotedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*TabletExternallyReparentedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateKeyspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateSchemaKeyspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateVersionKeyspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateVersionShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*VTExplainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*VTExplainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*Schema_ShardTableSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*Schema_TableSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaMigrationsRequest_ClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*ReloadSchemasResponse_KeyspaceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*ReloadSchemasResponse_ShardResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_vtadmin_v21_vtadmin_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*ReloadSchemasResponse_TabletResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vitess_vtadmin_v21_vtadmin_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   127,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vitess_vtadmin_v21_vtadmin_proto_goTypes,
		DependencyIndexes: file_vitess_vtadmin_v21_vtadmin_proto_depIdxs,
		EnumInfos:         file_vitess_vtadmin_v21_vtadmin_proto_enumTypes,
		MessageInfos:      file_vitess_vtadmin_v21_vtadmin_proto_msgTypes,
	}.Build()
	File_vitess_vtadmin_v21_vtadmin_proto = out.File
	file_vitess_vtadmin_v21_vtadmin_proto_rawDesc = nil
	file_vitess_vtadmin_v21_vtadmin_proto_goTypes = nil
	file_vitess_vtadmin_v21_vtadmin_proto_depIdxs = nil
}
