//
//Copyright 2020 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
// This package contains the types used by VTAdmin (and later an RPC service).

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vitess/vtadmin/v22/vtadmin.proto

package vtadminv22connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v22 "github.com/planetscale/vitess-types/gen/vitess/vtadmin/v22"
	v221 "github.com/planetscale/vitess-types/gen/vitess/vtctldata/v22"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VTAdminName is the fully-qualified name of the VTAdmin service.
	VTAdminName = "vitess.vtadmin.v22.VTAdmin"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VTAdminApplySchemaProcedure is the fully-qualified name of the VTAdmin's ApplySchema RPC.
	VTAdminApplySchemaProcedure = "/vitess.vtadmin.v22.VTAdmin/ApplySchema"
	// VTAdminCancelSchemaMigrationProcedure is the fully-qualified name of the VTAdmin's
	// CancelSchemaMigration RPC.
	VTAdminCancelSchemaMigrationProcedure = "/vitess.vtadmin.v22.VTAdmin/CancelSchemaMigration"
	// VTAdminCleanupSchemaMigrationProcedure is the fully-qualified name of the VTAdmin's
	// CleanupSchemaMigration RPC.
	VTAdminCleanupSchemaMigrationProcedure = "/vitess.vtadmin.v22.VTAdmin/CleanupSchemaMigration"
	// VTAdminCompleteSchemaMigrationProcedure is the fully-qualified name of the VTAdmin's
	// CompleteSchemaMigration RPC.
	VTAdminCompleteSchemaMigrationProcedure = "/vitess.vtadmin.v22.VTAdmin/CompleteSchemaMigration"
	// VTAdminConcludeTransactionProcedure is the fully-qualified name of the VTAdmin's
	// ConcludeTransaction RPC.
	VTAdminConcludeTransactionProcedure = "/vitess.vtadmin.v22.VTAdmin/ConcludeTransaction"
	// VTAdminCreateKeyspaceProcedure is the fully-qualified name of the VTAdmin's CreateKeyspace RPC.
	VTAdminCreateKeyspaceProcedure = "/vitess.vtadmin.v22.VTAdmin/CreateKeyspace"
	// VTAdminCreateShardProcedure is the fully-qualified name of the VTAdmin's CreateShard RPC.
	VTAdminCreateShardProcedure = "/vitess.vtadmin.v22.VTAdmin/CreateShard"
	// VTAdminDeleteKeyspaceProcedure is the fully-qualified name of the VTAdmin's DeleteKeyspace RPC.
	VTAdminDeleteKeyspaceProcedure = "/vitess.vtadmin.v22.VTAdmin/DeleteKeyspace"
	// VTAdminDeleteShardsProcedure is the fully-qualified name of the VTAdmin's DeleteShards RPC.
	VTAdminDeleteShardsProcedure = "/vitess.vtadmin.v22.VTAdmin/DeleteShards"
	// VTAdminDeleteTabletProcedure is the fully-qualified name of the VTAdmin's DeleteTablet RPC.
	VTAdminDeleteTabletProcedure = "/vitess.vtadmin.v22.VTAdmin/DeleteTablet"
	// VTAdminEmergencyFailoverShardProcedure is the fully-qualified name of the VTAdmin's
	// EmergencyFailoverShard RPC.
	VTAdminEmergencyFailoverShardProcedure = "/vitess.vtadmin.v22.VTAdmin/EmergencyFailoverShard"
	// VTAdminFindSchemaProcedure is the fully-qualified name of the VTAdmin's FindSchema RPC.
	VTAdminFindSchemaProcedure = "/vitess.vtadmin.v22.VTAdmin/FindSchema"
	// VTAdminGetBackupsProcedure is the fully-qualified name of the VTAdmin's GetBackups RPC.
	VTAdminGetBackupsProcedure = "/vitess.vtadmin.v22.VTAdmin/GetBackups"
	// VTAdminGetCellInfosProcedure is the fully-qualified name of the VTAdmin's GetCellInfos RPC.
	VTAdminGetCellInfosProcedure = "/vitess.vtadmin.v22.VTAdmin/GetCellInfos"
	// VTAdminGetCellsAliasesProcedure is the fully-qualified name of the VTAdmin's GetCellsAliases RPC.
	VTAdminGetCellsAliasesProcedure = "/vitess.vtadmin.v22.VTAdmin/GetCellsAliases"
	// VTAdminGetClustersProcedure is the fully-qualified name of the VTAdmin's GetClusters RPC.
	VTAdminGetClustersProcedure = "/vitess.vtadmin.v22.VTAdmin/GetClusters"
	// VTAdminGetFullStatusProcedure is the fully-qualified name of the VTAdmin's GetFullStatus RPC.
	VTAdminGetFullStatusProcedure = "/vitess.vtadmin.v22.VTAdmin/GetFullStatus"
	// VTAdminGetGatesProcedure is the fully-qualified name of the VTAdmin's GetGates RPC.
	VTAdminGetGatesProcedure = "/vitess.vtadmin.v22.VTAdmin/GetGates"
	// VTAdminGetKeyspaceProcedure is the fully-qualified name of the VTAdmin's GetKeyspace RPC.
	VTAdminGetKeyspaceProcedure = "/vitess.vtadmin.v22.VTAdmin/GetKeyspace"
	// VTAdminGetKeyspacesProcedure is the fully-qualified name of the VTAdmin's GetKeyspaces RPC.
	VTAdminGetKeyspacesProcedure = "/vitess.vtadmin.v22.VTAdmin/GetKeyspaces"
	// VTAdminGetSchemaProcedure is the fully-qualified name of the VTAdmin's GetSchema RPC.
	VTAdminGetSchemaProcedure = "/vitess.vtadmin.v22.VTAdmin/GetSchema"
	// VTAdminGetSchemasProcedure is the fully-qualified name of the VTAdmin's GetSchemas RPC.
	VTAdminGetSchemasProcedure = "/vitess.vtadmin.v22.VTAdmin/GetSchemas"
	// VTAdminGetSchemaMigrationsProcedure is the fully-qualified name of the VTAdmin's
	// GetSchemaMigrations RPC.
	VTAdminGetSchemaMigrationsProcedure = "/vitess.vtadmin.v22.VTAdmin/GetSchemaMigrations"
	// VTAdminGetShardReplicationPositionsProcedure is the fully-qualified name of the VTAdmin's
	// GetShardReplicationPositions RPC.
	VTAdminGetShardReplicationPositionsProcedure = "/vitess.vtadmin.v22.VTAdmin/GetShardReplicationPositions"
	// VTAdminGetSrvKeyspaceProcedure is the fully-qualified name of the VTAdmin's GetSrvKeyspace RPC.
	VTAdminGetSrvKeyspaceProcedure = "/vitess.vtadmin.v22.VTAdmin/GetSrvKeyspace"
	// VTAdminGetSrvKeyspacesProcedure is the fully-qualified name of the VTAdmin's GetSrvKeyspaces RPC.
	VTAdminGetSrvKeyspacesProcedure = "/vitess.vtadmin.v22.VTAdmin/GetSrvKeyspaces"
	// VTAdminGetSrvVSchemaProcedure is the fully-qualified name of the VTAdmin's GetSrvVSchema RPC.
	VTAdminGetSrvVSchemaProcedure = "/vitess.vtadmin.v22.VTAdmin/GetSrvVSchema"
	// VTAdminGetSrvVSchemasProcedure is the fully-qualified name of the VTAdmin's GetSrvVSchemas RPC.
	VTAdminGetSrvVSchemasProcedure = "/vitess.vtadmin.v22.VTAdmin/GetSrvVSchemas"
	// VTAdminGetTabletProcedure is the fully-qualified name of the VTAdmin's GetTablet RPC.
	VTAdminGetTabletProcedure = "/vitess.vtadmin.v22.VTAdmin/GetTablet"
	// VTAdminGetTabletsProcedure is the fully-qualified name of the VTAdmin's GetTablets RPC.
	VTAdminGetTabletsProcedure = "/vitess.vtadmin.v22.VTAdmin/GetTablets"
	// VTAdminGetTopologyPathProcedure is the fully-qualified name of the VTAdmin's GetTopologyPath RPC.
	VTAdminGetTopologyPathProcedure = "/vitess.vtadmin.v22.VTAdmin/GetTopologyPath"
	// VTAdminGetTransactionInfoProcedure is the fully-qualified name of the VTAdmin's
	// GetTransactionInfo RPC.
	VTAdminGetTransactionInfoProcedure = "/vitess.vtadmin.v22.VTAdmin/GetTransactionInfo"
	// VTAdminGetUnresolvedTransactionsProcedure is the fully-qualified name of the VTAdmin's
	// GetUnresolvedTransactions RPC.
	VTAdminGetUnresolvedTransactionsProcedure = "/vitess.vtadmin.v22.VTAdmin/GetUnresolvedTransactions"
	// VTAdminGetVSchemaProcedure is the fully-qualified name of the VTAdmin's GetVSchema RPC.
	VTAdminGetVSchemaProcedure = "/vitess.vtadmin.v22.VTAdmin/GetVSchema"
	// VTAdminGetVSchemasProcedure is the fully-qualified name of the VTAdmin's GetVSchemas RPC.
	VTAdminGetVSchemasProcedure = "/vitess.vtadmin.v22.VTAdmin/GetVSchemas"
	// VTAdminGetVtctldsProcedure is the fully-qualified name of the VTAdmin's GetVtctlds RPC.
	VTAdminGetVtctldsProcedure = "/vitess.vtadmin.v22.VTAdmin/GetVtctlds"
	// VTAdminGetWorkflowProcedure is the fully-qualified name of the VTAdmin's GetWorkflow RPC.
	VTAdminGetWorkflowProcedure = "/vitess.vtadmin.v22.VTAdmin/GetWorkflow"
	// VTAdminGetWorkflowsProcedure is the fully-qualified name of the VTAdmin's GetWorkflows RPC.
	VTAdminGetWorkflowsProcedure = "/vitess.vtadmin.v22.VTAdmin/GetWorkflows"
	// VTAdminGetWorkflowStatusProcedure is the fully-qualified name of the VTAdmin's GetWorkflowStatus
	// RPC.
	VTAdminGetWorkflowStatusProcedure = "/vitess.vtadmin.v22.VTAdmin/GetWorkflowStatus"
	// VTAdminStartWorkflowProcedure is the fully-qualified name of the VTAdmin's StartWorkflow RPC.
	VTAdminStartWorkflowProcedure = "/vitess.vtadmin.v22.VTAdmin/StartWorkflow"
	// VTAdminStopWorkflowProcedure is the fully-qualified name of the VTAdmin's StopWorkflow RPC.
	VTAdminStopWorkflowProcedure = "/vitess.vtadmin.v22.VTAdmin/StopWorkflow"
	// VTAdminLaunchSchemaMigrationProcedure is the fully-qualified name of the VTAdmin's
	// LaunchSchemaMigration RPC.
	VTAdminLaunchSchemaMigrationProcedure = "/vitess.vtadmin.v22.VTAdmin/LaunchSchemaMigration"
	// VTAdminMoveTablesCompleteProcedure is the fully-qualified name of the VTAdmin's
	// MoveTablesComplete RPC.
	VTAdminMoveTablesCompleteProcedure = "/vitess.vtadmin.v22.VTAdmin/MoveTablesComplete"
	// VTAdminMoveTablesCreateProcedure is the fully-qualified name of the VTAdmin's MoveTablesCreate
	// RPC.
	VTAdminMoveTablesCreateProcedure = "/vitess.vtadmin.v22.VTAdmin/MoveTablesCreate"
	// VTAdminMaterializeCreateProcedure is the fully-qualified name of the VTAdmin's MaterializeCreate
	// RPC.
	VTAdminMaterializeCreateProcedure = "/vitess.vtadmin.v22.VTAdmin/MaterializeCreate"
	// VTAdminPingTabletProcedure is the fully-qualified name of the VTAdmin's PingTablet RPC.
	VTAdminPingTabletProcedure = "/vitess.vtadmin.v22.VTAdmin/PingTablet"
	// VTAdminPlannedFailoverShardProcedure is the fully-qualified name of the VTAdmin's
	// PlannedFailoverShard RPC.
	VTAdminPlannedFailoverShardProcedure = "/vitess.vtadmin.v22.VTAdmin/PlannedFailoverShard"
	// VTAdminRebuildKeyspaceGraphProcedure is the fully-qualified name of the VTAdmin's
	// RebuildKeyspaceGraph RPC.
	VTAdminRebuildKeyspaceGraphProcedure = "/vitess.vtadmin.v22.VTAdmin/RebuildKeyspaceGraph"
	// VTAdminRefreshStateProcedure is the fully-qualified name of the VTAdmin's RefreshState RPC.
	VTAdminRefreshStateProcedure = "/vitess.vtadmin.v22.VTAdmin/RefreshState"
	// VTAdminRefreshTabletReplicationSourceProcedure is the fully-qualified name of the VTAdmin's
	// RefreshTabletReplicationSource RPC.
	VTAdminRefreshTabletReplicationSourceProcedure = "/vitess.vtadmin.v22.VTAdmin/RefreshTabletReplicationSource"
	// VTAdminReloadSchemasProcedure is the fully-qualified name of the VTAdmin's ReloadSchemas RPC.
	VTAdminReloadSchemasProcedure = "/vitess.vtadmin.v22.VTAdmin/ReloadSchemas"
	// VTAdminReloadSchemaShardProcedure is the fully-qualified name of the VTAdmin's ReloadSchemaShard
	// RPC.
	VTAdminReloadSchemaShardProcedure = "/vitess.vtadmin.v22.VTAdmin/ReloadSchemaShard"
	// VTAdminRemoveKeyspaceCellProcedure is the fully-qualified name of the VTAdmin's
	// RemoveKeyspaceCell RPC.
	VTAdminRemoveKeyspaceCellProcedure = "/vitess.vtadmin.v22.VTAdmin/RemoveKeyspaceCell"
	// VTAdminRetrySchemaMigrationProcedure is the fully-qualified name of the VTAdmin's
	// RetrySchemaMigration RPC.
	VTAdminRetrySchemaMigrationProcedure = "/vitess.vtadmin.v22.VTAdmin/RetrySchemaMigration"
	// VTAdminRunHealthCheckProcedure is the fully-qualified name of the VTAdmin's RunHealthCheck RPC.
	VTAdminRunHealthCheckProcedure = "/vitess.vtadmin.v22.VTAdmin/RunHealthCheck"
	// VTAdminReshardCreateProcedure is the fully-qualified name of the VTAdmin's ReshardCreate RPC.
	VTAdminReshardCreateProcedure = "/vitess.vtadmin.v22.VTAdmin/ReshardCreate"
	// VTAdminSetReadOnlyProcedure is the fully-qualified name of the VTAdmin's SetReadOnly RPC.
	VTAdminSetReadOnlyProcedure = "/vitess.vtadmin.v22.VTAdmin/SetReadOnly"
	// VTAdminSetReadWriteProcedure is the fully-qualified name of the VTAdmin's SetReadWrite RPC.
	VTAdminSetReadWriteProcedure = "/vitess.vtadmin.v22.VTAdmin/SetReadWrite"
	// VTAdminStartReplicationProcedure is the fully-qualified name of the VTAdmin's StartReplication
	// RPC.
	VTAdminStartReplicationProcedure = "/vitess.vtadmin.v22.VTAdmin/StartReplication"
	// VTAdminStopReplicationProcedure is the fully-qualified name of the VTAdmin's StopReplication RPC.
	VTAdminStopReplicationProcedure = "/vitess.vtadmin.v22.VTAdmin/StopReplication"
	// VTAdminTabletExternallyPromotedProcedure is the fully-qualified name of the VTAdmin's
	// TabletExternallyPromoted RPC.
	VTAdminTabletExternallyPromotedProcedure = "/vitess.vtadmin.v22.VTAdmin/TabletExternallyPromoted"
	// VTAdminValidateProcedure is the fully-qualified name of the VTAdmin's Validate RPC.
	VTAdminValidateProcedure = "/vitess.vtadmin.v22.VTAdmin/Validate"
	// VTAdminValidateKeyspaceProcedure is the fully-qualified name of the VTAdmin's ValidateKeyspace
	// RPC.
	VTAdminValidateKeyspaceProcedure = "/vitess.vtadmin.v22.VTAdmin/ValidateKeyspace"
	// VTAdminValidateSchemaKeyspaceProcedure is the fully-qualified name of the VTAdmin's
	// ValidateSchemaKeyspace RPC.
	VTAdminValidateSchemaKeyspaceProcedure = "/vitess.vtadmin.v22.VTAdmin/ValidateSchemaKeyspace"
	// VTAdminValidateShardProcedure is the fully-qualified name of the VTAdmin's ValidateShard RPC.
	VTAdminValidateShardProcedure = "/vitess.vtadmin.v22.VTAdmin/ValidateShard"
	// VTAdminValidateVersionKeyspaceProcedure is the fully-qualified name of the VTAdmin's
	// ValidateVersionKeyspace RPC.
	VTAdminValidateVersionKeyspaceProcedure = "/vitess.vtadmin.v22.VTAdmin/ValidateVersionKeyspace"
	// VTAdminValidateVersionShardProcedure is the fully-qualified name of the VTAdmin's
	// ValidateVersionShard RPC.
	VTAdminValidateVersionShardProcedure = "/vitess.vtadmin.v22.VTAdmin/ValidateVersionShard"
	// VTAdminVDiffCreateProcedure is the fully-qualified name of the VTAdmin's VDiffCreate RPC.
	VTAdminVDiffCreateProcedure = "/vitess.vtadmin.v22.VTAdmin/VDiffCreate"
	// VTAdminVDiffShowProcedure is the fully-qualified name of the VTAdmin's VDiffShow RPC.
	VTAdminVDiffShowProcedure = "/vitess.vtadmin.v22.VTAdmin/VDiffShow"
	// VTAdminVTExplainProcedure is the fully-qualified name of the VTAdmin's VTExplain RPC.
	VTAdminVTExplainProcedure = "/vitess.vtadmin.v22.VTAdmin/VTExplain"
	// VTAdminVExplainProcedure is the fully-qualified name of the VTAdmin's VExplain RPC.
	VTAdminVExplainProcedure = "/vitess.vtadmin.v22.VTAdmin/VExplain"
	// VTAdminWorkflowDeleteProcedure is the fully-qualified name of the VTAdmin's WorkflowDelete RPC.
	VTAdminWorkflowDeleteProcedure = "/vitess.vtadmin.v22.VTAdmin/WorkflowDelete"
	// VTAdminWorkflowSwitchTrafficProcedure is the fully-qualified name of the VTAdmin's
	// WorkflowSwitchTraffic RPC.
	VTAdminWorkflowSwitchTrafficProcedure = "/vitess.vtadmin.v22.VTAdmin/WorkflowSwitchTraffic"
)

// VTAdminClient is a client for the vitess.vtadmin.v22.VTAdmin service.
type VTAdminClient interface {
	// ApplySchema applies a schema to a keyspace in the given cluster.
	ApplySchema(context.Context, *connect.Request[v22.ApplySchemaRequest]) (*connect.Response[v221.ApplySchemaResponse], error)
	// CancelSchemaMigration cancels one or all schema migrations in the given
	// cluster, terminating any running ones as needed.
	CancelSchemaMigration(context.Context, *connect.Request[v22.CancelSchemaMigrationRequest]) (*connect.Response[v221.CancelSchemaMigrationResponse], error)
	// CleanupSchemaMigration marks a schema migration in the given cluster as
	// ready for artifact cleanup.
	CleanupSchemaMigration(context.Context, *connect.Request[v22.CleanupSchemaMigrationRequest]) (*connect.Response[v221.CleanupSchemaMigrationResponse], error)
	// CompleteSchemaMigration completes one or all migrations in the given
	// cluster executed with --postpone-completion.
	CompleteSchemaMigration(context.Context, *connect.Request[v22.CompleteSchemaMigrationRequest]) (*connect.Response[v221.CompleteSchemaMigrationResponse], error)
	// ConcludeTransaction concludes a distributed transaction identified by the provided dtid.
	ConcludeTransaction(context.Context, *connect.Request[v22.ConcludeTransactionRequest]) (*connect.Response[v221.ConcludeTransactionResponse], error)
	// CreateKeyspace creates a new keyspace in the given cluster.
	CreateKeyspace(context.Context, *connect.Request[v22.CreateKeyspaceRequest]) (*connect.Response[v22.CreateKeyspaceResponse], error)
	// CreateShard creates a new shard in the given cluster and keyspace.
	CreateShard(context.Context, *connect.Request[v22.CreateShardRequest]) (*connect.Response[v221.CreateShardResponse], error)
	// DeleteKeyspace deletes a keyspace in the given cluster.
	DeleteKeyspace(context.Context, *connect.Request[v22.DeleteKeyspaceRequest]) (*connect.Response[v221.DeleteKeyspaceResponse], error)
	// DeleteShard deletes one or more shards in the given cluster and keyspace.
	DeleteShards(context.Context, *connect.Request[v22.DeleteShardsRequest]) (*connect.Response[v221.DeleteShardsResponse], error)
	// DeleteTablet deletes a tablet from the topology
	DeleteTablet(context.Context, *connect.Request[v22.DeleteTabletRequest]) (*connect.Response[v22.DeleteTabletResponse], error)
	// EmergencyFailoverShard fails over a shard to a new primary. It assumes
	// the old primary is dead or otherwise not responding.
	EmergencyFailoverShard(context.Context, *connect.Request[v22.EmergencyFailoverShardRequest]) (*connect.Response[v22.EmergencyFailoverShardResponse], error)
	// FindSchema returns a single Schema that matches the provided table name
	// across all specified clusters IDs. Not specifying a set of cluster IDs
	// causes the search to span all configured clusters.
	//
	// An error occurs if either no table exists across any of the clusters with
	// the specified table name, or if multiple tables exist with that name.
	FindSchema(context.Context, *connect.Request[v22.FindSchemaRequest]) (*connect.Response[v22.Schema], error)
	// GetBackups returns backups grouped by cluster.
	GetBackups(context.Context, *connect.Request[v22.GetBackupsRequest]) (*connect.Response[v22.GetBackupsResponse], error)
	// GetCellInfos returns the CellInfo objects for the specified clusters.
	//
	// Callers may optionally restrict the set of CellInfos, or restrict the
	// response to include only cell names.
	GetCellInfos(context.Context, *connect.Request[v22.GetCellInfosRequest]) (*connect.Response[v22.GetCellInfosResponse], error)
	// GetCellsAliases returns the CellsAliases data for the specified clusters.
	GetCellsAliases(context.Context, *connect.Request[v22.GetCellsAliasesRequest]) (*connect.Response[v22.GetCellsAliasesResponse], error)
	// GetClusters returns all configured clusters.
	GetClusters(context.Context, *connect.Request[v22.GetClustersRequest]) (*connect.Response[v22.GetClustersResponse], error)
	// GetFullStatus returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	GetFullStatus(context.Context, *connect.Request[v22.GetFullStatusRequest]) (*connect.Response[v221.GetFullStatusResponse], error)
	// GetGates returns all gates across all the specified clusters.
	GetGates(context.Context, *connect.Request[v22.GetGatesRequest]) (*connect.Response[v22.GetGatesResponse], error)
	// GetKeyspace returns a keyspace by name in the specified cluster.
	GetKeyspace(context.Context, *connect.Request[v22.GetKeyspaceRequest]) (*connect.Response[v22.Keyspace], error)
	// GetKeyspaces returns all keyspaces across the specified clusters.
	GetKeyspaces(context.Context, *connect.Request[v22.GetKeyspacesRequest]) (*connect.Response[v22.GetKeyspacesResponse], error)
	// GetSchema returns the schema for the specified (cluster, keyspace, table)
	// tuple.
	GetSchema(context.Context, *connect.Request[v22.GetSchemaRequest]) (*connect.Response[v22.Schema], error)
	// GetSchemas returns all schemas across the specified clusters.
	GetSchemas(context.Context, *connect.Request[v22.GetSchemasRequest]) (*connect.Response[v22.GetSchemasResponse], error)
	// GetSchemaMigrations returns one or more online schema migrations for the
	// set of keyspaces (or all keyspaces) in the given clusters, analagous to
	// repeated executions of `SHOW VITESS_MIGRATIONS`.
	//
	// Different fields in the request message result in different behaviors.
	// See the documentation on vtctldata.GetSchemaMigrationsRequest for details.
	GetSchemaMigrations(context.Context, *connect.Request[v22.GetSchemaMigrationsRequest]) (*connect.Response[v22.GetSchemaMigrationsResponse], error)
	// GetShardReplicationPositions returns shard replication positions grouped
	// by cluster.
	GetShardReplicationPositions(context.Context, *connect.Request[v22.GetShardReplicationPositionsRequest]) (*connect.Response[v22.GetShardReplicationPositionsResponse], error)
	// GetSrvKeyspace returns the SrvKeyspace for a keyspace in one or more cells.
	GetSrvKeyspace(context.Context, *connect.Request[v22.GetSrvKeyspaceRequest]) (*connect.Response[v221.GetSrvKeyspacesResponse], error)
	// GetSrvKeyspaces returns the SrvKeyspaces for all keyspaces across all the specified clusters.
	GetSrvKeyspaces(context.Context, *connect.Request[v22.GetSrvKeyspacesRequest]) (*connect.Response[v22.GetSrvKeyspacesResponse], error)
	// GetSrvVSchema returns the SrvVSchema for the given cluster and cell.
	GetSrvVSchema(context.Context, *connect.Request[v22.GetSrvVSchemaRequest]) (*connect.Response[v22.SrvVSchema], error)
	// GetSrvVSchemas returns all SrvVSchemas across all (or specified) clusters
	// and cells.
	GetSrvVSchemas(context.Context, *connect.Request[v22.GetSrvVSchemasRequest]) (*connect.Response[v22.GetSrvVSchemasResponse], error)
	// GetTablet looks up a tablet by hostname across all clusters and returns
	// the result.
	GetTablet(context.Context, *connect.Request[v22.GetTabletRequest]) (*connect.Response[v22.Tablet], error)
	// GetTablets returns all tablets across all the specified clusters.
	GetTablets(context.Context, *connect.Request[v22.GetTabletsRequest]) (*connect.Response[v22.GetTabletsResponse], error)
	// GetTopologyPath returns the cell located at the specified path in the topology server.
	GetTopologyPath(context.Context, *connect.Request[v22.GetTopologyPathRequest]) (*connect.Response[v221.GetTopologyPathResponse], error)
	// GetTransactionInfo returns the information about a single transaction.
	GetTransactionInfo(context.Context, *connect.Request[v22.GetTransactionInfoRequest]) (*connect.Response[v221.GetTransactionInfoResponse], error)
	// GetUnresolvedTransactions returns the unresolved transactions for the request.
	GetUnresolvedTransactions(context.Context, *connect.Request[v22.GetUnresolvedTransactionsRequest]) (*connect.Response[v221.GetUnresolvedTransactionsResponse], error)
	// GetVSchema returns a VSchema for the specified keyspace in the specified
	// cluster.
	GetVSchema(context.Context, *connect.Request[v22.GetVSchemaRequest]) (*connect.Response[v22.VSchema], error)
	// GetVSchemas returns the VSchemas for all specified clusters.
	GetVSchemas(context.Context, *connect.Request[v22.GetVSchemasRequest]) (*connect.Response[v22.GetVSchemasResponse], error)
	// GetVtctlds returns the Vtctlds for all specified clusters.
	GetVtctlds(context.Context, *connect.Request[v22.GetVtctldsRequest]) (*connect.Response[v22.GetVtctldsResponse], error)
	// GetWorkflow returns a single Workflow for a given cluster, keyspace, and
	// workflow name.
	GetWorkflow(context.Context, *connect.Request[v22.GetWorkflowRequest]) (*connect.Response[v22.Workflow], error)
	// GetWorkflows returns the Workflows for all specified clusters.
	GetWorkflows(context.Context, *connect.Request[v22.GetWorkflowsRequest]) (*connect.Response[v22.GetWorkflowsResponse], error)
	// GetWorkflowStatus returns the status for a specific workflow.
	GetWorkflowStatus(context.Context, *connect.Request[v22.GetWorkflowStatusRequest]) (*connect.Response[v221.WorkflowStatusResponse], error)
	// StartWorkflow starts a vreplication workflow.
	StartWorkflow(context.Context, *connect.Request[v22.StartWorkflowRequest]) (*connect.Response[v221.WorkflowUpdateResponse], error)
	// StopWorkflow stops a vreplication workflow.
	StopWorkflow(context.Context, *connect.Request[v22.StopWorkflowRequest]) (*connect.Response[v221.WorkflowUpdateResponse], error)
	// LaunchSchemaMigration launches one or all migrations in the given
	// cluster executed with --postpone-launch.
	LaunchSchemaMigration(context.Context, *connect.Request[v22.LaunchSchemaMigrationRequest]) (*connect.Response[v221.LaunchSchemaMigrationResponse], error)
	// MoveTablesComplete completes the move and cleans up the workflow and
	// its related artifacts.
	MoveTablesComplete(context.Context, *connect.Request[v22.MoveTablesCompleteRequest]) (*connect.Response[v221.MoveTablesCompleteResponse], error)
	// MoveTablesCreate creates a workflow which moves one or more tables from a
	// source keyspace to a target keyspace.
	MoveTablesCreate(context.Context, *connect.Request[v22.MoveTablesCreateRequest]) (*connect.Response[v221.WorkflowStatusResponse], error)
	// MaterializeCreate creates a workflow to materialize one or more tables
	// from a source keyspace to a target keyspace using a provided expressions.
	MaterializeCreate(context.Context, *connect.Request[v22.MaterializeCreateRequest]) (*connect.Response[v221.MaterializeCreateResponse], error)
	// PingTablet checks that the specified tablet is awake and responding to
	// RPCs. This command can be blocked by other in-flight operations.
	PingTablet(context.Context, *connect.Request[v22.PingTabletRequest]) (*connect.Response[v22.PingTabletResponse], error)
	// PlannedFailoverShard fails over the shard to a new primary, or away from
	// an old primary. Both the old and new primaries must be reachable and
	// running.
	//
	// NOTE: A planned failover will not consider replicas outside the current
	// shard primary's cell as promotion candidates unless NewPrimary is
	// explicitly provided in the request.
	PlannedFailoverShard(context.Context, *connect.Request[v22.PlannedFailoverShardRequest]) (*connect.Response[v22.PlannedFailoverShardResponse], error)
	// RebuildKeyspaceGraph rebuilds the serving data for a keyspace.
	RebuildKeyspaceGraph(context.Context, *connect.Request[v22.RebuildKeyspaceGraphRequest]) (*connect.Response[v22.RebuildKeyspaceGraphResponse], error)
	// RefreshState reloads the tablet record on the specified tablet.
	RefreshState(context.Context, *connect.Request[v22.RefreshStateRequest]) (*connect.Response[v22.RefreshStateResponse], error)
	// RefreshTabletReplicationSource performs a `CHANGE REPLICATION SOURCE TO`
	// on a tablet to replicate from the current primary in the shard.
	RefreshTabletReplicationSource(context.Context, *connect.Request[v22.RefreshTabletReplicationSourceRequest]) (*connect.Response[v22.RefreshTabletReplicationSourceResponse], error)
	// ReloadSchemas reloads the schema definition across keyspaces, shards, or
	// tablets in one or more clusters, depending on the request fields (see
	// ReloadSchemasRequest for details).
	ReloadSchemas(context.Context, *connect.Request[v22.ReloadSchemasRequest]) (*connect.Response[v22.ReloadSchemasResponse], error)
	// ReloadSchemaShard reloads the schema on all tablets in a shard. This is done on a best-effort basis.
	ReloadSchemaShard(context.Context, *connect.Request[v22.ReloadSchemaShardRequest]) (*connect.Response[v22.ReloadSchemaShardResponse], error)
	// RemoveKeyspaceCell removes the cell from the Cells list for all shards in the keyspace, and the SrvKeyspace for that keyspace in that cell.
	RemoveKeyspaceCell(context.Context, *connect.Request[v22.RemoveKeyspaceCellRequest]) (*connect.Response[v22.RemoveKeyspaceCellResponse], error)
	// RetrySchemaMigration marks a given schema migration in the given cluster
	// for retry.
	RetrySchemaMigration(context.Context, *connect.Request[v22.RetrySchemaMigrationRequest]) (*connect.Response[v221.RetrySchemaMigrationResponse], error)
	// RunHealthCheck runs a healthcheck on the tablet.
	RunHealthCheck(context.Context, *connect.Request[v22.RunHealthCheckRequest]) (*connect.Response[v22.RunHealthCheckResponse], error)
	// ReshardCreate creates a workflow to reshard a keyspace.
	ReshardCreate(context.Context, *connect.Request[v22.ReshardCreateRequest]) (*connect.Response[v221.WorkflowStatusResponse], error)
	// SetReadOnly sets the tablet to read-only mode.
	SetReadOnly(context.Context, *connect.Request[v22.SetReadOnlyRequest]) (*connect.Response[v22.SetReadOnlyResponse], error)
	// SetReadWrite sets the tablet to read-write mode.
	SetReadWrite(context.Context, *connect.Request[v22.SetReadWriteRequest]) (*connect.Response[v22.SetReadWriteResponse], error)
	// StartReplication runs the underlying database command to start
	// replication on a tablet.
	StartReplication(context.Context, *connect.Request[v22.StartReplicationRequest]) (*connect.Response[v22.StartReplicationResponse], error)
	// StopReplication runs the underlying database command to stop replication
	// on a tablet
	StopReplication(context.Context, *connect.Request[v22.StopReplicationRequest]) (*connect.Response[v22.StopReplicationResponse], error)
	// TabletExternallyPromoted updates the metadata in a cluster's topology
	// to acknowledge a shard primary change performed by an external tool
	// (e.g. orchestrator*).
	//
	// See the Reparenting guide for more information:
	// https://vitess.io/docs/user-guides/configuration-advanced/reparenting/#external-reparenting.
	//
	// * "orchestrator" here refers to external orchestrator, not the newer,
	// Vitess-aware orchestrator, VTOrc.
	TabletExternallyPromoted(context.Context, *connect.Request[v22.TabletExternallyPromotedRequest]) (*connect.Response[v22.TabletExternallyPromotedResponse], error)
	// Validate validates all nodes in a cluster that are reachable from the global replication graph,
	// as well as all tablets in discoverable cells, are consistent
	Validate(context.Context, *connect.Request[v22.ValidateRequest]) (*connect.Response[v221.ValidateResponse], error)
	// ValidateKeyspace validates that all nodes reachable from the specified
	// keyspace are consistent.
	ValidateKeyspace(context.Context, *connect.Request[v22.ValidateKeyspaceRequest]) (*connect.Response[v221.ValidateKeyspaceResponse], error)
	// ValidateSchemaKeyspace validates that the schema on the primary tablet
	// for shard 0 matches the schema on all of the other tablets in the
	// keyspace.
	ValidateSchemaKeyspace(context.Context, *connect.Request[v22.ValidateSchemaKeyspaceRequest]) (*connect.Response[v221.ValidateSchemaKeyspaceResponse], error)
	// ValidateShard validates that that all nodes reachable from the specified shard are consistent.
	ValidateShard(context.Context, *connect.Request[v22.ValidateShardRequest]) (*connect.Response[v221.ValidateShardResponse], error)
	// ValidateVersionKeyspace validates that the version on the primary of
	// shard 0 matches all of the other tablets in the keyspace.
	ValidateVersionKeyspace(context.Context, *connect.Request[v22.ValidateVersionKeyspaceRequest]) (*connect.Response[v221.ValidateVersionKeyspaceResponse], error)
	// ValidateVersionShard validates that the version on the primary matches all of the replicas.
	ValidateVersionShard(context.Context, *connect.Request[v22.ValidateVersionShardRequest]) (*connect.Response[v221.ValidateVersionShardResponse], error)
	VDiffCreate(context.Context, *connect.Request[v22.VDiffCreateRequest]) (*connect.Response[v221.VDiffCreateResponse], error)
	VDiffShow(context.Context, *connect.Request[v22.VDiffShowRequest]) (*connect.Response[v22.VDiffShowResponse], error)
	// VTExplain provides information on how Vitess plans to execute a
	// particular query.
	VTExplain(context.Context, *connect.Request[v22.VTExplainRequest]) (*connect.Response[v22.VTExplainResponse], error)
	// VExplain provides information on how Vitess plans to execute a
	// particular query.
	VExplain(context.Context, *connect.Request[v22.VExplainRequest]) (*connect.Response[v22.VExplainResponse], error)
	// WorkflowDelete deletes a vreplication workflow.
	WorkflowDelete(context.Context, *connect.Request[v22.WorkflowDeleteRequest]) (*connect.Response[v221.WorkflowDeleteResponse], error)
	// WorkflowSwitchTraffic switches traffic for a VReplication workflow.
	WorkflowSwitchTraffic(context.Context, *connect.Request[v22.WorkflowSwitchTrafficRequest]) (*connect.Response[v221.WorkflowSwitchTrafficResponse], error)
}

// NewVTAdminClient constructs a client for the vitess.vtadmin.v22.VTAdmin service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVTAdminClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VTAdminClient {
	baseURL = strings.TrimRight(baseURL, "/")
	vTAdminMethods := v22.File_vitess_vtadmin_v22_vtadmin_proto.Services().ByName("VTAdmin").Methods()
	return &vTAdminClient{
		applySchema: connect.NewClient[v22.ApplySchemaRequest, v221.ApplySchemaResponse](
			httpClient,
			baseURL+VTAdminApplySchemaProcedure,
			connect.WithSchema(vTAdminMethods.ByName("ApplySchema")),
			connect.WithClientOptions(opts...),
		),
		cancelSchemaMigration: connect.NewClient[v22.CancelSchemaMigrationRequest, v221.CancelSchemaMigrationResponse](
			httpClient,
			baseURL+VTAdminCancelSchemaMigrationProcedure,
			connect.WithSchema(vTAdminMethods.ByName("CancelSchemaMigration")),
			connect.WithClientOptions(opts...),
		),
		cleanupSchemaMigration: connect.NewClient[v22.CleanupSchemaMigrationRequest, v221.CleanupSchemaMigrationResponse](
			httpClient,
			baseURL+VTAdminCleanupSchemaMigrationProcedure,
			connect.WithSchema(vTAdminMethods.ByName("CleanupSchemaMigration")),
			connect.WithClientOptions(opts...),
		),
		completeSchemaMigration: connect.NewClient[v22.CompleteSchemaMigrationRequest, v221.CompleteSchemaMigrationResponse](
			httpClient,
			baseURL+VTAdminCompleteSchemaMigrationProcedure,
			connect.WithSchema(vTAdminMethods.ByName("CompleteSchemaMigration")),
			connect.WithClientOptions(opts...),
		),
		concludeTransaction: connect.NewClient[v22.ConcludeTransactionRequest, v221.ConcludeTransactionResponse](
			httpClient,
			baseURL+VTAdminConcludeTransactionProcedure,
			connect.WithSchema(vTAdminMethods.ByName("ConcludeTransaction")),
			connect.WithClientOptions(opts...),
		),
		createKeyspace: connect.NewClient[v22.CreateKeyspaceRequest, v22.CreateKeyspaceResponse](
			httpClient,
			baseURL+VTAdminCreateKeyspaceProcedure,
			connect.WithSchema(vTAdminMethods.ByName("CreateKeyspace")),
			connect.WithClientOptions(opts...),
		),
		createShard: connect.NewClient[v22.CreateShardRequest, v221.CreateShardResponse](
			httpClient,
			baseURL+VTAdminCreateShardProcedure,
			connect.WithSchema(vTAdminMethods.ByName("CreateShard")),
			connect.WithClientOptions(opts...),
		),
		deleteKeyspace: connect.NewClient[v22.DeleteKeyspaceRequest, v221.DeleteKeyspaceResponse](
			httpClient,
			baseURL+VTAdminDeleteKeyspaceProcedure,
			connect.WithSchema(vTAdminMethods.ByName("DeleteKeyspace")),
			connect.WithClientOptions(opts...),
		),
		deleteShards: connect.NewClient[v22.DeleteShardsRequest, v221.DeleteShardsResponse](
			httpClient,
			baseURL+VTAdminDeleteShardsProcedure,
			connect.WithSchema(vTAdminMethods.ByName("DeleteShards")),
			connect.WithClientOptions(opts...),
		),
		deleteTablet: connect.NewClient[v22.DeleteTabletRequest, v22.DeleteTabletResponse](
			httpClient,
			baseURL+VTAdminDeleteTabletProcedure,
			connect.WithSchema(vTAdminMethods.ByName("DeleteTablet")),
			connect.WithClientOptions(opts...),
		),
		emergencyFailoverShard: connect.NewClient[v22.EmergencyFailoverShardRequest, v22.EmergencyFailoverShardResponse](
			httpClient,
			baseURL+VTAdminEmergencyFailoverShardProcedure,
			connect.WithSchema(vTAdminMethods.ByName("EmergencyFailoverShard")),
			connect.WithClientOptions(opts...),
		),
		findSchema: connect.NewClient[v22.FindSchemaRequest, v22.Schema](
			httpClient,
			baseURL+VTAdminFindSchemaProcedure,
			connect.WithSchema(vTAdminMethods.ByName("FindSchema")),
			connect.WithClientOptions(opts...),
		),
		getBackups: connect.NewClient[v22.GetBackupsRequest, v22.GetBackupsResponse](
			httpClient,
			baseURL+VTAdminGetBackupsProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetBackups")),
			connect.WithClientOptions(opts...),
		),
		getCellInfos: connect.NewClient[v22.GetCellInfosRequest, v22.GetCellInfosResponse](
			httpClient,
			baseURL+VTAdminGetCellInfosProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetCellInfos")),
			connect.WithClientOptions(opts...),
		),
		getCellsAliases: connect.NewClient[v22.GetCellsAliasesRequest, v22.GetCellsAliasesResponse](
			httpClient,
			baseURL+VTAdminGetCellsAliasesProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetCellsAliases")),
			connect.WithClientOptions(opts...),
		),
		getClusters: connect.NewClient[v22.GetClustersRequest, v22.GetClustersResponse](
			httpClient,
			baseURL+VTAdminGetClustersProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetClusters")),
			connect.WithClientOptions(opts...),
		),
		getFullStatus: connect.NewClient[v22.GetFullStatusRequest, v221.GetFullStatusResponse](
			httpClient,
			baseURL+VTAdminGetFullStatusProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetFullStatus")),
			connect.WithClientOptions(opts...),
		),
		getGates: connect.NewClient[v22.GetGatesRequest, v22.GetGatesResponse](
			httpClient,
			baseURL+VTAdminGetGatesProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetGates")),
			connect.WithClientOptions(opts...),
		),
		getKeyspace: connect.NewClient[v22.GetKeyspaceRequest, v22.Keyspace](
			httpClient,
			baseURL+VTAdminGetKeyspaceProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetKeyspace")),
			connect.WithClientOptions(opts...),
		),
		getKeyspaces: connect.NewClient[v22.GetKeyspacesRequest, v22.GetKeyspacesResponse](
			httpClient,
			baseURL+VTAdminGetKeyspacesProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetKeyspaces")),
			connect.WithClientOptions(opts...),
		),
		getSchema: connect.NewClient[v22.GetSchemaRequest, v22.Schema](
			httpClient,
			baseURL+VTAdminGetSchemaProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetSchema")),
			connect.WithClientOptions(opts...),
		),
		getSchemas: connect.NewClient[v22.GetSchemasRequest, v22.GetSchemasResponse](
			httpClient,
			baseURL+VTAdminGetSchemasProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetSchemas")),
			connect.WithClientOptions(opts...),
		),
		getSchemaMigrations: connect.NewClient[v22.GetSchemaMigrationsRequest, v22.GetSchemaMigrationsResponse](
			httpClient,
			baseURL+VTAdminGetSchemaMigrationsProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetSchemaMigrations")),
			connect.WithClientOptions(opts...),
		),
		getShardReplicationPositions: connect.NewClient[v22.GetShardReplicationPositionsRequest, v22.GetShardReplicationPositionsResponse](
			httpClient,
			baseURL+VTAdminGetShardReplicationPositionsProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetShardReplicationPositions")),
			connect.WithClientOptions(opts...),
		),
		getSrvKeyspace: connect.NewClient[v22.GetSrvKeyspaceRequest, v221.GetSrvKeyspacesResponse](
			httpClient,
			baseURL+VTAdminGetSrvKeyspaceProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetSrvKeyspace")),
			connect.WithClientOptions(opts...),
		),
		getSrvKeyspaces: connect.NewClient[v22.GetSrvKeyspacesRequest, v22.GetSrvKeyspacesResponse](
			httpClient,
			baseURL+VTAdminGetSrvKeyspacesProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetSrvKeyspaces")),
			connect.WithClientOptions(opts...),
		),
		getSrvVSchema: connect.NewClient[v22.GetSrvVSchemaRequest, v22.SrvVSchema](
			httpClient,
			baseURL+VTAdminGetSrvVSchemaProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetSrvVSchema")),
			connect.WithClientOptions(opts...),
		),
		getSrvVSchemas: connect.NewClient[v22.GetSrvVSchemasRequest, v22.GetSrvVSchemasResponse](
			httpClient,
			baseURL+VTAdminGetSrvVSchemasProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetSrvVSchemas")),
			connect.WithClientOptions(opts...),
		),
		getTablet: connect.NewClient[v22.GetTabletRequest, v22.Tablet](
			httpClient,
			baseURL+VTAdminGetTabletProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetTablet")),
			connect.WithClientOptions(opts...),
		),
		getTablets: connect.NewClient[v22.GetTabletsRequest, v22.GetTabletsResponse](
			httpClient,
			baseURL+VTAdminGetTabletsProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetTablets")),
			connect.WithClientOptions(opts...),
		),
		getTopologyPath: connect.NewClient[v22.GetTopologyPathRequest, v221.GetTopologyPathResponse](
			httpClient,
			baseURL+VTAdminGetTopologyPathProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetTopologyPath")),
			connect.WithClientOptions(opts...),
		),
		getTransactionInfo: connect.NewClient[v22.GetTransactionInfoRequest, v221.GetTransactionInfoResponse](
			httpClient,
			baseURL+VTAdminGetTransactionInfoProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetTransactionInfo")),
			connect.WithClientOptions(opts...),
		),
		getUnresolvedTransactions: connect.NewClient[v22.GetUnresolvedTransactionsRequest, v221.GetUnresolvedTransactionsResponse](
			httpClient,
			baseURL+VTAdminGetUnresolvedTransactionsProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetUnresolvedTransactions")),
			connect.WithClientOptions(opts...),
		),
		getVSchema: connect.NewClient[v22.GetVSchemaRequest, v22.VSchema](
			httpClient,
			baseURL+VTAdminGetVSchemaProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetVSchema")),
			connect.WithClientOptions(opts...),
		),
		getVSchemas: connect.NewClient[v22.GetVSchemasRequest, v22.GetVSchemasResponse](
			httpClient,
			baseURL+VTAdminGetVSchemasProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetVSchemas")),
			connect.WithClientOptions(opts...),
		),
		getVtctlds: connect.NewClient[v22.GetVtctldsRequest, v22.GetVtctldsResponse](
			httpClient,
			baseURL+VTAdminGetVtctldsProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetVtctlds")),
			connect.WithClientOptions(opts...),
		),
		getWorkflow: connect.NewClient[v22.GetWorkflowRequest, v22.Workflow](
			httpClient,
			baseURL+VTAdminGetWorkflowProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetWorkflow")),
			connect.WithClientOptions(opts...),
		),
		getWorkflows: connect.NewClient[v22.GetWorkflowsRequest, v22.GetWorkflowsResponse](
			httpClient,
			baseURL+VTAdminGetWorkflowsProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetWorkflows")),
			connect.WithClientOptions(opts...),
		),
		getWorkflowStatus: connect.NewClient[v22.GetWorkflowStatusRequest, v221.WorkflowStatusResponse](
			httpClient,
			baseURL+VTAdminGetWorkflowStatusProcedure,
			connect.WithSchema(vTAdminMethods.ByName("GetWorkflowStatus")),
			connect.WithClientOptions(opts...),
		),
		startWorkflow: connect.NewClient[v22.StartWorkflowRequest, v221.WorkflowUpdateResponse](
			httpClient,
			baseURL+VTAdminStartWorkflowProcedure,
			connect.WithSchema(vTAdminMethods.ByName("StartWorkflow")),
			connect.WithClientOptions(opts...),
		),
		stopWorkflow: connect.NewClient[v22.StopWorkflowRequest, v221.WorkflowUpdateResponse](
			httpClient,
			baseURL+VTAdminStopWorkflowProcedure,
			connect.WithSchema(vTAdminMethods.ByName("StopWorkflow")),
			connect.WithClientOptions(opts...),
		),
		launchSchemaMigration: connect.NewClient[v22.LaunchSchemaMigrationRequest, v221.LaunchSchemaMigrationResponse](
			httpClient,
			baseURL+VTAdminLaunchSchemaMigrationProcedure,
			connect.WithSchema(vTAdminMethods.ByName("LaunchSchemaMigration")),
			connect.WithClientOptions(opts...),
		),
		moveTablesComplete: connect.NewClient[v22.MoveTablesCompleteRequest, v221.MoveTablesCompleteResponse](
			httpClient,
			baseURL+VTAdminMoveTablesCompleteProcedure,
			connect.WithSchema(vTAdminMethods.ByName("MoveTablesComplete")),
			connect.WithClientOptions(opts...),
		),
		moveTablesCreate: connect.NewClient[v22.MoveTablesCreateRequest, v221.WorkflowStatusResponse](
			httpClient,
			baseURL+VTAdminMoveTablesCreateProcedure,
			connect.WithSchema(vTAdminMethods.ByName("MoveTablesCreate")),
			connect.WithClientOptions(opts...),
		),
		materializeCreate: connect.NewClient[v22.MaterializeCreateRequest, v221.MaterializeCreateResponse](
			httpClient,
			baseURL+VTAdminMaterializeCreateProcedure,
			connect.WithSchema(vTAdminMethods.ByName("MaterializeCreate")),
			connect.WithClientOptions(opts...),
		),
		pingTablet: connect.NewClient[v22.PingTabletRequest, v22.PingTabletResponse](
			httpClient,
			baseURL+VTAdminPingTabletProcedure,
			connect.WithSchema(vTAdminMethods.ByName("PingTablet")),
			connect.WithClientOptions(opts...),
		),
		plannedFailoverShard: connect.NewClient[v22.PlannedFailoverShardRequest, v22.PlannedFailoverShardResponse](
			httpClient,
			baseURL+VTAdminPlannedFailoverShardProcedure,
			connect.WithSchema(vTAdminMethods.ByName("PlannedFailoverShard")),
			connect.WithClientOptions(opts...),
		),
		rebuildKeyspaceGraph: connect.NewClient[v22.RebuildKeyspaceGraphRequest, v22.RebuildKeyspaceGraphResponse](
			httpClient,
			baseURL+VTAdminRebuildKeyspaceGraphProcedure,
			connect.WithSchema(vTAdminMethods.ByName("RebuildKeyspaceGraph")),
			connect.WithClientOptions(opts...),
		),
		refreshState: connect.NewClient[v22.RefreshStateRequest, v22.RefreshStateResponse](
			httpClient,
			baseURL+VTAdminRefreshStateProcedure,
			connect.WithSchema(vTAdminMethods.ByName("RefreshState")),
			connect.WithClientOptions(opts...),
		),
		refreshTabletReplicationSource: connect.NewClient[v22.RefreshTabletReplicationSourceRequest, v22.RefreshTabletReplicationSourceResponse](
			httpClient,
			baseURL+VTAdminRefreshTabletReplicationSourceProcedure,
			connect.WithSchema(vTAdminMethods.ByName("RefreshTabletReplicationSource")),
			connect.WithClientOptions(opts...),
		),
		reloadSchemas: connect.NewClient[v22.ReloadSchemasRequest, v22.ReloadSchemasResponse](
			httpClient,
			baseURL+VTAdminReloadSchemasProcedure,
			connect.WithSchema(vTAdminMethods.ByName("ReloadSchemas")),
			connect.WithClientOptions(opts...),
		),
		reloadSchemaShard: connect.NewClient[v22.ReloadSchemaShardRequest, v22.ReloadSchemaShardResponse](
			httpClient,
			baseURL+VTAdminReloadSchemaShardProcedure,
			connect.WithSchema(vTAdminMethods.ByName("ReloadSchemaShard")),
			connect.WithClientOptions(opts...),
		),
		removeKeyspaceCell: connect.NewClient[v22.RemoveKeyspaceCellRequest, v22.RemoveKeyspaceCellResponse](
			httpClient,
			baseURL+VTAdminRemoveKeyspaceCellProcedure,
			connect.WithSchema(vTAdminMethods.ByName("RemoveKeyspaceCell")),
			connect.WithClientOptions(opts...),
		),
		retrySchemaMigration: connect.NewClient[v22.RetrySchemaMigrationRequest, v221.RetrySchemaMigrationResponse](
			httpClient,
			baseURL+VTAdminRetrySchemaMigrationProcedure,
			connect.WithSchema(vTAdminMethods.ByName("RetrySchemaMigration")),
			connect.WithClientOptions(opts...),
		),
		runHealthCheck: connect.NewClient[v22.RunHealthCheckRequest, v22.RunHealthCheckResponse](
			httpClient,
			baseURL+VTAdminRunHealthCheckProcedure,
			connect.WithSchema(vTAdminMethods.ByName("RunHealthCheck")),
			connect.WithClientOptions(opts...),
		),
		reshardCreate: connect.NewClient[v22.ReshardCreateRequest, v221.WorkflowStatusResponse](
			httpClient,
			baseURL+VTAdminReshardCreateProcedure,
			connect.WithSchema(vTAdminMethods.ByName("ReshardCreate")),
			connect.WithClientOptions(opts...),
		),
		setReadOnly: connect.NewClient[v22.SetReadOnlyRequest, v22.SetReadOnlyResponse](
			httpClient,
			baseURL+VTAdminSetReadOnlyProcedure,
			connect.WithSchema(vTAdminMethods.ByName("SetReadOnly")),
			connect.WithClientOptions(opts...),
		),
		setReadWrite: connect.NewClient[v22.SetReadWriteRequest, v22.SetReadWriteResponse](
			httpClient,
			baseURL+VTAdminSetReadWriteProcedure,
			connect.WithSchema(vTAdminMethods.ByName("SetReadWrite")),
			connect.WithClientOptions(opts...),
		),
		startReplication: connect.NewClient[v22.StartReplicationRequest, v22.StartReplicationResponse](
			httpClient,
			baseURL+VTAdminStartReplicationProcedure,
			connect.WithSchema(vTAdminMethods.ByName("StartReplication")),
			connect.WithClientOptions(opts...),
		),
		stopReplication: connect.NewClient[v22.StopReplicationRequest, v22.StopReplicationResponse](
			httpClient,
			baseURL+VTAdminStopReplicationProcedure,
			connect.WithSchema(vTAdminMethods.ByName("StopReplication")),
			connect.WithClientOptions(opts...),
		),
		tabletExternallyPromoted: connect.NewClient[v22.TabletExternallyPromotedRequest, v22.TabletExternallyPromotedResponse](
			httpClient,
			baseURL+VTAdminTabletExternallyPromotedProcedure,
			connect.WithSchema(vTAdminMethods.ByName("TabletExternallyPromoted")),
			connect.WithClientOptions(opts...),
		),
		validate: connect.NewClient[v22.ValidateRequest, v221.ValidateResponse](
			httpClient,
			baseURL+VTAdminValidateProcedure,
			connect.WithSchema(vTAdminMethods.ByName("Validate")),
			connect.WithClientOptions(opts...),
		),
		validateKeyspace: connect.NewClient[v22.ValidateKeyspaceRequest, v221.ValidateKeyspaceResponse](
			httpClient,
			baseURL+VTAdminValidateKeyspaceProcedure,
			connect.WithSchema(vTAdminMethods.ByName("ValidateKeyspace")),
			connect.WithClientOptions(opts...),
		),
		validateSchemaKeyspace: connect.NewClient[v22.ValidateSchemaKeyspaceRequest, v221.ValidateSchemaKeyspaceResponse](
			httpClient,
			baseURL+VTAdminValidateSchemaKeyspaceProcedure,
			connect.WithSchema(vTAdminMethods.ByName("ValidateSchemaKeyspace")),
			connect.WithClientOptions(opts...),
		),
		validateShard: connect.NewClient[v22.ValidateShardRequest, v221.ValidateShardResponse](
			httpClient,
			baseURL+VTAdminValidateShardProcedure,
			connect.WithSchema(vTAdminMethods.ByName("ValidateShard")),
			connect.WithClientOptions(opts...),
		),
		validateVersionKeyspace: connect.NewClient[v22.ValidateVersionKeyspaceRequest, v221.ValidateVersionKeyspaceResponse](
			httpClient,
			baseURL+VTAdminValidateVersionKeyspaceProcedure,
			connect.WithSchema(vTAdminMethods.ByName("ValidateVersionKeyspace")),
			connect.WithClientOptions(opts...),
		),
		validateVersionShard: connect.NewClient[v22.ValidateVersionShardRequest, v221.ValidateVersionShardResponse](
			httpClient,
			baseURL+VTAdminValidateVersionShardProcedure,
			connect.WithSchema(vTAdminMethods.ByName("ValidateVersionShard")),
			connect.WithClientOptions(opts...),
		),
		vDiffCreate: connect.NewClient[v22.VDiffCreateRequest, v221.VDiffCreateResponse](
			httpClient,
			baseURL+VTAdminVDiffCreateProcedure,
			connect.WithSchema(vTAdminMethods.ByName("VDiffCreate")),
			connect.WithClientOptions(opts...),
		),
		vDiffShow: connect.NewClient[v22.VDiffShowRequest, v22.VDiffShowResponse](
			httpClient,
			baseURL+VTAdminVDiffShowProcedure,
			connect.WithSchema(vTAdminMethods.ByName("VDiffShow")),
			connect.WithClientOptions(opts...),
		),
		vTExplain: connect.NewClient[v22.VTExplainRequest, v22.VTExplainResponse](
			httpClient,
			baseURL+VTAdminVTExplainProcedure,
			connect.WithSchema(vTAdminMethods.ByName("VTExplain")),
			connect.WithClientOptions(opts...),
		),
		vExplain: connect.NewClient[v22.VExplainRequest, v22.VExplainResponse](
			httpClient,
			baseURL+VTAdminVExplainProcedure,
			connect.WithSchema(vTAdminMethods.ByName("VExplain")),
			connect.WithClientOptions(opts...),
		),
		workflowDelete: connect.NewClient[v22.WorkflowDeleteRequest, v221.WorkflowDeleteResponse](
			httpClient,
			baseURL+VTAdminWorkflowDeleteProcedure,
			connect.WithSchema(vTAdminMethods.ByName("WorkflowDelete")),
			connect.WithClientOptions(opts...),
		),
		workflowSwitchTraffic: connect.NewClient[v22.WorkflowSwitchTrafficRequest, v221.WorkflowSwitchTrafficResponse](
			httpClient,
			baseURL+VTAdminWorkflowSwitchTrafficProcedure,
			connect.WithSchema(vTAdminMethods.ByName("WorkflowSwitchTraffic")),
			connect.WithClientOptions(opts...),
		),
	}
}

// vTAdminClient implements VTAdminClient.
type vTAdminClient struct {
	applySchema                    *connect.Client[v22.ApplySchemaRequest, v221.ApplySchemaResponse]
	cancelSchemaMigration          *connect.Client[v22.CancelSchemaMigrationRequest, v221.CancelSchemaMigrationResponse]
	cleanupSchemaMigration         *connect.Client[v22.CleanupSchemaMigrationRequest, v221.CleanupSchemaMigrationResponse]
	completeSchemaMigration        *connect.Client[v22.CompleteSchemaMigrationRequest, v221.CompleteSchemaMigrationResponse]
	concludeTransaction            *connect.Client[v22.ConcludeTransactionRequest, v221.ConcludeTransactionResponse]
	createKeyspace                 *connect.Client[v22.CreateKeyspaceRequest, v22.CreateKeyspaceResponse]
	createShard                    *connect.Client[v22.CreateShardRequest, v221.CreateShardResponse]
	deleteKeyspace                 *connect.Client[v22.DeleteKeyspaceRequest, v221.DeleteKeyspaceResponse]
	deleteShards                   *connect.Client[v22.DeleteShardsRequest, v221.DeleteShardsResponse]
	deleteTablet                   *connect.Client[v22.DeleteTabletRequest, v22.DeleteTabletResponse]
	emergencyFailoverShard         *connect.Client[v22.EmergencyFailoverShardRequest, v22.EmergencyFailoverShardResponse]
	findSchema                     *connect.Client[v22.FindSchemaRequest, v22.Schema]
	getBackups                     *connect.Client[v22.GetBackupsRequest, v22.GetBackupsResponse]
	getCellInfos                   *connect.Client[v22.GetCellInfosRequest, v22.GetCellInfosResponse]
	getCellsAliases                *connect.Client[v22.GetCellsAliasesRequest, v22.GetCellsAliasesResponse]
	getClusters                    *connect.Client[v22.GetClustersRequest, v22.GetClustersResponse]
	getFullStatus                  *connect.Client[v22.GetFullStatusRequest, v221.GetFullStatusResponse]
	getGates                       *connect.Client[v22.GetGatesRequest, v22.GetGatesResponse]
	getKeyspace                    *connect.Client[v22.GetKeyspaceRequest, v22.Keyspace]
	getKeyspaces                   *connect.Client[v22.GetKeyspacesRequest, v22.GetKeyspacesResponse]
	getSchema                      *connect.Client[v22.GetSchemaRequest, v22.Schema]
	getSchemas                     *connect.Client[v22.GetSchemasRequest, v22.GetSchemasResponse]
	getSchemaMigrations            *connect.Client[v22.GetSchemaMigrationsRequest, v22.GetSchemaMigrationsResponse]
	getShardReplicationPositions   *connect.Client[v22.GetShardReplicationPositionsRequest, v22.GetShardReplicationPositionsResponse]
	getSrvKeyspace                 *connect.Client[v22.GetSrvKeyspaceRequest, v221.GetSrvKeyspacesResponse]
	getSrvKeyspaces                *connect.Client[v22.GetSrvKeyspacesRequest, v22.GetSrvKeyspacesResponse]
	getSrvVSchema                  *connect.Client[v22.GetSrvVSchemaRequest, v22.SrvVSchema]
	getSrvVSchemas                 *connect.Client[v22.GetSrvVSchemasRequest, v22.GetSrvVSchemasResponse]
	getTablet                      *connect.Client[v22.GetTabletRequest, v22.Tablet]
	getTablets                     *connect.Client[v22.GetTabletsRequest, v22.GetTabletsResponse]
	getTopologyPath                *connect.Client[v22.GetTopologyPathRequest, v221.GetTopologyPathResponse]
	getTransactionInfo             *connect.Client[v22.GetTransactionInfoRequest, v221.GetTransactionInfoResponse]
	getUnresolvedTransactions      *connect.Client[v22.GetUnresolvedTransactionsRequest, v221.GetUnresolvedTransactionsResponse]
	getVSchema                     *connect.Client[v22.GetVSchemaRequest, v22.VSchema]
	getVSchemas                    *connect.Client[v22.GetVSchemasRequest, v22.GetVSchemasResponse]
	getVtctlds                     *connect.Client[v22.GetVtctldsRequest, v22.GetVtctldsResponse]
	getWorkflow                    *connect.Client[v22.GetWorkflowRequest, v22.Workflow]
	getWorkflows                   *connect.Client[v22.GetWorkflowsRequest, v22.GetWorkflowsResponse]
	getWorkflowStatus              *connect.Client[v22.GetWorkflowStatusRequest, v221.WorkflowStatusResponse]
	startWorkflow                  *connect.Client[v22.StartWorkflowRequest, v221.WorkflowUpdateResponse]
	stopWorkflow                   *connect.Client[v22.StopWorkflowRequest, v221.WorkflowUpdateResponse]
	launchSchemaMigration          *connect.Client[v22.LaunchSchemaMigrationRequest, v221.LaunchSchemaMigrationResponse]
	moveTablesComplete             *connect.Client[v22.MoveTablesCompleteRequest, v221.MoveTablesCompleteResponse]
	moveTablesCreate               *connect.Client[v22.MoveTablesCreateRequest, v221.WorkflowStatusResponse]
	materializeCreate              *connect.Client[v22.MaterializeCreateRequest, v221.MaterializeCreateResponse]
	pingTablet                     *connect.Client[v22.PingTabletRequest, v22.PingTabletResponse]
	plannedFailoverShard           *connect.Client[v22.PlannedFailoverShardRequest, v22.PlannedFailoverShardResponse]
	rebuildKeyspaceGraph           *connect.Client[v22.RebuildKeyspaceGraphRequest, v22.RebuildKeyspaceGraphResponse]
	refreshState                   *connect.Client[v22.RefreshStateRequest, v22.RefreshStateResponse]
	refreshTabletReplicationSource *connect.Client[v22.RefreshTabletReplicationSourceRequest, v22.RefreshTabletReplicationSourceResponse]
	reloadSchemas                  *connect.Client[v22.ReloadSchemasRequest, v22.ReloadSchemasResponse]
	reloadSchemaShard              *connect.Client[v22.ReloadSchemaShardRequest, v22.ReloadSchemaShardResponse]
	removeKeyspaceCell             *connect.Client[v22.RemoveKeyspaceCellRequest, v22.RemoveKeyspaceCellResponse]
	retrySchemaMigration           *connect.Client[v22.RetrySchemaMigrationRequest, v221.RetrySchemaMigrationResponse]
	runHealthCheck                 *connect.Client[v22.RunHealthCheckRequest, v22.RunHealthCheckResponse]
	reshardCreate                  *connect.Client[v22.ReshardCreateRequest, v221.WorkflowStatusResponse]
	setReadOnly                    *connect.Client[v22.SetReadOnlyRequest, v22.SetReadOnlyResponse]
	setReadWrite                   *connect.Client[v22.SetReadWriteRequest, v22.SetReadWriteResponse]
	startReplication               *connect.Client[v22.StartReplicationRequest, v22.StartReplicationResponse]
	stopReplication                *connect.Client[v22.StopReplicationRequest, v22.StopReplicationResponse]
	tabletExternallyPromoted       *connect.Client[v22.TabletExternallyPromotedRequest, v22.TabletExternallyPromotedResponse]
	validate                       *connect.Client[v22.ValidateRequest, v221.ValidateResponse]
	validateKeyspace               *connect.Client[v22.ValidateKeyspaceRequest, v221.ValidateKeyspaceResponse]
	validateSchemaKeyspace         *connect.Client[v22.ValidateSchemaKeyspaceRequest, v221.ValidateSchemaKeyspaceResponse]
	validateShard                  *connect.Client[v22.ValidateShardRequest, v221.ValidateShardResponse]
	validateVersionKeyspace        *connect.Client[v22.ValidateVersionKeyspaceRequest, v221.ValidateVersionKeyspaceResponse]
	validateVersionShard           *connect.Client[v22.ValidateVersionShardRequest, v221.ValidateVersionShardResponse]
	vDiffCreate                    *connect.Client[v22.VDiffCreateRequest, v221.VDiffCreateResponse]
	vDiffShow                      *connect.Client[v22.VDiffShowRequest, v22.VDiffShowResponse]
	vTExplain                      *connect.Client[v22.VTExplainRequest, v22.VTExplainResponse]
	vExplain                       *connect.Client[v22.VExplainRequest, v22.VExplainResponse]
	workflowDelete                 *connect.Client[v22.WorkflowDeleteRequest, v221.WorkflowDeleteResponse]
	workflowSwitchTraffic          *connect.Client[v22.WorkflowSwitchTrafficRequest, v221.WorkflowSwitchTrafficResponse]
}

// ApplySchema calls vitess.vtadmin.v22.VTAdmin.ApplySchema.
func (c *vTAdminClient) ApplySchema(ctx context.Context, req *connect.Request[v22.ApplySchemaRequest]) (*connect.Response[v221.ApplySchemaResponse], error) {
	return c.applySchema.CallUnary(ctx, req)
}

// CancelSchemaMigration calls vitess.vtadmin.v22.VTAdmin.CancelSchemaMigration.
func (c *vTAdminClient) CancelSchemaMigration(ctx context.Context, req *connect.Request[v22.CancelSchemaMigrationRequest]) (*connect.Response[v221.CancelSchemaMigrationResponse], error) {
	return c.cancelSchemaMigration.CallUnary(ctx, req)
}

// CleanupSchemaMigration calls vitess.vtadmin.v22.VTAdmin.CleanupSchemaMigration.
func (c *vTAdminClient) CleanupSchemaMigration(ctx context.Context, req *connect.Request[v22.CleanupSchemaMigrationRequest]) (*connect.Response[v221.CleanupSchemaMigrationResponse], error) {
	return c.cleanupSchemaMigration.CallUnary(ctx, req)
}

// CompleteSchemaMigration calls vitess.vtadmin.v22.VTAdmin.CompleteSchemaMigration.
func (c *vTAdminClient) CompleteSchemaMigration(ctx context.Context, req *connect.Request[v22.CompleteSchemaMigrationRequest]) (*connect.Response[v221.CompleteSchemaMigrationResponse], error) {
	return c.completeSchemaMigration.CallUnary(ctx, req)
}

// ConcludeTransaction calls vitess.vtadmin.v22.VTAdmin.ConcludeTransaction.
func (c *vTAdminClient) ConcludeTransaction(ctx context.Context, req *connect.Request[v22.ConcludeTransactionRequest]) (*connect.Response[v221.ConcludeTransactionResponse], error) {
	return c.concludeTransaction.CallUnary(ctx, req)
}

// CreateKeyspace calls vitess.vtadmin.v22.VTAdmin.CreateKeyspace.
func (c *vTAdminClient) CreateKeyspace(ctx context.Context, req *connect.Request[v22.CreateKeyspaceRequest]) (*connect.Response[v22.CreateKeyspaceResponse], error) {
	return c.createKeyspace.CallUnary(ctx, req)
}

// CreateShard calls vitess.vtadmin.v22.VTAdmin.CreateShard.
func (c *vTAdminClient) CreateShard(ctx context.Context, req *connect.Request[v22.CreateShardRequest]) (*connect.Response[v221.CreateShardResponse], error) {
	return c.createShard.CallUnary(ctx, req)
}

// DeleteKeyspace calls vitess.vtadmin.v22.VTAdmin.DeleteKeyspace.
func (c *vTAdminClient) DeleteKeyspace(ctx context.Context, req *connect.Request[v22.DeleteKeyspaceRequest]) (*connect.Response[v221.DeleteKeyspaceResponse], error) {
	return c.deleteKeyspace.CallUnary(ctx, req)
}

// DeleteShards calls vitess.vtadmin.v22.VTAdmin.DeleteShards.
func (c *vTAdminClient) DeleteShards(ctx context.Context, req *connect.Request[v22.DeleteShardsRequest]) (*connect.Response[v221.DeleteShardsResponse], error) {
	return c.deleteShards.CallUnary(ctx, req)
}

// DeleteTablet calls vitess.vtadmin.v22.VTAdmin.DeleteTablet.
func (c *vTAdminClient) DeleteTablet(ctx context.Context, req *connect.Request[v22.DeleteTabletRequest]) (*connect.Response[v22.DeleteTabletResponse], error) {
	return c.deleteTablet.CallUnary(ctx, req)
}

// EmergencyFailoverShard calls vitess.vtadmin.v22.VTAdmin.EmergencyFailoverShard.
func (c *vTAdminClient) EmergencyFailoverShard(ctx context.Context, req *connect.Request[v22.EmergencyFailoverShardRequest]) (*connect.Response[v22.EmergencyFailoverShardResponse], error) {
	return c.emergencyFailoverShard.CallUnary(ctx, req)
}

// FindSchema calls vitess.vtadmin.v22.VTAdmin.FindSchema.
func (c *vTAdminClient) FindSchema(ctx context.Context, req *connect.Request[v22.FindSchemaRequest]) (*connect.Response[v22.Schema], error) {
	return c.findSchema.CallUnary(ctx, req)
}

// GetBackups calls vitess.vtadmin.v22.VTAdmin.GetBackups.
func (c *vTAdminClient) GetBackups(ctx context.Context, req *connect.Request[v22.GetBackupsRequest]) (*connect.Response[v22.GetBackupsResponse], error) {
	return c.getBackups.CallUnary(ctx, req)
}

// GetCellInfos calls vitess.vtadmin.v22.VTAdmin.GetCellInfos.
func (c *vTAdminClient) GetCellInfos(ctx context.Context, req *connect.Request[v22.GetCellInfosRequest]) (*connect.Response[v22.GetCellInfosResponse], error) {
	return c.getCellInfos.CallUnary(ctx, req)
}

// GetCellsAliases calls vitess.vtadmin.v22.VTAdmin.GetCellsAliases.
func (c *vTAdminClient) GetCellsAliases(ctx context.Context, req *connect.Request[v22.GetCellsAliasesRequest]) (*connect.Response[v22.GetCellsAliasesResponse], error) {
	return c.getCellsAliases.CallUnary(ctx, req)
}

// GetClusters calls vitess.vtadmin.v22.VTAdmin.GetClusters.
func (c *vTAdminClient) GetClusters(ctx context.Context, req *connect.Request[v22.GetClustersRequest]) (*connect.Response[v22.GetClustersResponse], error) {
	return c.getClusters.CallUnary(ctx, req)
}

// GetFullStatus calls vitess.vtadmin.v22.VTAdmin.GetFullStatus.
func (c *vTAdminClient) GetFullStatus(ctx context.Context, req *connect.Request[v22.GetFullStatusRequest]) (*connect.Response[v221.GetFullStatusResponse], error) {
	return c.getFullStatus.CallUnary(ctx, req)
}

// GetGates calls vitess.vtadmin.v22.VTAdmin.GetGates.
func (c *vTAdminClient) GetGates(ctx context.Context, req *connect.Request[v22.GetGatesRequest]) (*connect.Response[v22.GetGatesResponse], error) {
	return c.getGates.CallUnary(ctx, req)
}

// GetKeyspace calls vitess.vtadmin.v22.VTAdmin.GetKeyspace.
func (c *vTAdminClient) GetKeyspace(ctx context.Context, req *connect.Request[v22.GetKeyspaceRequest]) (*connect.Response[v22.Keyspace], error) {
	return c.getKeyspace.CallUnary(ctx, req)
}

// GetKeyspaces calls vitess.vtadmin.v22.VTAdmin.GetKeyspaces.
func (c *vTAdminClient) GetKeyspaces(ctx context.Context, req *connect.Request[v22.GetKeyspacesRequest]) (*connect.Response[v22.GetKeyspacesResponse], error) {
	return c.getKeyspaces.CallUnary(ctx, req)
}

// GetSchema calls vitess.vtadmin.v22.VTAdmin.GetSchema.
func (c *vTAdminClient) GetSchema(ctx context.Context, req *connect.Request[v22.GetSchemaRequest]) (*connect.Response[v22.Schema], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// GetSchemas calls vitess.vtadmin.v22.VTAdmin.GetSchemas.
func (c *vTAdminClient) GetSchemas(ctx context.Context, req *connect.Request[v22.GetSchemasRequest]) (*connect.Response[v22.GetSchemasResponse], error) {
	return c.getSchemas.CallUnary(ctx, req)
}

// GetSchemaMigrations calls vitess.vtadmin.v22.VTAdmin.GetSchemaMigrations.
func (c *vTAdminClient) GetSchemaMigrations(ctx context.Context, req *connect.Request[v22.GetSchemaMigrationsRequest]) (*connect.Response[v22.GetSchemaMigrationsResponse], error) {
	return c.getSchemaMigrations.CallUnary(ctx, req)
}

// GetShardReplicationPositions calls vitess.vtadmin.v22.VTAdmin.GetShardReplicationPositions.
func (c *vTAdminClient) GetShardReplicationPositions(ctx context.Context, req *connect.Request[v22.GetShardReplicationPositionsRequest]) (*connect.Response[v22.GetShardReplicationPositionsResponse], error) {
	return c.getShardReplicationPositions.CallUnary(ctx, req)
}

// GetSrvKeyspace calls vitess.vtadmin.v22.VTAdmin.GetSrvKeyspace.
func (c *vTAdminClient) GetSrvKeyspace(ctx context.Context, req *connect.Request[v22.GetSrvKeyspaceRequest]) (*connect.Response[v221.GetSrvKeyspacesResponse], error) {
	return c.getSrvKeyspace.CallUnary(ctx, req)
}

// GetSrvKeyspaces calls vitess.vtadmin.v22.VTAdmin.GetSrvKeyspaces.
func (c *vTAdminClient) GetSrvKeyspaces(ctx context.Context, req *connect.Request[v22.GetSrvKeyspacesRequest]) (*connect.Response[v22.GetSrvKeyspacesResponse], error) {
	return c.getSrvKeyspaces.CallUnary(ctx, req)
}

// GetSrvVSchema calls vitess.vtadmin.v22.VTAdmin.GetSrvVSchema.
func (c *vTAdminClient) GetSrvVSchema(ctx context.Context, req *connect.Request[v22.GetSrvVSchemaRequest]) (*connect.Response[v22.SrvVSchema], error) {
	return c.getSrvVSchema.CallUnary(ctx, req)
}

// GetSrvVSchemas calls vitess.vtadmin.v22.VTAdmin.GetSrvVSchemas.
func (c *vTAdminClient) GetSrvVSchemas(ctx context.Context, req *connect.Request[v22.GetSrvVSchemasRequest]) (*connect.Response[v22.GetSrvVSchemasResponse], error) {
	return c.getSrvVSchemas.CallUnary(ctx, req)
}

// GetTablet calls vitess.vtadmin.v22.VTAdmin.GetTablet.
func (c *vTAdminClient) GetTablet(ctx context.Context, req *connect.Request[v22.GetTabletRequest]) (*connect.Response[v22.Tablet], error) {
	return c.getTablet.CallUnary(ctx, req)
}

// GetTablets calls vitess.vtadmin.v22.VTAdmin.GetTablets.
func (c *vTAdminClient) GetTablets(ctx context.Context, req *connect.Request[v22.GetTabletsRequest]) (*connect.Response[v22.GetTabletsResponse], error) {
	return c.getTablets.CallUnary(ctx, req)
}

// GetTopologyPath calls vitess.vtadmin.v22.VTAdmin.GetTopologyPath.
func (c *vTAdminClient) GetTopologyPath(ctx context.Context, req *connect.Request[v22.GetTopologyPathRequest]) (*connect.Response[v221.GetTopologyPathResponse], error) {
	return c.getTopologyPath.CallUnary(ctx, req)
}

// GetTransactionInfo calls vitess.vtadmin.v22.VTAdmin.GetTransactionInfo.
func (c *vTAdminClient) GetTransactionInfo(ctx context.Context, req *connect.Request[v22.GetTransactionInfoRequest]) (*connect.Response[v221.GetTransactionInfoResponse], error) {
	return c.getTransactionInfo.CallUnary(ctx, req)
}

// GetUnresolvedTransactions calls vitess.vtadmin.v22.VTAdmin.GetUnresolvedTransactions.
func (c *vTAdminClient) GetUnresolvedTransactions(ctx context.Context, req *connect.Request[v22.GetUnresolvedTransactionsRequest]) (*connect.Response[v221.GetUnresolvedTransactionsResponse], error) {
	return c.getUnresolvedTransactions.CallUnary(ctx, req)
}

// GetVSchema calls vitess.vtadmin.v22.VTAdmin.GetVSchema.
func (c *vTAdminClient) GetVSchema(ctx context.Context, req *connect.Request[v22.GetVSchemaRequest]) (*connect.Response[v22.VSchema], error) {
	return c.getVSchema.CallUnary(ctx, req)
}

// GetVSchemas calls vitess.vtadmin.v22.VTAdmin.GetVSchemas.
func (c *vTAdminClient) GetVSchemas(ctx context.Context, req *connect.Request[v22.GetVSchemasRequest]) (*connect.Response[v22.GetVSchemasResponse], error) {
	return c.getVSchemas.CallUnary(ctx, req)
}

// GetVtctlds calls vitess.vtadmin.v22.VTAdmin.GetVtctlds.
func (c *vTAdminClient) GetVtctlds(ctx context.Context, req *connect.Request[v22.GetVtctldsRequest]) (*connect.Response[v22.GetVtctldsResponse], error) {
	return c.getVtctlds.CallUnary(ctx, req)
}

// GetWorkflow calls vitess.vtadmin.v22.VTAdmin.GetWorkflow.
func (c *vTAdminClient) GetWorkflow(ctx context.Context, req *connect.Request[v22.GetWorkflowRequest]) (*connect.Response[v22.Workflow], error) {
	return c.getWorkflow.CallUnary(ctx, req)
}

// GetWorkflows calls vitess.vtadmin.v22.VTAdmin.GetWorkflows.
func (c *vTAdminClient) GetWorkflows(ctx context.Context, req *connect.Request[v22.GetWorkflowsRequest]) (*connect.Response[v22.GetWorkflowsResponse], error) {
	return c.getWorkflows.CallUnary(ctx, req)
}

// GetWorkflowStatus calls vitess.vtadmin.v22.VTAdmin.GetWorkflowStatus.
func (c *vTAdminClient) GetWorkflowStatus(ctx context.Context, req *connect.Request[v22.GetWorkflowStatusRequest]) (*connect.Response[v221.WorkflowStatusResponse], error) {
	return c.getWorkflowStatus.CallUnary(ctx, req)
}

// StartWorkflow calls vitess.vtadmin.v22.VTAdmin.StartWorkflow.
func (c *vTAdminClient) StartWorkflow(ctx context.Context, req *connect.Request[v22.StartWorkflowRequest]) (*connect.Response[v221.WorkflowUpdateResponse], error) {
	return c.startWorkflow.CallUnary(ctx, req)
}

// StopWorkflow calls vitess.vtadmin.v22.VTAdmin.StopWorkflow.
func (c *vTAdminClient) StopWorkflow(ctx context.Context, req *connect.Request[v22.StopWorkflowRequest]) (*connect.Response[v221.WorkflowUpdateResponse], error) {
	return c.stopWorkflow.CallUnary(ctx, req)
}

// LaunchSchemaMigration calls vitess.vtadmin.v22.VTAdmin.LaunchSchemaMigration.
func (c *vTAdminClient) LaunchSchemaMigration(ctx context.Context, req *connect.Request[v22.LaunchSchemaMigrationRequest]) (*connect.Response[v221.LaunchSchemaMigrationResponse], error) {
	return c.launchSchemaMigration.CallUnary(ctx, req)
}

// MoveTablesComplete calls vitess.vtadmin.v22.VTAdmin.MoveTablesComplete.
func (c *vTAdminClient) MoveTablesComplete(ctx context.Context, req *connect.Request[v22.MoveTablesCompleteRequest]) (*connect.Response[v221.MoveTablesCompleteResponse], error) {
	return c.moveTablesComplete.CallUnary(ctx, req)
}

// MoveTablesCreate calls vitess.vtadmin.v22.VTAdmin.MoveTablesCreate.
func (c *vTAdminClient) MoveTablesCreate(ctx context.Context, req *connect.Request[v22.MoveTablesCreateRequest]) (*connect.Response[v221.WorkflowStatusResponse], error) {
	return c.moveTablesCreate.CallUnary(ctx, req)
}

// MaterializeCreate calls vitess.vtadmin.v22.VTAdmin.MaterializeCreate.
func (c *vTAdminClient) MaterializeCreate(ctx context.Context, req *connect.Request[v22.MaterializeCreateRequest]) (*connect.Response[v221.MaterializeCreateResponse], error) {
	return c.materializeCreate.CallUnary(ctx, req)
}

// PingTablet calls vitess.vtadmin.v22.VTAdmin.PingTablet.
func (c *vTAdminClient) PingTablet(ctx context.Context, req *connect.Request[v22.PingTabletRequest]) (*connect.Response[v22.PingTabletResponse], error) {
	return c.pingTablet.CallUnary(ctx, req)
}

// PlannedFailoverShard calls vitess.vtadmin.v22.VTAdmin.PlannedFailoverShard.
func (c *vTAdminClient) PlannedFailoverShard(ctx context.Context, req *connect.Request[v22.PlannedFailoverShardRequest]) (*connect.Response[v22.PlannedFailoverShardResponse], error) {
	return c.plannedFailoverShard.CallUnary(ctx, req)
}

// RebuildKeyspaceGraph calls vitess.vtadmin.v22.VTAdmin.RebuildKeyspaceGraph.
func (c *vTAdminClient) RebuildKeyspaceGraph(ctx context.Context, req *connect.Request[v22.RebuildKeyspaceGraphRequest]) (*connect.Response[v22.RebuildKeyspaceGraphResponse], error) {
	return c.rebuildKeyspaceGraph.CallUnary(ctx, req)
}

// RefreshState calls vitess.vtadmin.v22.VTAdmin.RefreshState.
func (c *vTAdminClient) RefreshState(ctx context.Context, req *connect.Request[v22.RefreshStateRequest]) (*connect.Response[v22.RefreshStateResponse], error) {
	return c.refreshState.CallUnary(ctx, req)
}

// RefreshTabletReplicationSource calls vitess.vtadmin.v22.VTAdmin.RefreshTabletReplicationSource.
func (c *vTAdminClient) RefreshTabletReplicationSource(ctx context.Context, req *connect.Request[v22.RefreshTabletReplicationSourceRequest]) (*connect.Response[v22.RefreshTabletReplicationSourceResponse], error) {
	return c.refreshTabletReplicationSource.CallUnary(ctx, req)
}

// ReloadSchemas calls vitess.vtadmin.v22.VTAdmin.ReloadSchemas.
func (c *vTAdminClient) ReloadSchemas(ctx context.Context, req *connect.Request[v22.ReloadSchemasRequest]) (*connect.Response[v22.ReloadSchemasResponse], error) {
	return c.reloadSchemas.CallUnary(ctx, req)
}

// ReloadSchemaShard calls vitess.vtadmin.v22.VTAdmin.ReloadSchemaShard.
func (c *vTAdminClient) ReloadSchemaShard(ctx context.Context, req *connect.Request[v22.ReloadSchemaShardRequest]) (*connect.Response[v22.ReloadSchemaShardResponse], error) {
	return c.reloadSchemaShard.CallUnary(ctx, req)
}

// RemoveKeyspaceCell calls vitess.vtadmin.v22.VTAdmin.RemoveKeyspaceCell.
func (c *vTAdminClient) RemoveKeyspaceCell(ctx context.Context, req *connect.Request[v22.RemoveKeyspaceCellRequest]) (*connect.Response[v22.RemoveKeyspaceCellResponse], error) {
	return c.removeKeyspaceCell.CallUnary(ctx, req)
}

// RetrySchemaMigration calls vitess.vtadmin.v22.VTAdmin.RetrySchemaMigration.
func (c *vTAdminClient) RetrySchemaMigration(ctx context.Context, req *connect.Request[v22.RetrySchemaMigrationRequest]) (*connect.Response[v221.RetrySchemaMigrationResponse], error) {
	return c.retrySchemaMigration.CallUnary(ctx, req)
}

// RunHealthCheck calls vitess.vtadmin.v22.VTAdmin.RunHealthCheck.
func (c *vTAdminClient) RunHealthCheck(ctx context.Context, req *connect.Request[v22.RunHealthCheckRequest]) (*connect.Response[v22.RunHealthCheckResponse], error) {
	return c.runHealthCheck.CallUnary(ctx, req)
}

// ReshardCreate calls vitess.vtadmin.v22.VTAdmin.ReshardCreate.
func (c *vTAdminClient) ReshardCreate(ctx context.Context, req *connect.Request[v22.ReshardCreateRequest]) (*connect.Response[v221.WorkflowStatusResponse], error) {
	return c.reshardCreate.CallUnary(ctx, req)
}

// SetReadOnly calls vitess.vtadmin.v22.VTAdmin.SetReadOnly.
func (c *vTAdminClient) SetReadOnly(ctx context.Context, req *connect.Request[v22.SetReadOnlyRequest]) (*connect.Response[v22.SetReadOnlyResponse], error) {
	return c.setReadOnly.CallUnary(ctx, req)
}

// SetReadWrite calls vitess.vtadmin.v22.VTAdmin.SetReadWrite.
func (c *vTAdminClient) SetReadWrite(ctx context.Context, req *connect.Request[v22.SetReadWriteRequest]) (*connect.Response[v22.SetReadWriteResponse], error) {
	return c.setReadWrite.CallUnary(ctx, req)
}

// StartReplication calls vitess.vtadmin.v22.VTAdmin.StartReplication.
func (c *vTAdminClient) StartReplication(ctx context.Context, req *connect.Request[v22.StartReplicationRequest]) (*connect.Response[v22.StartReplicationResponse], error) {
	return c.startReplication.CallUnary(ctx, req)
}

// StopReplication calls vitess.vtadmin.v22.VTAdmin.StopReplication.
func (c *vTAdminClient) StopReplication(ctx context.Context, req *connect.Request[v22.StopReplicationRequest]) (*connect.Response[v22.StopReplicationResponse], error) {
	return c.stopReplication.CallUnary(ctx, req)
}

// TabletExternallyPromoted calls vitess.vtadmin.v22.VTAdmin.TabletExternallyPromoted.
func (c *vTAdminClient) TabletExternallyPromoted(ctx context.Context, req *connect.Request[v22.TabletExternallyPromotedRequest]) (*connect.Response[v22.TabletExternallyPromotedResponse], error) {
	return c.tabletExternallyPromoted.CallUnary(ctx, req)
}

// Validate calls vitess.vtadmin.v22.VTAdmin.Validate.
func (c *vTAdminClient) Validate(ctx context.Context, req *connect.Request[v22.ValidateRequest]) (*connect.Response[v221.ValidateResponse], error) {
	return c.validate.CallUnary(ctx, req)
}

// ValidateKeyspace calls vitess.vtadmin.v22.VTAdmin.ValidateKeyspace.
func (c *vTAdminClient) ValidateKeyspace(ctx context.Context, req *connect.Request[v22.ValidateKeyspaceRequest]) (*connect.Response[v221.ValidateKeyspaceResponse], error) {
	return c.validateKeyspace.CallUnary(ctx, req)
}

// ValidateSchemaKeyspace calls vitess.vtadmin.v22.VTAdmin.ValidateSchemaKeyspace.
func (c *vTAdminClient) ValidateSchemaKeyspace(ctx context.Context, req *connect.Request[v22.ValidateSchemaKeyspaceRequest]) (*connect.Response[v221.ValidateSchemaKeyspaceResponse], error) {
	return c.validateSchemaKeyspace.CallUnary(ctx, req)
}

// ValidateShard calls vitess.vtadmin.v22.VTAdmin.ValidateShard.
func (c *vTAdminClient) ValidateShard(ctx context.Context, req *connect.Request[v22.ValidateShardRequest]) (*connect.Response[v221.ValidateShardResponse], error) {
	return c.validateShard.CallUnary(ctx, req)
}

// ValidateVersionKeyspace calls vitess.vtadmin.v22.VTAdmin.ValidateVersionKeyspace.
func (c *vTAdminClient) ValidateVersionKeyspace(ctx context.Context, req *connect.Request[v22.ValidateVersionKeyspaceRequest]) (*connect.Response[v221.ValidateVersionKeyspaceResponse], error) {
	return c.validateVersionKeyspace.CallUnary(ctx, req)
}

// ValidateVersionShard calls vitess.vtadmin.v22.VTAdmin.ValidateVersionShard.
func (c *vTAdminClient) ValidateVersionShard(ctx context.Context, req *connect.Request[v22.ValidateVersionShardRequest]) (*connect.Response[v221.ValidateVersionShardResponse], error) {
	return c.validateVersionShard.CallUnary(ctx, req)
}

// VDiffCreate calls vitess.vtadmin.v22.VTAdmin.VDiffCreate.
func (c *vTAdminClient) VDiffCreate(ctx context.Context, req *connect.Request[v22.VDiffCreateRequest]) (*connect.Response[v221.VDiffCreateResponse], error) {
	return c.vDiffCreate.CallUnary(ctx, req)
}

// VDiffShow calls vitess.vtadmin.v22.VTAdmin.VDiffShow.
func (c *vTAdminClient) VDiffShow(ctx context.Context, req *connect.Request[v22.VDiffShowRequest]) (*connect.Response[v22.VDiffShowResponse], error) {
	return c.vDiffShow.CallUnary(ctx, req)
}

// VTExplain calls vitess.vtadmin.v22.VTAdmin.VTExplain.
func (c *vTAdminClient) VTExplain(ctx context.Context, req *connect.Request[v22.VTExplainRequest]) (*connect.Response[v22.VTExplainResponse], error) {
	return c.vTExplain.CallUnary(ctx, req)
}

// VExplain calls vitess.vtadmin.v22.VTAdmin.VExplain.
func (c *vTAdminClient) VExplain(ctx context.Context, req *connect.Request[v22.VExplainRequest]) (*connect.Response[v22.VExplainResponse], error) {
	return c.vExplain.CallUnary(ctx, req)
}

// WorkflowDelete calls vitess.vtadmin.v22.VTAdmin.WorkflowDelete.
func (c *vTAdminClient) WorkflowDelete(ctx context.Context, req *connect.Request[v22.WorkflowDeleteRequest]) (*connect.Response[v221.WorkflowDeleteResponse], error) {
	return c.workflowDelete.CallUnary(ctx, req)
}

// WorkflowSwitchTraffic calls vitess.vtadmin.v22.VTAdmin.WorkflowSwitchTraffic.
func (c *vTAdminClient) WorkflowSwitchTraffic(ctx context.Context, req *connect.Request[v22.WorkflowSwitchTrafficRequest]) (*connect.Response[v221.WorkflowSwitchTrafficResponse], error) {
	return c.workflowSwitchTraffic.CallUnary(ctx, req)
}

// VTAdminHandler is an implementation of the vitess.vtadmin.v22.VTAdmin service.
type VTAdminHandler interface {
	// ApplySchema applies a schema to a keyspace in the given cluster.
	ApplySchema(context.Context, *connect.Request[v22.ApplySchemaRequest]) (*connect.Response[v221.ApplySchemaResponse], error)
	// CancelSchemaMigration cancels one or all schema migrations in the given
	// cluster, terminating any running ones as needed.
	CancelSchemaMigration(context.Context, *connect.Request[v22.CancelSchemaMigrationRequest]) (*connect.Response[v221.CancelSchemaMigrationResponse], error)
	// CleanupSchemaMigration marks a schema migration in the given cluster as
	// ready for artifact cleanup.
	CleanupSchemaMigration(context.Context, *connect.Request[v22.CleanupSchemaMigrationRequest]) (*connect.Response[v221.CleanupSchemaMigrationResponse], error)
	// CompleteSchemaMigration completes one or all migrations in the given
	// cluster executed with --postpone-completion.
	CompleteSchemaMigration(context.Context, *connect.Request[v22.CompleteSchemaMigrationRequest]) (*connect.Response[v221.CompleteSchemaMigrationResponse], error)
	// ConcludeTransaction concludes a distributed transaction identified by the provided dtid.
	ConcludeTransaction(context.Context, *connect.Request[v22.ConcludeTransactionRequest]) (*connect.Response[v221.ConcludeTransactionResponse], error)
	// CreateKeyspace creates a new keyspace in the given cluster.
	CreateKeyspace(context.Context, *connect.Request[v22.CreateKeyspaceRequest]) (*connect.Response[v22.CreateKeyspaceResponse], error)
	// CreateShard creates a new shard in the given cluster and keyspace.
	CreateShard(context.Context, *connect.Request[v22.CreateShardRequest]) (*connect.Response[v221.CreateShardResponse], error)
	// DeleteKeyspace deletes a keyspace in the given cluster.
	DeleteKeyspace(context.Context, *connect.Request[v22.DeleteKeyspaceRequest]) (*connect.Response[v221.DeleteKeyspaceResponse], error)
	// DeleteShard deletes one or more shards in the given cluster and keyspace.
	DeleteShards(context.Context, *connect.Request[v22.DeleteShardsRequest]) (*connect.Response[v221.DeleteShardsResponse], error)
	// DeleteTablet deletes a tablet from the topology
	DeleteTablet(context.Context, *connect.Request[v22.DeleteTabletRequest]) (*connect.Response[v22.DeleteTabletResponse], error)
	// EmergencyFailoverShard fails over a shard to a new primary. It assumes
	// the old primary is dead or otherwise not responding.
	EmergencyFailoverShard(context.Context, *connect.Request[v22.EmergencyFailoverShardRequest]) (*connect.Response[v22.EmergencyFailoverShardResponse], error)
	// FindSchema returns a single Schema that matches the provided table name
	// across all specified clusters IDs. Not specifying a set of cluster IDs
	// causes the search to span all configured clusters.
	//
	// An error occurs if either no table exists across any of the clusters with
	// the specified table name, or if multiple tables exist with that name.
	FindSchema(context.Context, *connect.Request[v22.FindSchemaRequest]) (*connect.Response[v22.Schema], error)
	// GetBackups returns backups grouped by cluster.
	GetBackups(context.Context, *connect.Request[v22.GetBackupsRequest]) (*connect.Response[v22.GetBackupsResponse], error)
	// GetCellInfos returns the CellInfo objects for the specified clusters.
	//
	// Callers may optionally restrict the set of CellInfos, or restrict the
	// response to include only cell names.
	GetCellInfos(context.Context, *connect.Request[v22.GetCellInfosRequest]) (*connect.Response[v22.GetCellInfosResponse], error)
	// GetCellsAliases returns the CellsAliases data for the specified clusters.
	GetCellsAliases(context.Context, *connect.Request[v22.GetCellsAliasesRequest]) (*connect.Response[v22.GetCellsAliasesResponse], error)
	// GetClusters returns all configured clusters.
	GetClusters(context.Context, *connect.Request[v22.GetClustersRequest]) (*connect.Response[v22.GetClustersResponse], error)
	// GetFullStatus returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	GetFullStatus(context.Context, *connect.Request[v22.GetFullStatusRequest]) (*connect.Response[v221.GetFullStatusResponse], error)
	// GetGates returns all gates across all the specified clusters.
	GetGates(context.Context, *connect.Request[v22.GetGatesRequest]) (*connect.Response[v22.GetGatesResponse], error)
	// GetKeyspace returns a keyspace by name in the specified cluster.
	GetKeyspace(context.Context, *connect.Request[v22.GetKeyspaceRequest]) (*connect.Response[v22.Keyspace], error)
	// GetKeyspaces returns all keyspaces across the specified clusters.
	GetKeyspaces(context.Context, *connect.Request[v22.GetKeyspacesRequest]) (*connect.Response[v22.GetKeyspacesResponse], error)
	// GetSchema returns the schema for the specified (cluster, keyspace, table)
	// tuple.
	GetSchema(context.Context, *connect.Request[v22.GetSchemaRequest]) (*connect.Response[v22.Schema], error)
	// GetSchemas returns all schemas across the specified clusters.
	GetSchemas(context.Context, *connect.Request[v22.GetSchemasRequest]) (*connect.Response[v22.GetSchemasResponse], error)
	// GetSchemaMigrations returns one or more online schema migrations for the
	// set of keyspaces (or all keyspaces) in the given clusters, analagous to
	// repeated executions of `SHOW VITESS_MIGRATIONS`.
	//
	// Different fields in the request message result in different behaviors.
	// See the documentation on vtctldata.GetSchemaMigrationsRequest for details.
	GetSchemaMigrations(context.Context, *connect.Request[v22.GetSchemaMigrationsRequest]) (*connect.Response[v22.GetSchemaMigrationsResponse], error)
	// GetShardReplicationPositions returns shard replication positions grouped
	// by cluster.
	GetShardReplicationPositions(context.Context, *connect.Request[v22.GetShardReplicationPositionsRequest]) (*connect.Response[v22.GetShardReplicationPositionsResponse], error)
	// GetSrvKeyspace returns the SrvKeyspace for a keyspace in one or more cells.
	GetSrvKeyspace(context.Context, *connect.Request[v22.GetSrvKeyspaceRequest]) (*connect.Response[v221.GetSrvKeyspacesResponse], error)
	// GetSrvKeyspaces returns the SrvKeyspaces for all keyspaces across all the specified clusters.
	GetSrvKeyspaces(context.Context, *connect.Request[v22.GetSrvKeyspacesRequest]) (*connect.Response[v22.GetSrvKeyspacesResponse], error)
	// GetSrvVSchema returns the SrvVSchema for the given cluster and cell.
	GetSrvVSchema(context.Context, *connect.Request[v22.GetSrvVSchemaRequest]) (*connect.Response[v22.SrvVSchema], error)
	// GetSrvVSchemas returns all SrvVSchemas across all (or specified) clusters
	// and cells.
	GetSrvVSchemas(context.Context, *connect.Request[v22.GetSrvVSchemasRequest]) (*connect.Response[v22.GetSrvVSchemasResponse], error)
	// GetTablet looks up a tablet by hostname across all clusters and returns
	// the result.
	GetTablet(context.Context, *connect.Request[v22.GetTabletRequest]) (*connect.Response[v22.Tablet], error)
	// GetTablets returns all tablets across all the specified clusters.
	GetTablets(context.Context, *connect.Request[v22.GetTabletsRequest]) (*connect.Response[v22.GetTabletsResponse], error)
	// GetTopologyPath returns the cell located at the specified path in the topology server.
	GetTopologyPath(context.Context, *connect.Request[v22.GetTopologyPathRequest]) (*connect.Response[v221.GetTopologyPathResponse], error)
	// GetTransactionInfo returns the information about a single transaction.
	GetTransactionInfo(context.Context, *connect.Request[v22.GetTransactionInfoRequest]) (*connect.Response[v221.GetTransactionInfoResponse], error)
	// GetUnresolvedTransactions returns the unresolved transactions for the request.
	GetUnresolvedTransactions(context.Context, *connect.Request[v22.GetUnresolvedTransactionsRequest]) (*connect.Response[v221.GetUnresolvedTransactionsResponse], error)
	// GetVSchema returns a VSchema for the specified keyspace in the specified
	// cluster.
	GetVSchema(context.Context, *connect.Request[v22.GetVSchemaRequest]) (*connect.Response[v22.VSchema], error)
	// GetVSchemas returns the VSchemas for all specified clusters.
	GetVSchemas(context.Context, *connect.Request[v22.GetVSchemasRequest]) (*connect.Response[v22.GetVSchemasResponse], error)
	// GetVtctlds returns the Vtctlds for all specified clusters.
	GetVtctlds(context.Context, *connect.Request[v22.GetVtctldsRequest]) (*connect.Response[v22.GetVtctldsResponse], error)
	// GetWorkflow returns a single Workflow for a given cluster, keyspace, and
	// workflow name.
	GetWorkflow(context.Context, *connect.Request[v22.GetWorkflowRequest]) (*connect.Response[v22.Workflow], error)
	// GetWorkflows returns the Workflows for all specified clusters.
	GetWorkflows(context.Context, *connect.Request[v22.GetWorkflowsRequest]) (*connect.Response[v22.GetWorkflowsResponse], error)
	// GetWorkflowStatus returns the status for a specific workflow.
	GetWorkflowStatus(context.Context, *connect.Request[v22.GetWorkflowStatusRequest]) (*connect.Response[v221.WorkflowStatusResponse], error)
	// StartWorkflow starts a vreplication workflow.
	StartWorkflow(context.Context, *connect.Request[v22.StartWorkflowRequest]) (*connect.Response[v221.WorkflowUpdateResponse], error)
	// StopWorkflow stops a vreplication workflow.
	StopWorkflow(context.Context, *connect.Request[v22.StopWorkflowRequest]) (*connect.Response[v221.WorkflowUpdateResponse], error)
	// LaunchSchemaMigration launches one or all migrations in the given
	// cluster executed with --postpone-launch.
	LaunchSchemaMigration(context.Context, *connect.Request[v22.LaunchSchemaMigrationRequest]) (*connect.Response[v221.LaunchSchemaMigrationResponse], error)
	// MoveTablesComplete completes the move and cleans up the workflow and
	// its related artifacts.
	MoveTablesComplete(context.Context, *connect.Request[v22.MoveTablesCompleteRequest]) (*connect.Response[v221.MoveTablesCompleteResponse], error)
	// MoveTablesCreate creates a workflow which moves one or more tables from a
	// source keyspace to a target keyspace.
	MoveTablesCreate(context.Context, *connect.Request[v22.MoveTablesCreateRequest]) (*connect.Response[v221.WorkflowStatusResponse], error)
	// MaterializeCreate creates a workflow to materialize one or more tables
	// from a source keyspace to a target keyspace using a provided expressions.
	MaterializeCreate(context.Context, *connect.Request[v22.MaterializeCreateRequest]) (*connect.Response[v221.MaterializeCreateResponse], error)
	// PingTablet checks that the specified tablet is awake and responding to
	// RPCs. This command can be blocked by other in-flight operations.
	PingTablet(context.Context, *connect.Request[v22.PingTabletRequest]) (*connect.Response[v22.PingTabletResponse], error)
	// PlannedFailoverShard fails over the shard to a new primary, or away from
	// an old primary. Both the old and new primaries must be reachable and
	// running.
	//
	// NOTE: A planned failover will not consider replicas outside the current
	// shard primary's cell as promotion candidates unless NewPrimary is
	// explicitly provided in the request.
	PlannedFailoverShard(context.Context, *connect.Request[v22.PlannedFailoverShardRequest]) (*connect.Response[v22.PlannedFailoverShardResponse], error)
	// RebuildKeyspaceGraph rebuilds the serving data for a keyspace.
	RebuildKeyspaceGraph(context.Context, *connect.Request[v22.RebuildKeyspaceGraphRequest]) (*connect.Response[v22.RebuildKeyspaceGraphResponse], error)
	// RefreshState reloads the tablet record on the specified tablet.
	RefreshState(context.Context, *connect.Request[v22.RefreshStateRequest]) (*connect.Response[v22.RefreshStateResponse], error)
	// RefreshTabletReplicationSource performs a `CHANGE REPLICATION SOURCE TO`
	// on a tablet to replicate from the current primary in the shard.
	RefreshTabletReplicationSource(context.Context, *connect.Request[v22.RefreshTabletReplicationSourceRequest]) (*connect.Response[v22.RefreshTabletReplicationSourceResponse], error)
	// ReloadSchemas reloads the schema definition across keyspaces, shards, or
	// tablets in one or more clusters, depending on the request fields (see
	// ReloadSchemasRequest for details).
	ReloadSchemas(context.Context, *connect.Request[v22.ReloadSchemasRequest]) (*connect.Response[v22.ReloadSchemasResponse], error)
	// ReloadSchemaShard reloads the schema on all tablets in a shard. This is done on a best-effort basis.
	ReloadSchemaShard(context.Context, *connect.Request[v22.ReloadSchemaShardRequest]) (*connect.Response[v22.ReloadSchemaShardResponse], error)
	// RemoveKeyspaceCell removes the cell from the Cells list for all shards in the keyspace, and the SrvKeyspace for that keyspace in that cell.
	RemoveKeyspaceCell(context.Context, *connect.Request[v22.RemoveKeyspaceCellRequest]) (*connect.Response[v22.RemoveKeyspaceCellResponse], error)
	// RetrySchemaMigration marks a given schema migration in the given cluster
	// for retry.
	RetrySchemaMigration(context.Context, *connect.Request[v22.RetrySchemaMigrationRequest]) (*connect.Response[v221.RetrySchemaMigrationResponse], error)
	// RunHealthCheck runs a healthcheck on the tablet.
	RunHealthCheck(context.Context, *connect.Request[v22.RunHealthCheckRequest]) (*connect.Response[v22.RunHealthCheckResponse], error)
	// ReshardCreate creates a workflow to reshard a keyspace.
	ReshardCreate(context.Context, *connect.Request[v22.ReshardCreateRequest]) (*connect.Response[v221.WorkflowStatusResponse], error)
	// SetReadOnly sets the tablet to read-only mode.
	SetReadOnly(context.Context, *connect.Request[v22.SetReadOnlyRequest]) (*connect.Response[v22.SetReadOnlyResponse], error)
	// SetReadWrite sets the tablet to read-write mode.
	SetReadWrite(context.Context, *connect.Request[v22.SetReadWriteRequest]) (*connect.Response[v22.SetReadWriteResponse], error)
	// StartReplication runs the underlying database command to start
	// replication on a tablet.
	StartReplication(context.Context, *connect.Request[v22.StartReplicationRequest]) (*connect.Response[v22.StartReplicationResponse], error)
	// StopReplication runs the underlying database command to stop replication
	// on a tablet
	StopReplication(context.Context, *connect.Request[v22.StopReplicationRequest]) (*connect.Response[v22.StopReplicationResponse], error)
	// TabletExternallyPromoted updates the metadata in a cluster's topology
	// to acknowledge a shard primary change performed by an external tool
	// (e.g. orchestrator*).
	//
	// See the Reparenting guide for more information:
	// https://vitess.io/docs/user-guides/configuration-advanced/reparenting/#external-reparenting.
	//
	// * "orchestrator" here refers to external orchestrator, not the newer,
	// Vitess-aware orchestrator, VTOrc.
	TabletExternallyPromoted(context.Context, *connect.Request[v22.TabletExternallyPromotedRequest]) (*connect.Response[v22.TabletExternallyPromotedResponse], error)
	// Validate validates all nodes in a cluster that are reachable from the global replication graph,
	// as well as all tablets in discoverable cells, are consistent
	Validate(context.Context, *connect.Request[v22.ValidateRequest]) (*connect.Response[v221.ValidateResponse], error)
	// ValidateKeyspace validates that all nodes reachable from the specified
	// keyspace are consistent.
	ValidateKeyspace(context.Context, *connect.Request[v22.ValidateKeyspaceRequest]) (*connect.Response[v221.ValidateKeyspaceResponse], error)
	// ValidateSchemaKeyspace validates that the schema on the primary tablet
	// for shard 0 matches the schema on all of the other tablets in the
	// keyspace.
	ValidateSchemaKeyspace(context.Context, *connect.Request[v22.ValidateSchemaKeyspaceRequest]) (*connect.Response[v221.ValidateSchemaKeyspaceResponse], error)
	// ValidateShard validates that that all nodes reachable from the specified shard are consistent.
	ValidateShard(context.Context, *connect.Request[v22.ValidateShardRequest]) (*connect.Response[v221.ValidateShardResponse], error)
	// ValidateVersionKeyspace validates that the version on the primary of
	// shard 0 matches all of the other tablets in the keyspace.
	ValidateVersionKeyspace(context.Context, *connect.Request[v22.ValidateVersionKeyspaceRequest]) (*connect.Response[v221.ValidateVersionKeyspaceResponse], error)
	// ValidateVersionShard validates that the version on the primary matches all of the replicas.
	ValidateVersionShard(context.Context, *connect.Request[v22.ValidateVersionShardRequest]) (*connect.Response[v221.ValidateVersionShardResponse], error)
	VDiffCreate(context.Context, *connect.Request[v22.VDiffCreateRequest]) (*connect.Response[v221.VDiffCreateResponse], error)
	VDiffShow(context.Context, *connect.Request[v22.VDiffShowRequest]) (*connect.Response[v22.VDiffShowResponse], error)
	// VTExplain provides information on how Vitess plans to execute a
	// particular query.
	VTExplain(context.Context, *connect.Request[v22.VTExplainRequest]) (*connect.Response[v22.VTExplainResponse], error)
	// VExplain provides information on how Vitess plans to execute a
	// particular query.
	VExplain(context.Context, *connect.Request[v22.VExplainRequest]) (*connect.Response[v22.VExplainResponse], error)
	// WorkflowDelete deletes a vreplication workflow.
	WorkflowDelete(context.Context, *connect.Request[v22.WorkflowDeleteRequest]) (*connect.Response[v221.WorkflowDeleteResponse], error)
	// WorkflowSwitchTraffic switches traffic for a VReplication workflow.
	WorkflowSwitchTraffic(context.Context, *connect.Request[v22.WorkflowSwitchTrafficRequest]) (*connect.Response[v221.WorkflowSwitchTrafficResponse], error)
}

// NewVTAdminHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVTAdminHandler(svc VTAdminHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vTAdminMethods := v22.File_vitess_vtadmin_v22_vtadmin_proto.Services().ByName("VTAdmin").Methods()
	vTAdminApplySchemaHandler := connect.NewUnaryHandler(
		VTAdminApplySchemaProcedure,
		svc.ApplySchema,
		connect.WithSchema(vTAdminMethods.ByName("ApplySchema")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminCancelSchemaMigrationHandler := connect.NewUnaryHandler(
		VTAdminCancelSchemaMigrationProcedure,
		svc.CancelSchemaMigration,
		connect.WithSchema(vTAdminMethods.ByName("CancelSchemaMigration")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminCleanupSchemaMigrationHandler := connect.NewUnaryHandler(
		VTAdminCleanupSchemaMigrationProcedure,
		svc.CleanupSchemaMigration,
		connect.WithSchema(vTAdminMethods.ByName("CleanupSchemaMigration")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminCompleteSchemaMigrationHandler := connect.NewUnaryHandler(
		VTAdminCompleteSchemaMigrationProcedure,
		svc.CompleteSchemaMigration,
		connect.WithSchema(vTAdminMethods.ByName("CompleteSchemaMigration")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminConcludeTransactionHandler := connect.NewUnaryHandler(
		VTAdminConcludeTransactionProcedure,
		svc.ConcludeTransaction,
		connect.WithSchema(vTAdminMethods.ByName("ConcludeTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminCreateKeyspaceHandler := connect.NewUnaryHandler(
		VTAdminCreateKeyspaceProcedure,
		svc.CreateKeyspace,
		connect.WithSchema(vTAdminMethods.ByName("CreateKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminCreateShardHandler := connect.NewUnaryHandler(
		VTAdminCreateShardProcedure,
		svc.CreateShard,
		connect.WithSchema(vTAdminMethods.ByName("CreateShard")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminDeleteKeyspaceHandler := connect.NewUnaryHandler(
		VTAdminDeleteKeyspaceProcedure,
		svc.DeleteKeyspace,
		connect.WithSchema(vTAdminMethods.ByName("DeleteKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminDeleteShardsHandler := connect.NewUnaryHandler(
		VTAdminDeleteShardsProcedure,
		svc.DeleteShards,
		connect.WithSchema(vTAdminMethods.ByName("DeleteShards")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminDeleteTabletHandler := connect.NewUnaryHandler(
		VTAdminDeleteTabletProcedure,
		svc.DeleteTablet,
		connect.WithSchema(vTAdminMethods.ByName("DeleteTablet")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminEmergencyFailoverShardHandler := connect.NewUnaryHandler(
		VTAdminEmergencyFailoverShardProcedure,
		svc.EmergencyFailoverShard,
		connect.WithSchema(vTAdminMethods.ByName("EmergencyFailoverShard")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminFindSchemaHandler := connect.NewUnaryHandler(
		VTAdminFindSchemaProcedure,
		svc.FindSchema,
		connect.WithSchema(vTAdminMethods.ByName("FindSchema")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetBackupsHandler := connect.NewUnaryHandler(
		VTAdminGetBackupsProcedure,
		svc.GetBackups,
		connect.WithSchema(vTAdminMethods.ByName("GetBackups")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetCellInfosHandler := connect.NewUnaryHandler(
		VTAdminGetCellInfosProcedure,
		svc.GetCellInfos,
		connect.WithSchema(vTAdminMethods.ByName("GetCellInfos")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetCellsAliasesHandler := connect.NewUnaryHandler(
		VTAdminGetCellsAliasesProcedure,
		svc.GetCellsAliases,
		connect.WithSchema(vTAdminMethods.ByName("GetCellsAliases")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetClustersHandler := connect.NewUnaryHandler(
		VTAdminGetClustersProcedure,
		svc.GetClusters,
		connect.WithSchema(vTAdminMethods.ByName("GetClusters")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetFullStatusHandler := connect.NewUnaryHandler(
		VTAdminGetFullStatusProcedure,
		svc.GetFullStatus,
		connect.WithSchema(vTAdminMethods.ByName("GetFullStatus")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetGatesHandler := connect.NewUnaryHandler(
		VTAdminGetGatesProcedure,
		svc.GetGates,
		connect.WithSchema(vTAdminMethods.ByName("GetGates")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetKeyspaceHandler := connect.NewUnaryHandler(
		VTAdminGetKeyspaceProcedure,
		svc.GetKeyspace,
		connect.WithSchema(vTAdminMethods.ByName("GetKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetKeyspacesHandler := connect.NewUnaryHandler(
		VTAdminGetKeyspacesProcedure,
		svc.GetKeyspaces,
		connect.WithSchema(vTAdminMethods.ByName("GetKeyspaces")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetSchemaHandler := connect.NewUnaryHandler(
		VTAdminGetSchemaProcedure,
		svc.GetSchema,
		connect.WithSchema(vTAdminMethods.ByName("GetSchema")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetSchemasHandler := connect.NewUnaryHandler(
		VTAdminGetSchemasProcedure,
		svc.GetSchemas,
		connect.WithSchema(vTAdminMethods.ByName("GetSchemas")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetSchemaMigrationsHandler := connect.NewUnaryHandler(
		VTAdminGetSchemaMigrationsProcedure,
		svc.GetSchemaMigrations,
		connect.WithSchema(vTAdminMethods.ByName("GetSchemaMigrations")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetShardReplicationPositionsHandler := connect.NewUnaryHandler(
		VTAdminGetShardReplicationPositionsProcedure,
		svc.GetShardReplicationPositions,
		connect.WithSchema(vTAdminMethods.ByName("GetShardReplicationPositions")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetSrvKeyspaceHandler := connect.NewUnaryHandler(
		VTAdminGetSrvKeyspaceProcedure,
		svc.GetSrvKeyspace,
		connect.WithSchema(vTAdminMethods.ByName("GetSrvKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetSrvKeyspacesHandler := connect.NewUnaryHandler(
		VTAdminGetSrvKeyspacesProcedure,
		svc.GetSrvKeyspaces,
		connect.WithSchema(vTAdminMethods.ByName("GetSrvKeyspaces")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetSrvVSchemaHandler := connect.NewUnaryHandler(
		VTAdminGetSrvVSchemaProcedure,
		svc.GetSrvVSchema,
		connect.WithSchema(vTAdminMethods.ByName("GetSrvVSchema")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetSrvVSchemasHandler := connect.NewUnaryHandler(
		VTAdminGetSrvVSchemasProcedure,
		svc.GetSrvVSchemas,
		connect.WithSchema(vTAdminMethods.ByName("GetSrvVSchemas")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetTabletHandler := connect.NewUnaryHandler(
		VTAdminGetTabletProcedure,
		svc.GetTablet,
		connect.WithSchema(vTAdminMethods.ByName("GetTablet")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetTabletsHandler := connect.NewUnaryHandler(
		VTAdminGetTabletsProcedure,
		svc.GetTablets,
		connect.WithSchema(vTAdminMethods.ByName("GetTablets")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetTopologyPathHandler := connect.NewUnaryHandler(
		VTAdminGetTopologyPathProcedure,
		svc.GetTopologyPath,
		connect.WithSchema(vTAdminMethods.ByName("GetTopologyPath")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetTransactionInfoHandler := connect.NewUnaryHandler(
		VTAdminGetTransactionInfoProcedure,
		svc.GetTransactionInfo,
		connect.WithSchema(vTAdminMethods.ByName("GetTransactionInfo")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetUnresolvedTransactionsHandler := connect.NewUnaryHandler(
		VTAdminGetUnresolvedTransactionsProcedure,
		svc.GetUnresolvedTransactions,
		connect.WithSchema(vTAdminMethods.ByName("GetUnresolvedTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetVSchemaHandler := connect.NewUnaryHandler(
		VTAdminGetVSchemaProcedure,
		svc.GetVSchema,
		connect.WithSchema(vTAdminMethods.ByName("GetVSchema")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetVSchemasHandler := connect.NewUnaryHandler(
		VTAdminGetVSchemasProcedure,
		svc.GetVSchemas,
		connect.WithSchema(vTAdminMethods.ByName("GetVSchemas")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetVtctldsHandler := connect.NewUnaryHandler(
		VTAdminGetVtctldsProcedure,
		svc.GetVtctlds,
		connect.WithSchema(vTAdminMethods.ByName("GetVtctlds")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetWorkflowHandler := connect.NewUnaryHandler(
		VTAdminGetWorkflowProcedure,
		svc.GetWorkflow,
		connect.WithSchema(vTAdminMethods.ByName("GetWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetWorkflowsHandler := connect.NewUnaryHandler(
		VTAdminGetWorkflowsProcedure,
		svc.GetWorkflows,
		connect.WithSchema(vTAdminMethods.ByName("GetWorkflows")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminGetWorkflowStatusHandler := connect.NewUnaryHandler(
		VTAdminGetWorkflowStatusProcedure,
		svc.GetWorkflowStatus,
		connect.WithSchema(vTAdminMethods.ByName("GetWorkflowStatus")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminStartWorkflowHandler := connect.NewUnaryHandler(
		VTAdminStartWorkflowProcedure,
		svc.StartWorkflow,
		connect.WithSchema(vTAdminMethods.ByName("StartWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminStopWorkflowHandler := connect.NewUnaryHandler(
		VTAdminStopWorkflowProcedure,
		svc.StopWorkflow,
		connect.WithSchema(vTAdminMethods.ByName("StopWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminLaunchSchemaMigrationHandler := connect.NewUnaryHandler(
		VTAdminLaunchSchemaMigrationProcedure,
		svc.LaunchSchemaMigration,
		connect.WithSchema(vTAdminMethods.ByName("LaunchSchemaMigration")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminMoveTablesCompleteHandler := connect.NewUnaryHandler(
		VTAdminMoveTablesCompleteProcedure,
		svc.MoveTablesComplete,
		connect.WithSchema(vTAdminMethods.ByName("MoveTablesComplete")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminMoveTablesCreateHandler := connect.NewUnaryHandler(
		VTAdminMoveTablesCreateProcedure,
		svc.MoveTablesCreate,
		connect.WithSchema(vTAdminMethods.ByName("MoveTablesCreate")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminMaterializeCreateHandler := connect.NewUnaryHandler(
		VTAdminMaterializeCreateProcedure,
		svc.MaterializeCreate,
		connect.WithSchema(vTAdminMethods.ByName("MaterializeCreate")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminPingTabletHandler := connect.NewUnaryHandler(
		VTAdminPingTabletProcedure,
		svc.PingTablet,
		connect.WithSchema(vTAdminMethods.ByName("PingTablet")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminPlannedFailoverShardHandler := connect.NewUnaryHandler(
		VTAdminPlannedFailoverShardProcedure,
		svc.PlannedFailoverShard,
		connect.WithSchema(vTAdminMethods.ByName("PlannedFailoverShard")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminRebuildKeyspaceGraphHandler := connect.NewUnaryHandler(
		VTAdminRebuildKeyspaceGraphProcedure,
		svc.RebuildKeyspaceGraph,
		connect.WithSchema(vTAdminMethods.ByName("RebuildKeyspaceGraph")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminRefreshStateHandler := connect.NewUnaryHandler(
		VTAdminRefreshStateProcedure,
		svc.RefreshState,
		connect.WithSchema(vTAdminMethods.ByName("RefreshState")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminRefreshTabletReplicationSourceHandler := connect.NewUnaryHandler(
		VTAdminRefreshTabletReplicationSourceProcedure,
		svc.RefreshTabletReplicationSource,
		connect.WithSchema(vTAdminMethods.ByName("RefreshTabletReplicationSource")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminReloadSchemasHandler := connect.NewUnaryHandler(
		VTAdminReloadSchemasProcedure,
		svc.ReloadSchemas,
		connect.WithSchema(vTAdminMethods.ByName("ReloadSchemas")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminReloadSchemaShardHandler := connect.NewUnaryHandler(
		VTAdminReloadSchemaShardProcedure,
		svc.ReloadSchemaShard,
		connect.WithSchema(vTAdminMethods.ByName("ReloadSchemaShard")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminRemoveKeyspaceCellHandler := connect.NewUnaryHandler(
		VTAdminRemoveKeyspaceCellProcedure,
		svc.RemoveKeyspaceCell,
		connect.WithSchema(vTAdminMethods.ByName("RemoveKeyspaceCell")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminRetrySchemaMigrationHandler := connect.NewUnaryHandler(
		VTAdminRetrySchemaMigrationProcedure,
		svc.RetrySchemaMigration,
		connect.WithSchema(vTAdminMethods.ByName("RetrySchemaMigration")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminRunHealthCheckHandler := connect.NewUnaryHandler(
		VTAdminRunHealthCheckProcedure,
		svc.RunHealthCheck,
		connect.WithSchema(vTAdminMethods.ByName("RunHealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminReshardCreateHandler := connect.NewUnaryHandler(
		VTAdminReshardCreateProcedure,
		svc.ReshardCreate,
		connect.WithSchema(vTAdminMethods.ByName("ReshardCreate")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminSetReadOnlyHandler := connect.NewUnaryHandler(
		VTAdminSetReadOnlyProcedure,
		svc.SetReadOnly,
		connect.WithSchema(vTAdminMethods.ByName("SetReadOnly")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminSetReadWriteHandler := connect.NewUnaryHandler(
		VTAdminSetReadWriteProcedure,
		svc.SetReadWrite,
		connect.WithSchema(vTAdminMethods.ByName("SetReadWrite")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminStartReplicationHandler := connect.NewUnaryHandler(
		VTAdminStartReplicationProcedure,
		svc.StartReplication,
		connect.WithSchema(vTAdminMethods.ByName("StartReplication")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminStopReplicationHandler := connect.NewUnaryHandler(
		VTAdminStopReplicationProcedure,
		svc.StopReplication,
		connect.WithSchema(vTAdminMethods.ByName("StopReplication")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminTabletExternallyPromotedHandler := connect.NewUnaryHandler(
		VTAdminTabletExternallyPromotedProcedure,
		svc.TabletExternallyPromoted,
		connect.WithSchema(vTAdminMethods.ByName("TabletExternallyPromoted")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminValidateHandler := connect.NewUnaryHandler(
		VTAdminValidateProcedure,
		svc.Validate,
		connect.WithSchema(vTAdminMethods.ByName("Validate")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminValidateKeyspaceHandler := connect.NewUnaryHandler(
		VTAdminValidateKeyspaceProcedure,
		svc.ValidateKeyspace,
		connect.WithSchema(vTAdminMethods.ByName("ValidateKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminValidateSchemaKeyspaceHandler := connect.NewUnaryHandler(
		VTAdminValidateSchemaKeyspaceProcedure,
		svc.ValidateSchemaKeyspace,
		connect.WithSchema(vTAdminMethods.ByName("ValidateSchemaKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminValidateShardHandler := connect.NewUnaryHandler(
		VTAdminValidateShardProcedure,
		svc.ValidateShard,
		connect.WithSchema(vTAdminMethods.ByName("ValidateShard")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminValidateVersionKeyspaceHandler := connect.NewUnaryHandler(
		VTAdminValidateVersionKeyspaceProcedure,
		svc.ValidateVersionKeyspace,
		connect.WithSchema(vTAdminMethods.ByName("ValidateVersionKeyspace")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminValidateVersionShardHandler := connect.NewUnaryHandler(
		VTAdminValidateVersionShardProcedure,
		svc.ValidateVersionShard,
		connect.WithSchema(vTAdminMethods.ByName("ValidateVersionShard")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminVDiffCreateHandler := connect.NewUnaryHandler(
		VTAdminVDiffCreateProcedure,
		svc.VDiffCreate,
		connect.WithSchema(vTAdminMethods.ByName("VDiffCreate")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminVDiffShowHandler := connect.NewUnaryHandler(
		VTAdminVDiffShowProcedure,
		svc.VDiffShow,
		connect.WithSchema(vTAdminMethods.ByName("VDiffShow")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminVTExplainHandler := connect.NewUnaryHandler(
		VTAdminVTExplainProcedure,
		svc.VTExplain,
		connect.WithSchema(vTAdminMethods.ByName("VTExplain")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminVExplainHandler := connect.NewUnaryHandler(
		VTAdminVExplainProcedure,
		svc.VExplain,
		connect.WithSchema(vTAdminMethods.ByName("VExplain")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminWorkflowDeleteHandler := connect.NewUnaryHandler(
		VTAdminWorkflowDeleteProcedure,
		svc.WorkflowDelete,
		connect.WithSchema(vTAdminMethods.ByName("WorkflowDelete")),
		connect.WithHandlerOptions(opts...),
	)
	vTAdminWorkflowSwitchTrafficHandler := connect.NewUnaryHandler(
		VTAdminWorkflowSwitchTrafficProcedure,
		svc.WorkflowSwitchTraffic,
		connect.WithSchema(vTAdminMethods.ByName("WorkflowSwitchTraffic")),
		connect.WithHandlerOptions(opts...),
	)
	return "/vitess.vtadmin.v22.VTAdmin/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VTAdminApplySchemaProcedure:
			vTAdminApplySchemaHandler.ServeHTTP(w, r)
		case VTAdminCancelSchemaMigrationProcedure:
			vTAdminCancelSchemaMigrationHandler.ServeHTTP(w, r)
		case VTAdminCleanupSchemaMigrationProcedure:
			vTAdminCleanupSchemaMigrationHandler.ServeHTTP(w, r)
		case VTAdminCompleteSchemaMigrationProcedure:
			vTAdminCompleteSchemaMigrationHandler.ServeHTTP(w, r)
		case VTAdminConcludeTransactionProcedure:
			vTAdminConcludeTransactionHandler.ServeHTTP(w, r)
		case VTAdminCreateKeyspaceProcedure:
			vTAdminCreateKeyspaceHandler.ServeHTTP(w, r)
		case VTAdminCreateShardProcedure:
			vTAdminCreateShardHandler.ServeHTTP(w, r)
		case VTAdminDeleteKeyspaceProcedure:
			vTAdminDeleteKeyspaceHandler.ServeHTTP(w, r)
		case VTAdminDeleteShardsProcedure:
			vTAdminDeleteShardsHandler.ServeHTTP(w, r)
		case VTAdminDeleteTabletProcedure:
			vTAdminDeleteTabletHandler.ServeHTTP(w, r)
		case VTAdminEmergencyFailoverShardProcedure:
			vTAdminEmergencyFailoverShardHandler.ServeHTTP(w, r)
		case VTAdminFindSchemaProcedure:
			vTAdminFindSchemaHandler.ServeHTTP(w, r)
		case VTAdminGetBackupsProcedure:
			vTAdminGetBackupsHandler.ServeHTTP(w, r)
		case VTAdminGetCellInfosProcedure:
			vTAdminGetCellInfosHandler.ServeHTTP(w, r)
		case VTAdminGetCellsAliasesProcedure:
			vTAdminGetCellsAliasesHandler.ServeHTTP(w, r)
		case VTAdminGetClustersProcedure:
			vTAdminGetClustersHandler.ServeHTTP(w, r)
		case VTAdminGetFullStatusProcedure:
			vTAdminGetFullStatusHandler.ServeHTTP(w, r)
		case VTAdminGetGatesProcedure:
			vTAdminGetGatesHandler.ServeHTTP(w, r)
		case VTAdminGetKeyspaceProcedure:
			vTAdminGetKeyspaceHandler.ServeHTTP(w, r)
		case VTAdminGetKeyspacesProcedure:
			vTAdminGetKeyspacesHandler.ServeHTTP(w, r)
		case VTAdminGetSchemaProcedure:
			vTAdminGetSchemaHandler.ServeHTTP(w, r)
		case VTAdminGetSchemasProcedure:
			vTAdminGetSchemasHandler.ServeHTTP(w, r)
		case VTAdminGetSchemaMigrationsProcedure:
			vTAdminGetSchemaMigrationsHandler.ServeHTTP(w, r)
		case VTAdminGetShardReplicationPositionsProcedure:
			vTAdminGetShardReplicationPositionsHandler.ServeHTTP(w, r)
		case VTAdminGetSrvKeyspaceProcedure:
			vTAdminGetSrvKeyspaceHandler.ServeHTTP(w, r)
		case VTAdminGetSrvKeyspacesProcedure:
			vTAdminGetSrvKeyspacesHandler.ServeHTTP(w, r)
		case VTAdminGetSrvVSchemaProcedure:
			vTAdminGetSrvVSchemaHandler.ServeHTTP(w, r)
		case VTAdminGetSrvVSchemasProcedure:
			vTAdminGetSrvVSchemasHandler.ServeHTTP(w, r)
		case VTAdminGetTabletProcedure:
			vTAdminGetTabletHandler.ServeHTTP(w, r)
		case VTAdminGetTabletsProcedure:
			vTAdminGetTabletsHandler.ServeHTTP(w, r)
		case VTAdminGetTopologyPathProcedure:
			vTAdminGetTopologyPathHandler.ServeHTTP(w, r)
		case VTAdminGetTransactionInfoProcedure:
			vTAdminGetTransactionInfoHandler.ServeHTTP(w, r)
		case VTAdminGetUnresolvedTransactionsProcedure:
			vTAdminGetUnresolvedTransactionsHandler.ServeHTTP(w, r)
		case VTAdminGetVSchemaProcedure:
			vTAdminGetVSchemaHandler.ServeHTTP(w, r)
		case VTAdminGetVSchemasProcedure:
			vTAdminGetVSchemasHandler.ServeHTTP(w, r)
		case VTAdminGetVtctldsProcedure:
			vTAdminGetVtctldsHandler.ServeHTTP(w, r)
		case VTAdminGetWorkflowProcedure:
			vTAdminGetWorkflowHandler.ServeHTTP(w, r)
		case VTAdminGetWorkflowsProcedure:
			vTAdminGetWorkflowsHandler.ServeHTTP(w, r)
		case VTAdminGetWorkflowStatusProcedure:
			vTAdminGetWorkflowStatusHandler.ServeHTTP(w, r)
		case VTAdminStartWorkflowProcedure:
			vTAdminStartWorkflowHandler.ServeHTTP(w, r)
		case VTAdminStopWorkflowProcedure:
			vTAdminStopWorkflowHandler.ServeHTTP(w, r)
		case VTAdminLaunchSchemaMigrationProcedure:
			vTAdminLaunchSchemaMigrationHandler.ServeHTTP(w, r)
		case VTAdminMoveTablesCompleteProcedure:
			vTAdminMoveTablesCompleteHandler.ServeHTTP(w, r)
		case VTAdminMoveTablesCreateProcedure:
			vTAdminMoveTablesCreateHandler.ServeHTTP(w, r)
		case VTAdminMaterializeCreateProcedure:
			vTAdminMaterializeCreateHandler.ServeHTTP(w, r)
		case VTAdminPingTabletProcedure:
			vTAdminPingTabletHandler.ServeHTTP(w, r)
		case VTAdminPlannedFailoverShardProcedure:
			vTAdminPlannedFailoverShardHandler.ServeHTTP(w, r)
		case VTAdminRebuildKeyspaceGraphProcedure:
			vTAdminRebuildKeyspaceGraphHandler.ServeHTTP(w, r)
		case VTAdminRefreshStateProcedure:
			vTAdminRefreshStateHandler.ServeHTTP(w, r)
		case VTAdminRefreshTabletReplicationSourceProcedure:
			vTAdminRefreshTabletReplicationSourceHandler.ServeHTTP(w, r)
		case VTAdminReloadSchemasProcedure:
			vTAdminReloadSchemasHandler.ServeHTTP(w, r)
		case VTAdminReloadSchemaShardProcedure:
			vTAdminReloadSchemaShardHandler.ServeHTTP(w, r)
		case VTAdminRemoveKeyspaceCellProcedure:
			vTAdminRemoveKeyspaceCellHandler.ServeHTTP(w, r)
		case VTAdminRetrySchemaMigrationProcedure:
			vTAdminRetrySchemaMigrationHandler.ServeHTTP(w, r)
		case VTAdminRunHealthCheckProcedure:
			vTAdminRunHealthCheckHandler.ServeHTTP(w, r)
		case VTAdminReshardCreateProcedure:
			vTAdminReshardCreateHandler.ServeHTTP(w, r)
		case VTAdminSetReadOnlyProcedure:
			vTAdminSetReadOnlyHandler.ServeHTTP(w, r)
		case VTAdminSetReadWriteProcedure:
			vTAdminSetReadWriteHandler.ServeHTTP(w, r)
		case VTAdminStartReplicationProcedure:
			vTAdminStartReplicationHandler.ServeHTTP(w, r)
		case VTAdminStopReplicationProcedure:
			vTAdminStopReplicationHandler.ServeHTTP(w, r)
		case VTAdminTabletExternallyPromotedProcedure:
			vTAdminTabletExternallyPromotedHandler.ServeHTTP(w, r)
		case VTAdminValidateProcedure:
			vTAdminValidateHandler.ServeHTTP(w, r)
		case VTAdminValidateKeyspaceProcedure:
			vTAdminValidateKeyspaceHandler.ServeHTTP(w, r)
		case VTAdminValidateSchemaKeyspaceProcedure:
			vTAdminValidateSchemaKeyspaceHandler.ServeHTTP(w, r)
		case VTAdminValidateShardProcedure:
			vTAdminValidateShardHandler.ServeHTTP(w, r)
		case VTAdminValidateVersionKeyspaceProcedure:
			vTAdminValidateVersionKeyspaceHandler.ServeHTTP(w, r)
		case VTAdminValidateVersionShardProcedure:
			vTAdminValidateVersionShardHandler.ServeHTTP(w, r)
		case VTAdminVDiffCreateProcedure:
			vTAdminVDiffCreateHandler.ServeHTTP(w, r)
		case VTAdminVDiffShowProcedure:
			vTAdminVDiffShowHandler.ServeHTTP(w, r)
		case VTAdminVTExplainProcedure:
			vTAdminVTExplainHandler.ServeHTTP(w, r)
		case VTAdminVExplainProcedure:
			vTAdminVExplainHandler.ServeHTTP(w, r)
		case VTAdminWorkflowDeleteProcedure:
			vTAdminWorkflowDeleteHandler.ServeHTTP(w, r)
		case VTAdminWorkflowSwitchTrafficProcedure:
			vTAdminWorkflowSwitchTrafficHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVTAdminHandler returns CodeUnimplemented from all methods.
type UnimplementedVTAdminHandler struct{}

func (UnimplementedVTAdminHandler) ApplySchema(context.Context, *connect.Request[v22.ApplySchemaRequest]) (*connect.Response[v221.ApplySchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.ApplySchema is not implemented"))
}

func (UnimplementedVTAdminHandler) CancelSchemaMigration(context.Context, *connect.Request[v22.CancelSchemaMigrationRequest]) (*connect.Response[v221.CancelSchemaMigrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.CancelSchemaMigration is not implemented"))
}

func (UnimplementedVTAdminHandler) CleanupSchemaMigration(context.Context, *connect.Request[v22.CleanupSchemaMigrationRequest]) (*connect.Response[v221.CleanupSchemaMigrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.CleanupSchemaMigration is not implemented"))
}

func (UnimplementedVTAdminHandler) CompleteSchemaMigration(context.Context, *connect.Request[v22.CompleteSchemaMigrationRequest]) (*connect.Response[v221.CompleteSchemaMigrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.CompleteSchemaMigration is not implemented"))
}

func (UnimplementedVTAdminHandler) ConcludeTransaction(context.Context, *connect.Request[v22.ConcludeTransactionRequest]) (*connect.Response[v221.ConcludeTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.ConcludeTransaction is not implemented"))
}

func (UnimplementedVTAdminHandler) CreateKeyspace(context.Context, *connect.Request[v22.CreateKeyspaceRequest]) (*connect.Response[v22.CreateKeyspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.CreateKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) CreateShard(context.Context, *connect.Request[v22.CreateShardRequest]) (*connect.Response[v221.CreateShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.CreateShard is not implemented"))
}

func (UnimplementedVTAdminHandler) DeleteKeyspace(context.Context, *connect.Request[v22.DeleteKeyspaceRequest]) (*connect.Response[v221.DeleteKeyspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.DeleteKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) DeleteShards(context.Context, *connect.Request[v22.DeleteShardsRequest]) (*connect.Response[v221.DeleteShardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.DeleteShards is not implemented"))
}

func (UnimplementedVTAdminHandler) DeleteTablet(context.Context, *connect.Request[v22.DeleteTabletRequest]) (*connect.Response[v22.DeleteTabletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.DeleteTablet is not implemented"))
}

func (UnimplementedVTAdminHandler) EmergencyFailoverShard(context.Context, *connect.Request[v22.EmergencyFailoverShardRequest]) (*connect.Response[v22.EmergencyFailoverShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.EmergencyFailoverShard is not implemented"))
}

func (UnimplementedVTAdminHandler) FindSchema(context.Context, *connect.Request[v22.FindSchemaRequest]) (*connect.Response[v22.Schema], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.FindSchema is not implemented"))
}

func (UnimplementedVTAdminHandler) GetBackups(context.Context, *connect.Request[v22.GetBackupsRequest]) (*connect.Response[v22.GetBackupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetBackups is not implemented"))
}

func (UnimplementedVTAdminHandler) GetCellInfos(context.Context, *connect.Request[v22.GetCellInfosRequest]) (*connect.Response[v22.GetCellInfosResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetCellInfos is not implemented"))
}

func (UnimplementedVTAdminHandler) GetCellsAliases(context.Context, *connect.Request[v22.GetCellsAliasesRequest]) (*connect.Response[v22.GetCellsAliasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetCellsAliases is not implemented"))
}

func (UnimplementedVTAdminHandler) GetClusters(context.Context, *connect.Request[v22.GetClustersRequest]) (*connect.Response[v22.GetClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetClusters is not implemented"))
}

func (UnimplementedVTAdminHandler) GetFullStatus(context.Context, *connect.Request[v22.GetFullStatusRequest]) (*connect.Response[v221.GetFullStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetFullStatus is not implemented"))
}

func (UnimplementedVTAdminHandler) GetGates(context.Context, *connect.Request[v22.GetGatesRequest]) (*connect.Response[v22.GetGatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetGates is not implemented"))
}

func (UnimplementedVTAdminHandler) GetKeyspace(context.Context, *connect.Request[v22.GetKeyspaceRequest]) (*connect.Response[v22.Keyspace], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) GetKeyspaces(context.Context, *connect.Request[v22.GetKeyspacesRequest]) (*connect.Response[v22.GetKeyspacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetKeyspaces is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSchema(context.Context, *connect.Request[v22.GetSchemaRequest]) (*connect.Response[v22.Schema], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetSchema is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSchemas(context.Context, *connect.Request[v22.GetSchemasRequest]) (*connect.Response[v22.GetSchemasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetSchemas is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSchemaMigrations(context.Context, *connect.Request[v22.GetSchemaMigrationsRequest]) (*connect.Response[v22.GetSchemaMigrationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetSchemaMigrations is not implemented"))
}

func (UnimplementedVTAdminHandler) GetShardReplicationPositions(context.Context, *connect.Request[v22.GetShardReplicationPositionsRequest]) (*connect.Response[v22.GetShardReplicationPositionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetShardReplicationPositions is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSrvKeyspace(context.Context, *connect.Request[v22.GetSrvKeyspaceRequest]) (*connect.Response[v221.GetSrvKeyspacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetSrvKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSrvKeyspaces(context.Context, *connect.Request[v22.GetSrvKeyspacesRequest]) (*connect.Response[v22.GetSrvKeyspacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetSrvKeyspaces is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSrvVSchema(context.Context, *connect.Request[v22.GetSrvVSchemaRequest]) (*connect.Response[v22.SrvVSchema], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetSrvVSchema is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSrvVSchemas(context.Context, *connect.Request[v22.GetSrvVSchemasRequest]) (*connect.Response[v22.GetSrvVSchemasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetSrvVSchemas is not implemented"))
}

func (UnimplementedVTAdminHandler) GetTablet(context.Context, *connect.Request[v22.GetTabletRequest]) (*connect.Response[v22.Tablet], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetTablet is not implemented"))
}

func (UnimplementedVTAdminHandler) GetTablets(context.Context, *connect.Request[v22.GetTabletsRequest]) (*connect.Response[v22.GetTabletsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetTablets is not implemented"))
}

func (UnimplementedVTAdminHandler) GetTopologyPath(context.Context, *connect.Request[v22.GetTopologyPathRequest]) (*connect.Response[v221.GetTopologyPathResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetTopologyPath is not implemented"))
}

func (UnimplementedVTAdminHandler) GetTransactionInfo(context.Context, *connect.Request[v22.GetTransactionInfoRequest]) (*connect.Response[v221.GetTransactionInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetTransactionInfo is not implemented"))
}

func (UnimplementedVTAdminHandler) GetUnresolvedTransactions(context.Context, *connect.Request[v22.GetUnresolvedTransactionsRequest]) (*connect.Response[v221.GetUnresolvedTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetUnresolvedTransactions is not implemented"))
}

func (UnimplementedVTAdminHandler) GetVSchema(context.Context, *connect.Request[v22.GetVSchemaRequest]) (*connect.Response[v22.VSchema], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetVSchema is not implemented"))
}

func (UnimplementedVTAdminHandler) GetVSchemas(context.Context, *connect.Request[v22.GetVSchemasRequest]) (*connect.Response[v22.GetVSchemasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetVSchemas is not implemented"))
}

func (UnimplementedVTAdminHandler) GetVtctlds(context.Context, *connect.Request[v22.GetVtctldsRequest]) (*connect.Response[v22.GetVtctldsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetVtctlds is not implemented"))
}

func (UnimplementedVTAdminHandler) GetWorkflow(context.Context, *connect.Request[v22.GetWorkflowRequest]) (*connect.Response[v22.Workflow], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetWorkflow is not implemented"))
}

func (UnimplementedVTAdminHandler) GetWorkflows(context.Context, *connect.Request[v22.GetWorkflowsRequest]) (*connect.Response[v22.GetWorkflowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetWorkflows is not implemented"))
}

func (UnimplementedVTAdminHandler) GetWorkflowStatus(context.Context, *connect.Request[v22.GetWorkflowStatusRequest]) (*connect.Response[v221.WorkflowStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.GetWorkflowStatus is not implemented"))
}

func (UnimplementedVTAdminHandler) StartWorkflow(context.Context, *connect.Request[v22.StartWorkflowRequest]) (*connect.Response[v221.WorkflowUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.StartWorkflow is not implemented"))
}

func (UnimplementedVTAdminHandler) StopWorkflow(context.Context, *connect.Request[v22.StopWorkflowRequest]) (*connect.Response[v221.WorkflowUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.StopWorkflow is not implemented"))
}

func (UnimplementedVTAdminHandler) LaunchSchemaMigration(context.Context, *connect.Request[v22.LaunchSchemaMigrationRequest]) (*connect.Response[v221.LaunchSchemaMigrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.LaunchSchemaMigration is not implemented"))
}

func (UnimplementedVTAdminHandler) MoveTablesComplete(context.Context, *connect.Request[v22.MoveTablesCompleteRequest]) (*connect.Response[v221.MoveTablesCompleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.MoveTablesComplete is not implemented"))
}

func (UnimplementedVTAdminHandler) MoveTablesCreate(context.Context, *connect.Request[v22.MoveTablesCreateRequest]) (*connect.Response[v221.WorkflowStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.MoveTablesCreate is not implemented"))
}

func (UnimplementedVTAdminHandler) MaterializeCreate(context.Context, *connect.Request[v22.MaterializeCreateRequest]) (*connect.Response[v221.MaterializeCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.MaterializeCreate is not implemented"))
}

func (UnimplementedVTAdminHandler) PingTablet(context.Context, *connect.Request[v22.PingTabletRequest]) (*connect.Response[v22.PingTabletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.PingTablet is not implemented"))
}

func (UnimplementedVTAdminHandler) PlannedFailoverShard(context.Context, *connect.Request[v22.PlannedFailoverShardRequest]) (*connect.Response[v22.PlannedFailoverShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.PlannedFailoverShard is not implemented"))
}

func (UnimplementedVTAdminHandler) RebuildKeyspaceGraph(context.Context, *connect.Request[v22.RebuildKeyspaceGraphRequest]) (*connect.Response[v22.RebuildKeyspaceGraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.RebuildKeyspaceGraph is not implemented"))
}

func (UnimplementedVTAdminHandler) RefreshState(context.Context, *connect.Request[v22.RefreshStateRequest]) (*connect.Response[v22.RefreshStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.RefreshState is not implemented"))
}

func (UnimplementedVTAdminHandler) RefreshTabletReplicationSource(context.Context, *connect.Request[v22.RefreshTabletReplicationSourceRequest]) (*connect.Response[v22.RefreshTabletReplicationSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.RefreshTabletReplicationSource is not implemented"))
}

func (UnimplementedVTAdminHandler) ReloadSchemas(context.Context, *connect.Request[v22.ReloadSchemasRequest]) (*connect.Response[v22.ReloadSchemasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.ReloadSchemas is not implemented"))
}

func (UnimplementedVTAdminHandler) ReloadSchemaShard(context.Context, *connect.Request[v22.ReloadSchemaShardRequest]) (*connect.Response[v22.ReloadSchemaShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.ReloadSchemaShard is not implemented"))
}

func (UnimplementedVTAdminHandler) RemoveKeyspaceCell(context.Context, *connect.Request[v22.RemoveKeyspaceCellRequest]) (*connect.Response[v22.RemoveKeyspaceCellResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.RemoveKeyspaceCell is not implemented"))
}

func (UnimplementedVTAdminHandler) RetrySchemaMigration(context.Context, *connect.Request[v22.RetrySchemaMigrationRequest]) (*connect.Response[v221.RetrySchemaMigrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.RetrySchemaMigration is not implemented"))
}

func (UnimplementedVTAdminHandler) RunHealthCheck(context.Context, *connect.Request[v22.RunHealthCheckRequest]) (*connect.Response[v22.RunHealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.RunHealthCheck is not implemented"))
}

func (UnimplementedVTAdminHandler) ReshardCreate(context.Context, *connect.Request[v22.ReshardCreateRequest]) (*connect.Response[v221.WorkflowStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.ReshardCreate is not implemented"))
}

func (UnimplementedVTAdminHandler) SetReadOnly(context.Context, *connect.Request[v22.SetReadOnlyRequest]) (*connect.Response[v22.SetReadOnlyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.SetReadOnly is not implemented"))
}

func (UnimplementedVTAdminHandler) SetReadWrite(context.Context, *connect.Request[v22.SetReadWriteRequest]) (*connect.Response[v22.SetReadWriteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.SetReadWrite is not implemented"))
}

func (UnimplementedVTAdminHandler) StartReplication(context.Context, *connect.Request[v22.StartReplicationRequest]) (*connect.Response[v22.StartReplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.StartReplication is not implemented"))
}

func (UnimplementedVTAdminHandler) StopReplication(context.Context, *connect.Request[v22.StopReplicationRequest]) (*connect.Response[v22.StopReplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.StopReplication is not implemented"))
}

func (UnimplementedVTAdminHandler) TabletExternallyPromoted(context.Context, *connect.Request[v22.TabletExternallyPromotedRequest]) (*connect.Response[v22.TabletExternallyPromotedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.TabletExternallyPromoted is not implemented"))
}

func (UnimplementedVTAdminHandler) Validate(context.Context, *connect.Request[v22.ValidateRequest]) (*connect.Response[v221.ValidateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.Validate is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateKeyspace(context.Context, *connect.Request[v22.ValidateKeyspaceRequest]) (*connect.Response[v221.ValidateKeyspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.ValidateKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateSchemaKeyspace(context.Context, *connect.Request[v22.ValidateSchemaKeyspaceRequest]) (*connect.Response[v221.ValidateSchemaKeyspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.ValidateSchemaKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateShard(context.Context, *connect.Request[v22.ValidateShardRequest]) (*connect.Response[v221.ValidateShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.ValidateShard is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateVersionKeyspace(context.Context, *connect.Request[v22.ValidateVersionKeyspaceRequest]) (*connect.Response[v221.ValidateVersionKeyspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.ValidateVersionKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateVersionShard(context.Context, *connect.Request[v22.ValidateVersionShardRequest]) (*connect.Response[v221.ValidateVersionShardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.ValidateVersionShard is not implemented"))
}

func (UnimplementedVTAdminHandler) VDiffCreate(context.Context, *connect.Request[v22.VDiffCreateRequest]) (*connect.Response[v221.VDiffCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.VDiffCreate is not implemented"))
}

func (UnimplementedVTAdminHandler) VDiffShow(context.Context, *connect.Request[v22.VDiffShowRequest]) (*connect.Response[v22.VDiffShowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.VDiffShow is not implemented"))
}

func (UnimplementedVTAdminHandler) VTExplain(context.Context, *connect.Request[v22.VTExplainRequest]) (*connect.Response[v22.VTExplainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.VTExplain is not implemented"))
}

func (UnimplementedVTAdminHandler) VExplain(context.Context, *connect.Request[v22.VExplainRequest]) (*connect.Response[v22.VExplainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.VExplain is not implemented"))
}

func (UnimplementedVTAdminHandler) WorkflowDelete(context.Context, *connect.Request[v22.WorkflowDeleteRequest]) (*connect.Response[v221.WorkflowDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.WorkflowDelete is not implemented"))
}

func (UnimplementedVTAdminHandler) WorkflowSwitchTraffic(context.Context, *connect.Request[v22.WorkflowSwitchTrafficRequest]) (*connect.Response[v221.WorkflowSwitchTrafficResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtadmin.v22.VTAdmin.WorkflowSwitchTraffic is not implemented"))
}
