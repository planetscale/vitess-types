//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
// This file contains the service definition for making management API
// calls to VtTablet.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vitess/tabletmanagerservice/dev/tabletmanagerservice.proto

package tabletmanagerservicedevconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	dev "github.com/planetscale/vitess-types/gen/vitess/tabletmanagerdata/dev"
	_ "github.com/planetscale/vitess-types/gen/vitess/tabletmanagerservice/dev"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TabletManagerName is the fully-qualified name of the TabletManager service.
	TabletManagerName = "vitess.tabletmanagerservice.dev.TabletManager"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TabletManagerPingProcedure is the fully-qualified name of the TabletManager's Ping RPC.
	TabletManagerPingProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/Ping"
	// TabletManagerSleepProcedure is the fully-qualified name of the TabletManager's Sleep RPC.
	TabletManagerSleepProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/Sleep"
	// TabletManagerExecuteHookProcedure is the fully-qualified name of the TabletManager's ExecuteHook
	// RPC.
	TabletManagerExecuteHookProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/ExecuteHook"
	// TabletManagerGetSchemaProcedure is the fully-qualified name of the TabletManager's GetSchema RPC.
	TabletManagerGetSchemaProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/GetSchema"
	// TabletManagerGetPermissionsProcedure is the fully-qualified name of the TabletManager's
	// GetPermissions RPC.
	TabletManagerGetPermissionsProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/GetPermissions"
	// TabletManagerSetReadOnlyProcedure is the fully-qualified name of the TabletManager's SetReadOnly
	// RPC.
	TabletManagerSetReadOnlyProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/SetReadOnly"
	// TabletManagerSetReadWriteProcedure is the fully-qualified name of the TabletManager's
	// SetReadWrite RPC.
	TabletManagerSetReadWriteProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/SetReadWrite"
	// TabletManagerChangeTypeProcedure is the fully-qualified name of the TabletManager's ChangeType
	// RPC.
	TabletManagerChangeTypeProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/ChangeType"
	// TabletManagerRefreshStateProcedure is the fully-qualified name of the TabletManager's
	// RefreshState RPC.
	TabletManagerRefreshStateProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/RefreshState"
	// TabletManagerRunHealthCheckProcedure is the fully-qualified name of the TabletManager's
	// RunHealthCheck RPC.
	TabletManagerRunHealthCheckProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/RunHealthCheck"
	// TabletManagerReloadSchemaProcedure is the fully-qualified name of the TabletManager's
	// ReloadSchema RPC.
	TabletManagerReloadSchemaProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/ReloadSchema"
	// TabletManagerPreflightSchemaProcedure is the fully-qualified name of the TabletManager's
	// PreflightSchema RPC.
	TabletManagerPreflightSchemaProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/PreflightSchema"
	// TabletManagerApplySchemaProcedure is the fully-qualified name of the TabletManager's ApplySchema
	// RPC.
	TabletManagerApplySchemaProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/ApplySchema"
	// TabletManagerLockTablesProcedure is the fully-qualified name of the TabletManager's LockTables
	// RPC.
	TabletManagerLockTablesProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/LockTables"
	// TabletManagerUnlockTablesProcedure is the fully-qualified name of the TabletManager's
	// UnlockTables RPC.
	TabletManagerUnlockTablesProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/UnlockTables"
	// TabletManagerExecuteQueryProcedure is the fully-qualified name of the TabletManager's
	// ExecuteQuery RPC.
	TabletManagerExecuteQueryProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/ExecuteQuery"
	// TabletManagerExecuteFetchAsDbaProcedure is the fully-qualified name of the TabletManager's
	// ExecuteFetchAsDba RPC.
	TabletManagerExecuteFetchAsDbaProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/ExecuteFetchAsDba"
	// TabletManagerExecuteFetchAsAllPrivsProcedure is the fully-qualified name of the TabletManager's
	// ExecuteFetchAsAllPrivs RPC.
	TabletManagerExecuteFetchAsAllPrivsProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/ExecuteFetchAsAllPrivs"
	// TabletManagerExecuteFetchAsAppProcedure is the fully-qualified name of the TabletManager's
	// ExecuteFetchAsApp RPC.
	TabletManagerExecuteFetchAsAppProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/ExecuteFetchAsApp"
	// TabletManagerReplicationStatusProcedure is the fully-qualified name of the TabletManager's
	// ReplicationStatus RPC.
	TabletManagerReplicationStatusProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/ReplicationStatus"
	// TabletManagerPrimaryStatusProcedure is the fully-qualified name of the TabletManager's
	// PrimaryStatus RPC.
	TabletManagerPrimaryStatusProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/PrimaryStatus"
	// TabletManagerPrimaryPositionProcedure is the fully-qualified name of the TabletManager's
	// PrimaryPosition RPC.
	TabletManagerPrimaryPositionProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/PrimaryPosition"
	// TabletManagerWaitForPositionProcedure is the fully-qualified name of the TabletManager's
	// WaitForPosition RPC.
	TabletManagerWaitForPositionProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/WaitForPosition"
	// TabletManagerStopReplicationProcedure is the fully-qualified name of the TabletManager's
	// StopReplication RPC.
	TabletManagerStopReplicationProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/StopReplication"
	// TabletManagerStopReplicationMinimumProcedure is the fully-qualified name of the TabletManager's
	// StopReplicationMinimum RPC.
	TabletManagerStopReplicationMinimumProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/StopReplicationMinimum"
	// TabletManagerStartReplicationProcedure is the fully-qualified name of the TabletManager's
	// StartReplication RPC.
	TabletManagerStartReplicationProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/StartReplication"
	// TabletManagerStartReplicationUntilAfterProcedure is the fully-qualified name of the
	// TabletManager's StartReplicationUntilAfter RPC.
	TabletManagerStartReplicationUntilAfterProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/StartReplicationUntilAfter"
	// TabletManagerGetReplicasProcedure is the fully-qualified name of the TabletManager's GetReplicas
	// RPC.
	TabletManagerGetReplicasProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/GetReplicas"
	// TabletManagerVReplicationExecProcedure is the fully-qualified name of the TabletManager's
	// VReplicationExec RPC.
	TabletManagerVReplicationExecProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/VReplicationExec"
	// TabletManagerVReplicationWaitForPosProcedure is the fully-qualified name of the TabletManager's
	// VReplicationWaitForPos RPC.
	TabletManagerVReplicationWaitForPosProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/VReplicationWaitForPos"
	// TabletManagerUpdateVRWorkflowProcedure is the fully-qualified name of the TabletManager's
	// UpdateVRWorkflow RPC.
	TabletManagerUpdateVRWorkflowProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/UpdateVRWorkflow"
	// TabletManagerVDiffProcedure is the fully-qualified name of the TabletManager's VDiff RPC.
	TabletManagerVDiffProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/VDiff"
	// TabletManagerResetReplicationProcedure is the fully-qualified name of the TabletManager's
	// ResetReplication RPC.
	TabletManagerResetReplicationProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/ResetReplication"
	// TabletManagerInitPrimaryProcedure is the fully-qualified name of the TabletManager's InitPrimary
	// RPC.
	TabletManagerInitPrimaryProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/InitPrimary"
	// TabletManagerPopulateReparentJournalProcedure is the fully-qualified name of the TabletManager's
	// PopulateReparentJournal RPC.
	TabletManagerPopulateReparentJournalProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/PopulateReparentJournal"
	// TabletManagerInitReplicaProcedure is the fully-qualified name of the TabletManager's InitReplica
	// RPC.
	TabletManagerInitReplicaProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/InitReplica"
	// TabletManagerDemotePrimaryProcedure is the fully-qualified name of the TabletManager's
	// DemotePrimary RPC.
	TabletManagerDemotePrimaryProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/DemotePrimary"
	// TabletManagerUndoDemotePrimaryProcedure is the fully-qualified name of the TabletManager's
	// UndoDemotePrimary RPC.
	TabletManagerUndoDemotePrimaryProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/UndoDemotePrimary"
	// TabletManagerReplicaWasPromotedProcedure is the fully-qualified name of the TabletManager's
	// ReplicaWasPromoted RPC.
	TabletManagerReplicaWasPromotedProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/ReplicaWasPromoted"
	// TabletManagerResetReplicationParametersProcedure is the fully-qualified name of the
	// TabletManager's ResetReplicationParameters RPC.
	TabletManagerResetReplicationParametersProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/ResetReplicationParameters"
	// TabletManagerFullStatusProcedure is the fully-qualified name of the TabletManager's FullStatus
	// RPC.
	TabletManagerFullStatusProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/FullStatus"
	// TabletManagerSetReplicationSourceProcedure is the fully-qualified name of the TabletManager's
	// SetReplicationSource RPC.
	TabletManagerSetReplicationSourceProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/SetReplicationSource"
	// TabletManagerReplicaWasRestartedProcedure is the fully-qualified name of the TabletManager's
	// ReplicaWasRestarted RPC.
	TabletManagerReplicaWasRestartedProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/ReplicaWasRestarted"
	// TabletManagerStopReplicationAndGetStatusProcedure is the fully-qualified name of the
	// TabletManager's StopReplicationAndGetStatus RPC.
	TabletManagerStopReplicationAndGetStatusProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/StopReplicationAndGetStatus"
	// TabletManagerPromoteReplicaProcedure is the fully-qualified name of the TabletManager's
	// PromoteReplica RPC.
	TabletManagerPromoteReplicaProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/PromoteReplica"
	// TabletManagerBackupProcedure is the fully-qualified name of the TabletManager's Backup RPC.
	TabletManagerBackupProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/Backup"
	// TabletManagerRestoreFromBackupProcedure is the fully-qualified name of the TabletManager's
	// RestoreFromBackup RPC.
	TabletManagerRestoreFromBackupProcedure = "/vitess.tabletmanagerservice.dev.TabletManager/RestoreFromBackup"
)

// TabletManagerClient is a client for the vitess.tabletmanagerservice.dev.TabletManager service.
type TabletManagerClient interface {
	// Ping returns the input payload
	Ping(context.Context, *connect_go.Request[dev.PingRequest]) (*connect_go.Response[dev.PingResponse], error)
	// Sleep sleeps for the provided duration
	Sleep(context.Context, *connect_go.Request[dev.SleepRequest]) (*connect_go.Response[dev.SleepResponse], error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(context.Context, *connect_go.Request[dev.ExecuteHookRequest]) (*connect_go.Response[dev.ExecuteHookResponse], error)
	// GetSchema asks the tablet for its schema
	GetSchema(context.Context, *connect_go.Request[dev.GetSchemaRequest]) (*connect_go.Response[dev.GetSchemaResponse], error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(context.Context, *connect_go.Request[dev.GetPermissionsRequest]) (*connect_go.Response[dev.GetPermissionsResponse], error)
	SetReadOnly(context.Context, *connect_go.Request[dev.SetReadOnlyRequest]) (*connect_go.Response[dev.SetReadOnlyResponse], error)
	SetReadWrite(context.Context, *connect_go.Request[dev.SetReadWriteRequest]) (*connect_go.Response[dev.SetReadWriteResponse], error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(context.Context, *connect_go.Request[dev.ChangeTypeRequest]) (*connect_go.Response[dev.ChangeTypeResponse], error)
	RefreshState(context.Context, *connect_go.Request[dev.RefreshStateRequest]) (*connect_go.Response[dev.RefreshStateResponse], error)
	RunHealthCheck(context.Context, *connect_go.Request[dev.RunHealthCheckRequest]) (*connect_go.Response[dev.RunHealthCheckResponse], error)
	ReloadSchema(context.Context, *connect_go.Request[dev.ReloadSchemaRequest]) (*connect_go.Response[dev.ReloadSchemaResponse], error)
	PreflightSchema(context.Context, *connect_go.Request[dev.PreflightSchemaRequest]) (*connect_go.Response[dev.PreflightSchemaResponse], error)
	ApplySchema(context.Context, *connect_go.Request[dev.ApplySchemaRequest]) (*connect_go.Response[dev.ApplySchemaResponse], error)
	LockTables(context.Context, *connect_go.Request[dev.LockTablesRequest]) (*connect_go.Response[dev.LockTablesResponse], error)
	UnlockTables(context.Context, *connect_go.Request[dev.UnlockTablesRequest]) (*connect_go.Response[dev.UnlockTablesResponse], error)
	ExecuteQuery(context.Context, *connect_go.Request[dev.ExecuteQueryRequest]) (*connect_go.Response[dev.ExecuteQueryResponse], error)
	ExecuteFetchAsDba(context.Context, *connect_go.Request[dev.ExecuteFetchAsDbaRequest]) (*connect_go.Response[dev.ExecuteFetchAsDbaResponse], error)
	ExecuteFetchAsAllPrivs(context.Context, *connect_go.Request[dev.ExecuteFetchAsAllPrivsRequest]) (*connect_go.Response[dev.ExecuteFetchAsAllPrivsResponse], error)
	ExecuteFetchAsApp(context.Context, *connect_go.Request[dev.ExecuteFetchAsAppRequest]) (*connect_go.Response[dev.ExecuteFetchAsAppResponse], error)
	// ReplicationStatus returns the current replication status.
	ReplicationStatus(context.Context, *connect_go.Request[dev.ReplicationStatusRequest]) (*connect_go.Response[dev.ReplicationStatusResponse], error)
	// PrimaryStatus returns the current primary status.
	PrimaryStatus(context.Context, *connect_go.Request[dev.PrimaryStatusRequest]) (*connect_go.Response[dev.PrimaryStatusResponse], error)
	// PrimaryPosition returns the current primary position
	PrimaryPosition(context.Context, *connect_go.Request[dev.PrimaryPositionRequest]) (*connect_go.Response[dev.PrimaryPositionResponse], error)
	// WaitForPosition waits for the position to be reached
	WaitForPosition(context.Context, *connect_go.Request[dev.WaitForPositionRequest]) (*connect_go.Response[dev.WaitForPositionResponse], error)
	// StopReplication makes mysql stop its replication
	StopReplication(context.Context, *connect_go.Request[dev.StopReplicationRequest]) (*connect_go.Response[dev.StopReplicationResponse], error)
	// StopReplicationMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopReplicationMinimum(context.Context, *connect_go.Request[dev.StopReplicationMinimumRequest]) (*connect_go.Response[dev.StopReplicationMinimumResponse], error)
	// StartReplication starts the mysql replication
	StartReplication(context.Context, *connect_go.Request[dev.StartReplicationRequest]) (*connect_go.Response[dev.StartReplicationResponse], error)
	// StartReplicationUnitAfter starts the mysql replication until and including
	// the provided position
	StartReplicationUntilAfter(context.Context, *connect_go.Request[dev.StartReplicationUntilAfterRequest]) (*connect_go.Response[dev.StartReplicationUntilAfterResponse], error)
	// GetReplicas asks for the list of mysql replicas
	GetReplicas(context.Context, *connect_go.Request[dev.GetReplicasRequest]) (*connect_go.Response[dev.GetReplicasResponse], error)
	// VReplication API
	VReplicationExec(context.Context, *connect_go.Request[dev.VReplicationExecRequest]) (*connect_go.Response[dev.VReplicationExecResponse], error)
	VReplicationWaitForPos(context.Context, *connect_go.Request[dev.VReplicationWaitForPosRequest]) (*connect_go.Response[dev.VReplicationWaitForPosResponse], error)
	UpdateVRWorkflow(context.Context, *connect_go.Request[dev.UpdateVRWorkflowRequest]) (*connect_go.Response[dev.UpdateVRWorkflowResponse], error)
	// VDiff API
	VDiff(context.Context, *connect_go.Request[dev.VDiffRequest]) (*connect_go.Response[dev.VDiffResponse], error)
	// ResetReplication makes the target not replicating
	ResetReplication(context.Context, *connect_go.Request[dev.ResetReplicationRequest]) (*connect_go.Response[dev.ResetReplicationResponse], error)
	// InitPrimary initializes the tablet as a primary
	InitPrimary(context.Context, *connect_go.Request[dev.InitPrimaryRequest]) (*connect_go.Response[dev.InitPrimaryResponse], error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(context.Context, *connect_go.Request[dev.PopulateReparentJournalRequest]) (*connect_go.Response[dev.PopulateReparentJournalResponse], error)
	// InitReplica tells the tablet to reparent to the primary unconditionally
	InitReplica(context.Context, *connect_go.Request[dev.InitReplicaRequest]) (*connect_go.Response[dev.InitReplicaResponse], error)
	// DemotePrimary tells the soon-to-be-former primary it's gonna change
	DemotePrimary(context.Context, *connect_go.Request[dev.DemotePrimaryRequest]) (*connect_go.Response[dev.DemotePrimaryResponse], error)
	// UndoDemotePrimary reverts all changes made by DemotePrimary
	UndoDemotePrimary(context.Context, *connect_go.Request[dev.UndoDemotePrimaryRequest]) (*connect_go.Response[dev.UndoDemotePrimaryResponse], error)
	// ReplicaWasPromoted tells the remote tablet it is now the primary
	ReplicaWasPromoted(context.Context, *connect_go.Request[dev.ReplicaWasPromotedRequest]) (*connect_go.Response[dev.ReplicaWasPromotedResponse], error)
	// ResetReplicationParameters resets the replica replication parameters
	ResetReplicationParameters(context.Context, *connect_go.Request[dev.ResetReplicationParametersRequest]) (*connect_go.Response[dev.ResetReplicationParametersResponse], error)
	// FullStatus collects and returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	FullStatus(context.Context, *connect_go.Request[dev.FullStatusRequest]) (*connect_go.Response[dev.FullStatusResponse], error)
	// SetReplicationSource tells the replica to reparent
	SetReplicationSource(context.Context, *connect_go.Request[dev.SetReplicationSourceRequest]) (*connect_go.Response[dev.SetReplicationSourceResponse], error)
	// ReplicaWasRestarted tells the remote tablet its primary has changed
	ReplicaWasRestarted(context.Context, *connect_go.Request[dev.ReplicaWasRestartedRequest]) (*connect_go.Response[dev.ReplicaWasRestartedResponse], error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(context.Context, *connect_go.Request[dev.StopReplicationAndGetStatusRequest]) (*connect_go.Response[dev.StopReplicationAndGetStatusResponse], error)
	// PromoteReplica makes the replica the new primary
	PromoteReplica(context.Context, *connect_go.Request[dev.PromoteReplicaRequest]) (*connect_go.Response[dev.PromoteReplicaResponse], error)
	Backup(context.Context, *connect_go.Request[dev.BackupRequest]) (*connect_go.ServerStreamForClient[dev.BackupResponse], error)
	// RestoreFromBackup deletes all local data and restores it from the latest backup.
	RestoreFromBackup(context.Context, *connect_go.Request[dev.RestoreFromBackupRequest]) (*connect_go.ServerStreamForClient[dev.RestoreFromBackupResponse], error)
}

// NewTabletManagerClient constructs a client for the vitess.tabletmanagerservice.dev.TabletManager
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTabletManagerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TabletManagerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tabletManagerClient{
		ping: connect_go.NewClient[dev.PingRequest, dev.PingResponse](
			httpClient,
			baseURL+TabletManagerPingProcedure,
			opts...,
		),
		sleep: connect_go.NewClient[dev.SleepRequest, dev.SleepResponse](
			httpClient,
			baseURL+TabletManagerSleepProcedure,
			opts...,
		),
		executeHook: connect_go.NewClient[dev.ExecuteHookRequest, dev.ExecuteHookResponse](
			httpClient,
			baseURL+TabletManagerExecuteHookProcedure,
			opts...,
		),
		getSchema: connect_go.NewClient[dev.GetSchemaRequest, dev.GetSchemaResponse](
			httpClient,
			baseURL+TabletManagerGetSchemaProcedure,
			opts...,
		),
		getPermissions: connect_go.NewClient[dev.GetPermissionsRequest, dev.GetPermissionsResponse](
			httpClient,
			baseURL+TabletManagerGetPermissionsProcedure,
			opts...,
		),
		setReadOnly: connect_go.NewClient[dev.SetReadOnlyRequest, dev.SetReadOnlyResponse](
			httpClient,
			baseURL+TabletManagerSetReadOnlyProcedure,
			opts...,
		),
		setReadWrite: connect_go.NewClient[dev.SetReadWriteRequest, dev.SetReadWriteResponse](
			httpClient,
			baseURL+TabletManagerSetReadWriteProcedure,
			opts...,
		),
		changeType: connect_go.NewClient[dev.ChangeTypeRequest, dev.ChangeTypeResponse](
			httpClient,
			baseURL+TabletManagerChangeTypeProcedure,
			opts...,
		),
		refreshState: connect_go.NewClient[dev.RefreshStateRequest, dev.RefreshStateResponse](
			httpClient,
			baseURL+TabletManagerRefreshStateProcedure,
			opts...,
		),
		runHealthCheck: connect_go.NewClient[dev.RunHealthCheckRequest, dev.RunHealthCheckResponse](
			httpClient,
			baseURL+TabletManagerRunHealthCheckProcedure,
			opts...,
		),
		reloadSchema: connect_go.NewClient[dev.ReloadSchemaRequest, dev.ReloadSchemaResponse](
			httpClient,
			baseURL+TabletManagerReloadSchemaProcedure,
			opts...,
		),
		preflightSchema: connect_go.NewClient[dev.PreflightSchemaRequest, dev.PreflightSchemaResponse](
			httpClient,
			baseURL+TabletManagerPreflightSchemaProcedure,
			opts...,
		),
		applySchema: connect_go.NewClient[dev.ApplySchemaRequest, dev.ApplySchemaResponse](
			httpClient,
			baseURL+TabletManagerApplySchemaProcedure,
			opts...,
		),
		lockTables: connect_go.NewClient[dev.LockTablesRequest, dev.LockTablesResponse](
			httpClient,
			baseURL+TabletManagerLockTablesProcedure,
			opts...,
		),
		unlockTables: connect_go.NewClient[dev.UnlockTablesRequest, dev.UnlockTablesResponse](
			httpClient,
			baseURL+TabletManagerUnlockTablesProcedure,
			opts...,
		),
		executeQuery: connect_go.NewClient[dev.ExecuteQueryRequest, dev.ExecuteQueryResponse](
			httpClient,
			baseURL+TabletManagerExecuteQueryProcedure,
			opts...,
		),
		executeFetchAsDba: connect_go.NewClient[dev.ExecuteFetchAsDbaRequest, dev.ExecuteFetchAsDbaResponse](
			httpClient,
			baseURL+TabletManagerExecuteFetchAsDbaProcedure,
			opts...,
		),
		executeFetchAsAllPrivs: connect_go.NewClient[dev.ExecuteFetchAsAllPrivsRequest, dev.ExecuteFetchAsAllPrivsResponse](
			httpClient,
			baseURL+TabletManagerExecuteFetchAsAllPrivsProcedure,
			opts...,
		),
		executeFetchAsApp: connect_go.NewClient[dev.ExecuteFetchAsAppRequest, dev.ExecuteFetchAsAppResponse](
			httpClient,
			baseURL+TabletManagerExecuteFetchAsAppProcedure,
			opts...,
		),
		replicationStatus: connect_go.NewClient[dev.ReplicationStatusRequest, dev.ReplicationStatusResponse](
			httpClient,
			baseURL+TabletManagerReplicationStatusProcedure,
			opts...,
		),
		primaryStatus: connect_go.NewClient[dev.PrimaryStatusRequest, dev.PrimaryStatusResponse](
			httpClient,
			baseURL+TabletManagerPrimaryStatusProcedure,
			opts...,
		),
		primaryPosition: connect_go.NewClient[dev.PrimaryPositionRequest, dev.PrimaryPositionResponse](
			httpClient,
			baseURL+TabletManagerPrimaryPositionProcedure,
			opts...,
		),
		waitForPosition: connect_go.NewClient[dev.WaitForPositionRequest, dev.WaitForPositionResponse](
			httpClient,
			baseURL+TabletManagerWaitForPositionProcedure,
			opts...,
		),
		stopReplication: connect_go.NewClient[dev.StopReplicationRequest, dev.StopReplicationResponse](
			httpClient,
			baseURL+TabletManagerStopReplicationProcedure,
			opts...,
		),
		stopReplicationMinimum: connect_go.NewClient[dev.StopReplicationMinimumRequest, dev.StopReplicationMinimumResponse](
			httpClient,
			baseURL+TabletManagerStopReplicationMinimumProcedure,
			opts...,
		),
		startReplication: connect_go.NewClient[dev.StartReplicationRequest, dev.StartReplicationResponse](
			httpClient,
			baseURL+TabletManagerStartReplicationProcedure,
			opts...,
		),
		startReplicationUntilAfter: connect_go.NewClient[dev.StartReplicationUntilAfterRequest, dev.StartReplicationUntilAfterResponse](
			httpClient,
			baseURL+TabletManagerStartReplicationUntilAfterProcedure,
			opts...,
		),
		getReplicas: connect_go.NewClient[dev.GetReplicasRequest, dev.GetReplicasResponse](
			httpClient,
			baseURL+TabletManagerGetReplicasProcedure,
			opts...,
		),
		vReplicationExec: connect_go.NewClient[dev.VReplicationExecRequest, dev.VReplicationExecResponse](
			httpClient,
			baseURL+TabletManagerVReplicationExecProcedure,
			opts...,
		),
		vReplicationWaitForPos: connect_go.NewClient[dev.VReplicationWaitForPosRequest, dev.VReplicationWaitForPosResponse](
			httpClient,
			baseURL+TabletManagerVReplicationWaitForPosProcedure,
			opts...,
		),
		updateVRWorkflow: connect_go.NewClient[dev.UpdateVRWorkflowRequest, dev.UpdateVRWorkflowResponse](
			httpClient,
			baseURL+TabletManagerUpdateVRWorkflowProcedure,
			opts...,
		),
		vDiff: connect_go.NewClient[dev.VDiffRequest, dev.VDiffResponse](
			httpClient,
			baseURL+TabletManagerVDiffProcedure,
			opts...,
		),
		resetReplication: connect_go.NewClient[dev.ResetReplicationRequest, dev.ResetReplicationResponse](
			httpClient,
			baseURL+TabletManagerResetReplicationProcedure,
			opts...,
		),
		initPrimary: connect_go.NewClient[dev.InitPrimaryRequest, dev.InitPrimaryResponse](
			httpClient,
			baseURL+TabletManagerInitPrimaryProcedure,
			opts...,
		),
		populateReparentJournal: connect_go.NewClient[dev.PopulateReparentJournalRequest, dev.PopulateReparentJournalResponse](
			httpClient,
			baseURL+TabletManagerPopulateReparentJournalProcedure,
			opts...,
		),
		initReplica: connect_go.NewClient[dev.InitReplicaRequest, dev.InitReplicaResponse](
			httpClient,
			baseURL+TabletManagerInitReplicaProcedure,
			opts...,
		),
		demotePrimary: connect_go.NewClient[dev.DemotePrimaryRequest, dev.DemotePrimaryResponse](
			httpClient,
			baseURL+TabletManagerDemotePrimaryProcedure,
			opts...,
		),
		undoDemotePrimary: connect_go.NewClient[dev.UndoDemotePrimaryRequest, dev.UndoDemotePrimaryResponse](
			httpClient,
			baseURL+TabletManagerUndoDemotePrimaryProcedure,
			opts...,
		),
		replicaWasPromoted: connect_go.NewClient[dev.ReplicaWasPromotedRequest, dev.ReplicaWasPromotedResponse](
			httpClient,
			baseURL+TabletManagerReplicaWasPromotedProcedure,
			opts...,
		),
		resetReplicationParameters: connect_go.NewClient[dev.ResetReplicationParametersRequest, dev.ResetReplicationParametersResponse](
			httpClient,
			baseURL+TabletManagerResetReplicationParametersProcedure,
			opts...,
		),
		fullStatus: connect_go.NewClient[dev.FullStatusRequest, dev.FullStatusResponse](
			httpClient,
			baseURL+TabletManagerFullStatusProcedure,
			opts...,
		),
		setReplicationSource: connect_go.NewClient[dev.SetReplicationSourceRequest, dev.SetReplicationSourceResponse](
			httpClient,
			baseURL+TabletManagerSetReplicationSourceProcedure,
			opts...,
		),
		replicaWasRestarted: connect_go.NewClient[dev.ReplicaWasRestartedRequest, dev.ReplicaWasRestartedResponse](
			httpClient,
			baseURL+TabletManagerReplicaWasRestartedProcedure,
			opts...,
		),
		stopReplicationAndGetStatus: connect_go.NewClient[dev.StopReplicationAndGetStatusRequest, dev.StopReplicationAndGetStatusResponse](
			httpClient,
			baseURL+TabletManagerStopReplicationAndGetStatusProcedure,
			opts...,
		),
		promoteReplica: connect_go.NewClient[dev.PromoteReplicaRequest, dev.PromoteReplicaResponse](
			httpClient,
			baseURL+TabletManagerPromoteReplicaProcedure,
			opts...,
		),
		backup: connect_go.NewClient[dev.BackupRequest, dev.BackupResponse](
			httpClient,
			baseURL+TabletManagerBackupProcedure,
			opts...,
		),
		restoreFromBackup: connect_go.NewClient[dev.RestoreFromBackupRequest, dev.RestoreFromBackupResponse](
			httpClient,
			baseURL+TabletManagerRestoreFromBackupProcedure,
			opts...,
		),
	}
}

// tabletManagerClient implements TabletManagerClient.
type tabletManagerClient struct {
	ping                        *connect_go.Client[dev.PingRequest, dev.PingResponse]
	sleep                       *connect_go.Client[dev.SleepRequest, dev.SleepResponse]
	executeHook                 *connect_go.Client[dev.ExecuteHookRequest, dev.ExecuteHookResponse]
	getSchema                   *connect_go.Client[dev.GetSchemaRequest, dev.GetSchemaResponse]
	getPermissions              *connect_go.Client[dev.GetPermissionsRequest, dev.GetPermissionsResponse]
	setReadOnly                 *connect_go.Client[dev.SetReadOnlyRequest, dev.SetReadOnlyResponse]
	setReadWrite                *connect_go.Client[dev.SetReadWriteRequest, dev.SetReadWriteResponse]
	changeType                  *connect_go.Client[dev.ChangeTypeRequest, dev.ChangeTypeResponse]
	refreshState                *connect_go.Client[dev.RefreshStateRequest, dev.RefreshStateResponse]
	runHealthCheck              *connect_go.Client[dev.RunHealthCheckRequest, dev.RunHealthCheckResponse]
	reloadSchema                *connect_go.Client[dev.ReloadSchemaRequest, dev.ReloadSchemaResponse]
	preflightSchema             *connect_go.Client[dev.PreflightSchemaRequest, dev.PreflightSchemaResponse]
	applySchema                 *connect_go.Client[dev.ApplySchemaRequest, dev.ApplySchemaResponse]
	lockTables                  *connect_go.Client[dev.LockTablesRequest, dev.LockTablesResponse]
	unlockTables                *connect_go.Client[dev.UnlockTablesRequest, dev.UnlockTablesResponse]
	executeQuery                *connect_go.Client[dev.ExecuteQueryRequest, dev.ExecuteQueryResponse]
	executeFetchAsDba           *connect_go.Client[dev.ExecuteFetchAsDbaRequest, dev.ExecuteFetchAsDbaResponse]
	executeFetchAsAllPrivs      *connect_go.Client[dev.ExecuteFetchAsAllPrivsRequest, dev.ExecuteFetchAsAllPrivsResponse]
	executeFetchAsApp           *connect_go.Client[dev.ExecuteFetchAsAppRequest, dev.ExecuteFetchAsAppResponse]
	replicationStatus           *connect_go.Client[dev.ReplicationStatusRequest, dev.ReplicationStatusResponse]
	primaryStatus               *connect_go.Client[dev.PrimaryStatusRequest, dev.PrimaryStatusResponse]
	primaryPosition             *connect_go.Client[dev.PrimaryPositionRequest, dev.PrimaryPositionResponse]
	waitForPosition             *connect_go.Client[dev.WaitForPositionRequest, dev.WaitForPositionResponse]
	stopReplication             *connect_go.Client[dev.StopReplicationRequest, dev.StopReplicationResponse]
	stopReplicationMinimum      *connect_go.Client[dev.StopReplicationMinimumRequest, dev.StopReplicationMinimumResponse]
	startReplication            *connect_go.Client[dev.StartReplicationRequest, dev.StartReplicationResponse]
	startReplicationUntilAfter  *connect_go.Client[dev.StartReplicationUntilAfterRequest, dev.StartReplicationUntilAfterResponse]
	getReplicas                 *connect_go.Client[dev.GetReplicasRequest, dev.GetReplicasResponse]
	vReplicationExec            *connect_go.Client[dev.VReplicationExecRequest, dev.VReplicationExecResponse]
	vReplicationWaitForPos      *connect_go.Client[dev.VReplicationWaitForPosRequest, dev.VReplicationWaitForPosResponse]
	updateVRWorkflow            *connect_go.Client[dev.UpdateVRWorkflowRequest, dev.UpdateVRWorkflowResponse]
	vDiff                       *connect_go.Client[dev.VDiffRequest, dev.VDiffResponse]
	resetReplication            *connect_go.Client[dev.ResetReplicationRequest, dev.ResetReplicationResponse]
	initPrimary                 *connect_go.Client[dev.InitPrimaryRequest, dev.InitPrimaryResponse]
	populateReparentJournal     *connect_go.Client[dev.PopulateReparentJournalRequest, dev.PopulateReparentJournalResponse]
	initReplica                 *connect_go.Client[dev.InitReplicaRequest, dev.InitReplicaResponse]
	demotePrimary               *connect_go.Client[dev.DemotePrimaryRequest, dev.DemotePrimaryResponse]
	undoDemotePrimary           *connect_go.Client[dev.UndoDemotePrimaryRequest, dev.UndoDemotePrimaryResponse]
	replicaWasPromoted          *connect_go.Client[dev.ReplicaWasPromotedRequest, dev.ReplicaWasPromotedResponse]
	resetReplicationParameters  *connect_go.Client[dev.ResetReplicationParametersRequest, dev.ResetReplicationParametersResponse]
	fullStatus                  *connect_go.Client[dev.FullStatusRequest, dev.FullStatusResponse]
	setReplicationSource        *connect_go.Client[dev.SetReplicationSourceRequest, dev.SetReplicationSourceResponse]
	replicaWasRestarted         *connect_go.Client[dev.ReplicaWasRestartedRequest, dev.ReplicaWasRestartedResponse]
	stopReplicationAndGetStatus *connect_go.Client[dev.StopReplicationAndGetStatusRequest, dev.StopReplicationAndGetStatusResponse]
	promoteReplica              *connect_go.Client[dev.PromoteReplicaRequest, dev.PromoteReplicaResponse]
	backup                      *connect_go.Client[dev.BackupRequest, dev.BackupResponse]
	restoreFromBackup           *connect_go.Client[dev.RestoreFromBackupRequest, dev.RestoreFromBackupResponse]
}

// Ping calls vitess.tabletmanagerservice.dev.TabletManager.Ping.
func (c *tabletManagerClient) Ping(ctx context.Context, req *connect_go.Request[dev.PingRequest]) (*connect_go.Response[dev.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Sleep calls vitess.tabletmanagerservice.dev.TabletManager.Sleep.
func (c *tabletManagerClient) Sleep(ctx context.Context, req *connect_go.Request[dev.SleepRequest]) (*connect_go.Response[dev.SleepResponse], error) {
	return c.sleep.CallUnary(ctx, req)
}

// ExecuteHook calls vitess.tabletmanagerservice.dev.TabletManager.ExecuteHook.
func (c *tabletManagerClient) ExecuteHook(ctx context.Context, req *connect_go.Request[dev.ExecuteHookRequest]) (*connect_go.Response[dev.ExecuteHookResponse], error) {
	return c.executeHook.CallUnary(ctx, req)
}

// GetSchema calls vitess.tabletmanagerservice.dev.TabletManager.GetSchema.
func (c *tabletManagerClient) GetSchema(ctx context.Context, req *connect_go.Request[dev.GetSchemaRequest]) (*connect_go.Response[dev.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// GetPermissions calls vitess.tabletmanagerservice.dev.TabletManager.GetPermissions.
func (c *tabletManagerClient) GetPermissions(ctx context.Context, req *connect_go.Request[dev.GetPermissionsRequest]) (*connect_go.Response[dev.GetPermissionsResponse], error) {
	return c.getPermissions.CallUnary(ctx, req)
}

// SetReadOnly calls vitess.tabletmanagerservice.dev.TabletManager.SetReadOnly.
func (c *tabletManagerClient) SetReadOnly(ctx context.Context, req *connect_go.Request[dev.SetReadOnlyRequest]) (*connect_go.Response[dev.SetReadOnlyResponse], error) {
	return c.setReadOnly.CallUnary(ctx, req)
}

// SetReadWrite calls vitess.tabletmanagerservice.dev.TabletManager.SetReadWrite.
func (c *tabletManagerClient) SetReadWrite(ctx context.Context, req *connect_go.Request[dev.SetReadWriteRequest]) (*connect_go.Response[dev.SetReadWriteResponse], error) {
	return c.setReadWrite.CallUnary(ctx, req)
}

// ChangeType calls vitess.tabletmanagerservice.dev.TabletManager.ChangeType.
func (c *tabletManagerClient) ChangeType(ctx context.Context, req *connect_go.Request[dev.ChangeTypeRequest]) (*connect_go.Response[dev.ChangeTypeResponse], error) {
	return c.changeType.CallUnary(ctx, req)
}

// RefreshState calls vitess.tabletmanagerservice.dev.TabletManager.RefreshState.
func (c *tabletManagerClient) RefreshState(ctx context.Context, req *connect_go.Request[dev.RefreshStateRequest]) (*connect_go.Response[dev.RefreshStateResponse], error) {
	return c.refreshState.CallUnary(ctx, req)
}

// RunHealthCheck calls vitess.tabletmanagerservice.dev.TabletManager.RunHealthCheck.
func (c *tabletManagerClient) RunHealthCheck(ctx context.Context, req *connect_go.Request[dev.RunHealthCheckRequest]) (*connect_go.Response[dev.RunHealthCheckResponse], error) {
	return c.runHealthCheck.CallUnary(ctx, req)
}

// ReloadSchema calls vitess.tabletmanagerservice.dev.TabletManager.ReloadSchema.
func (c *tabletManagerClient) ReloadSchema(ctx context.Context, req *connect_go.Request[dev.ReloadSchemaRequest]) (*connect_go.Response[dev.ReloadSchemaResponse], error) {
	return c.reloadSchema.CallUnary(ctx, req)
}

// PreflightSchema calls vitess.tabletmanagerservice.dev.TabletManager.PreflightSchema.
func (c *tabletManagerClient) PreflightSchema(ctx context.Context, req *connect_go.Request[dev.PreflightSchemaRequest]) (*connect_go.Response[dev.PreflightSchemaResponse], error) {
	return c.preflightSchema.CallUnary(ctx, req)
}

// ApplySchema calls vitess.tabletmanagerservice.dev.TabletManager.ApplySchema.
func (c *tabletManagerClient) ApplySchema(ctx context.Context, req *connect_go.Request[dev.ApplySchemaRequest]) (*connect_go.Response[dev.ApplySchemaResponse], error) {
	return c.applySchema.CallUnary(ctx, req)
}

// LockTables calls vitess.tabletmanagerservice.dev.TabletManager.LockTables.
func (c *tabletManagerClient) LockTables(ctx context.Context, req *connect_go.Request[dev.LockTablesRequest]) (*connect_go.Response[dev.LockTablesResponse], error) {
	return c.lockTables.CallUnary(ctx, req)
}

// UnlockTables calls vitess.tabletmanagerservice.dev.TabletManager.UnlockTables.
func (c *tabletManagerClient) UnlockTables(ctx context.Context, req *connect_go.Request[dev.UnlockTablesRequest]) (*connect_go.Response[dev.UnlockTablesResponse], error) {
	return c.unlockTables.CallUnary(ctx, req)
}

// ExecuteQuery calls vitess.tabletmanagerservice.dev.TabletManager.ExecuteQuery.
func (c *tabletManagerClient) ExecuteQuery(ctx context.Context, req *connect_go.Request[dev.ExecuteQueryRequest]) (*connect_go.Response[dev.ExecuteQueryResponse], error) {
	return c.executeQuery.CallUnary(ctx, req)
}

// ExecuteFetchAsDba calls vitess.tabletmanagerservice.dev.TabletManager.ExecuteFetchAsDba.
func (c *tabletManagerClient) ExecuteFetchAsDba(ctx context.Context, req *connect_go.Request[dev.ExecuteFetchAsDbaRequest]) (*connect_go.Response[dev.ExecuteFetchAsDbaResponse], error) {
	return c.executeFetchAsDba.CallUnary(ctx, req)
}

// ExecuteFetchAsAllPrivs calls
// vitess.tabletmanagerservice.dev.TabletManager.ExecuteFetchAsAllPrivs.
func (c *tabletManagerClient) ExecuteFetchAsAllPrivs(ctx context.Context, req *connect_go.Request[dev.ExecuteFetchAsAllPrivsRequest]) (*connect_go.Response[dev.ExecuteFetchAsAllPrivsResponse], error) {
	return c.executeFetchAsAllPrivs.CallUnary(ctx, req)
}

// ExecuteFetchAsApp calls vitess.tabletmanagerservice.dev.TabletManager.ExecuteFetchAsApp.
func (c *tabletManagerClient) ExecuteFetchAsApp(ctx context.Context, req *connect_go.Request[dev.ExecuteFetchAsAppRequest]) (*connect_go.Response[dev.ExecuteFetchAsAppResponse], error) {
	return c.executeFetchAsApp.CallUnary(ctx, req)
}

// ReplicationStatus calls vitess.tabletmanagerservice.dev.TabletManager.ReplicationStatus.
func (c *tabletManagerClient) ReplicationStatus(ctx context.Context, req *connect_go.Request[dev.ReplicationStatusRequest]) (*connect_go.Response[dev.ReplicationStatusResponse], error) {
	return c.replicationStatus.CallUnary(ctx, req)
}

// PrimaryStatus calls vitess.tabletmanagerservice.dev.TabletManager.PrimaryStatus.
func (c *tabletManagerClient) PrimaryStatus(ctx context.Context, req *connect_go.Request[dev.PrimaryStatusRequest]) (*connect_go.Response[dev.PrimaryStatusResponse], error) {
	return c.primaryStatus.CallUnary(ctx, req)
}

// PrimaryPosition calls vitess.tabletmanagerservice.dev.TabletManager.PrimaryPosition.
func (c *tabletManagerClient) PrimaryPosition(ctx context.Context, req *connect_go.Request[dev.PrimaryPositionRequest]) (*connect_go.Response[dev.PrimaryPositionResponse], error) {
	return c.primaryPosition.CallUnary(ctx, req)
}

// WaitForPosition calls vitess.tabletmanagerservice.dev.TabletManager.WaitForPosition.
func (c *tabletManagerClient) WaitForPosition(ctx context.Context, req *connect_go.Request[dev.WaitForPositionRequest]) (*connect_go.Response[dev.WaitForPositionResponse], error) {
	return c.waitForPosition.CallUnary(ctx, req)
}

// StopReplication calls vitess.tabletmanagerservice.dev.TabletManager.StopReplication.
func (c *tabletManagerClient) StopReplication(ctx context.Context, req *connect_go.Request[dev.StopReplicationRequest]) (*connect_go.Response[dev.StopReplicationResponse], error) {
	return c.stopReplication.CallUnary(ctx, req)
}

// StopReplicationMinimum calls
// vitess.tabletmanagerservice.dev.TabletManager.StopReplicationMinimum.
func (c *tabletManagerClient) StopReplicationMinimum(ctx context.Context, req *connect_go.Request[dev.StopReplicationMinimumRequest]) (*connect_go.Response[dev.StopReplicationMinimumResponse], error) {
	return c.stopReplicationMinimum.CallUnary(ctx, req)
}

// StartReplication calls vitess.tabletmanagerservice.dev.TabletManager.StartReplication.
func (c *tabletManagerClient) StartReplication(ctx context.Context, req *connect_go.Request[dev.StartReplicationRequest]) (*connect_go.Response[dev.StartReplicationResponse], error) {
	return c.startReplication.CallUnary(ctx, req)
}

// StartReplicationUntilAfter calls
// vitess.tabletmanagerservice.dev.TabletManager.StartReplicationUntilAfter.
func (c *tabletManagerClient) StartReplicationUntilAfter(ctx context.Context, req *connect_go.Request[dev.StartReplicationUntilAfterRequest]) (*connect_go.Response[dev.StartReplicationUntilAfterResponse], error) {
	return c.startReplicationUntilAfter.CallUnary(ctx, req)
}

// GetReplicas calls vitess.tabletmanagerservice.dev.TabletManager.GetReplicas.
func (c *tabletManagerClient) GetReplicas(ctx context.Context, req *connect_go.Request[dev.GetReplicasRequest]) (*connect_go.Response[dev.GetReplicasResponse], error) {
	return c.getReplicas.CallUnary(ctx, req)
}

// VReplicationExec calls vitess.tabletmanagerservice.dev.TabletManager.VReplicationExec.
func (c *tabletManagerClient) VReplicationExec(ctx context.Context, req *connect_go.Request[dev.VReplicationExecRequest]) (*connect_go.Response[dev.VReplicationExecResponse], error) {
	return c.vReplicationExec.CallUnary(ctx, req)
}

// VReplicationWaitForPos calls
// vitess.tabletmanagerservice.dev.TabletManager.VReplicationWaitForPos.
func (c *tabletManagerClient) VReplicationWaitForPos(ctx context.Context, req *connect_go.Request[dev.VReplicationWaitForPosRequest]) (*connect_go.Response[dev.VReplicationWaitForPosResponse], error) {
	return c.vReplicationWaitForPos.CallUnary(ctx, req)
}

// UpdateVRWorkflow calls vitess.tabletmanagerservice.dev.TabletManager.UpdateVRWorkflow.
func (c *tabletManagerClient) UpdateVRWorkflow(ctx context.Context, req *connect_go.Request[dev.UpdateVRWorkflowRequest]) (*connect_go.Response[dev.UpdateVRWorkflowResponse], error) {
	return c.updateVRWorkflow.CallUnary(ctx, req)
}

// VDiff calls vitess.tabletmanagerservice.dev.TabletManager.VDiff.
func (c *tabletManagerClient) VDiff(ctx context.Context, req *connect_go.Request[dev.VDiffRequest]) (*connect_go.Response[dev.VDiffResponse], error) {
	return c.vDiff.CallUnary(ctx, req)
}

// ResetReplication calls vitess.tabletmanagerservice.dev.TabletManager.ResetReplication.
func (c *tabletManagerClient) ResetReplication(ctx context.Context, req *connect_go.Request[dev.ResetReplicationRequest]) (*connect_go.Response[dev.ResetReplicationResponse], error) {
	return c.resetReplication.CallUnary(ctx, req)
}

// InitPrimary calls vitess.tabletmanagerservice.dev.TabletManager.InitPrimary.
func (c *tabletManagerClient) InitPrimary(ctx context.Context, req *connect_go.Request[dev.InitPrimaryRequest]) (*connect_go.Response[dev.InitPrimaryResponse], error) {
	return c.initPrimary.CallUnary(ctx, req)
}

// PopulateReparentJournal calls
// vitess.tabletmanagerservice.dev.TabletManager.PopulateReparentJournal.
func (c *tabletManagerClient) PopulateReparentJournal(ctx context.Context, req *connect_go.Request[dev.PopulateReparentJournalRequest]) (*connect_go.Response[dev.PopulateReparentJournalResponse], error) {
	return c.populateReparentJournal.CallUnary(ctx, req)
}

// InitReplica calls vitess.tabletmanagerservice.dev.TabletManager.InitReplica.
func (c *tabletManagerClient) InitReplica(ctx context.Context, req *connect_go.Request[dev.InitReplicaRequest]) (*connect_go.Response[dev.InitReplicaResponse], error) {
	return c.initReplica.CallUnary(ctx, req)
}

// DemotePrimary calls vitess.tabletmanagerservice.dev.TabletManager.DemotePrimary.
func (c *tabletManagerClient) DemotePrimary(ctx context.Context, req *connect_go.Request[dev.DemotePrimaryRequest]) (*connect_go.Response[dev.DemotePrimaryResponse], error) {
	return c.demotePrimary.CallUnary(ctx, req)
}

// UndoDemotePrimary calls vitess.tabletmanagerservice.dev.TabletManager.UndoDemotePrimary.
func (c *tabletManagerClient) UndoDemotePrimary(ctx context.Context, req *connect_go.Request[dev.UndoDemotePrimaryRequest]) (*connect_go.Response[dev.UndoDemotePrimaryResponse], error) {
	return c.undoDemotePrimary.CallUnary(ctx, req)
}

// ReplicaWasPromoted calls vitess.tabletmanagerservice.dev.TabletManager.ReplicaWasPromoted.
func (c *tabletManagerClient) ReplicaWasPromoted(ctx context.Context, req *connect_go.Request[dev.ReplicaWasPromotedRequest]) (*connect_go.Response[dev.ReplicaWasPromotedResponse], error) {
	return c.replicaWasPromoted.CallUnary(ctx, req)
}

// ResetReplicationParameters calls
// vitess.tabletmanagerservice.dev.TabletManager.ResetReplicationParameters.
func (c *tabletManagerClient) ResetReplicationParameters(ctx context.Context, req *connect_go.Request[dev.ResetReplicationParametersRequest]) (*connect_go.Response[dev.ResetReplicationParametersResponse], error) {
	return c.resetReplicationParameters.CallUnary(ctx, req)
}

// FullStatus calls vitess.tabletmanagerservice.dev.TabletManager.FullStatus.
func (c *tabletManagerClient) FullStatus(ctx context.Context, req *connect_go.Request[dev.FullStatusRequest]) (*connect_go.Response[dev.FullStatusResponse], error) {
	return c.fullStatus.CallUnary(ctx, req)
}

// SetReplicationSource calls vitess.tabletmanagerservice.dev.TabletManager.SetReplicationSource.
func (c *tabletManagerClient) SetReplicationSource(ctx context.Context, req *connect_go.Request[dev.SetReplicationSourceRequest]) (*connect_go.Response[dev.SetReplicationSourceResponse], error) {
	return c.setReplicationSource.CallUnary(ctx, req)
}

// ReplicaWasRestarted calls vitess.tabletmanagerservice.dev.TabletManager.ReplicaWasRestarted.
func (c *tabletManagerClient) ReplicaWasRestarted(ctx context.Context, req *connect_go.Request[dev.ReplicaWasRestartedRequest]) (*connect_go.Response[dev.ReplicaWasRestartedResponse], error) {
	return c.replicaWasRestarted.CallUnary(ctx, req)
}

// StopReplicationAndGetStatus calls
// vitess.tabletmanagerservice.dev.TabletManager.StopReplicationAndGetStatus.
func (c *tabletManagerClient) StopReplicationAndGetStatus(ctx context.Context, req *connect_go.Request[dev.StopReplicationAndGetStatusRequest]) (*connect_go.Response[dev.StopReplicationAndGetStatusResponse], error) {
	return c.stopReplicationAndGetStatus.CallUnary(ctx, req)
}

// PromoteReplica calls vitess.tabletmanagerservice.dev.TabletManager.PromoteReplica.
func (c *tabletManagerClient) PromoteReplica(ctx context.Context, req *connect_go.Request[dev.PromoteReplicaRequest]) (*connect_go.Response[dev.PromoteReplicaResponse], error) {
	return c.promoteReplica.CallUnary(ctx, req)
}

// Backup calls vitess.tabletmanagerservice.dev.TabletManager.Backup.
func (c *tabletManagerClient) Backup(ctx context.Context, req *connect_go.Request[dev.BackupRequest]) (*connect_go.ServerStreamForClient[dev.BackupResponse], error) {
	return c.backup.CallServerStream(ctx, req)
}

// RestoreFromBackup calls vitess.tabletmanagerservice.dev.TabletManager.RestoreFromBackup.
func (c *tabletManagerClient) RestoreFromBackup(ctx context.Context, req *connect_go.Request[dev.RestoreFromBackupRequest]) (*connect_go.ServerStreamForClient[dev.RestoreFromBackupResponse], error) {
	return c.restoreFromBackup.CallServerStream(ctx, req)
}

// TabletManagerHandler is an implementation of the vitess.tabletmanagerservice.dev.TabletManager
// service.
type TabletManagerHandler interface {
	// Ping returns the input payload
	Ping(context.Context, *connect_go.Request[dev.PingRequest]) (*connect_go.Response[dev.PingResponse], error)
	// Sleep sleeps for the provided duration
	Sleep(context.Context, *connect_go.Request[dev.SleepRequest]) (*connect_go.Response[dev.SleepResponse], error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(context.Context, *connect_go.Request[dev.ExecuteHookRequest]) (*connect_go.Response[dev.ExecuteHookResponse], error)
	// GetSchema asks the tablet for its schema
	GetSchema(context.Context, *connect_go.Request[dev.GetSchemaRequest]) (*connect_go.Response[dev.GetSchemaResponse], error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(context.Context, *connect_go.Request[dev.GetPermissionsRequest]) (*connect_go.Response[dev.GetPermissionsResponse], error)
	SetReadOnly(context.Context, *connect_go.Request[dev.SetReadOnlyRequest]) (*connect_go.Response[dev.SetReadOnlyResponse], error)
	SetReadWrite(context.Context, *connect_go.Request[dev.SetReadWriteRequest]) (*connect_go.Response[dev.SetReadWriteResponse], error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(context.Context, *connect_go.Request[dev.ChangeTypeRequest]) (*connect_go.Response[dev.ChangeTypeResponse], error)
	RefreshState(context.Context, *connect_go.Request[dev.RefreshStateRequest]) (*connect_go.Response[dev.RefreshStateResponse], error)
	RunHealthCheck(context.Context, *connect_go.Request[dev.RunHealthCheckRequest]) (*connect_go.Response[dev.RunHealthCheckResponse], error)
	ReloadSchema(context.Context, *connect_go.Request[dev.ReloadSchemaRequest]) (*connect_go.Response[dev.ReloadSchemaResponse], error)
	PreflightSchema(context.Context, *connect_go.Request[dev.PreflightSchemaRequest]) (*connect_go.Response[dev.PreflightSchemaResponse], error)
	ApplySchema(context.Context, *connect_go.Request[dev.ApplySchemaRequest]) (*connect_go.Response[dev.ApplySchemaResponse], error)
	LockTables(context.Context, *connect_go.Request[dev.LockTablesRequest]) (*connect_go.Response[dev.LockTablesResponse], error)
	UnlockTables(context.Context, *connect_go.Request[dev.UnlockTablesRequest]) (*connect_go.Response[dev.UnlockTablesResponse], error)
	ExecuteQuery(context.Context, *connect_go.Request[dev.ExecuteQueryRequest]) (*connect_go.Response[dev.ExecuteQueryResponse], error)
	ExecuteFetchAsDba(context.Context, *connect_go.Request[dev.ExecuteFetchAsDbaRequest]) (*connect_go.Response[dev.ExecuteFetchAsDbaResponse], error)
	ExecuteFetchAsAllPrivs(context.Context, *connect_go.Request[dev.ExecuteFetchAsAllPrivsRequest]) (*connect_go.Response[dev.ExecuteFetchAsAllPrivsResponse], error)
	ExecuteFetchAsApp(context.Context, *connect_go.Request[dev.ExecuteFetchAsAppRequest]) (*connect_go.Response[dev.ExecuteFetchAsAppResponse], error)
	// ReplicationStatus returns the current replication status.
	ReplicationStatus(context.Context, *connect_go.Request[dev.ReplicationStatusRequest]) (*connect_go.Response[dev.ReplicationStatusResponse], error)
	// PrimaryStatus returns the current primary status.
	PrimaryStatus(context.Context, *connect_go.Request[dev.PrimaryStatusRequest]) (*connect_go.Response[dev.PrimaryStatusResponse], error)
	// PrimaryPosition returns the current primary position
	PrimaryPosition(context.Context, *connect_go.Request[dev.PrimaryPositionRequest]) (*connect_go.Response[dev.PrimaryPositionResponse], error)
	// WaitForPosition waits for the position to be reached
	WaitForPosition(context.Context, *connect_go.Request[dev.WaitForPositionRequest]) (*connect_go.Response[dev.WaitForPositionResponse], error)
	// StopReplication makes mysql stop its replication
	StopReplication(context.Context, *connect_go.Request[dev.StopReplicationRequest]) (*connect_go.Response[dev.StopReplicationResponse], error)
	// StopReplicationMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopReplicationMinimum(context.Context, *connect_go.Request[dev.StopReplicationMinimumRequest]) (*connect_go.Response[dev.StopReplicationMinimumResponse], error)
	// StartReplication starts the mysql replication
	StartReplication(context.Context, *connect_go.Request[dev.StartReplicationRequest]) (*connect_go.Response[dev.StartReplicationResponse], error)
	// StartReplicationUnitAfter starts the mysql replication until and including
	// the provided position
	StartReplicationUntilAfter(context.Context, *connect_go.Request[dev.StartReplicationUntilAfterRequest]) (*connect_go.Response[dev.StartReplicationUntilAfterResponse], error)
	// GetReplicas asks for the list of mysql replicas
	GetReplicas(context.Context, *connect_go.Request[dev.GetReplicasRequest]) (*connect_go.Response[dev.GetReplicasResponse], error)
	// VReplication API
	VReplicationExec(context.Context, *connect_go.Request[dev.VReplicationExecRequest]) (*connect_go.Response[dev.VReplicationExecResponse], error)
	VReplicationWaitForPos(context.Context, *connect_go.Request[dev.VReplicationWaitForPosRequest]) (*connect_go.Response[dev.VReplicationWaitForPosResponse], error)
	UpdateVRWorkflow(context.Context, *connect_go.Request[dev.UpdateVRWorkflowRequest]) (*connect_go.Response[dev.UpdateVRWorkflowResponse], error)
	// VDiff API
	VDiff(context.Context, *connect_go.Request[dev.VDiffRequest]) (*connect_go.Response[dev.VDiffResponse], error)
	// ResetReplication makes the target not replicating
	ResetReplication(context.Context, *connect_go.Request[dev.ResetReplicationRequest]) (*connect_go.Response[dev.ResetReplicationResponse], error)
	// InitPrimary initializes the tablet as a primary
	InitPrimary(context.Context, *connect_go.Request[dev.InitPrimaryRequest]) (*connect_go.Response[dev.InitPrimaryResponse], error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(context.Context, *connect_go.Request[dev.PopulateReparentJournalRequest]) (*connect_go.Response[dev.PopulateReparentJournalResponse], error)
	// InitReplica tells the tablet to reparent to the primary unconditionally
	InitReplica(context.Context, *connect_go.Request[dev.InitReplicaRequest]) (*connect_go.Response[dev.InitReplicaResponse], error)
	// DemotePrimary tells the soon-to-be-former primary it's gonna change
	DemotePrimary(context.Context, *connect_go.Request[dev.DemotePrimaryRequest]) (*connect_go.Response[dev.DemotePrimaryResponse], error)
	// UndoDemotePrimary reverts all changes made by DemotePrimary
	UndoDemotePrimary(context.Context, *connect_go.Request[dev.UndoDemotePrimaryRequest]) (*connect_go.Response[dev.UndoDemotePrimaryResponse], error)
	// ReplicaWasPromoted tells the remote tablet it is now the primary
	ReplicaWasPromoted(context.Context, *connect_go.Request[dev.ReplicaWasPromotedRequest]) (*connect_go.Response[dev.ReplicaWasPromotedResponse], error)
	// ResetReplicationParameters resets the replica replication parameters
	ResetReplicationParameters(context.Context, *connect_go.Request[dev.ResetReplicationParametersRequest]) (*connect_go.Response[dev.ResetReplicationParametersResponse], error)
	// FullStatus collects and returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	FullStatus(context.Context, *connect_go.Request[dev.FullStatusRequest]) (*connect_go.Response[dev.FullStatusResponse], error)
	// SetReplicationSource tells the replica to reparent
	SetReplicationSource(context.Context, *connect_go.Request[dev.SetReplicationSourceRequest]) (*connect_go.Response[dev.SetReplicationSourceResponse], error)
	// ReplicaWasRestarted tells the remote tablet its primary has changed
	ReplicaWasRestarted(context.Context, *connect_go.Request[dev.ReplicaWasRestartedRequest]) (*connect_go.Response[dev.ReplicaWasRestartedResponse], error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(context.Context, *connect_go.Request[dev.StopReplicationAndGetStatusRequest]) (*connect_go.Response[dev.StopReplicationAndGetStatusResponse], error)
	// PromoteReplica makes the replica the new primary
	PromoteReplica(context.Context, *connect_go.Request[dev.PromoteReplicaRequest]) (*connect_go.Response[dev.PromoteReplicaResponse], error)
	Backup(context.Context, *connect_go.Request[dev.BackupRequest], *connect_go.ServerStream[dev.BackupResponse]) error
	// RestoreFromBackup deletes all local data and restores it from the latest backup.
	RestoreFromBackup(context.Context, *connect_go.Request[dev.RestoreFromBackupRequest], *connect_go.ServerStream[dev.RestoreFromBackupResponse]) error
}

// NewTabletManagerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTabletManagerHandler(svc TabletManagerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(TabletManagerPingProcedure, connect_go.NewUnaryHandler(
		TabletManagerPingProcedure,
		svc.Ping,
		opts...,
	))
	mux.Handle(TabletManagerSleepProcedure, connect_go.NewUnaryHandler(
		TabletManagerSleepProcedure,
		svc.Sleep,
		opts...,
	))
	mux.Handle(TabletManagerExecuteHookProcedure, connect_go.NewUnaryHandler(
		TabletManagerExecuteHookProcedure,
		svc.ExecuteHook,
		opts...,
	))
	mux.Handle(TabletManagerGetSchemaProcedure, connect_go.NewUnaryHandler(
		TabletManagerGetSchemaProcedure,
		svc.GetSchema,
		opts...,
	))
	mux.Handle(TabletManagerGetPermissionsProcedure, connect_go.NewUnaryHandler(
		TabletManagerGetPermissionsProcedure,
		svc.GetPermissions,
		opts...,
	))
	mux.Handle(TabletManagerSetReadOnlyProcedure, connect_go.NewUnaryHandler(
		TabletManagerSetReadOnlyProcedure,
		svc.SetReadOnly,
		opts...,
	))
	mux.Handle(TabletManagerSetReadWriteProcedure, connect_go.NewUnaryHandler(
		TabletManagerSetReadWriteProcedure,
		svc.SetReadWrite,
		opts...,
	))
	mux.Handle(TabletManagerChangeTypeProcedure, connect_go.NewUnaryHandler(
		TabletManagerChangeTypeProcedure,
		svc.ChangeType,
		opts...,
	))
	mux.Handle(TabletManagerRefreshStateProcedure, connect_go.NewUnaryHandler(
		TabletManagerRefreshStateProcedure,
		svc.RefreshState,
		opts...,
	))
	mux.Handle(TabletManagerRunHealthCheckProcedure, connect_go.NewUnaryHandler(
		TabletManagerRunHealthCheckProcedure,
		svc.RunHealthCheck,
		opts...,
	))
	mux.Handle(TabletManagerReloadSchemaProcedure, connect_go.NewUnaryHandler(
		TabletManagerReloadSchemaProcedure,
		svc.ReloadSchema,
		opts...,
	))
	mux.Handle(TabletManagerPreflightSchemaProcedure, connect_go.NewUnaryHandler(
		TabletManagerPreflightSchemaProcedure,
		svc.PreflightSchema,
		opts...,
	))
	mux.Handle(TabletManagerApplySchemaProcedure, connect_go.NewUnaryHandler(
		TabletManagerApplySchemaProcedure,
		svc.ApplySchema,
		opts...,
	))
	mux.Handle(TabletManagerLockTablesProcedure, connect_go.NewUnaryHandler(
		TabletManagerLockTablesProcedure,
		svc.LockTables,
		opts...,
	))
	mux.Handle(TabletManagerUnlockTablesProcedure, connect_go.NewUnaryHandler(
		TabletManagerUnlockTablesProcedure,
		svc.UnlockTables,
		opts...,
	))
	mux.Handle(TabletManagerExecuteQueryProcedure, connect_go.NewUnaryHandler(
		TabletManagerExecuteQueryProcedure,
		svc.ExecuteQuery,
		opts...,
	))
	mux.Handle(TabletManagerExecuteFetchAsDbaProcedure, connect_go.NewUnaryHandler(
		TabletManagerExecuteFetchAsDbaProcedure,
		svc.ExecuteFetchAsDba,
		opts...,
	))
	mux.Handle(TabletManagerExecuteFetchAsAllPrivsProcedure, connect_go.NewUnaryHandler(
		TabletManagerExecuteFetchAsAllPrivsProcedure,
		svc.ExecuteFetchAsAllPrivs,
		opts...,
	))
	mux.Handle(TabletManagerExecuteFetchAsAppProcedure, connect_go.NewUnaryHandler(
		TabletManagerExecuteFetchAsAppProcedure,
		svc.ExecuteFetchAsApp,
		opts...,
	))
	mux.Handle(TabletManagerReplicationStatusProcedure, connect_go.NewUnaryHandler(
		TabletManagerReplicationStatusProcedure,
		svc.ReplicationStatus,
		opts...,
	))
	mux.Handle(TabletManagerPrimaryStatusProcedure, connect_go.NewUnaryHandler(
		TabletManagerPrimaryStatusProcedure,
		svc.PrimaryStatus,
		opts...,
	))
	mux.Handle(TabletManagerPrimaryPositionProcedure, connect_go.NewUnaryHandler(
		TabletManagerPrimaryPositionProcedure,
		svc.PrimaryPosition,
		opts...,
	))
	mux.Handle(TabletManagerWaitForPositionProcedure, connect_go.NewUnaryHandler(
		TabletManagerWaitForPositionProcedure,
		svc.WaitForPosition,
		opts...,
	))
	mux.Handle(TabletManagerStopReplicationProcedure, connect_go.NewUnaryHandler(
		TabletManagerStopReplicationProcedure,
		svc.StopReplication,
		opts...,
	))
	mux.Handle(TabletManagerStopReplicationMinimumProcedure, connect_go.NewUnaryHandler(
		TabletManagerStopReplicationMinimumProcedure,
		svc.StopReplicationMinimum,
		opts...,
	))
	mux.Handle(TabletManagerStartReplicationProcedure, connect_go.NewUnaryHandler(
		TabletManagerStartReplicationProcedure,
		svc.StartReplication,
		opts...,
	))
	mux.Handle(TabletManagerStartReplicationUntilAfterProcedure, connect_go.NewUnaryHandler(
		TabletManagerStartReplicationUntilAfterProcedure,
		svc.StartReplicationUntilAfter,
		opts...,
	))
	mux.Handle(TabletManagerGetReplicasProcedure, connect_go.NewUnaryHandler(
		TabletManagerGetReplicasProcedure,
		svc.GetReplicas,
		opts...,
	))
	mux.Handle(TabletManagerVReplicationExecProcedure, connect_go.NewUnaryHandler(
		TabletManagerVReplicationExecProcedure,
		svc.VReplicationExec,
		opts...,
	))
	mux.Handle(TabletManagerVReplicationWaitForPosProcedure, connect_go.NewUnaryHandler(
		TabletManagerVReplicationWaitForPosProcedure,
		svc.VReplicationWaitForPos,
		opts...,
	))
	mux.Handle(TabletManagerUpdateVRWorkflowProcedure, connect_go.NewUnaryHandler(
		TabletManagerUpdateVRWorkflowProcedure,
		svc.UpdateVRWorkflow,
		opts...,
	))
	mux.Handle(TabletManagerVDiffProcedure, connect_go.NewUnaryHandler(
		TabletManagerVDiffProcedure,
		svc.VDiff,
		opts...,
	))
	mux.Handle(TabletManagerResetReplicationProcedure, connect_go.NewUnaryHandler(
		TabletManagerResetReplicationProcedure,
		svc.ResetReplication,
		opts...,
	))
	mux.Handle(TabletManagerInitPrimaryProcedure, connect_go.NewUnaryHandler(
		TabletManagerInitPrimaryProcedure,
		svc.InitPrimary,
		opts...,
	))
	mux.Handle(TabletManagerPopulateReparentJournalProcedure, connect_go.NewUnaryHandler(
		TabletManagerPopulateReparentJournalProcedure,
		svc.PopulateReparentJournal,
		opts...,
	))
	mux.Handle(TabletManagerInitReplicaProcedure, connect_go.NewUnaryHandler(
		TabletManagerInitReplicaProcedure,
		svc.InitReplica,
		opts...,
	))
	mux.Handle(TabletManagerDemotePrimaryProcedure, connect_go.NewUnaryHandler(
		TabletManagerDemotePrimaryProcedure,
		svc.DemotePrimary,
		opts...,
	))
	mux.Handle(TabletManagerUndoDemotePrimaryProcedure, connect_go.NewUnaryHandler(
		TabletManagerUndoDemotePrimaryProcedure,
		svc.UndoDemotePrimary,
		opts...,
	))
	mux.Handle(TabletManagerReplicaWasPromotedProcedure, connect_go.NewUnaryHandler(
		TabletManagerReplicaWasPromotedProcedure,
		svc.ReplicaWasPromoted,
		opts...,
	))
	mux.Handle(TabletManagerResetReplicationParametersProcedure, connect_go.NewUnaryHandler(
		TabletManagerResetReplicationParametersProcedure,
		svc.ResetReplicationParameters,
		opts...,
	))
	mux.Handle(TabletManagerFullStatusProcedure, connect_go.NewUnaryHandler(
		TabletManagerFullStatusProcedure,
		svc.FullStatus,
		opts...,
	))
	mux.Handle(TabletManagerSetReplicationSourceProcedure, connect_go.NewUnaryHandler(
		TabletManagerSetReplicationSourceProcedure,
		svc.SetReplicationSource,
		opts...,
	))
	mux.Handle(TabletManagerReplicaWasRestartedProcedure, connect_go.NewUnaryHandler(
		TabletManagerReplicaWasRestartedProcedure,
		svc.ReplicaWasRestarted,
		opts...,
	))
	mux.Handle(TabletManagerStopReplicationAndGetStatusProcedure, connect_go.NewUnaryHandler(
		TabletManagerStopReplicationAndGetStatusProcedure,
		svc.StopReplicationAndGetStatus,
		opts...,
	))
	mux.Handle(TabletManagerPromoteReplicaProcedure, connect_go.NewUnaryHandler(
		TabletManagerPromoteReplicaProcedure,
		svc.PromoteReplica,
		opts...,
	))
	mux.Handle(TabletManagerBackupProcedure, connect_go.NewServerStreamHandler(
		TabletManagerBackupProcedure,
		svc.Backup,
		opts...,
	))
	mux.Handle(TabletManagerRestoreFromBackupProcedure, connect_go.NewServerStreamHandler(
		TabletManagerRestoreFromBackupProcedure,
		svc.RestoreFromBackup,
		opts...,
	))
	return "/vitess.tabletmanagerservice.dev.TabletManager/", mux
}

// UnimplementedTabletManagerHandler returns CodeUnimplemented from all methods.
type UnimplementedTabletManagerHandler struct{}

func (UnimplementedTabletManagerHandler) Ping(context.Context, *connect_go.Request[dev.PingRequest]) (*connect_go.Response[dev.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.Ping is not implemented"))
}

func (UnimplementedTabletManagerHandler) Sleep(context.Context, *connect_go.Request[dev.SleepRequest]) (*connect_go.Response[dev.SleepResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.Sleep is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteHook(context.Context, *connect_go.Request[dev.ExecuteHookRequest]) (*connect_go.Response[dev.ExecuteHookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.ExecuteHook is not implemented"))
}

func (UnimplementedTabletManagerHandler) GetSchema(context.Context, *connect_go.Request[dev.GetSchemaRequest]) (*connect_go.Response[dev.GetSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.GetSchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) GetPermissions(context.Context, *connect_go.Request[dev.GetPermissionsRequest]) (*connect_go.Response[dev.GetPermissionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.GetPermissions is not implemented"))
}

func (UnimplementedTabletManagerHandler) SetReadOnly(context.Context, *connect_go.Request[dev.SetReadOnlyRequest]) (*connect_go.Response[dev.SetReadOnlyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.SetReadOnly is not implemented"))
}

func (UnimplementedTabletManagerHandler) SetReadWrite(context.Context, *connect_go.Request[dev.SetReadWriteRequest]) (*connect_go.Response[dev.SetReadWriteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.SetReadWrite is not implemented"))
}

func (UnimplementedTabletManagerHandler) ChangeType(context.Context, *connect_go.Request[dev.ChangeTypeRequest]) (*connect_go.Response[dev.ChangeTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.ChangeType is not implemented"))
}

func (UnimplementedTabletManagerHandler) RefreshState(context.Context, *connect_go.Request[dev.RefreshStateRequest]) (*connect_go.Response[dev.RefreshStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.RefreshState is not implemented"))
}

func (UnimplementedTabletManagerHandler) RunHealthCheck(context.Context, *connect_go.Request[dev.RunHealthCheckRequest]) (*connect_go.Response[dev.RunHealthCheckResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.RunHealthCheck is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReloadSchema(context.Context, *connect_go.Request[dev.ReloadSchemaRequest]) (*connect_go.Response[dev.ReloadSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.ReloadSchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) PreflightSchema(context.Context, *connect_go.Request[dev.PreflightSchemaRequest]) (*connect_go.Response[dev.PreflightSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.PreflightSchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) ApplySchema(context.Context, *connect_go.Request[dev.ApplySchemaRequest]) (*connect_go.Response[dev.ApplySchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.ApplySchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) LockTables(context.Context, *connect_go.Request[dev.LockTablesRequest]) (*connect_go.Response[dev.LockTablesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.LockTables is not implemented"))
}

func (UnimplementedTabletManagerHandler) UnlockTables(context.Context, *connect_go.Request[dev.UnlockTablesRequest]) (*connect_go.Response[dev.UnlockTablesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.UnlockTables is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteQuery(context.Context, *connect_go.Request[dev.ExecuteQueryRequest]) (*connect_go.Response[dev.ExecuteQueryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.ExecuteQuery is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteFetchAsDba(context.Context, *connect_go.Request[dev.ExecuteFetchAsDbaRequest]) (*connect_go.Response[dev.ExecuteFetchAsDbaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.ExecuteFetchAsDba is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteFetchAsAllPrivs(context.Context, *connect_go.Request[dev.ExecuteFetchAsAllPrivsRequest]) (*connect_go.Response[dev.ExecuteFetchAsAllPrivsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.ExecuteFetchAsAllPrivs is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteFetchAsApp(context.Context, *connect_go.Request[dev.ExecuteFetchAsAppRequest]) (*connect_go.Response[dev.ExecuteFetchAsAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.ExecuteFetchAsApp is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReplicationStatus(context.Context, *connect_go.Request[dev.ReplicationStatusRequest]) (*connect_go.Response[dev.ReplicationStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.ReplicationStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) PrimaryStatus(context.Context, *connect_go.Request[dev.PrimaryStatusRequest]) (*connect_go.Response[dev.PrimaryStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.PrimaryStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) PrimaryPosition(context.Context, *connect_go.Request[dev.PrimaryPositionRequest]) (*connect_go.Response[dev.PrimaryPositionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.PrimaryPosition is not implemented"))
}

func (UnimplementedTabletManagerHandler) WaitForPosition(context.Context, *connect_go.Request[dev.WaitForPositionRequest]) (*connect_go.Response[dev.WaitForPositionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.WaitForPosition is not implemented"))
}

func (UnimplementedTabletManagerHandler) StopReplication(context.Context, *connect_go.Request[dev.StopReplicationRequest]) (*connect_go.Response[dev.StopReplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.StopReplication is not implemented"))
}

func (UnimplementedTabletManagerHandler) StopReplicationMinimum(context.Context, *connect_go.Request[dev.StopReplicationMinimumRequest]) (*connect_go.Response[dev.StopReplicationMinimumResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.StopReplicationMinimum is not implemented"))
}

func (UnimplementedTabletManagerHandler) StartReplication(context.Context, *connect_go.Request[dev.StartReplicationRequest]) (*connect_go.Response[dev.StartReplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.StartReplication is not implemented"))
}

func (UnimplementedTabletManagerHandler) StartReplicationUntilAfter(context.Context, *connect_go.Request[dev.StartReplicationUntilAfterRequest]) (*connect_go.Response[dev.StartReplicationUntilAfterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.StartReplicationUntilAfter is not implemented"))
}

func (UnimplementedTabletManagerHandler) GetReplicas(context.Context, *connect_go.Request[dev.GetReplicasRequest]) (*connect_go.Response[dev.GetReplicasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.GetReplicas is not implemented"))
}

func (UnimplementedTabletManagerHandler) VReplicationExec(context.Context, *connect_go.Request[dev.VReplicationExecRequest]) (*connect_go.Response[dev.VReplicationExecResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.VReplicationExec is not implemented"))
}

func (UnimplementedTabletManagerHandler) VReplicationWaitForPos(context.Context, *connect_go.Request[dev.VReplicationWaitForPosRequest]) (*connect_go.Response[dev.VReplicationWaitForPosResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.VReplicationWaitForPos is not implemented"))
}

func (UnimplementedTabletManagerHandler) UpdateVRWorkflow(context.Context, *connect_go.Request[dev.UpdateVRWorkflowRequest]) (*connect_go.Response[dev.UpdateVRWorkflowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.UpdateVRWorkflow is not implemented"))
}

func (UnimplementedTabletManagerHandler) VDiff(context.Context, *connect_go.Request[dev.VDiffRequest]) (*connect_go.Response[dev.VDiffResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.VDiff is not implemented"))
}

func (UnimplementedTabletManagerHandler) ResetReplication(context.Context, *connect_go.Request[dev.ResetReplicationRequest]) (*connect_go.Response[dev.ResetReplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.ResetReplication is not implemented"))
}

func (UnimplementedTabletManagerHandler) InitPrimary(context.Context, *connect_go.Request[dev.InitPrimaryRequest]) (*connect_go.Response[dev.InitPrimaryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.InitPrimary is not implemented"))
}

func (UnimplementedTabletManagerHandler) PopulateReparentJournal(context.Context, *connect_go.Request[dev.PopulateReparentJournalRequest]) (*connect_go.Response[dev.PopulateReparentJournalResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.PopulateReparentJournal is not implemented"))
}

func (UnimplementedTabletManagerHandler) InitReplica(context.Context, *connect_go.Request[dev.InitReplicaRequest]) (*connect_go.Response[dev.InitReplicaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.InitReplica is not implemented"))
}

func (UnimplementedTabletManagerHandler) DemotePrimary(context.Context, *connect_go.Request[dev.DemotePrimaryRequest]) (*connect_go.Response[dev.DemotePrimaryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.DemotePrimary is not implemented"))
}

func (UnimplementedTabletManagerHandler) UndoDemotePrimary(context.Context, *connect_go.Request[dev.UndoDemotePrimaryRequest]) (*connect_go.Response[dev.UndoDemotePrimaryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.UndoDemotePrimary is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReplicaWasPromoted(context.Context, *connect_go.Request[dev.ReplicaWasPromotedRequest]) (*connect_go.Response[dev.ReplicaWasPromotedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.ReplicaWasPromoted is not implemented"))
}

func (UnimplementedTabletManagerHandler) ResetReplicationParameters(context.Context, *connect_go.Request[dev.ResetReplicationParametersRequest]) (*connect_go.Response[dev.ResetReplicationParametersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.ResetReplicationParameters is not implemented"))
}

func (UnimplementedTabletManagerHandler) FullStatus(context.Context, *connect_go.Request[dev.FullStatusRequest]) (*connect_go.Response[dev.FullStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.FullStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) SetReplicationSource(context.Context, *connect_go.Request[dev.SetReplicationSourceRequest]) (*connect_go.Response[dev.SetReplicationSourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.SetReplicationSource is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReplicaWasRestarted(context.Context, *connect_go.Request[dev.ReplicaWasRestartedRequest]) (*connect_go.Response[dev.ReplicaWasRestartedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.ReplicaWasRestarted is not implemented"))
}

func (UnimplementedTabletManagerHandler) StopReplicationAndGetStatus(context.Context, *connect_go.Request[dev.StopReplicationAndGetStatusRequest]) (*connect_go.Response[dev.StopReplicationAndGetStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.StopReplicationAndGetStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) PromoteReplica(context.Context, *connect_go.Request[dev.PromoteReplicaRequest]) (*connect_go.Response[dev.PromoteReplicaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.PromoteReplica is not implemented"))
}

func (UnimplementedTabletManagerHandler) Backup(context.Context, *connect_go.Request[dev.BackupRequest], *connect_go.ServerStream[dev.BackupResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.Backup is not implemented"))
}

func (UnimplementedTabletManagerHandler) RestoreFromBackup(context.Context, *connect_go.Request[dev.RestoreFromBackupRequest], *connect_go.ServerStream[dev.RestoreFromBackupResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vitess.tabletmanagerservice.dev.TabletManager.RestoreFromBackup is not implemented"))
}
