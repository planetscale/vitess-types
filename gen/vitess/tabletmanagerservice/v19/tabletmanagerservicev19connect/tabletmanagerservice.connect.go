//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
// This file contains the service definition for making management API
// calls to VtTablet.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vitess/tabletmanagerservice/v19/tabletmanagerservice.proto

package tabletmanagerservicev19connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v19 "github.com/planetscale/vitess-types/gen/vitess/tabletmanagerdata/v19"
	v191 "github.com/planetscale/vitess-types/gen/vitess/tabletmanagerservice/v19"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TabletManagerName is the fully-qualified name of the TabletManager service.
	TabletManagerName = "tabletmanagerservice.TabletManager"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TabletManagerPingProcedure is the fully-qualified name of the TabletManager's Ping RPC.
	TabletManagerPingProcedure = "/tabletmanagerservice.TabletManager/Ping"
	// TabletManagerSleepProcedure is the fully-qualified name of the TabletManager's Sleep RPC.
	TabletManagerSleepProcedure = "/tabletmanagerservice.TabletManager/Sleep"
	// TabletManagerExecuteHookProcedure is the fully-qualified name of the TabletManager's ExecuteHook
	// RPC.
	TabletManagerExecuteHookProcedure = "/tabletmanagerservice.TabletManager/ExecuteHook"
	// TabletManagerGetSchemaProcedure is the fully-qualified name of the TabletManager's GetSchema RPC.
	TabletManagerGetSchemaProcedure = "/tabletmanagerservice.TabletManager/GetSchema"
	// TabletManagerGetPermissionsProcedure is the fully-qualified name of the TabletManager's
	// GetPermissions RPC.
	TabletManagerGetPermissionsProcedure = "/tabletmanagerservice.TabletManager/GetPermissions"
	// TabletManagerSetReadOnlyProcedure is the fully-qualified name of the TabletManager's SetReadOnly
	// RPC.
	TabletManagerSetReadOnlyProcedure = "/tabletmanagerservice.TabletManager/SetReadOnly"
	// TabletManagerSetReadWriteProcedure is the fully-qualified name of the TabletManager's
	// SetReadWrite RPC.
	TabletManagerSetReadWriteProcedure = "/tabletmanagerservice.TabletManager/SetReadWrite"
	// TabletManagerChangeTypeProcedure is the fully-qualified name of the TabletManager's ChangeType
	// RPC.
	TabletManagerChangeTypeProcedure = "/tabletmanagerservice.TabletManager/ChangeType"
	// TabletManagerRefreshStateProcedure is the fully-qualified name of the TabletManager's
	// RefreshState RPC.
	TabletManagerRefreshStateProcedure = "/tabletmanagerservice.TabletManager/RefreshState"
	// TabletManagerRunHealthCheckProcedure is the fully-qualified name of the TabletManager's
	// RunHealthCheck RPC.
	TabletManagerRunHealthCheckProcedure = "/tabletmanagerservice.TabletManager/RunHealthCheck"
	// TabletManagerReloadSchemaProcedure is the fully-qualified name of the TabletManager's
	// ReloadSchema RPC.
	TabletManagerReloadSchemaProcedure = "/tabletmanagerservice.TabletManager/ReloadSchema"
	// TabletManagerPreflightSchemaProcedure is the fully-qualified name of the TabletManager's
	// PreflightSchema RPC.
	TabletManagerPreflightSchemaProcedure = "/tabletmanagerservice.TabletManager/PreflightSchema"
	// TabletManagerApplySchemaProcedure is the fully-qualified name of the TabletManager's ApplySchema
	// RPC.
	TabletManagerApplySchemaProcedure = "/tabletmanagerservice.TabletManager/ApplySchema"
	// TabletManagerResetSequencesProcedure is the fully-qualified name of the TabletManager's
	// ResetSequences RPC.
	TabletManagerResetSequencesProcedure = "/tabletmanagerservice.TabletManager/ResetSequences"
	// TabletManagerLockTablesProcedure is the fully-qualified name of the TabletManager's LockTables
	// RPC.
	TabletManagerLockTablesProcedure = "/tabletmanagerservice.TabletManager/LockTables"
	// TabletManagerUnlockTablesProcedure is the fully-qualified name of the TabletManager's
	// UnlockTables RPC.
	TabletManagerUnlockTablesProcedure = "/tabletmanagerservice.TabletManager/UnlockTables"
	// TabletManagerExecuteQueryProcedure is the fully-qualified name of the TabletManager's
	// ExecuteQuery RPC.
	TabletManagerExecuteQueryProcedure = "/tabletmanagerservice.TabletManager/ExecuteQuery"
	// TabletManagerExecuteFetchAsDbaProcedure is the fully-qualified name of the TabletManager's
	// ExecuteFetchAsDba RPC.
	TabletManagerExecuteFetchAsDbaProcedure = "/tabletmanagerservice.TabletManager/ExecuteFetchAsDba"
	// TabletManagerExecuteFetchAsAllPrivsProcedure is the fully-qualified name of the TabletManager's
	// ExecuteFetchAsAllPrivs RPC.
	TabletManagerExecuteFetchAsAllPrivsProcedure = "/tabletmanagerservice.TabletManager/ExecuteFetchAsAllPrivs"
	// TabletManagerExecuteFetchAsAppProcedure is the fully-qualified name of the TabletManager's
	// ExecuteFetchAsApp RPC.
	TabletManagerExecuteFetchAsAppProcedure = "/tabletmanagerservice.TabletManager/ExecuteFetchAsApp"
	// TabletManagerReplicationStatusProcedure is the fully-qualified name of the TabletManager's
	// ReplicationStatus RPC.
	TabletManagerReplicationStatusProcedure = "/tabletmanagerservice.TabletManager/ReplicationStatus"
	// TabletManagerPrimaryStatusProcedure is the fully-qualified name of the TabletManager's
	// PrimaryStatus RPC.
	TabletManagerPrimaryStatusProcedure = "/tabletmanagerservice.TabletManager/PrimaryStatus"
	// TabletManagerPrimaryPositionProcedure is the fully-qualified name of the TabletManager's
	// PrimaryPosition RPC.
	TabletManagerPrimaryPositionProcedure = "/tabletmanagerservice.TabletManager/PrimaryPosition"
	// TabletManagerWaitForPositionProcedure is the fully-qualified name of the TabletManager's
	// WaitForPosition RPC.
	TabletManagerWaitForPositionProcedure = "/tabletmanagerservice.TabletManager/WaitForPosition"
	// TabletManagerStopReplicationProcedure is the fully-qualified name of the TabletManager's
	// StopReplication RPC.
	TabletManagerStopReplicationProcedure = "/tabletmanagerservice.TabletManager/StopReplication"
	// TabletManagerStopReplicationMinimumProcedure is the fully-qualified name of the TabletManager's
	// StopReplicationMinimum RPC.
	TabletManagerStopReplicationMinimumProcedure = "/tabletmanagerservice.TabletManager/StopReplicationMinimum"
	// TabletManagerStartReplicationProcedure is the fully-qualified name of the TabletManager's
	// StartReplication RPC.
	TabletManagerStartReplicationProcedure = "/tabletmanagerservice.TabletManager/StartReplication"
	// TabletManagerStartReplicationUntilAfterProcedure is the fully-qualified name of the
	// TabletManager's StartReplicationUntilAfter RPC.
	TabletManagerStartReplicationUntilAfterProcedure = "/tabletmanagerservice.TabletManager/StartReplicationUntilAfter"
	// TabletManagerGetReplicasProcedure is the fully-qualified name of the TabletManager's GetReplicas
	// RPC.
	TabletManagerGetReplicasProcedure = "/tabletmanagerservice.TabletManager/GetReplicas"
	// TabletManagerCreateVReplicationWorkflowProcedure is the fully-qualified name of the
	// TabletManager's CreateVReplicationWorkflow RPC.
	TabletManagerCreateVReplicationWorkflowProcedure = "/tabletmanagerservice.TabletManager/CreateVReplicationWorkflow"
	// TabletManagerDeleteVReplicationWorkflowProcedure is the fully-qualified name of the
	// TabletManager's DeleteVReplicationWorkflow RPC.
	TabletManagerDeleteVReplicationWorkflowProcedure = "/tabletmanagerservice.TabletManager/DeleteVReplicationWorkflow"
	// TabletManagerReadVReplicationWorkflowProcedure is the fully-qualified name of the TabletManager's
	// ReadVReplicationWorkflow RPC.
	TabletManagerReadVReplicationWorkflowProcedure = "/tabletmanagerservice.TabletManager/ReadVReplicationWorkflow"
	// TabletManagerVReplicationExecProcedure is the fully-qualified name of the TabletManager's
	// VReplicationExec RPC.
	TabletManagerVReplicationExecProcedure = "/tabletmanagerservice.TabletManager/VReplicationExec"
	// TabletManagerVReplicationWaitForPosProcedure is the fully-qualified name of the TabletManager's
	// VReplicationWaitForPos RPC.
	TabletManagerVReplicationWaitForPosProcedure = "/tabletmanagerservice.TabletManager/VReplicationWaitForPos"
	// TabletManagerUpdateVReplicationWorkflowProcedure is the fully-qualified name of the
	// TabletManager's UpdateVReplicationWorkflow RPC.
	TabletManagerUpdateVReplicationWorkflowProcedure = "/tabletmanagerservice.TabletManager/UpdateVReplicationWorkflow"
	// TabletManagerVDiffProcedure is the fully-qualified name of the TabletManager's VDiff RPC.
	TabletManagerVDiffProcedure = "/tabletmanagerservice.TabletManager/VDiff"
	// TabletManagerResetReplicationProcedure is the fully-qualified name of the TabletManager's
	// ResetReplication RPC.
	TabletManagerResetReplicationProcedure = "/tabletmanagerservice.TabletManager/ResetReplication"
	// TabletManagerInitPrimaryProcedure is the fully-qualified name of the TabletManager's InitPrimary
	// RPC.
	TabletManagerInitPrimaryProcedure = "/tabletmanagerservice.TabletManager/InitPrimary"
	// TabletManagerPopulateReparentJournalProcedure is the fully-qualified name of the TabletManager's
	// PopulateReparentJournal RPC.
	TabletManagerPopulateReparentJournalProcedure = "/tabletmanagerservice.TabletManager/PopulateReparentJournal"
	// TabletManagerInitReplicaProcedure is the fully-qualified name of the TabletManager's InitReplica
	// RPC.
	TabletManagerInitReplicaProcedure = "/tabletmanagerservice.TabletManager/InitReplica"
	// TabletManagerDemotePrimaryProcedure is the fully-qualified name of the TabletManager's
	// DemotePrimary RPC.
	TabletManagerDemotePrimaryProcedure = "/tabletmanagerservice.TabletManager/DemotePrimary"
	// TabletManagerUndoDemotePrimaryProcedure is the fully-qualified name of the TabletManager's
	// UndoDemotePrimary RPC.
	TabletManagerUndoDemotePrimaryProcedure = "/tabletmanagerservice.TabletManager/UndoDemotePrimary"
	// TabletManagerReplicaWasPromotedProcedure is the fully-qualified name of the TabletManager's
	// ReplicaWasPromoted RPC.
	TabletManagerReplicaWasPromotedProcedure = "/tabletmanagerservice.TabletManager/ReplicaWasPromoted"
	// TabletManagerResetReplicationParametersProcedure is the fully-qualified name of the
	// TabletManager's ResetReplicationParameters RPC.
	TabletManagerResetReplicationParametersProcedure = "/tabletmanagerservice.TabletManager/ResetReplicationParameters"
	// TabletManagerFullStatusProcedure is the fully-qualified name of the TabletManager's FullStatus
	// RPC.
	TabletManagerFullStatusProcedure = "/tabletmanagerservice.TabletManager/FullStatus"
	// TabletManagerSetReplicationSourceProcedure is the fully-qualified name of the TabletManager's
	// SetReplicationSource RPC.
	TabletManagerSetReplicationSourceProcedure = "/tabletmanagerservice.TabletManager/SetReplicationSource"
	// TabletManagerReplicaWasRestartedProcedure is the fully-qualified name of the TabletManager's
	// ReplicaWasRestarted RPC.
	TabletManagerReplicaWasRestartedProcedure = "/tabletmanagerservice.TabletManager/ReplicaWasRestarted"
	// TabletManagerStopReplicationAndGetStatusProcedure is the fully-qualified name of the
	// TabletManager's StopReplicationAndGetStatus RPC.
	TabletManagerStopReplicationAndGetStatusProcedure = "/tabletmanagerservice.TabletManager/StopReplicationAndGetStatus"
	// TabletManagerPromoteReplicaProcedure is the fully-qualified name of the TabletManager's
	// PromoteReplica RPC.
	TabletManagerPromoteReplicaProcedure = "/tabletmanagerservice.TabletManager/PromoteReplica"
	// TabletManagerBackupProcedure is the fully-qualified name of the TabletManager's Backup RPC.
	TabletManagerBackupProcedure = "/tabletmanagerservice.TabletManager/Backup"
	// TabletManagerRestoreFromBackupProcedure is the fully-qualified name of the TabletManager's
	// RestoreFromBackup RPC.
	TabletManagerRestoreFromBackupProcedure = "/tabletmanagerservice.TabletManager/RestoreFromBackup"
	// TabletManagerCheckThrottlerProcedure is the fully-qualified name of the TabletManager's
	// CheckThrottler RPC.
	TabletManagerCheckThrottlerProcedure = "/tabletmanagerservice.TabletManager/CheckThrottler"
)

// TabletManagerClient is a client for the tabletmanagerservice.TabletManager service.
type TabletManagerClient interface {
	// Ping returns the input payload
	Ping(context.Context, *connect.Request[v19.PingRequest]) (*connect.Response[v19.PingResponse], error)
	// Sleep sleeps for the provided duration
	Sleep(context.Context, *connect.Request[v19.SleepRequest]) (*connect.Response[v19.SleepResponse], error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(context.Context, *connect.Request[v19.ExecuteHookRequest]) (*connect.Response[v19.ExecuteHookResponse], error)
	// GetSchema asks the tablet for its schema
	GetSchema(context.Context, *connect.Request[v19.GetSchemaRequest]) (*connect.Response[v19.GetSchemaResponse], error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(context.Context, *connect.Request[v19.GetPermissionsRequest]) (*connect.Response[v19.GetPermissionsResponse], error)
	SetReadOnly(context.Context, *connect.Request[v19.SetReadOnlyRequest]) (*connect.Response[v19.SetReadOnlyResponse], error)
	SetReadWrite(context.Context, *connect.Request[v19.SetReadWriteRequest]) (*connect.Response[v19.SetReadWriteResponse], error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(context.Context, *connect.Request[v19.ChangeTypeRequest]) (*connect.Response[v19.ChangeTypeResponse], error)
	RefreshState(context.Context, *connect.Request[v19.RefreshStateRequest]) (*connect.Response[v19.RefreshStateResponse], error)
	RunHealthCheck(context.Context, *connect.Request[v19.RunHealthCheckRequest]) (*connect.Response[v19.RunHealthCheckResponse], error)
	ReloadSchema(context.Context, *connect.Request[v19.ReloadSchemaRequest]) (*connect.Response[v19.ReloadSchemaResponse], error)
	PreflightSchema(context.Context, *connect.Request[v19.PreflightSchemaRequest]) (*connect.Response[v19.PreflightSchemaResponse], error)
	ApplySchema(context.Context, *connect.Request[v19.ApplySchemaRequest]) (*connect.Response[v19.ApplySchemaResponse], error)
	ResetSequences(context.Context, *connect.Request[v19.ResetSequencesRequest]) (*connect.Response[v19.ResetSequencesResponse], error)
	LockTables(context.Context, *connect.Request[v19.LockTablesRequest]) (*connect.Response[v19.LockTablesResponse], error)
	UnlockTables(context.Context, *connect.Request[v19.UnlockTablesRequest]) (*connect.Response[v19.UnlockTablesResponse], error)
	ExecuteQuery(context.Context, *connect.Request[v19.ExecuteQueryRequest]) (*connect.Response[v19.ExecuteQueryResponse], error)
	ExecuteFetchAsDba(context.Context, *connect.Request[v19.ExecuteFetchAsDbaRequest]) (*connect.Response[v19.ExecuteFetchAsDbaResponse], error)
	ExecuteFetchAsAllPrivs(context.Context, *connect.Request[v19.ExecuteFetchAsAllPrivsRequest]) (*connect.Response[v19.ExecuteFetchAsAllPrivsResponse], error)
	ExecuteFetchAsApp(context.Context, *connect.Request[v19.ExecuteFetchAsAppRequest]) (*connect.Response[v19.ExecuteFetchAsAppResponse], error)
	// ReplicationStatus returns the current replication status.
	ReplicationStatus(context.Context, *connect.Request[v19.ReplicationStatusRequest]) (*connect.Response[v19.ReplicationStatusResponse], error)
	// PrimaryStatus returns the current primary status.
	PrimaryStatus(context.Context, *connect.Request[v19.PrimaryStatusRequest]) (*connect.Response[v19.PrimaryStatusResponse], error)
	// PrimaryPosition returns the current primary position
	PrimaryPosition(context.Context, *connect.Request[v19.PrimaryPositionRequest]) (*connect.Response[v19.PrimaryPositionResponse], error)
	// WaitForPosition waits for the position to be reached
	WaitForPosition(context.Context, *connect.Request[v19.WaitForPositionRequest]) (*connect.Response[v19.WaitForPositionResponse], error)
	// StopReplication makes mysql stop its replication
	StopReplication(context.Context, *connect.Request[v19.StopReplicationRequest]) (*connect.Response[v19.StopReplicationResponse], error)
	// StopReplicationMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopReplicationMinimum(context.Context, *connect.Request[v19.StopReplicationMinimumRequest]) (*connect.Response[v19.StopReplicationMinimumResponse], error)
	// StartReplication starts the mysql replication
	StartReplication(context.Context, *connect.Request[v19.StartReplicationRequest]) (*connect.Response[v19.StartReplicationResponse], error)
	// StartReplicationUnitAfter starts the mysql replication until and including
	// the provided position
	StartReplicationUntilAfter(context.Context, *connect.Request[v19.StartReplicationUntilAfterRequest]) (*connect.Response[v19.StartReplicationUntilAfterResponse], error)
	// GetReplicas asks for the list of mysql replicas
	GetReplicas(context.Context, *connect.Request[v19.GetReplicasRequest]) (*connect.Response[v19.GetReplicasResponse], error)
	// VReplication API
	CreateVReplicationWorkflow(context.Context, *connect.Request[v19.CreateVReplicationWorkflowRequest]) (*connect.Response[v19.CreateVReplicationWorkflowResponse], error)
	DeleteVReplicationWorkflow(context.Context, *connect.Request[v19.DeleteVReplicationWorkflowRequest]) (*connect.Response[v19.DeleteVReplicationWorkflowResponse], error)
	ReadVReplicationWorkflow(context.Context, *connect.Request[v19.ReadVReplicationWorkflowRequest]) (*connect.Response[v19.ReadVReplicationWorkflowResponse], error)
	VReplicationExec(context.Context, *connect.Request[v19.VReplicationExecRequest]) (*connect.Response[v19.VReplicationExecResponse], error)
	VReplicationWaitForPos(context.Context, *connect.Request[v19.VReplicationWaitForPosRequest]) (*connect.Response[v19.VReplicationWaitForPosResponse], error)
	UpdateVReplicationWorkflow(context.Context, *connect.Request[v19.UpdateVReplicationWorkflowRequest]) (*connect.Response[v19.UpdateVReplicationWorkflowResponse], error)
	// VDiff API
	VDiff(context.Context, *connect.Request[v19.VDiffRequest]) (*connect.Response[v19.VDiffResponse], error)
	// ResetReplication makes the target not replicating
	ResetReplication(context.Context, *connect.Request[v19.ResetReplicationRequest]) (*connect.Response[v19.ResetReplicationResponse], error)
	// InitPrimary initializes the tablet as a primary
	InitPrimary(context.Context, *connect.Request[v19.InitPrimaryRequest]) (*connect.Response[v19.InitPrimaryResponse], error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(context.Context, *connect.Request[v19.PopulateReparentJournalRequest]) (*connect.Response[v19.PopulateReparentJournalResponse], error)
	// InitReplica tells the tablet to reparent to the primary unconditionally
	InitReplica(context.Context, *connect.Request[v19.InitReplicaRequest]) (*connect.Response[v19.InitReplicaResponse], error)
	// DemotePrimary tells the soon-to-be-former primary it's gonna change
	DemotePrimary(context.Context, *connect.Request[v19.DemotePrimaryRequest]) (*connect.Response[v19.DemotePrimaryResponse], error)
	// UndoDemotePrimary reverts all changes made by DemotePrimary
	UndoDemotePrimary(context.Context, *connect.Request[v19.UndoDemotePrimaryRequest]) (*connect.Response[v19.UndoDemotePrimaryResponse], error)
	// ReplicaWasPromoted tells the remote tablet it is now the primary
	ReplicaWasPromoted(context.Context, *connect.Request[v19.ReplicaWasPromotedRequest]) (*connect.Response[v19.ReplicaWasPromotedResponse], error)
	// ResetReplicationParameters resets the replica replication parameters
	ResetReplicationParameters(context.Context, *connect.Request[v19.ResetReplicationParametersRequest]) (*connect.Response[v19.ResetReplicationParametersResponse], error)
	// FullStatus collects and returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	FullStatus(context.Context, *connect.Request[v19.FullStatusRequest]) (*connect.Response[v19.FullStatusResponse], error)
	// SetReplicationSource tells the replica to reparent
	SetReplicationSource(context.Context, *connect.Request[v19.SetReplicationSourceRequest]) (*connect.Response[v19.SetReplicationSourceResponse], error)
	// ReplicaWasRestarted tells the remote tablet its primary has changed
	ReplicaWasRestarted(context.Context, *connect.Request[v19.ReplicaWasRestartedRequest]) (*connect.Response[v19.ReplicaWasRestartedResponse], error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(context.Context, *connect.Request[v19.StopReplicationAndGetStatusRequest]) (*connect.Response[v19.StopReplicationAndGetStatusResponse], error)
	// PromoteReplica makes the replica the new primary
	PromoteReplica(context.Context, *connect.Request[v19.PromoteReplicaRequest]) (*connect.Response[v19.PromoteReplicaResponse], error)
	Backup(context.Context, *connect.Request[v19.BackupRequest]) (*connect.ServerStreamForClient[v19.BackupResponse], error)
	// RestoreFromBackup deletes all local data and restores it from the latest backup.
	RestoreFromBackup(context.Context, *connect.Request[v19.RestoreFromBackupRequest]) (*connect.ServerStreamForClient[v19.RestoreFromBackupResponse], error)
	// CheckThrottler issues a 'check' on a tablet's throttler
	CheckThrottler(context.Context, *connect.Request[v19.CheckThrottlerRequest]) (*connect.Response[v19.CheckThrottlerResponse], error)
}

// NewTabletManagerClient constructs a client for the tabletmanagerservice.TabletManager
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTabletManagerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TabletManagerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tabletManagerMethods := v191.File_vitess_tabletmanagerservice_v19_tabletmanagerservice_proto.Services().ByName("TabletManager").Methods()
	return &tabletManagerClient{
		ping: connect.NewClient[v19.PingRequest, v19.PingResponse](
			httpClient,
			baseURL+TabletManagerPingProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		sleep: connect.NewClient[v19.SleepRequest, v19.SleepResponse](
			httpClient,
			baseURL+TabletManagerSleepProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("Sleep")),
			connect.WithClientOptions(opts...),
		),
		executeHook: connect.NewClient[v19.ExecuteHookRequest, v19.ExecuteHookResponse](
			httpClient,
			baseURL+TabletManagerExecuteHookProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ExecuteHook")),
			connect.WithClientOptions(opts...),
		),
		getSchema: connect.NewClient[v19.GetSchemaRequest, v19.GetSchemaResponse](
			httpClient,
			baseURL+TabletManagerGetSchemaProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("GetSchema")),
			connect.WithClientOptions(opts...),
		),
		getPermissions: connect.NewClient[v19.GetPermissionsRequest, v19.GetPermissionsResponse](
			httpClient,
			baseURL+TabletManagerGetPermissionsProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("GetPermissions")),
			connect.WithClientOptions(opts...),
		),
		setReadOnly: connect.NewClient[v19.SetReadOnlyRequest, v19.SetReadOnlyResponse](
			httpClient,
			baseURL+TabletManagerSetReadOnlyProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("SetReadOnly")),
			connect.WithClientOptions(opts...),
		),
		setReadWrite: connect.NewClient[v19.SetReadWriteRequest, v19.SetReadWriteResponse](
			httpClient,
			baseURL+TabletManagerSetReadWriteProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("SetReadWrite")),
			connect.WithClientOptions(opts...),
		),
		changeType: connect.NewClient[v19.ChangeTypeRequest, v19.ChangeTypeResponse](
			httpClient,
			baseURL+TabletManagerChangeTypeProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ChangeType")),
			connect.WithClientOptions(opts...),
		),
		refreshState: connect.NewClient[v19.RefreshStateRequest, v19.RefreshStateResponse](
			httpClient,
			baseURL+TabletManagerRefreshStateProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("RefreshState")),
			connect.WithClientOptions(opts...),
		),
		runHealthCheck: connect.NewClient[v19.RunHealthCheckRequest, v19.RunHealthCheckResponse](
			httpClient,
			baseURL+TabletManagerRunHealthCheckProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("RunHealthCheck")),
			connect.WithClientOptions(opts...),
		),
		reloadSchema: connect.NewClient[v19.ReloadSchemaRequest, v19.ReloadSchemaResponse](
			httpClient,
			baseURL+TabletManagerReloadSchemaProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ReloadSchema")),
			connect.WithClientOptions(opts...),
		),
		preflightSchema: connect.NewClient[v19.PreflightSchemaRequest, v19.PreflightSchemaResponse](
			httpClient,
			baseURL+TabletManagerPreflightSchemaProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("PreflightSchema")),
			connect.WithClientOptions(opts...),
		),
		applySchema: connect.NewClient[v19.ApplySchemaRequest, v19.ApplySchemaResponse](
			httpClient,
			baseURL+TabletManagerApplySchemaProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ApplySchema")),
			connect.WithClientOptions(opts...),
		),
		resetSequences: connect.NewClient[v19.ResetSequencesRequest, v19.ResetSequencesResponse](
			httpClient,
			baseURL+TabletManagerResetSequencesProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ResetSequences")),
			connect.WithClientOptions(opts...),
		),
		lockTables: connect.NewClient[v19.LockTablesRequest, v19.LockTablesResponse](
			httpClient,
			baseURL+TabletManagerLockTablesProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("LockTables")),
			connect.WithClientOptions(opts...),
		),
		unlockTables: connect.NewClient[v19.UnlockTablesRequest, v19.UnlockTablesResponse](
			httpClient,
			baseURL+TabletManagerUnlockTablesProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("UnlockTables")),
			connect.WithClientOptions(opts...),
		),
		executeQuery: connect.NewClient[v19.ExecuteQueryRequest, v19.ExecuteQueryResponse](
			httpClient,
			baseURL+TabletManagerExecuteQueryProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ExecuteQuery")),
			connect.WithClientOptions(opts...),
		),
		executeFetchAsDba: connect.NewClient[v19.ExecuteFetchAsDbaRequest, v19.ExecuteFetchAsDbaResponse](
			httpClient,
			baseURL+TabletManagerExecuteFetchAsDbaProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ExecuteFetchAsDba")),
			connect.WithClientOptions(opts...),
		),
		executeFetchAsAllPrivs: connect.NewClient[v19.ExecuteFetchAsAllPrivsRequest, v19.ExecuteFetchAsAllPrivsResponse](
			httpClient,
			baseURL+TabletManagerExecuteFetchAsAllPrivsProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ExecuteFetchAsAllPrivs")),
			connect.WithClientOptions(opts...),
		),
		executeFetchAsApp: connect.NewClient[v19.ExecuteFetchAsAppRequest, v19.ExecuteFetchAsAppResponse](
			httpClient,
			baseURL+TabletManagerExecuteFetchAsAppProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ExecuteFetchAsApp")),
			connect.WithClientOptions(opts...),
		),
		replicationStatus: connect.NewClient[v19.ReplicationStatusRequest, v19.ReplicationStatusResponse](
			httpClient,
			baseURL+TabletManagerReplicationStatusProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ReplicationStatus")),
			connect.WithClientOptions(opts...),
		),
		primaryStatus: connect.NewClient[v19.PrimaryStatusRequest, v19.PrimaryStatusResponse](
			httpClient,
			baseURL+TabletManagerPrimaryStatusProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("PrimaryStatus")),
			connect.WithClientOptions(opts...),
		),
		primaryPosition: connect.NewClient[v19.PrimaryPositionRequest, v19.PrimaryPositionResponse](
			httpClient,
			baseURL+TabletManagerPrimaryPositionProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("PrimaryPosition")),
			connect.WithClientOptions(opts...),
		),
		waitForPosition: connect.NewClient[v19.WaitForPositionRequest, v19.WaitForPositionResponse](
			httpClient,
			baseURL+TabletManagerWaitForPositionProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("WaitForPosition")),
			connect.WithClientOptions(opts...),
		),
		stopReplication: connect.NewClient[v19.StopReplicationRequest, v19.StopReplicationResponse](
			httpClient,
			baseURL+TabletManagerStopReplicationProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("StopReplication")),
			connect.WithClientOptions(opts...),
		),
		stopReplicationMinimum: connect.NewClient[v19.StopReplicationMinimumRequest, v19.StopReplicationMinimumResponse](
			httpClient,
			baseURL+TabletManagerStopReplicationMinimumProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("StopReplicationMinimum")),
			connect.WithClientOptions(opts...),
		),
		startReplication: connect.NewClient[v19.StartReplicationRequest, v19.StartReplicationResponse](
			httpClient,
			baseURL+TabletManagerStartReplicationProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("StartReplication")),
			connect.WithClientOptions(opts...),
		),
		startReplicationUntilAfter: connect.NewClient[v19.StartReplicationUntilAfterRequest, v19.StartReplicationUntilAfterResponse](
			httpClient,
			baseURL+TabletManagerStartReplicationUntilAfterProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("StartReplicationUntilAfter")),
			connect.WithClientOptions(opts...),
		),
		getReplicas: connect.NewClient[v19.GetReplicasRequest, v19.GetReplicasResponse](
			httpClient,
			baseURL+TabletManagerGetReplicasProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("GetReplicas")),
			connect.WithClientOptions(opts...),
		),
		createVReplicationWorkflow: connect.NewClient[v19.CreateVReplicationWorkflowRequest, v19.CreateVReplicationWorkflowResponse](
			httpClient,
			baseURL+TabletManagerCreateVReplicationWorkflowProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("CreateVReplicationWorkflow")),
			connect.WithClientOptions(opts...),
		),
		deleteVReplicationWorkflow: connect.NewClient[v19.DeleteVReplicationWorkflowRequest, v19.DeleteVReplicationWorkflowResponse](
			httpClient,
			baseURL+TabletManagerDeleteVReplicationWorkflowProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("DeleteVReplicationWorkflow")),
			connect.WithClientOptions(opts...),
		),
		readVReplicationWorkflow: connect.NewClient[v19.ReadVReplicationWorkflowRequest, v19.ReadVReplicationWorkflowResponse](
			httpClient,
			baseURL+TabletManagerReadVReplicationWorkflowProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ReadVReplicationWorkflow")),
			connect.WithClientOptions(opts...),
		),
		vReplicationExec: connect.NewClient[v19.VReplicationExecRequest, v19.VReplicationExecResponse](
			httpClient,
			baseURL+TabletManagerVReplicationExecProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("VReplicationExec")),
			connect.WithClientOptions(opts...),
		),
		vReplicationWaitForPos: connect.NewClient[v19.VReplicationWaitForPosRequest, v19.VReplicationWaitForPosResponse](
			httpClient,
			baseURL+TabletManagerVReplicationWaitForPosProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("VReplicationWaitForPos")),
			connect.WithClientOptions(opts...),
		),
		updateVReplicationWorkflow: connect.NewClient[v19.UpdateVReplicationWorkflowRequest, v19.UpdateVReplicationWorkflowResponse](
			httpClient,
			baseURL+TabletManagerUpdateVReplicationWorkflowProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("UpdateVReplicationWorkflow")),
			connect.WithClientOptions(opts...),
		),
		vDiff: connect.NewClient[v19.VDiffRequest, v19.VDiffResponse](
			httpClient,
			baseURL+TabletManagerVDiffProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("VDiff")),
			connect.WithClientOptions(opts...),
		),
		resetReplication: connect.NewClient[v19.ResetReplicationRequest, v19.ResetReplicationResponse](
			httpClient,
			baseURL+TabletManagerResetReplicationProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ResetReplication")),
			connect.WithClientOptions(opts...),
		),
		initPrimary: connect.NewClient[v19.InitPrimaryRequest, v19.InitPrimaryResponse](
			httpClient,
			baseURL+TabletManagerInitPrimaryProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("InitPrimary")),
			connect.WithClientOptions(opts...),
		),
		populateReparentJournal: connect.NewClient[v19.PopulateReparentJournalRequest, v19.PopulateReparentJournalResponse](
			httpClient,
			baseURL+TabletManagerPopulateReparentJournalProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("PopulateReparentJournal")),
			connect.WithClientOptions(opts...),
		),
		initReplica: connect.NewClient[v19.InitReplicaRequest, v19.InitReplicaResponse](
			httpClient,
			baseURL+TabletManagerInitReplicaProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("InitReplica")),
			connect.WithClientOptions(opts...),
		),
		demotePrimary: connect.NewClient[v19.DemotePrimaryRequest, v19.DemotePrimaryResponse](
			httpClient,
			baseURL+TabletManagerDemotePrimaryProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("DemotePrimary")),
			connect.WithClientOptions(opts...),
		),
		undoDemotePrimary: connect.NewClient[v19.UndoDemotePrimaryRequest, v19.UndoDemotePrimaryResponse](
			httpClient,
			baseURL+TabletManagerUndoDemotePrimaryProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("UndoDemotePrimary")),
			connect.WithClientOptions(opts...),
		),
		replicaWasPromoted: connect.NewClient[v19.ReplicaWasPromotedRequest, v19.ReplicaWasPromotedResponse](
			httpClient,
			baseURL+TabletManagerReplicaWasPromotedProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ReplicaWasPromoted")),
			connect.WithClientOptions(opts...),
		),
		resetReplicationParameters: connect.NewClient[v19.ResetReplicationParametersRequest, v19.ResetReplicationParametersResponse](
			httpClient,
			baseURL+TabletManagerResetReplicationParametersProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ResetReplicationParameters")),
			connect.WithClientOptions(opts...),
		),
		fullStatus: connect.NewClient[v19.FullStatusRequest, v19.FullStatusResponse](
			httpClient,
			baseURL+TabletManagerFullStatusProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("FullStatus")),
			connect.WithClientOptions(opts...),
		),
		setReplicationSource: connect.NewClient[v19.SetReplicationSourceRequest, v19.SetReplicationSourceResponse](
			httpClient,
			baseURL+TabletManagerSetReplicationSourceProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("SetReplicationSource")),
			connect.WithClientOptions(opts...),
		),
		replicaWasRestarted: connect.NewClient[v19.ReplicaWasRestartedRequest, v19.ReplicaWasRestartedResponse](
			httpClient,
			baseURL+TabletManagerReplicaWasRestartedProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("ReplicaWasRestarted")),
			connect.WithClientOptions(opts...),
		),
		stopReplicationAndGetStatus: connect.NewClient[v19.StopReplicationAndGetStatusRequest, v19.StopReplicationAndGetStatusResponse](
			httpClient,
			baseURL+TabletManagerStopReplicationAndGetStatusProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("StopReplicationAndGetStatus")),
			connect.WithClientOptions(opts...),
		),
		promoteReplica: connect.NewClient[v19.PromoteReplicaRequest, v19.PromoteReplicaResponse](
			httpClient,
			baseURL+TabletManagerPromoteReplicaProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("PromoteReplica")),
			connect.WithClientOptions(opts...),
		),
		backup: connect.NewClient[v19.BackupRequest, v19.BackupResponse](
			httpClient,
			baseURL+TabletManagerBackupProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("Backup")),
			connect.WithClientOptions(opts...),
		),
		restoreFromBackup: connect.NewClient[v19.RestoreFromBackupRequest, v19.RestoreFromBackupResponse](
			httpClient,
			baseURL+TabletManagerRestoreFromBackupProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("RestoreFromBackup")),
			connect.WithClientOptions(opts...),
		),
		checkThrottler: connect.NewClient[v19.CheckThrottlerRequest, v19.CheckThrottlerResponse](
			httpClient,
			baseURL+TabletManagerCheckThrottlerProcedure,
			connect.WithSchema(tabletManagerMethods.ByName("CheckThrottler")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tabletManagerClient implements TabletManagerClient.
type tabletManagerClient struct {
	ping                        *connect.Client[v19.PingRequest, v19.PingResponse]
	sleep                       *connect.Client[v19.SleepRequest, v19.SleepResponse]
	executeHook                 *connect.Client[v19.ExecuteHookRequest, v19.ExecuteHookResponse]
	getSchema                   *connect.Client[v19.GetSchemaRequest, v19.GetSchemaResponse]
	getPermissions              *connect.Client[v19.GetPermissionsRequest, v19.GetPermissionsResponse]
	setReadOnly                 *connect.Client[v19.SetReadOnlyRequest, v19.SetReadOnlyResponse]
	setReadWrite                *connect.Client[v19.SetReadWriteRequest, v19.SetReadWriteResponse]
	changeType                  *connect.Client[v19.ChangeTypeRequest, v19.ChangeTypeResponse]
	refreshState                *connect.Client[v19.RefreshStateRequest, v19.RefreshStateResponse]
	runHealthCheck              *connect.Client[v19.RunHealthCheckRequest, v19.RunHealthCheckResponse]
	reloadSchema                *connect.Client[v19.ReloadSchemaRequest, v19.ReloadSchemaResponse]
	preflightSchema             *connect.Client[v19.PreflightSchemaRequest, v19.PreflightSchemaResponse]
	applySchema                 *connect.Client[v19.ApplySchemaRequest, v19.ApplySchemaResponse]
	resetSequences              *connect.Client[v19.ResetSequencesRequest, v19.ResetSequencesResponse]
	lockTables                  *connect.Client[v19.LockTablesRequest, v19.LockTablesResponse]
	unlockTables                *connect.Client[v19.UnlockTablesRequest, v19.UnlockTablesResponse]
	executeQuery                *connect.Client[v19.ExecuteQueryRequest, v19.ExecuteQueryResponse]
	executeFetchAsDba           *connect.Client[v19.ExecuteFetchAsDbaRequest, v19.ExecuteFetchAsDbaResponse]
	executeFetchAsAllPrivs      *connect.Client[v19.ExecuteFetchAsAllPrivsRequest, v19.ExecuteFetchAsAllPrivsResponse]
	executeFetchAsApp           *connect.Client[v19.ExecuteFetchAsAppRequest, v19.ExecuteFetchAsAppResponse]
	replicationStatus           *connect.Client[v19.ReplicationStatusRequest, v19.ReplicationStatusResponse]
	primaryStatus               *connect.Client[v19.PrimaryStatusRequest, v19.PrimaryStatusResponse]
	primaryPosition             *connect.Client[v19.PrimaryPositionRequest, v19.PrimaryPositionResponse]
	waitForPosition             *connect.Client[v19.WaitForPositionRequest, v19.WaitForPositionResponse]
	stopReplication             *connect.Client[v19.StopReplicationRequest, v19.StopReplicationResponse]
	stopReplicationMinimum      *connect.Client[v19.StopReplicationMinimumRequest, v19.StopReplicationMinimumResponse]
	startReplication            *connect.Client[v19.StartReplicationRequest, v19.StartReplicationResponse]
	startReplicationUntilAfter  *connect.Client[v19.StartReplicationUntilAfterRequest, v19.StartReplicationUntilAfterResponse]
	getReplicas                 *connect.Client[v19.GetReplicasRequest, v19.GetReplicasResponse]
	createVReplicationWorkflow  *connect.Client[v19.CreateVReplicationWorkflowRequest, v19.CreateVReplicationWorkflowResponse]
	deleteVReplicationWorkflow  *connect.Client[v19.DeleteVReplicationWorkflowRequest, v19.DeleteVReplicationWorkflowResponse]
	readVReplicationWorkflow    *connect.Client[v19.ReadVReplicationWorkflowRequest, v19.ReadVReplicationWorkflowResponse]
	vReplicationExec            *connect.Client[v19.VReplicationExecRequest, v19.VReplicationExecResponse]
	vReplicationWaitForPos      *connect.Client[v19.VReplicationWaitForPosRequest, v19.VReplicationWaitForPosResponse]
	updateVReplicationWorkflow  *connect.Client[v19.UpdateVReplicationWorkflowRequest, v19.UpdateVReplicationWorkflowResponse]
	vDiff                       *connect.Client[v19.VDiffRequest, v19.VDiffResponse]
	resetReplication            *connect.Client[v19.ResetReplicationRequest, v19.ResetReplicationResponse]
	initPrimary                 *connect.Client[v19.InitPrimaryRequest, v19.InitPrimaryResponse]
	populateReparentJournal     *connect.Client[v19.PopulateReparentJournalRequest, v19.PopulateReparentJournalResponse]
	initReplica                 *connect.Client[v19.InitReplicaRequest, v19.InitReplicaResponse]
	demotePrimary               *connect.Client[v19.DemotePrimaryRequest, v19.DemotePrimaryResponse]
	undoDemotePrimary           *connect.Client[v19.UndoDemotePrimaryRequest, v19.UndoDemotePrimaryResponse]
	replicaWasPromoted          *connect.Client[v19.ReplicaWasPromotedRequest, v19.ReplicaWasPromotedResponse]
	resetReplicationParameters  *connect.Client[v19.ResetReplicationParametersRequest, v19.ResetReplicationParametersResponse]
	fullStatus                  *connect.Client[v19.FullStatusRequest, v19.FullStatusResponse]
	setReplicationSource        *connect.Client[v19.SetReplicationSourceRequest, v19.SetReplicationSourceResponse]
	replicaWasRestarted         *connect.Client[v19.ReplicaWasRestartedRequest, v19.ReplicaWasRestartedResponse]
	stopReplicationAndGetStatus *connect.Client[v19.StopReplicationAndGetStatusRequest, v19.StopReplicationAndGetStatusResponse]
	promoteReplica              *connect.Client[v19.PromoteReplicaRequest, v19.PromoteReplicaResponse]
	backup                      *connect.Client[v19.BackupRequest, v19.BackupResponse]
	restoreFromBackup           *connect.Client[v19.RestoreFromBackupRequest, v19.RestoreFromBackupResponse]
	checkThrottler              *connect.Client[v19.CheckThrottlerRequest, v19.CheckThrottlerResponse]
}

// Ping calls tabletmanagerservice.TabletManager.Ping.
func (c *tabletManagerClient) Ping(ctx context.Context, req *connect.Request[v19.PingRequest]) (*connect.Response[v19.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Sleep calls tabletmanagerservice.TabletManager.Sleep.
func (c *tabletManagerClient) Sleep(ctx context.Context, req *connect.Request[v19.SleepRequest]) (*connect.Response[v19.SleepResponse], error) {
	return c.sleep.CallUnary(ctx, req)
}

// ExecuteHook calls tabletmanagerservice.TabletManager.ExecuteHook.
func (c *tabletManagerClient) ExecuteHook(ctx context.Context, req *connect.Request[v19.ExecuteHookRequest]) (*connect.Response[v19.ExecuteHookResponse], error) {
	return c.executeHook.CallUnary(ctx, req)
}

// GetSchema calls tabletmanagerservice.TabletManager.GetSchema.
func (c *tabletManagerClient) GetSchema(ctx context.Context, req *connect.Request[v19.GetSchemaRequest]) (*connect.Response[v19.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// GetPermissions calls tabletmanagerservice.TabletManager.GetPermissions.
func (c *tabletManagerClient) GetPermissions(ctx context.Context, req *connect.Request[v19.GetPermissionsRequest]) (*connect.Response[v19.GetPermissionsResponse], error) {
	return c.getPermissions.CallUnary(ctx, req)
}

// SetReadOnly calls tabletmanagerservice.TabletManager.SetReadOnly.
func (c *tabletManagerClient) SetReadOnly(ctx context.Context, req *connect.Request[v19.SetReadOnlyRequest]) (*connect.Response[v19.SetReadOnlyResponse], error) {
	return c.setReadOnly.CallUnary(ctx, req)
}

// SetReadWrite calls tabletmanagerservice.TabletManager.SetReadWrite.
func (c *tabletManagerClient) SetReadWrite(ctx context.Context, req *connect.Request[v19.SetReadWriteRequest]) (*connect.Response[v19.SetReadWriteResponse], error) {
	return c.setReadWrite.CallUnary(ctx, req)
}

// ChangeType calls tabletmanagerservice.TabletManager.ChangeType.
func (c *tabletManagerClient) ChangeType(ctx context.Context, req *connect.Request[v19.ChangeTypeRequest]) (*connect.Response[v19.ChangeTypeResponse], error) {
	return c.changeType.CallUnary(ctx, req)
}

// RefreshState calls tabletmanagerservice.TabletManager.RefreshState.
func (c *tabletManagerClient) RefreshState(ctx context.Context, req *connect.Request[v19.RefreshStateRequest]) (*connect.Response[v19.RefreshStateResponse], error) {
	return c.refreshState.CallUnary(ctx, req)
}

// RunHealthCheck calls tabletmanagerservice.TabletManager.RunHealthCheck.
func (c *tabletManagerClient) RunHealthCheck(ctx context.Context, req *connect.Request[v19.RunHealthCheckRequest]) (*connect.Response[v19.RunHealthCheckResponse], error) {
	return c.runHealthCheck.CallUnary(ctx, req)
}

// ReloadSchema calls tabletmanagerservice.TabletManager.ReloadSchema.
func (c *tabletManagerClient) ReloadSchema(ctx context.Context, req *connect.Request[v19.ReloadSchemaRequest]) (*connect.Response[v19.ReloadSchemaResponse], error) {
	return c.reloadSchema.CallUnary(ctx, req)
}

// PreflightSchema calls tabletmanagerservice.TabletManager.PreflightSchema.
func (c *tabletManagerClient) PreflightSchema(ctx context.Context, req *connect.Request[v19.PreflightSchemaRequest]) (*connect.Response[v19.PreflightSchemaResponse], error) {
	return c.preflightSchema.CallUnary(ctx, req)
}

// ApplySchema calls tabletmanagerservice.TabletManager.ApplySchema.
func (c *tabletManagerClient) ApplySchema(ctx context.Context, req *connect.Request[v19.ApplySchemaRequest]) (*connect.Response[v19.ApplySchemaResponse], error) {
	return c.applySchema.CallUnary(ctx, req)
}

// ResetSequences calls tabletmanagerservice.TabletManager.ResetSequences.
func (c *tabletManagerClient) ResetSequences(ctx context.Context, req *connect.Request[v19.ResetSequencesRequest]) (*connect.Response[v19.ResetSequencesResponse], error) {
	return c.resetSequences.CallUnary(ctx, req)
}

// LockTables calls tabletmanagerservice.TabletManager.LockTables.
func (c *tabletManagerClient) LockTables(ctx context.Context, req *connect.Request[v19.LockTablesRequest]) (*connect.Response[v19.LockTablesResponse], error) {
	return c.lockTables.CallUnary(ctx, req)
}

// UnlockTables calls tabletmanagerservice.TabletManager.UnlockTables.
func (c *tabletManagerClient) UnlockTables(ctx context.Context, req *connect.Request[v19.UnlockTablesRequest]) (*connect.Response[v19.UnlockTablesResponse], error) {
	return c.unlockTables.CallUnary(ctx, req)
}

// ExecuteQuery calls tabletmanagerservice.TabletManager.ExecuteQuery.
func (c *tabletManagerClient) ExecuteQuery(ctx context.Context, req *connect.Request[v19.ExecuteQueryRequest]) (*connect.Response[v19.ExecuteQueryResponse], error) {
	return c.executeQuery.CallUnary(ctx, req)
}

// ExecuteFetchAsDba calls tabletmanagerservice.TabletManager.ExecuteFetchAsDba.
func (c *tabletManagerClient) ExecuteFetchAsDba(ctx context.Context, req *connect.Request[v19.ExecuteFetchAsDbaRequest]) (*connect.Response[v19.ExecuteFetchAsDbaResponse], error) {
	return c.executeFetchAsDba.CallUnary(ctx, req)
}

// ExecuteFetchAsAllPrivs calls
// tabletmanagerservice.TabletManager.ExecuteFetchAsAllPrivs.
func (c *tabletManagerClient) ExecuteFetchAsAllPrivs(ctx context.Context, req *connect.Request[v19.ExecuteFetchAsAllPrivsRequest]) (*connect.Response[v19.ExecuteFetchAsAllPrivsResponse], error) {
	return c.executeFetchAsAllPrivs.CallUnary(ctx, req)
}

// ExecuteFetchAsApp calls tabletmanagerservice.TabletManager.ExecuteFetchAsApp.
func (c *tabletManagerClient) ExecuteFetchAsApp(ctx context.Context, req *connect.Request[v19.ExecuteFetchAsAppRequest]) (*connect.Response[v19.ExecuteFetchAsAppResponse], error) {
	return c.executeFetchAsApp.CallUnary(ctx, req)
}

// ReplicationStatus calls tabletmanagerservice.TabletManager.ReplicationStatus.
func (c *tabletManagerClient) ReplicationStatus(ctx context.Context, req *connect.Request[v19.ReplicationStatusRequest]) (*connect.Response[v19.ReplicationStatusResponse], error) {
	return c.replicationStatus.CallUnary(ctx, req)
}

// PrimaryStatus calls tabletmanagerservice.TabletManager.PrimaryStatus.
func (c *tabletManagerClient) PrimaryStatus(ctx context.Context, req *connect.Request[v19.PrimaryStatusRequest]) (*connect.Response[v19.PrimaryStatusResponse], error) {
	return c.primaryStatus.CallUnary(ctx, req)
}

// PrimaryPosition calls tabletmanagerservice.TabletManager.PrimaryPosition.
func (c *tabletManagerClient) PrimaryPosition(ctx context.Context, req *connect.Request[v19.PrimaryPositionRequest]) (*connect.Response[v19.PrimaryPositionResponse], error) {
	return c.primaryPosition.CallUnary(ctx, req)
}

// WaitForPosition calls tabletmanagerservice.TabletManager.WaitForPosition.
func (c *tabletManagerClient) WaitForPosition(ctx context.Context, req *connect.Request[v19.WaitForPositionRequest]) (*connect.Response[v19.WaitForPositionResponse], error) {
	return c.waitForPosition.CallUnary(ctx, req)
}

// StopReplication calls tabletmanagerservice.TabletManager.StopReplication.
func (c *tabletManagerClient) StopReplication(ctx context.Context, req *connect.Request[v19.StopReplicationRequest]) (*connect.Response[v19.StopReplicationResponse], error) {
	return c.stopReplication.CallUnary(ctx, req)
}

// StopReplicationMinimum calls
// tabletmanagerservice.TabletManager.StopReplicationMinimum.
func (c *tabletManagerClient) StopReplicationMinimum(ctx context.Context, req *connect.Request[v19.StopReplicationMinimumRequest]) (*connect.Response[v19.StopReplicationMinimumResponse], error) {
	return c.stopReplicationMinimum.CallUnary(ctx, req)
}

// StartReplication calls tabletmanagerservice.TabletManager.StartReplication.
func (c *tabletManagerClient) StartReplication(ctx context.Context, req *connect.Request[v19.StartReplicationRequest]) (*connect.Response[v19.StartReplicationResponse], error) {
	return c.startReplication.CallUnary(ctx, req)
}

// StartReplicationUntilAfter calls
// tabletmanagerservice.TabletManager.StartReplicationUntilAfter.
func (c *tabletManagerClient) StartReplicationUntilAfter(ctx context.Context, req *connect.Request[v19.StartReplicationUntilAfterRequest]) (*connect.Response[v19.StartReplicationUntilAfterResponse], error) {
	return c.startReplicationUntilAfter.CallUnary(ctx, req)
}

// GetReplicas calls tabletmanagerservice.TabletManager.GetReplicas.
func (c *tabletManagerClient) GetReplicas(ctx context.Context, req *connect.Request[v19.GetReplicasRequest]) (*connect.Response[v19.GetReplicasResponse], error) {
	return c.getReplicas.CallUnary(ctx, req)
}

// CreateVReplicationWorkflow calls
// tabletmanagerservice.TabletManager.CreateVReplicationWorkflow.
func (c *tabletManagerClient) CreateVReplicationWorkflow(ctx context.Context, req *connect.Request[v19.CreateVReplicationWorkflowRequest]) (*connect.Response[v19.CreateVReplicationWorkflowResponse], error) {
	return c.createVReplicationWorkflow.CallUnary(ctx, req)
}

// DeleteVReplicationWorkflow calls
// tabletmanagerservice.TabletManager.DeleteVReplicationWorkflow.
func (c *tabletManagerClient) DeleteVReplicationWorkflow(ctx context.Context, req *connect.Request[v19.DeleteVReplicationWorkflowRequest]) (*connect.Response[v19.DeleteVReplicationWorkflowResponse], error) {
	return c.deleteVReplicationWorkflow.CallUnary(ctx, req)
}

// ReadVReplicationWorkflow calls
// tabletmanagerservice.TabletManager.ReadVReplicationWorkflow.
func (c *tabletManagerClient) ReadVReplicationWorkflow(ctx context.Context, req *connect.Request[v19.ReadVReplicationWorkflowRequest]) (*connect.Response[v19.ReadVReplicationWorkflowResponse], error) {
	return c.readVReplicationWorkflow.CallUnary(ctx, req)
}

// VReplicationExec calls tabletmanagerservice.TabletManager.VReplicationExec.
func (c *tabletManagerClient) VReplicationExec(ctx context.Context, req *connect.Request[v19.VReplicationExecRequest]) (*connect.Response[v19.VReplicationExecResponse], error) {
	return c.vReplicationExec.CallUnary(ctx, req)
}

// VReplicationWaitForPos calls
// tabletmanagerservice.TabletManager.VReplicationWaitForPos.
func (c *tabletManagerClient) VReplicationWaitForPos(ctx context.Context, req *connect.Request[v19.VReplicationWaitForPosRequest]) (*connect.Response[v19.VReplicationWaitForPosResponse], error) {
	return c.vReplicationWaitForPos.CallUnary(ctx, req)
}

// UpdateVReplicationWorkflow calls
// tabletmanagerservice.TabletManager.UpdateVReplicationWorkflow.
func (c *tabletManagerClient) UpdateVReplicationWorkflow(ctx context.Context, req *connect.Request[v19.UpdateVReplicationWorkflowRequest]) (*connect.Response[v19.UpdateVReplicationWorkflowResponse], error) {
	return c.updateVReplicationWorkflow.CallUnary(ctx, req)
}

// VDiff calls tabletmanagerservice.TabletManager.VDiff.
func (c *tabletManagerClient) VDiff(ctx context.Context, req *connect.Request[v19.VDiffRequest]) (*connect.Response[v19.VDiffResponse], error) {
	return c.vDiff.CallUnary(ctx, req)
}

// ResetReplication calls tabletmanagerservice.TabletManager.ResetReplication.
func (c *tabletManagerClient) ResetReplication(ctx context.Context, req *connect.Request[v19.ResetReplicationRequest]) (*connect.Response[v19.ResetReplicationResponse], error) {
	return c.resetReplication.CallUnary(ctx, req)
}

// InitPrimary calls tabletmanagerservice.TabletManager.InitPrimary.
func (c *tabletManagerClient) InitPrimary(ctx context.Context, req *connect.Request[v19.InitPrimaryRequest]) (*connect.Response[v19.InitPrimaryResponse], error) {
	return c.initPrimary.CallUnary(ctx, req)
}

// PopulateReparentJournal calls
// tabletmanagerservice.TabletManager.PopulateReparentJournal.
func (c *tabletManagerClient) PopulateReparentJournal(ctx context.Context, req *connect.Request[v19.PopulateReparentJournalRequest]) (*connect.Response[v19.PopulateReparentJournalResponse], error) {
	return c.populateReparentJournal.CallUnary(ctx, req)
}

// InitReplica calls tabletmanagerservice.TabletManager.InitReplica.
func (c *tabletManagerClient) InitReplica(ctx context.Context, req *connect.Request[v19.InitReplicaRequest]) (*connect.Response[v19.InitReplicaResponse], error) {
	return c.initReplica.CallUnary(ctx, req)
}

// DemotePrimary calls tabletmanagerservice.TabletManager.DemotePrimary.
func (c *tabletManagerClient) DemotePrimary(ctx context.Context, req *connect.Request[v19.DemotePrimaryRequest]) (*connect.Response[v19.DemotePrimaryResponse], error) {
	return c.demotePrimary.CallUnary(ctx, req)
}

// UndoDemotePrimary calls tabletmanagerservice.TabletManager.UndoDemotePrimary.
func (c *tabletManagerClient) UndoDemotePrimary(ctx context.Context, req *connect.Request[v19.UndoDemotePrimaryRequest]) (*connect.Response[v19.UndoDemotePrimaryResponse], error) {
	return c.undoDemotePrimary.CallUnary(ctx, req)
}

// ReplicaWasPromoted calls tabletmanagerservice.TabletManager.ReplicaWasPromoted.
func (c *tabletManagerClient) ReplicaWasPromoted(ctx context.Context, req *connect.Request[v19.ReplicaWasPromotedRequest]) (*connect.Response[v19.ReplicaWasPromotedResponse], error) {
	return c.replicaWasPromoted.CallUnary(ctx, req)
}

// ResetReplicationParameters calls
// tabletmanagerservice.TabletManager.ResetReplicationParameters.
func (c *tabletManagerClient) ResetReplicationParameters(ctx context.Context, req *connect.Request[v19.ResetReplicationParametersRequest]) (*connect.Response[v19.ResetReplicationParametersResponse], error) {
	return c.resetReplicationParameters.CallUnary(ctx, req)
}

// FullStatus calls tabletmanagerservice.TabletManager.FullStatus.
func (c *tabletManagerClient) FullStatus(ctx context.Context, req *connect.Request[v19.FullStatusRequest]) (*connect.Response[v19.FullStatusResponse], error) {
	return c.fullStatus.CallUnary(ctx, req)
}

// SetReplicationSource calls tabletmanagerservice.TabletManager.SetReplicationSource.
func (c *tabletManagerClient) SetReplicationSource(ctx context.Context, req *connect.Request[v19.SetReplicationSourceRequest]) (*connect.Response[v19.SetReplicationSourceResponse], error) {
	return c.setReplicationSource.CallUnary(ctx, req)
}

// ReplicaWasRestarted calls tabletmanagerservice.TabletManager.ReplicaWasRestarted.
func (c *tabletManagerClient) ReplicaWasRestarted(ctx context.Context, req *connect.Request[v19.ReplicaWasRestartedRequest]) (*connect.Response[v19.ReplicaWasRestartedResponse], error) {
	return c.replicaWasRestarted.CallUnary(ctx, req)
}

// StopReplicationAndGetStatus calls
// tabletmanagerservice.TabletManager.StopReplicationAndGetStatus.
func (c *tabletManagerClient) StopReplicationAndGetStatus(ctx context.Context, req *connect.Request[v19.StopReplicationAndGetStatusRequest]) (*connect.Response[v19.StopReplicationAndGetStatusResponse], error) {
	return c.stopReplicationAndGetStatus.CallUnary(ctx, req)
}

// PromoteReplica calls tabletmanagerservice.TabletManager.PromoteReplica.
func (c *tabletManagerClient) PromoteReplica(ctx context.Context, req *connect.Request[v19.PromoteReplicaRequest]) (*connect.Response[v19.PromoteReplicaResponse], error) {
	return c.promoteReplica.CallUnary(ctx, req)
}

// Backup calls tabletmanagerservice.TabletManager.Backup.
func (c *tabletManagerClient) Backup(ctx context.Context, req *connect.Request[v19.BackupRequest]) (*connect.ServerStreamForClient[v19.BackupResponse], error) {
	return c.backup.CallServerStream(ctx, req)
}

// RestoreFromBackup calls tabletmanagerservice.TabletManager.RestoreFromBackup.
func (c *tabletManagerClient) RestoreFromBackup(ctx context.Context, req *connect.Request[v19.RestoreFromBackupRequest]) (*connect.ServerStreamForClient[v19.RestoreFromBackupResponse], error) {
	return c.restoreFromBackup.CallServerStream(ctx, req)
}

// CheckThrottler calls tabletmanagerservice.TabletManager.CheckThrottler.
func (c *tabletManagerClient) CheckThrottler(ctx context.Context, req *connect.Request[v19.CheckThrottlerRequest]) (*connect.Response[v19.CheckThrottlerResponse], error) {
	return c.checkThrottler.CallUnary(ctx, req)
}

// TabletManagerHandler is an implementation of the tabletmanagerservice.TabletManager
// service.
type TabletManagerHandler interface {
	// Ping returns the input payload
	Ping(context.Context, *connect.Request[v19.PingRequest]) (*connect.Response[v19.PingResponse], error)
	// Sleep sleeps for the provided duration
	Sleep(context.Context, *connect.Request[v19.SleepRequest]) (*connect.Response[v19.SleepResponse], error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(context.Context, *connect.Request[v19.ExecuteHookRequest]) (*connect.Response[v19.ExecuteHookResponse], error)
	// GetSchema asks the tablet for its schema
	GetSchema(context.Context, *connect.Request[v19.GetSchemaRequest]) (*connect.Response[v19.GetSchemaResponse], error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(context.Context, *connect.Request[v19.GetPermissionsRequest]) (*connect.Response[v19.GetPermissionsResponse], error)
	SetReadOnly(context.Context, *connect.Request[v19.SetReadOnlyRequest]) (*connect.Response[v19.SetReadOnlyResponse], error)
	SetReadWrite(context.Context, *connect.Request[v19.SetReadWriteRequest]) (*connect.Response[v19.SetReadWriteResponse], error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(context.Context, *connect.Request[v19.ChangeTypeRequest]) (*connect.Response[v19.ChangeTypeResponse], error)
	RefreshState(context.Context, *connect.Request[v19.RefreshStateRequest]) (*connect.Response[v19.RefreshStateResponse], error)
	RunHealthCheck(context.Context, *connect.Request[v19.RunHealthCheckRequest]) (*connect.Response[v19.RunHealthCheckResponse], error)
	ReloadSchema(context.Context, *connect.Request[v19.ReloadSchemaRequest]) (*connect.Response[v19.ReloadSchemaResponse], error)
	PreflightSchema(context.Context, *connect.Request[v19.PreflightSchemaRequest]) (*connect.Response[v19.PreflightSchemaResponse], error)
	ApplySchema(context.Context, *connect.Request[v19.ApplySchemaRequest]) (*connect.Response[v19.ApplySchemaResponse], error)
	ResetSequences(context.Context, *connect.Request[v19.ResetSequencesRequest]) (*connect.Response[v19.ResetSequencesResponse], error)
	LockTables(context.Context, *connect.Request[v19.LockTablesRequest]) (*connect.Response[v19.LockTablesResponse], error)
	UnlockTables(context.Context, *connect.Request[v19.UnlockTablesRequest]) (*connect.Response[v19.UnlockTablesResponse], error)
	ExecuteQuery(context.Context, *connect.Request[v19.ExecuteQueryRequest]) (*connect.Response[v19.ExecuteQueryResponse], error)
	ExecuteFetchAsDba(context.Context, *connect.Request[v19.ExecuteFetchAsDbaRequest]) (*connect.Response[v19.ExecuteFetchAsDbaResponse], error)
	ExecuteFetchAsAllPrivs(context.Context, *connect.Request[v19.ExecuteFetchAsAllPrivsRequest]) (*connect.Response[v19.ExecuteFetchAsAllPrivsResponse], error)
	ExecuteFetchAsApp(context.Context, *connect.Request[v19.ExecuteFetchAsAppRequest]) (*connect.Response[v19.ExecuteFetchAsAppResponse], error)
	// ReplicationStatus returns the current replication status.
	ReplicationStatus(context.Context, *connect.Request[v19.ReplicationStatusRequest]) (*connect.Response[v19.ReplicationStatusResponse], error)
	// PrimaryStatus returns the current primary status.
	PrimaryStatus(context.Context, *connect.Request[v19.PrimaryStatusRequest]) (*connect.Response[v19.PrimaryStatusResponse], error)
	// PrimaryPosition returns the current primary position
	PrimaryPosition(context.Context, *connect.Request[v19.PrimaryPositionRequest]) (*connect.Response[v19.PrimaryPositionResponse], error)
	// WaitForPosition waits for the position to be reached
	WaitForPosition(context.Context, *connect.Request[v19.WaitForPositionRequest]) (*connect.Response[v19.WaitForPositionResponse], error)
	// StopReplication makes mysql stop its replication
	StopReplication(context.Context, *connect.Request[v19.StopReplicationRequest]) (*connect.Response[v19.StopReplicationResponse], error)
	// StopReplicationMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopReplicationMinimum(context.Context, *connect.Request[v19.StopReplicationMinimumRequest]) (*connect.Response[v19.StopReplicationMinimumResponse], error)
	// StartReplication starts the mysql replication
	StartReplication(context.Context, *connect.Request[v19.StartReplicationRequest]) (*connect.Response[v19.StartReplicationResponse], error)
	// StartReplicationUnitAfter starts the mysql replication until and including
	// the provided position
	StartReplicationUntilAfter(context.Context, *connect.Request[v19.StartReplicationUntilAfterRequest]) (*connect.Response[v19.StartReplicationUntilAfterResponse], error)
	// GetReplicas asks for the list of mysql replicas
	GetReplicas(context.Context, *connect.Request[v19.GetReplicasRequest]) (*connect.Response[v19.GetReplicasResponse], error)
	// VReplication API
	CreateVReplicationWorkflow(context.Context, *connect.Request[v19.CreateVReplicationWorkflowRequest]) (*connect.Response[v19.CreateVReplicationWorkflowResponse], error)
	DeleteVReplicationWorkflow(context.Context, *connect.Request[v19.DeleteVReplicationWorkflowRequest]) (*connect.Response[v19.DeleteVReplicationWorkflowResponse], error)
	ReadVReplicationWorkflow(context.Context, *connect.Request[v19.ReadVReplicationWorkflowRequest]) (*connect.Response[v19.ReadVReplicationWorkflowResponse], error)
	VReplicationExec(context.Context, *connect.Request[v19.VReplicationExecRequest]) (*connect.Response[v19.VReplicationExecResponse], error)
	VReplicationWaitForPos(context.Context, *connect.Request[v19.VReplicationWaitForPosRequest]) (*connect.Response[v19.VReplicationWaitForPosResponse], error)
	UpdateVReplicationWorkflow(context.Context, *connect.Request[v19.UpdateVReplicationWorkflowRequest]) (*connect.Response[v19.UpdateVReplicationWorkflowResponse], error)
	// VDiff API
	VDiff(context.Context, *connect.Request[v19.VDiffRequest]) (*connect.Response[v19.VDiffResponse], error)
	// ResetReplication makes the target not replicating
	ResetReplication(context.Context, *connect.Request[v19.ResetReplicationRequest]) (*connect.Response[v19.ResetReplicationResponse], error)
	// InitPrimary initializes the tablet as a primary
	InitPrimary(context.Context, *connect.Request[v19.InitPrimaryRequest]) (*connect.Response[v19.InitPrimaryResponse], error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(context.Context, *connect.Request[v19.PopulateReparentJournalRequest]) (*connect.Response[v19.PopulateReparentJournalResponse], error)
	// InitReplica tells the tablet to reparent to the primary unconditionally
	InitReplica(context.Context, *connect.Request[v19.InitReplicaRequest]) (*connect.Response[v19.InitReplicaResponse], error)
	// DemotePrimary tells the soon-to-be-former primary it's gonna change
	DemotePrimary(context.Context, *connect.Request[v19.DemotePrimaryRequest]) (*connect.Response[v19.DemotePrimaryResponse], error)
	// UndoDemotePrimary reverts all changes made by DemotePrimary
	UndoDemotePrimary(context.Context, *connect.Request[v19.UndoDemotePrimaryRequest]) (*connect.Response[v19.UndoDemotePrimaryResponse], error)
	// ReplicaWasPromoted tells the remote tablet it is now the primary
	ReplicaWasPromoted(context.Context, *connect.Request[v19.ReplicaWasPromotedRequest]) (*connect.Response[v19.ReplicaWasPromotedResponse], error)
	// ResetReplicationParameters resets the replica replication parameters
	ResetReplicationParameters(context.Context, *connect.Request[v19.ResetReplicationParametersRequest]) (*connect.Response[v19.ResetReplicationParametersResponse], error)
	// FullStatus collects and returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	FullStatus(context.Context, *connect.Request[v19.FullStatusRequest]) (*connect.Response[v19.FullStatusResponse], error)
	// SetReplicationSource tells the replica to reparent
	SetReplicationSource(context.Context, *connect.Request[v19.SetReplicationSourceRequest]) (*connect.Response[v19.SetReplicationSourceResponse], error)
	// ReplicaWasRestarted tells the remote tablet its primary has changed
	ReplicaWasRestarted(context.Context, *connect.Request[v19.ReplicaWasRestartedRequest]) (*connect.Response[v19.ReplicaWasRestartedResponse], error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(context.Context, *connect.Request[v19.StopReplicationAndGetStatusRequest]) (*connect.Response[v19.StopReplicationAndGetStatusResponse], error)
	// PromoteReplica makes the replica the new primary
	PromoteReplica(context.Context, *connect.Request[v19.PromoteReplicaRequest]) (*connect.Response[v19.PromoteReplicaResponse], error)
	Backup(context.Context, *connect.Request[v19.BackupRequest], *connect.ServerStream[v19.BackupResponse]) error
	// RestoreFromBackup deletes all local data and restores it from the latest backup.
	RestoreFromBackup(context.Context, *connect.Request[v19.RestoreFromBackupRequest], *connect.ServerStream[v19.RestoreFromBackupResponse]) error
	// CheckThrottler issues a 'check' on a tablet's throttler
	CheckThrottler(context.Context, *connect.Request[v19.CheckThrottlerRequest]) (*connect.Response[v19.CheckThrottlerResponse], error)
}

// NewTabletManagerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTabletManagerHandler(svc TabletManagerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tabletManagerMethods := v191.File_vitess_tabletmanagerservice_v19_tabletmanagerservice_proto.Services().ByName("TabletManager").Methods()
	tabletManagerPingHandler := connect.NewUnaryHandler(
		TabletManagerPingProcedure,
		svc.Ping,
		connect.WithSchema(tabletManagerMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerSleepHandler := connect.NewUnaryHandler(
		TabletManagerSleepProcedure,
		svc.Sleep,
		connect.WithSchema(tabletManagerMethods.ByName("Sleep")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerExecuteHookHandler := connect.NewUnaryHandler(
		TabletManagerExecuteHookProcedure,
		svc.ExecuteHook,
		connect.WithSchema(tabletManagerMethods.ByName("ExecuteHook")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerGetSchemaHandler := connect.NewUnaryHandler(
		TabletManagerGetSchemaProcedure,
		svc.GetSchema,
		connect.WithSchema(tabletManagerMethods.ByName("GetSchema")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerGetPermissionsHandler := connect.NewUnaryHandler(
		TabletManagerGetPermissionsProcedure,
		svc.GetPermissions,
		connect.WithSchema(tabletManagerMethods.ByName("GetPermissions")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerSetReadOnlyHandler := connect.NewUnaryHandler(
		TabletManagerSetReadOnlyProcedure,
		svc.SetReadOnly,
		connect.WithSchema(tabletManagerMethods.ByName("SetReadOnly")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerSetReadWriteHandler := connect.NewUnaryHandler(
		TabletManagerSetReadWriteProcedure,
		svc.SetReadWrite,
		connect.WithSchema(tabletManagerMethods.ByName("SetReadWrite")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerChangeTypeHandler := connect.NewUnaryHandler(
		TabletManagerChangeTypeProcedure,
		svc.ChangeType,
		connect.WithSchema(tabletManagerMethods.ByName("ChangeType")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerRefreshStateHandler := connect.NewUnaryHandler(
		TabletManagerRefreshStateProcedure,
		svc.RefreshState,
		connect.WithSchema(tabletManagerMethods.ByName("RefreshState")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerRunHealthCheckHandler := connect.NewUnaryHandler(
		TabletManagerRunHealthCheckProcedure,
		svc.RunHealthCheck,
		connect.WithSchema(tabletManagerMethods.ByName("RunHealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerReloadSchemaHandler := connect.NewUnaryHandler(
		TabletManagerReloadSchemaProcedure,
		svc.ReloadSchema,
		connect.WithSchema(tabletManagerMethods.ByName("ReloadSchema")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerPreflightSchemaHandler := connect.NewUnaryHandler(
		TabletManagerPreflightSchemaProcedure,
		svc.PreflightSchema,
		connect.WithSchema(tabletManagerMethods.ByName("PreflightSchema")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerApplySchemaHandler := connect.NewUnaryHandler(
		TabletManagerApplySchemaProcedure,
		svc.ApplySchema,
		connect.WithSchema(tabletManagerMethods.ByName("ApplySchema")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerResetSequencesHandler := connect.NewUnaryHandler(
		TabletManagerResetSequencesProcedure,
		svc.ResetSequences,
		connect.WithSchema(tabletManagerMethods.ByName("ResetSequences")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerLockTablesHandler := connect.NewUnaryHandler(
		TabletManagerLockTablesProcedure,
		svc.LockTables,
		connect.WithSchema(tabletManagerMethods.ByName("LockTables")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerUnlockTablesHandler := connect.NewUnaryHandler(
		TabletManagerUnlockTablesProcedure,
		svc.UnlockTables,
		connect.WithSchema(tabletManagerMethods.ByName("UnlockTables")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerExecuteQueryHandler := connect.NewUnaryHandler(
		TabletManagerExecuteQueryProcedure,
		svc.ExecuteQuery,
		connect.WithSchema(tabletManagerMethods.ByName("ExecuteQuery")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerExecuteFetchAsDbaHandler := connect.NewUnaryHandler(
		TabletManagerExecuteFetchAsDbaProcedure,
		svc.ExecuteFetchAsDba,
		connect.WithSchema(tabletManagerMethods.ByName("ExecuteFetchAsDba")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerExecuteFetchAsAllPrivsHandler := connect.NewUnaryHandler(
		TabletManagerExecuteFetchAsAllPrivsProcedure,
		svc.ExecuteFetchAsAllPrivs,
		connect.WithSchema(tabletManagerMethods.ByName("ExecuteFetchAsAllPrivs")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerExecuteFetchAsAppHandler := connect.NewUnaryHandler(
		TabletManagerExecuteFetchAsAppProcedure,
		svc.ExecuteFetchAsApp,
		connect.WithSchema(tabletManagerMethods.ByName("ExecuteFetchAsApp")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerReplicationStatusHandler := connect.NewUnaryHandler(
		TabletManagerReplicationStatusProcedure,
		svc.ReplicationStatus,
		connect.WithSchema(tabletManagerMethods.ByName("ReplicationStatus")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerPrimaryStatusHandler := connect.NewUnaryHandler(
		TabletManagerPrimaryStatusProcedure,
		svc.PrimaryStatus,
		connect.WithSchema(tabletManagerMethods.ByName("PrimaryStatus")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerPrimaryPositionHandler := connect.NewUnaryHandler(
		TabletManagerPrimaryPositionProcedure,
		svc.PrimaryPosition,
		connect.WithSchema(tabletManagerMethods.ByName("PrimaryPosition")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerWaitForPositionHandler := connect.NewUnaryHandler(
		TabletManagerWaitForPositionProcedure,
		svc.WaitForPosition,
		connect.WithSchema(tabletManagerMethods.ByName("WaitForPosition")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerStopReplicationHandler := connect.NewUnaryHandler(
		TabletManagerStopReplicationProcedure,
		svc.StopReplication,
		connect.WithSchema(tabletManagerMethods.ByName("StopReplication")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerStopReplicationMinimumHandler := connect.NewUnaryHandler(
		TabletManagerStopReplicationMinimumProcedure,
		svc.StopReplicationMinimum,
		connect.WithSchema(tabletManagerMethods.ByName("StopReplicationMinimum")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerStartReplicationHandler := connect.NewUnaryHandler(
		TabletManagerStartReplicationProcedure,
		svc.StartReplication,
		connect.WithSchema(tabletManagerMethods.ByName("StartReplication")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerStartReplicationUntilAfterHandler := connect.NewUnaryHandler(
		TabletManagerStartReplicationUntilAfterProcedure,
		svc.StartReplicationUntilAfter,
		connect.WithSchema(tabletManagerMethods.ByName("StartReplicationUntilAfter")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerGetReplicasHandler := connect.NewUnaryHandler(
		TabletManagerGetReplicasProcedure,
		svc.GetReplicas,
		connect.WithSchema(tabletManagerMethods.ByName("GetReplicas")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerCreateVReplicationWorkflowHandler := connect.NewUnaryHandler(
		TabletManagerCreateVReplicationWorkflowProcedure,
		svc.CreateVReplicationWorkflow,
		connect.WithSchema(tabletManagerMethods.ByName("CreateVReplicationWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerDeleteVReplicationWorkflowHandler := connect.NewUnaryHandler(
		TabletManagerDeleteVReplicationWorkflowProcedure,
		svc.DeleteVReplicationWorkflow,
		connect.WithSchema(tabletManagerMethods.ByName("DeleteVReplicationWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerReadVReplicationWorkflowHandler := connect.NewUnaryHandler(
		TabletManagerReadVReplicationWorkflowProcedure,
		svc.ReadVReplicationWorkflow,
		connect.WithSchema(tabletManagerMethods.ByName("ReadVReplicationWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerVReplicationExecHandler := connect.NewUnaryHandler(
		TabletManagerVReplicationExecProcedure,
		svc.VReplicationExec,
		connect.WithSchema(tabletManagerMethods.ByName("VReplicationExec")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerVReplicationWaitForPosHandler := connect.NewUnaryHandler(
		TabletManagerVReplicationWaitForPosProcedure,
		svc.VReplicationWaitForPos,
		connect.WithSchema(tabletManagerMethods.ByName("VReplicationWaitForPos")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerUpdateVReplicationWorkflowHandler := connect.NewUnaryHandler(
		TabletManagerUpdateVReplicationWorkflowProcedure,
		svc.UpdateVReplicationWorkflow,
		connect.WithSchema(tabletManagerMethods.ByName("UpdateVReplicationWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerVDiffHandler := connect.NewUnaryHandler(
		TabletManagerVDiffProcedure,
		svc.VDiff,
		connect.WithSchema(tabletManagerMethods.ByName("VDiff")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerResetReplicationHandler := connect.NewUnaryHandler(
		TabletManagerResetReplicationProcedure,
		svc.ResetReplication,
		connect.WithSchema(tabletManagerMethods.ByName("ResetReplication")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerInitPrimaryHandler := connect.NewUnaryHandler(
		TabletManagerInitPrimaryProcedure,
		svc.InitPrimary,
		connect.WithSchema(tabletManagerMethods.ByName("InitPrimary")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerPopulateReparentJournalHandler := connect.NewUnaryHandler(
		TabletManagerPopulateReparentJournalProcedure,
		svc.PopulateReparentJournal,
		connect.WithSchema(tabletManagerMethods.ByName("PopulateReparentJournal")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerInitReplicaHandler := connect.NewUnaryHandler(
		TabletManagerInitReplicaProcedure,
		svc.InitReplica,
		connect.WithSchema(tabletManagerMethods.ByName("InitReplica")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerDemotePrimaryHandler := connect.NewUnaryHandler(
		TabletManagerDemotePrimaryProcedure,
		svc.DemotePrimary,
		connect.WithSchema(tabletManagerMethods.ByName("DemotePrimary")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerUndoDemotePrimaryHandler := connect.NewUnaryHandler(
		TabletManagerUndoDemotePrimaryProcedure,
		svc.UndoDemotePrimary,
		connect.WithSchema(tabletManagerMethods.ByName("UndoDemotePrimary")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerReplicaWasPromotedHandler := connect.NewUnaryHandler(
		TabletManagerReplicaWasPromotedProcedure,
		svc.ReplicaWasPromoted,
		connect.WithSchema(tabletManagerMethods.ByName("ReplicaWasPromoted")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerResetReplicationParametersHandler := connect.NewUnaryHandler(
		TabletManagerResetReplicationParametersProcedure,
		svc.ResetReplicationParameters,
		connect.WithSchema(tabletManagerMethods.ByName("ResetReplicationParameters")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerFullStatusHandler := connect.NewUnaryHandler(
		TabletManagerFullStatusProcedure,
		svc.FullStatus,
		connect.WithSchema(tabletManagerMethods.ByName("FullStatus")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerSetReplicationSourceHandler := connect.NewUnaryHandler(
		TabletManagerSetReplicationSourceProcedure,
		svc.SetReplicationSource,
		connect.WithSchema(tabletManagerMethods.ByName("SetReplicationSource")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerReplicaWasRestartedHandler := connect.NewUnaryHandler(
		TabletManagerReplicaWasRestartedProcedure,
		svc.ReplicaWasRestarted,
		connect.WithSchema(tabletManagerMethods.ByName("ReplicaWasRestarted")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerStopReplicationAndGetStatusHandler := connect.NewUnaryHandler(
		TabletManagerStopReplicationAndGetStatusProcedure,
		svc.StopReplicationAndGetStatus,
		connect.WithSchema(tabletManagerMethods.ByName("StopReplicationAndGetStatus")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerPromoteReplicaHandler := connect.NewUnaryHandler(
		TabletManagerPromoteReplicaProcedure,
		svc.PromoteReplica,
		connect.WithSchema(tabletManagerMethods.ByName("PromoteReplica")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerBackupHandler := connect.NewServerStreamHandler(
		TabletManagerBackupProcedure,
		svc.Backup,
		connect.WithSchema(tabletManagerMethods.ByName("Backup")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerRestoreFromBackupHandler := connect.NewServerStreamHandler(
		TabletManagerRestoreFromBackupProcedure,
		svc.RestoreFromBackup,
		connect.WithSchema(tabletManagerMethods.ByName("RestoreFromBackup")),
		connect.WithHandlerOptions(opts...),
	)
	tabletManagerCheckThrottlerHandler := connect.NewUnaryHandler(
		TabletManagerCheckThrottlerProcedure,
		svc.CheckThrottler,
		connect.WithSchema(tabletManagerMethods.ByName("CheckThrottler")),
		connect.WithHandlerOptions(opts...),
	)
	return "/tabletmanagerservice.TabletManager/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TabletManagerPingProcedure:
			tabletManagerPingHandler.ServeHTTP(w, r)
		case TabletManagerSleepProcedure:
			tabletManagerSleepHandler.ServeHTTP(w, r)
		case TabletManagerExecuteHookProcedure:
			tabletManagerExecuteHookHandler.ServeHTTP(w, r)
		case TabletManagerGetSchemaProcedure:
			tabletManagerGetSchemaHandler.ServeHTTP(w, r)
		case TabletManagerGetPermissionsProcedure:
			tabletManagerGetPermissionsHandler.ServeHTTP(w, r)
		case TabletManagerSetReadOnlyProcedure:
			tabletManagerSetReadOnlyHandler.ServeHTTP(w, r)
		case TabletManagerSetReadWriteProcedure:
			tabletManagerSetReadWriteHandler.ServeHTTP(w, r)
		case TabletManagerChangeTypeProcedure:
			tabletManagerChangeTypeHandler.ServeHTTP(w, r)
		case TabletManagerRefreshStateProcedure:
			tabletManagerRefreshStateHandler.ServeHTTP(w, r)
		case TabletManagerRunHealthCheckProcedure:
			tabletManagerRunHealthCheckHandler.ServeHTTP(w, r)
		case TabletManagerReloadSchemaProcedure:
			tabletManagerReloadSchemaHandler.ServeHTTP(w, r)
		case TabletManagerPreflightSchemaProcedure:
			tabletManagerPreflightSchemaHandler.ServeHTTP(w, r)
		case TabletManagerApplySchemaProcedure:
			tabletManagerApplySchemaHandler.ServeHTTP(w, r)
		case TabletManagerResetSequencesProcedure:
			tabletManagerResetSequencesHandler.ServeHTTP(w, r)
		case TabletManagerLockTablesProcedure:
			tabletManagerLockTablesHandler.ServeHTTP(w, r)
		case TabletManagerUnlockTablesProcedure:
			tabletManagerUnlockTablesHandler.ServeHTTP(w, r)
		case TabletManagerExecuteQueryProcedure:
			tabletManagerExecuteQueryHandler.ServeHTTP(w, r)
		case TabletManagerExecuteFetchAsDbaProcedure:
			tabletManagerExecuteFetchAsDbaHandler.ServeHTTP(w, r)
		case TabletManagerExecuteFetchAsAllPrivsProcedure:
			tabletManagerExecuteFetchAsAllPrivsHandler.ServeHTTP(w, r)
		case TabletManagerExecuteFetchAsAppProcedure:
			tabletManagerExecuteFetchAsAppHandler.ServeHTTP(w, r)
		case TabletManagerReplicationStatusProcedure:
			tabletManagerReplicationStatusHandler.ServeHTTP(w, r)
		case TabletManagerPrimaryStatusProcedure:
			tabletManagerPrimaryStatusHandler.ServeHTTP(w, r)
		case TabletManagerPrimaryPositionProcedure:
			tabletManagerPrimaryPositionHandler.ServeHTTP(w, r)
		case TabletManagerWaitForPositionProcedure:
			tabletManagerWaitForPositionHandler.ServeHTTP(w, r)
		case TabletManagerStopReplicationProcedure:
			tabletManagerStopReplicationHandler.ServeHTTP(w, r)
		case TabletManagerStopReplicationMinimumProcedure:
			tabletManagerStopReplicationMinimumHandler.ServeHTTP(w, r)
		case TabletManagerStartReplicationProcedure:
			tabletManagerStartReplicationHandler.ServeHTTP(w, r)
		case TabletManagerStartReplicationUntilAfterProcedure:
			tabletManagerStartReplicationUntilAfterHandler.ServeHTTP(w, r)
		case TabletManagerGetReplicasProcedure:
			tabletManagerGetReplicasHandler.ServeHTTP(w, r)
		case TabletManagerCreateVReplicationWorkflowProcedure:
			tabletManagerCreateVReplicationWorkflowHandler.ServeHTTP(w, r)
		case TabletManagerDeleteVReplicationWorkflowProcedure:
			tabletManagerDeleteVReplicationWorkflowHandler.ServeHTTP(w, r)
		case TabletManagerReadVReplicationWorkflowProcedure:
			tabletManagerReadVReplicationWorkflowHandler.ServeHTTP(w, r)
		case TabletManagerVReplicationExecProcedure:
			tabletManagerVReplicationExecHandler.ServeHTTP(w, r)
		case TabletManagerVReplicationWaitForPosProcedure:
			tabletManagerVReplicationWaitForPosHandler.ServeHTTP(w, r)
		case TabletManagerUpdateVReplicationWorkflowProcedure:
			tabletManagerUpdateVReplicationWorkflowHandler.ServeHTTP(w, r)
		case TabletManagerVDiffProcedure:
			tabletManagerVDiffHandler.ServeHTTP(w, r)
		case TabletManagerResetReplicationProcedure:
			tabletManagerResetReplicationHandler.ServeHTTP(w, r)
		case TabletManagerInitPrimaryProcedure:
			tabletManagerInitPrimaryHandler.ServeHTTP(w, r)
		case TabletManagerPopulateReparentJournalProcedure:
			tabletManagerPopulateReparentJournalHandler.ServeHTTP(w, r)
		case TabletManagerInitReplicaProcedure:
			tabletManagerInitReplicaHandler.ServeHTTP(w, r)
		case TabletManagerDemotePrimaryProcedure:
			tabletManagerDemotePrimaryHandler.ServeHTTP(w, r)
		case TabletManagerUndoDemotePrimaryProcedure:
			tabletManagerUndoDemotePrimaryHandler.ServeHTTP(w, r)
		case TabletManagerReplicaWasPromotedProcedure:
			tabletManagerReplicaWasPromotedHandler.ServeHTTP(w, r)
		case TabletManagerResetReplicationParametersProcedure:
			tabletManagerResetReplicationParametersHandler.ServeHTTP(w, r)
		case TabletManagerFullStatusProcedure:
			tabletManagerFullStatusHandler.ServeHTTP(w, r)
		case TabletManagerSetReplicationSourceProcedure:
			tabletManagerSetReplicationSourceHandler.ServeHTTP(w, r)
		case TabletManagerReplicaWasRestartedProcedure:
			tabletManagerReplicaWasRestartedHandler.ServeHTTP(w, r)
		case TabletManagerStopReplicationAndGetStatusProcedure:
			tabletManagerStopReplicationAndGetStatusHandler.ServeHTTP(w, r)
		case TabletManagerPromoteReplicaProcedure:
			tabletManagerPromoteReplicaHandler.ServeHTTP(w, r)
		case TabletManagerBackupProcedure:
			tabletManagerBackupHandler.ServeHTTP(w, r)
		case TabletManagerRestoreFromBackupProcedure:
			tabletManagerRestoreFromBackupHandler.ServeHTTP(w, r)
		case TabletManagerCheckThrottlerProcedure:
			tabletManagerCheckThrottlerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTabletManagerHandler returns CodeUnimplemented from all methods.
type UnimplementedTabletManagerHandler struct{}

func (UnimplementedTabletManagerHandler) Ping(context.Context, *connect.Request[v19.PingRequest]) (*connect.Response[v19.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.Ping is not implemented"))
}

func (UnimplementedTabletManagerHandler) Sleep(context.Context, *connect.Request[v19.SleepRequest]) (*connect.Response[v19.SleepResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.Sleep is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteHook(context.Context, *connect.Request[v19.ExecuteHookRequest]) (*connect.Response[v19.ExecuteHookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteHook is not implemented"))
}

func (UnimplementedTabletManagerHandler) GetSchema(context.Context, *connect.Request[v19.GetSchemaRequest]) (*connect.Response[v19.GetSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.GetSchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) GetPermissions(context.Context, *connect.Request[v19.GetPermissionsRequest]) (*connect.Response[v19.GetPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.GetPermissions is not implemented"))
}

func (UnimplementedTabletManagerHandler) SetReadOnly(context.Context, *connect.Request[v19.SetReadOnlyRequest]) (*connect.Response[v19.SetReadOnlyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.SetReadOnly is not implemented"))
}

func (UnimplementedTabletManagerHandler) SetReadWrite(context.Context, *connect.Request[v19.SetReadWriteRequest]) (*connect.Response[v19.SetReadWriteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.SetReadWrite is not implemented"))
}

func (UnimplementedTabletManagerHandler) ChangeType(context.Context, *connect.Request[v19.ChangeTypeRequest]) (*connect.Response[v19.ChangeTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ChangeType is not implemented"))
}

func (UnimplementedTabletManagerHandler) RefreshState(context.Context, *connect.Request[v19.RefreshStateRequest]) (*connect.Response[v19.RefreshStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.RefreshState is not implemented"))
}

func (UnimplementedTabletManagerHandler) RunHealthCheck(context.Context, *connect.Request[v19.RunHealthCheckRequest]) (*connect.Response[v19.RunHealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.RunHealthCheck is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReloadSchema(context.Context, *connect.Request[v19.ReloadSchemaRequest]) (*connect.Response[v19.ReloadSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ReloadSchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) PreflightSchema(context.Context, *connect.Request[v19.PreflightSchemaRequest]) (*connect.Response[v19.PreflightSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PreflightSchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) ApplySchema(context.Context, *connect.Request[v19.ApplySchemaRequest]) (*connect.Response[v19.ApplySchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ApplySchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) ResetSequences(context.Context, *connect.Request[v19.ResetSequencesRequest]) (*connect.Response[v19.ResetSequencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ResetSequences is not implemented"))
}

func (UnimplementedTabletManagerHandler) LockTables(context.Context, *connect.Request[v19.LockTablesRequest]) (*connect.Response[v19.LockTablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.LockTables is not implemented"))
}

func (UnimplementedTabletManagerHandler) UnlockTables(context.Context, *connect.Request[v19.UnlockTablesRequest]) (*connect.Response[v19.UnlockTablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.UnlockTables is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteQuery(context.Context, *connect.Request[v19.ExecuteQueryRequest]) (*connect.Response[v19.ExecuteQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteQuery is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteFetchAsDba(context.Context, *connect.Request[v19.ExecuteFetchAsDbaRequest]) (*connect.Response[v19.ExecuteFetchAsDbaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteFetchAsDba is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteFetchAsAllPrivs(context.Context, *connect.Request[v19.ExecuteFetchAsAllPrivsRequest]) (*connect.Response[v19.ExecuteFetchAsAllPrivsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteFetchAsAllPrivs is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteFetchAsApp(context.Context, *connect.Request[v19.ExecuteFetchAsAppRequest]) (*connect.Response[v19.ExecuteFetchAsAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteFetchAsApp is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReplicationStatus(context.Context, *connect.Request[v19.ReplicationStatusRequest]) (*connect.Response[v19.ReplicationStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ReplicationStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) PrimaryStatus(context.Context, *connect.Request[v19.PrimaryStatusRequest]) (*connect.Response[v19.PrimaryStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PrimaryStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) PrimaryPosition(context.Context, *connect.Request[v19.PrimaryPositionRequest]) (*connect.Response[v19.PrimaryPositionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PrimaryPosition is not implemented"))
}

func (UnimplementedTabletManagerHandler) WaitForPosition(context.Context, *connect.Request[v19.WaitForPositionRequest]) (*connect.Response[v19.WaitForPositionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.WaitForPosition is not implemented"))
}

func (UnimplementedTabletManagerHandler) StopReplication(context.Context, *connect.Request[v19.StopReplicationRequest]) (*connect.Response[v19.StopReplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StopReplication is not implemented"))
}

func (UnimplementedTabletManagerHandler) StopReplicationMinimum(context.Context, *connect.Request[v19.StopReplicationMinimumRequest]) (*connect.Response[v19.StopReplicationMinimumResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StopReplicationMinimum is not implemented"))
}

func (UnimplementedTabletManagerHandler) StartReplication(context.Context, *connect.Request[v19.StartReplicationRequest]) (*connect.Response[v19.StartReplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StartReplication is not implemented"))
}

func (UnimplementedTabletManagerHandler) StartReplicationUntilAfter(context.Context, *connect.Request[v19.StartReplicationUntilAfterRequest]) (*connect.Response[v19.StartReplicationUntilAfterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StartReplicationUntilAfter is not implemented"))
}

func (UnimplementedTabletManagerHandler) GetReplicas(context.Context, *connect.Request[v19.GetReplicasRequest]) (*connect.Response[v19.GetReplicasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.GetReplicas is not implemented"))
}

func (UnimplementedTabletManagerHandler) CreateVReplicationWorkflow(context.Context, *connect.Request[v19.CreateVReplicationWorkflowRequest]) (*connect.Response[v19.CreateVReplicationWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.CreateVReplicationWorkflow is not implemented"))
}

func (UnimplementedTabletManagerHandler) DeleteVReplicationWorkflow(context.Context, *connect.Request[v19.DeleteVReplicationWorkflowRequest]) (*connect.Response[v19.DeleteVReplicationWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.DeleteVReplicationWorkflow is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReadVReplicationWorkflow(context.Context, *connect.Request[v19.ReadVReplicationWorkflowRequest]) (*connect.Response[v19.ReadVReplicationWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ReadVReplicationWorkflow is not implemented"))
}

func (UnimplementedTabletManagerHandler) VReplicationExec(context.Context, *connect.Request[v19.VReplicationExecRequest]) (*connect.Response[v19.VReplicationExecResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.VReplicationExec is not implemented"))
}

func (UnimplementedTabletManagerHandler) VReplicationWaitForPos(context.Context, *connect.Request[v19.VReplicationWaitForPosRequest]) (*connect.Response[v19.VReplicationWaitForPosResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.VReplicationWaitForPos is not implemented"))
}

func (UnimplementedTabletManagerHandler) UpdateVReplicationWorkflow(context.Context, *connect.Request[v19.UpdateVReplicationWorkflowRequest]) (*connect.Response[v19.UpdateVReplicationWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.UpdateVReplicationWorkflow is not implemented"))
}

func (UnimplementedTabletManagerHandler) VDiff(context.Context, *connect.Request[v19.VDiffRequest]) (*connect.Response[v19.VDiffResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.VDiff is not implemented"))
}

func (UnimplementedTabletManagerHandler) ResetReplication(context.Context, *connect.Request[v19.ResetReplicationRequest]) (*connect.Response[v19.ResetReplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ResetReplication is not implemented"))
}

func (UnimplementedTabletManagerHandler) InitPrimary(context.Context, *connect.Request[v19.InitPrimaryRequest]) (*connect.Response[v19.InitPrimaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.InitPrimary is not implemented"))
}

func (UnimplementedTabletManagerHandler) PopulateReparentJournal(context.Context, *connect.Request[v19.PopulateReparentJournalRequest]) (*connect.Response[v19.PopulateReparentJournalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PopulateReparentJournal is not implemented"))
}

func (UnimplementedTabletManagerHandler) InitReplica(context.Context, *connect.Request[v19.InitReplicaRequest]) (*connect.Response[v19.InitReplicaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.InitReplica is not implemented"))
}

func (UnimplementedTabletManagerHandler) DemotePrimary(context.Context, *connect.Request[v19.DemotePrimaryRequest]) (*connect.Response[v19.DemotePrimaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.DemotePrimary is not implemented"))
}

func (UnimplementedTabletManagerHandler) UndoDemotePrimary(context.Context, *connect.Request[v19.UndoDemotePrimaryRequest]) (*connect.Response[v19.UndoDemotePrimaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.UndoDemotePrimary is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReplicaWasPromoted(context.Context, *connect.Request[v19.ReplicaWasPromotedRequest]) (*connect.Response[v19.ReplicaWasPromotedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ReplicaWasPromoted is not implemented"))
}

func (UnimplementedTabletManagerHandler) ResetReplicationParameters(context.Context, *connect.Request[v19.ResetReplicationParametersRequest]) (*connect.Response[v19.ResetReplicationParametersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ResetReplicationParameters is not implemented"))
}

func (UnimplementedTabletManagerHandler) FullStatus(context.Context, *connect.Request[v19.FullStatusRequest]) (*connect.Response[v19.FullStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.FullStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) SetReplicationSource(context.Context, *connect.Request[v19.SetReplicationSourceRequest]) (*connect.Response[v19.SetReplicationSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.SetReplicationSource is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReplicaWasRestarted(context.Context, *connect.Request[v19.ReplicaWasRestartedRequest]) (*connect.Response[v19.ReplicaWasRestartedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ReplicaWasRestarted is not implemented"))
}

func (UnimplementedTabletManagerHandler) StopReplicationAndGetStatus(context.Context, *connect.Request[v19.StopReplicationAndGetStatusRequest]) (*connect.Response[v19.StopReplicationAndGetStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StopReplicationAndGetStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) PromoteReplica(context.Context, *connect.Request[v19.PromoteReplicaRequest]) (*connect.Response[v19.PromoteReplicaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PromoteReplica is not implemented"))
}

func (UnimplementedTabletManagerHandler) Backup(context.Context, *connect.Request[v19.BackupRequest], *connect.ServerStream[v19.BackupResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.Backup is not implemented"))
}

func (UnimplementedTabletManagerHandler) RestoreFromBackup(context.Context, *connect.Request[v19.RestoreFromBackupRequest], *connect.ServerStream[v19.RestoreFromBackupResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.RestoreFromBackup is not implemented"))
}

func (UnimplementedTabletManagerHandler) CheckThrottler(context.Context, *connect.Request[v19.CheckThrottlerRequest]) (*connect.Response[v19.CheckThrottlerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.CheckThrottler is not implemented"))
}
