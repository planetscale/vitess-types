//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
// This file contains the service definition for making management API
// calls to VtTablet.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vitess/tabletmanagerservice/v17/tabletmanagerservice.proto

package tabletmanagerservicev17connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v17 "github.com/planetscale/vitess-types/gen/vitess/tabletmanagerdata/v17"
	_ "github.com/planetscale/vitess-types/gen/vitess/tabletmanagerservice/v17"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// TabletManagerName is the fully-qualified name of the TabletManager service.
	TabletManagerName = "tabletmanagerservice.TabletManager"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TabletManagerPingProcedure is the fully-qualified name of the TabletManager's Ping RPC.
	TabletManagerPingProcedure = "/tabletmanagerservice.TabletManager/Ping"
	// TabletManagerSleepProcedure is the fully-qualified name of the TabletManager's Sleep RPC.
	TabletManagerSleepProcedure = "/tabletmanagerservice.TabletManager/Sleep"
	// TabletManagerExecuteHookProcedure is the fully-qualified name of the TabletManager's ExecuteHook
	// RPC.
	TabletManagerExecuteHookProcedure = "/tabletmanagerservice.TabletManager/ExecuteHook"
	// TabletManagerGetSchemaProcedure is the fully-qualified name of the TabletManager's GetSchema RPC.
	TabletManagerGetSchemaProcedure = "/tabletmanagerservice.TabletManager/GetSchema"
	// TabletManagerGetPermissionsProcedure is the fully-qualified name of the TabletManager's
	// GetPermissions RPC.
	TabletManagerGetPermissionsProcedure = "/tabletmanagerservice.TabletManager/GetPermissions"
	// TabletManagerSetReadOnlyProcedure is the fully-qualified name of the TabletManager's SetReadOnly
	// RPC.
	TabletManagerSetReadOnlyProcedure = "/tabletmanagerservice.TabletManager/SetReadOnly"
	// TabletManagerSetReadWriteProcedure is the fully-qualified name of the TabletManager's
	// SetReadWrite RPC.
	TabletManagerSetReadWriteProcedure = "/tabletmanagerservice.TabletManager/SetReadWrite"
	// TabletManagerChangeTypeProcedure is the fully-qualified name of the TabletManager's ChangeType
	// RPC.
	TabletManagerChangeTypeProcedure = "/tabletmanagerservice.TabletManager/ChangeType"
	// TabletManagerRefreshStateProcedure is the fully-qualified name of the TabletManager's
	// RefreshState RPC.
	TabletManagerRefreshStateProcedure = "/tabletmanagerservice.TabletManager/RefreshState"
	// TabletManagerRunHealthCheckProcedure is the fully-qualified name of the TabletManager's
	// RunHealthCheck RPC.
	TabletManagerRunHealthCheckProcedure = "/tabletmanagerservice.TabletManager/RunHealthCheck"
	// TabletManagerReloadSchemaProcedure is the fully-qualified name of the TabletManager's
	// ReloadSchema RPC.
	TabletManagerReloadSchemaProcedure = "/tabletmanagerservice.TabletManager/ReloadSchema"
	// TabletManagerPreflightSchemaProcedure is the fully-qualified name of the TabletManager's
	// PreflightSchema RPC.
	TabletManagerPreflightSchemaProcedure = "/tabletmanagerservice.TabletManager/PreflightSchema"
	// TabletManagerApplySchemaProcedure is the fully-qualified name of the TabletManager's ApplySchema
	// RPC.
	TabletManagerApplySchemaProcedure = "/tabletmanagerservice.TabletManager/ApplySchema"
	// TabletManagerLockTablesProcedure is the fully-qualified name of the TabletManager's LockTables
	// RPC.
	TabletManagerLockTablesProcedure = "/tabletmanagerservice.TabletManager/LockTables"
	// TabletManagerUnlockTablesProcedure is the fully-qualified name of the TabletManager's
	// UnlockTables RPC.
	TabletManagerUnlockTablesProcedure = "/tabletmanagerservice.TabletManager/UnlockTables"
	// TabletManagerExecuteQueryProcedure is the fully-qualified name of the TabletManager's
	// ExecuteQuery RPC.
	TabletManagerExecuteQueryProcedure = "/tabletmanagerservice.TabletManager/ExecuteQuery"
	// TabletManagerExecuteFetchAsDbaProcedure is the fully-qualified name of the TabletManager's
	// ExecuteFetchAsDba RPC.
	TabletManagerExecuteFetchAsDbaProcedure = "/tabletmanagerservice.TabletManager/ExecuteFetchAsDba"
	// TabletManagerExecuteFetchAsAllPrivsProcedure is the fully-qualified name of the TabletManager's
	// ExecuteFetchAsAllPrivs RPC.
	TabletManagerExecuteFetchAsAllPrivsProcedure = "/tabletmanagerservice.TabletManager/ExecuteFetchAsAllPrivs"
	// TabletManagerExecuteFetchAsAppProcedure is the fully-qualified name of the TabletManager's
	// ExecuteFetchAsApp RPC.
	TabletManagerExecuteFetchAsAppProcedure = "/tabletmanagerservice.TabletManager/ExecuteFetchAsApp"
	// TabletManagerReplicationStatusProcedure is the fully-qualified name of the TabletManager's
	// ReplicationStatus RPC.
	TabletManagerReplicationStatusProcedure = "/tabletmanagerservice.TabletManager/ReplicationStatus"
	// TabletManagerPrimaryStatusProcedure is the fully-qualified name of the TabletManager's
	// PrimaryStatus RPC.
	TabletManagerPrimaryStatusProcedure = "/tabletmanagerservice.TabletManager/PrimaryStatus"
	// TabletManagerPrimaryPositionProcedure is the fully-qualified name of the TabletManager's
	// PrimaryPosition RPC.
	TabletManagerPrimaryPositionProcedure = "/tabletmanagerservice.TabletManager/PrimaryPosition"
	// TabletManagerWaitForPositionProcedure is the fully-qualified name of the TabletManager's
	// WaitForPosition RPC.
	TabletManagerWaitForPositionProcedure = "/tabletmanagerservice.TabletManager/WaitForPosition"
	// TabletManagerStopReplicationProcedure is the fully-qualified name of the TabletManager's
	// StopReplication RPC.
	TabletManagerStopReplicationProcedure = "/tabletmanagerservice.TabletManager/StopReplication"
	// TabletManagerStopReplicationMinimumProcedure is the fully-qualified name of the TabletManager's
	// StopReplicationMinimum RPC.
	TabletManagerStopReplicationMinimumProcedure = "/tabletmanagerservice.TabletManager/StopReplicationMinimum"
	// TabletManagerStartReplicationProcedure is the fully-qualified name of the TabletManager's
	// StartReplication RPC.
	TabletManagerStartReplicationProcedure = "/tabletmanagerservice.TabletManager/StartReplication"
	// TabletManagerStartReplicationUntilAfterProcedure is the fully-qualified name of the
	// TabletManager's StartReplicationUntilAfter RPC.
	TabletManagerStartReplicationUntilAfterProcedure = "/tabletmanagerservice.TabletManager/StartReplicationUntilAfter"
	// TabletManagerGetReplicasProcedure is the fully-qualified name of the TabletManager's GetReplicas
	// RPC.
	TabletManagerGetReplicasProcedure = "/tabletmanagerservice.TabletManager/GetReplicas"
	// TabletManagerVReplicationExecProcedure is the fully-qualified name of the TabletManager's
	// VReplicationExec RPC.
	TabletManagerVReplicationExecProcedure = "/tabletmanagerservice.TabletManager/VReplicationExec"
	// TabletManagerVReplicationWaitForPosProcedure is the fully-qualified name of the TabletManager's
	// VReplicationWaitForPos RPC.
	TabletManagerVReplicationWaitForPosProcedure = "/tabletmanagerservice.TabletManager/VReplicationWaitForPos"
	// TabletManagerUpdateVRWorkflowProcedure is the fully-qualified name of the TabletManager's
	// UpdateVRWorkflow RPC.
	TabletManagerUpdateVRWorkflowProcedure = "/tabletmanagerservice.TabletManager/UpdateVRWorkflow"
	// TabletManagerVDiffProcedure is the fully-qualified name of the TabletManager's VDiff RPC.
	TabletManagerVDiffProcedure = "/tabletmanagerservice.TabletManager/VDiff"
	// TabletManagerResetReplicationProcedure is the fully-qualified name of the TabletManager's
	// ResetReplication RPC.
	TabletManagerResetReplicationProcedure = "/tabletmanagerservice.TabletManager/ResetReplication"
	// TabletManagerInitPrimaryProcedure is the fully-qualified name of the TabletManager's InitPrimary
	// RPC.
	TabletManagerInitPrimaryProcedure = "/tabletmanagerservice.TabletManager/InitPrimary"
	// TabletManagerPopulateReparentJournalProcedure is the fully-qualified name of the TabletManager's
	// PopulateReparentJournal RPC.
	TabletManagerPopulateReparentJournalProcedure = "/tabletmanagerservice.TabletManager/PopulateReparentJournal"
	// TabletManagerInitReplicaProcedure is the fully-qualified name of the TabletManager's InitReplica
	// RPC.
	TabletManagerInitReplicaProcedure = "/tabletmanagerservice.TabletManager/InitReplica"
	// TabletManagerDemotePrimaryProcedure is the fully-qualified name of the TabletManager's
	// DemotePrimary RPC.
	TabletManagerDemotePrimaryProcedure = "/tabletmanagerservice.TabletManager/DemotePrimary"
	// TabletManagerUndoDemotePrimaryProcedure is the fully-qualified name of the TabletManager's
	// UndoDemotePrimary RPC.
	TabletManagerUndoDemotePrimaryProcedure = "/tabletmanagerservice.TabletManager/UndoDemotePrimary"
	// TabletManagerReplicaWasPromotedProcedure is the fully-qualified name of the TabletManager's
	// ReplicaWasPromoted RPC.
	TabletManagerReplicaWasPromotedProcedure = "/tabletmanagerservice.TabletManager/ReplicaWasPromoted"
	// TabletManagerResetReplicationParametersProcedure is the fully-qualified name of the
	// TabletManager's ResetReplicationParameters RPC.
	TabletManagerResetReplicationParametersProcedure = "/tabletmanagerservice.TabletManager/ResetReplicationParameters"
	// TabletManagerFullStatusProcedure is the fully-qualified name of the TabletManager's FullStatus
	// RPC.
	TabletManagerFullStatusProcedure = "/tabletmanagerservice.TabletManager/FullStatus"
	// TabletManagerSetReplicationSourceProcedure is the fully-qualified name of the TabletManager's
	// SetReplicationSource RPC.
	TabletManagerSetReplicationSourceProcedure = "/tabletmanagerservice.TabletManager/SetReplicationSource"
	// TabletManagerReplicaWasRestartedProcedure is the fully-qualified name of the TabletManager's
	// ReplicaWasRestarted RPC.
	TabletManagerReplicaWasRestartedProcedure = "/tabletmanagerservice.TabletManager/ReplicaWasRestarted"
	// TabletManagerStopReplicationAndGetStatusProcedure is the fully-qualified name of the
	// TabletManager's StopReplicationAndGetStatus RPC.
	TabletManagerStopReplicationAndGetStatusProcedure = "/tabletmanagerservice.TabletManager/StopReplicationAndGetStatus"
	// TabletManagerPromoteReplicaProcedure is the fully-qualified name of the TabletManager's
	// PromoteReplica RPC.
	TabletManagerPromoteReplicaProcedure = "/tabletmanagerservice.TabletManager/PromoteReplica"
	// TabletManagerBackupProcedure is the fully-qualified name of the TabletManager's Backup RPC.
	TabletManagerBackupProcedure = "/tabletmanagerservice.TabletManager/Backup"
	// TabletManagerRestoreFromBackupProcedure is the fully-qualified name of the TabletManager's
	// RestoreFromBackup RPC.
	TabletManagerRestoreFromBackupProcedure = "/tabletmanagerservice.TabletManager/RestoreFromBackup"
)

// TabletManagerClient is a client for the tabletmanagerservice.TabletManager service.
type TabletManagerClient interface {
	// Ping returns the input payload
	Ping(context.Context, *connect.Request[v17.PingRequest]) (*connect.Response[v17.PingResponse], error)
	// Sleep sleeps for the provided duration
	Sleep(context.Context, *connect.Request[v17.SleepRequest]) (*connect.Response[v17.SleepResponse], error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(context.Context, *connect.Request[v17.ExecuteHookRequest]) (*connect.Response[v17.ExecuteHookResponse], error)
	// GetSchema asks the tablet for its schema
	GetSchema(context.Context, *connect.Request[v17.GetSchemaRequest]) (*connect.Response[v17.GetSchemaResponse], error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(context.Context, *connect.Request[v17.GetPermissionsRequest]) (*connect.Response[v17.GetPermissionsResponse], error)
	SetReadOnly(context.Context, *connect.Request[v17.SetReadOnlyRequest]) (*connect.Response[v17.SetReadOnlyResponse], error)
	SetReadWrite(context.Context, *connect.Request[v17.SetReadWriteRequest]) (*connect.Response[v17.SetReadWriteResponse], error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(context.Context, *connect.Request[v17.ChangeTypeRequest]) (*connect.Response[v17.ChangeTypeResponse], error)
	RefreshState(context.Context, *connect.Request[v17.RefreshStateRequest]) (*connect.Response[v17.RefreshStateResponse], error)
	RunHealthCheck(context.Context, *connect.Request[v17.RunHealthCheckRequest]) (*connect.Response[v17.RunHealthCheckResponse], error)
	ReloadSchema(context.Context, *connect.Request[v17.ReloadSchemaRequest]) (*connect.Response[v17.ReloadSchemaResponse], error)
	PreflightSchema(context.Context, *connect.Request[v17.PreflightSchemaRequest]) (*connect.Response[v17.PreflightSchemaResponse], error)
	ApplySchema(context.Context, *connect.Request[v17.ApplySchemaRequest]) (*connect.Response[v17.ApplySchemaResponse], error)
	LockTables(context.Context, *connect.Request[v17.LockTablesRequest]) (*connect.Response[v17.LockTablesResponse], error)
	UnlockTables(context.Context, *connect.Request[v17.UnlockTablesRequest]) (*connect.Response[v17.UnlockTablesResponse], error)
	ExecuteQuery(context.Context, *connect.Request[v17.ExecuteQueryRequest]) (*connect.Response[v17.ExecuteQueryResponse], error)
	ExecuteFetchAsDba(context.Context, *connect.Request[v17.ExecuteFetchAsDbaRequest]) (*connect.Response[v17.ExecuteFetchAsDbaResponse], error)
	ExecuteFetchAsAllPrivs(context.Context, *connect.Request[v17.ExecuteFetchAsAllPrivsRequest]) (*connect.Response[v17.ExecuteFetchAsAllPrivsResponse], error)
	ExecuteFetchAsApp(context.Context, *connect.Request[v17.ExecuteFetchAsAppRequest]) (*connect.Response[v17.ExecuteFetchAsAppResponse], error)
	// ReplicationStatus returns the current replication status.
	ReplicationStatus(context.Context, *connect.Request[v17.ReplicationStatusRequest]) (*connect.Response[v17.ReplicationStatusResponse], error)
	// PrimaryStatus returns the current primary status.
	PrimaryStatus(context.Context, *connect.Request[v17.PrimaryStatusRequest]) (*connect.Response[v17.PrimaryStatusResponse], error)
	// PrimaryPosition returns the current primary position
	PrimaryPosition(context.Context, *connect.Request[v17.PrimaryPositionRequest]) (*connect.Response[v17.PrimaryPositionResponse], error)
	// WaitForPosition waits for the position to be reached
	WaitForPosition(context.Context, *connect.Request[v17.WaitForPositionRequest]) (*connect.Response[v17.WaitForPositionResponse], error)
	// StopReplication makes mysql stop its replication
	StopReplication(context.Context, *connect.Request[v17.StopReplicationRequest]) (*connect.Response[v17.StopReplicationResponse], error)
	// StopReplicationMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopReplicationMinimum(context.Context, *connect.Request[v17.StopReplicationMinimumRequest]) (*connect.Response[v17.StopReplicationMinimumResponse], error)
	// StartReplication starts the mysql replication
	StartReplication(context.Context, *connect.Request[v17.StartReplicationRequest]) (*connect.Response[v17.StartReplicationResponse], error)
	// StartReplicationUnitAfter starts the mysql replication until and including
	// the provided position
	StartReplicationUntilAfter(context.Context, *connect.Request[v17.StartReplicationUntilAfterRequest]) (*connect.Response[v17.StartReplicationUntilAfterResponse], error)
	// GetReplicas asks for the list of mysql replicas
	GetReplicas(context.Context, *connect.Request[v17.GetReplicasRequest]) (*connect.Response[v17.GetReplicasResponse], error)
	// VReplication API
	VReplicationExec(context.Context, *connect.Request[v17.VReplicationExecRequest]) (*connect.Response[v17.VReplicationExecResponse], error)
	VReplicationWaitForPos(context.Context, *connect.Request[v17.VReplicationWaitForPosRequest]) (*connect.Response[v17.VReplicationWaitForPosResponse], error)
	UpdateVRWorkflow(context.Context, *connect.Request[v17.UpdateVRWorkflowRequest]) (*connect.Response[v17.UpdateVRWorkflowResponse], error)
	// VDiff API
	VDiff(context.Context, *connect.Request[v17.VDiffRequest]) (*connect.Response[v17.VDiffResponse], error)
	// ResetReplication makes the target not replicating
	ResetReplication(context.Context, *connect.Request[v17.ResetReplicationRequest]) (*connect.Response[v17.ResetReplicationResponse], error)
	// InitPrimary initializes the tablet as a primary
	InitPrimary(context.Context, *connect.Request[v17.InitPrimaryRequest]) (*connect.Response[v17.InitPrimaryResponse], error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(context.Context, *connect.Request[v17.PopulateReparentJournalRequest]) (*connect.Response[v17.PopulateReparentJournalResponse], error)
	// InitReplica tells the tablet to reparent to the primary unconditionally
	InitReplica(context.Context, *connect.Request[v17.InitReplicaRequest]) (*connect.Response[v17.InitReplicaResponse], error)
	// DemotePrimary tells the soon-to-be-former primary it's gonna change
	DemotePrimary(context.Context, *connect.Request[v17.DemotePrimaryRequest]) (*connect.Response[v17.DemotePrimaryResponse], error)
	// UndoDemotePrimary reverts all changes made by DemotePrimary
	UndoDemotePrimary(context.Context, *connect.Request[v17.UndoDemotePrimaryRequest]) (*connect.Response[v17.UndoDemotePrimaryResponse], error)
	// ReplicaWasPromoted tells the remote tablet it is now the primary
	ReplicaWasPromoted(context.Context, *connect.Request[v17.ReplicaWasPromotedRequest]) (*connect.Response[v17.ReplicaWasPromotedResponse], error)
	// ResetReplicationParameters resets the replica replication parameters
	ResetReplicationParameters(context.Context, *connect.Request[v17.ResetReplicationParametersRequest]) (*connect.Response[v17.ResetReplicationParametersResponse], error)
	// FullStatus collects and returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	FullStatus(context.Context, *connect.Request[v17.FullStatusRequest]) (*connect.Response[v17.FullStatusResponse], error)
	// SetReplicationSource tells the replica to reparent
	SetReplicationSource(context.Context, *connect.Request[v17.SetReplicationSourceRequest]) (*connect.Response[v17.SetReplicationSourceResponse], error)
	// ReplicaWasRestarted tells the remote tablet its primary has changed
	ReplicaWasRestarted(context.Context, *connect.Request[v17.ReplicaWasRestartedRequest]) (*connect.Response[v17.ReplicaWasRestartedResponse], error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(context.Context, *connect.Request[v17.StopReplicationAndGetStatusRequest]) (*connect.Response[v17.StopReplicationAndGetStatusResponse], error)
	// PromoteReplica makes the replica the new primary
	PromoteReplica(context.Context, *connect.Request[v17.PromoteReplicaRequest]) (*connect.Response[v17.PromoteReplicaResponse], error)
	Backup(context.Context, *connect.Request[v17.BackupRequest]) (*connect.ServerStreamForClient[v17.BackupResponse], error)
	// RestoreFromBackup deletes all local data and restores it from the latest backup.
	RestoreFromBackup(context.Context, *connect.Request[v17.RestoreFromBackupRequest]) (*connect.ServerStreamForClient[v17.RestoreFromBackupResponse], error)
}

// NewTabletManagerClient constructs a client for the tabletmanagerservice.TabletManager
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTabletManagerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TabletManagerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tabletManagerClient{
		ping: connect.NewClient[v17.PingRequest, v17.PingResponse](
			httpClient,
			baseURL+TabletManagerPingProcedure,
			opts...,
		),
		sleep: connect.NewClient[v17.SleepRequest, v17.SleepResponse](
			httpClient,
			baseURL+TabletManagerSleepProcedure,
			opts...,
		),
		executeHook: connect.NewClient[v17.ExecuteHookRequest, v17.ExecuteHookResponse](
			httpClient,
			baseURL+TabletManagerExecuteHookProcedure,
			opts...,
		),
		getSchema: connect.NewClient[v17.GetSchemaRequest, v17.GetSchemaResponse](
			httpClient,
			baseURL+TabletManagerGetSchemaProcedure,
			opts...,
		),
		getPermissions: connect.NewClient[v17.GetPermissionsRequest, v17.GetPermissionsResponse](
			httpClient,
			baseURL+TabletManagerGetPermissionsProcedure,
			opts...,
		),
		setReadOnly: connect.NewClient[v17.SetReadOnlyRequest, v17.SetReadOnlyResponse](
			httpClient,
			baseURL+TabletManagerSetReadOnlyProcedure,
			opts...,
		),
		setReadWrite: connect.NewClient[v17.SetReadWriteRequest, v17.SetReadWriteResponse](
			httpClient,
			baseURL+TabletManagerSetReadWriteProcedure,
			opts...,
		),
		changeType: connect.NewClient[v17.ChangeTypeRequest, v17.ChangeTypeResponse](
			httpClient,
			baseURL+TabletManagerChangeTypeProcedure,
			opts...,
		),
		refreshState: connect.NewClient[v17.RefreshStateRequest, v17.RefreshStateResponse](
			httpClient,
			baseURL+TabletManagerRefreshStateProcedure,
			opts...,
		),
		runHealthCheck: connect.NewClient[v17.RunHealthCheckRequest, v17.RunHealthCheckResponse](
			httpClient,
			baseURL+TabletManagerRunHealthCheckProcedure,
			opts...,
		),
		reloadSchema: connect.NewClient[v17.ReloadSchemaRequest, v17.ReloadSchemaResponse](
			httpClient,
			baseURL+TabletManagerReloadSchemaProcedure,
			opts...,
		),
		preflightSchema: connect.NewClient[v17.PreflightSchemaRequest, v17.PreflightSchemaResponse](
			httpClient,
			baseURL+TabletManagerPreflightSchemaProcedure,
			opts...,
		),
		applySchema: connect.NewClient[v17.ApplySchemaRequest, v17.ApplySchemaResponse](
			httpClient,
			baseURL+TabletManagerApplySchemaProcedure,
			opts...,
		),
		lockTables: connect.NewClient[v17.LockTablesRequest, v17.LockTablesResponse](
			httpClient,
			baseURL+TabletManagerLockTablesProcedure,
			opts...,
		),
		unlockTables: connect.NewClient[v17.UnlockTablesRequest, v17.UnlockTablesResponse](
			httpClient,
			baseURL+TabletManagerUnlockTablesProcedure,
			opts...,
		),
		executeQuery: connect.NewClient[v17.ExecuteQueryRequest, v17.ExecuteQueryResponse](
			httpClient,
			baseURL+TabletManagerExecuteQueryProcedure,
			opts...,
		),
		executeFetchAsDba: connect.NewClient[v17.ExecuteFetchAsDbaRequest, v17.ExecuteFetchAsDbaResponse](
			httpClient,
			baseURL+TabletManagerExecuteFetchAsDbaProcedure,
			opts...,
		),
		executeFetchAsAllPrivs: connect.NewClient[v17.ExecuteFetchAsAllPrivsRequest, v17.ExecuteFetchAsAllPrivsResponse](
			httpClient,
			baseURL+TabletManagerExecuteFetchAsAllPrivsProcedure,
			opts...,
		),
		executeFetchAsApp: connect.NewClient[v17.ExecuteFetchAsAppRequest, v17.ExecuteFetchAsAppResponse](
			httpClient,
			baseURL+TabletManagerExecuteFetchAsAppProcedure,
			opts...,
		),
		replicationStatus: connect.NewClient[v17.ReplicationStatusRequest, v17.ReplicationStatusResponse](
			httpClient,
			baseURL+TabletManagerReplicationStatusProcedure,
			opts...,
		),
		primaryStatus: connect.NewClient[v17.PrimaryStatusRequest, v17.PrimaryStatusResponse](
			httpClient,
			baseURL+TabletManagerPrimaryStatusProcedure,
			opts...,
		),
		primaryPosition: connect.NewClient[v17.PrimaryPositionRequest, v17.PrimaryPositionResponse](
			httpClient,
			baseURL+TabletManagerPrimaryPositionProcedure,
			opts...,
		),
		waitForPosition: connect.NewClient[v17.WaitForPositionRequest, v17.WaitForPositionResponse](
			httpClient,
			baseURL+TabletManagerWaitForPositionProcedure,
			opts...,
		),
		stopReplication: connect.NewClient[v17.StopReplicationRequest, v17.StopReplicationResponse](
			httpClient,
			baseURL+TabletManagerStopReplicationProcedure,
			opts...,
		),
		stopReplicationMinimum: connect.NewClient[v17.StopReplicationMinimumRequest, v17.StopReplicationMinimumResponse](
			httpClient,
			baseURL+TabletManagerStopReplicationMinimumProcedure,
			opts...,
		),
		startReplication: connect.NewClient[v17.StartReplicationRequest, v17.StartReplicationResponse](
			httpClient,
			baseURL+TabletManagerStartReplicationProcedure,
			opts...,
		),
		startReplicationUntilAfter: connect.NewClient[v17.StartReplicationUntilAfterRequest, v17.StartReplicationUntilAfterResponse](
			httpClient,
			baseURL+TabletManagerStartReplicationUntilAfterProcedure,
			opts...,
		),
		getReplicas: connect.NewClient[v17.GetReplicasRequest, v17.GetReplicasResponse](
			httpClient,
			baseURL+TabletManagerGetReplicasProcedure,
			opts...,
		),
		vReplicationExec: connect.NewClient[v17.VReplicationExecRequest, v17.VReplicationExecResponse](
			httpClient,
			baseURL+TabletManagerVReplicationExecProcedure,
			opts...,
		),
		vReplicationWaitForPos: connect.NewClient[v17.VReplicationWaitForPosRequest, v17.VReplicationWaitForPosResponse](
			httpClient,
			baseURL+TabletManagerVReplicationWaitForPosProcedure,
			opts...,
		),
		updateVRWorkflow: connect.NewClient[v17.UpdateVRWorkflowRequest, v17.UpdateVRWorkflowResponse](
			httpClient,
			baseURL+TabletManagerUpdateVRWorkflowProcedure,
			opts...,
		),
		vDiff: connect.NewClient[v17.VDiffRequest, v17.VDiffResponse](
			httpClient,
			baseURL+TabletManagerVDiffProcedure,
			opts...,
		),
		resetReplication: connect.NewClient[v17.ResetReplicationRequest, v17.ResetReplicationResponse](
			httpClient,
			baseURL+TabletManagerResetReplicationProcedure,
			opts...,
		),
		initPrimary: connect.NewClient[v17.InitPrimaryRequest, v17.InitPrimaryResponse](
			httpClient,
			baseURL+TabletManagerInitPrimaryProcedure,
			opts...,
		),
		populateReparentJournal: connect.NewClient[v17.PopulateReparentJournalRequest, v17.PopulateReparentJournalResponse](
			httpClient,
			baseURL+TabletManagerPopulateReparentJournalProcedure,
			opts...,
		),
		initReplica: connect.NewClient[v17.InitReplicaRequest, v17.InitReplicaResponse](
			httpClient,
			baseURL+TabletManagerInitReplicaProcedure,
			opts...,
		),
		demotePrimary: connect.NewClient[v17.DemotePrimaryRequest, v17.DemotePrimaryResponse](
			httpClient,
			baseURL+TabletManagerDemotePrimaryProcedure,
			opts...,
		),
		undoDemotePrimary: connect.NewClient[v17.UndoDemotePrimaryRequest, v17.UndoDemotePrimaryResponse](
			httpClient,
			baseURL+TabletManagerUndoDemotePrimaryProcedure,
			opts...,
		),
		replicaWasPromoted: connect.NewClient[v17.ReplicaWasPromotedRequest, v17.ReplicaWasPromotedResponse](
			httpClient,
			baseURL+TabletManagerReplicaWasPromotedProcedure,
			opts...,
		),
		resetReplicationParameters: connect.NewClient[v17.ResetReplicationParametersRequest, v17.ResetReplicationParametersResponse](
			httpClient,
			baseURL+TabletManagerResetReplicationParametersProcedure,
			opts...,
		),
		fullStatus: connect.NewClient[v17.FullStatusRequest, v17.FullStatusResponse](
			httpClient,
			baseURL+TabletManagerFullStatusProcedure,
			opts...,
		),
		setReplicationSource: connect.NewClient[v17.SetReplicationSourceRequest, v17.SetReplicationSourceResponse](
			httpClient,
			baseURL+TabletManagerSetReplicationSourceProcedure,
			opts...,
		),
		replicaWasRestarted: connect.NewClient[v17.ReplicaWasRestartedRequest, v17.ReplicaWasRestartedResponse](
			httpClient,
			baseURL+TabletManagerReplicaWasRestartedProcedure,
			opts...,
		),
		stopReplicationAndGetStatus: connect.NewClient[v17.StopReplicationAndGetStatusRequest, v17.StopReplicationAndGetStatusResponse](
			httpClient,
			baseURL+TabletManagerStopReplicationAndGetStatusProcedure,
			opts...,
		),
		promoteReplica: connect.NewClient[v17.PromoteReplicaRequest, v17.PromoteReplicaResponse](
			httpClient,
			baseURL+TabletManagerPromoteReplicaProcedure,
			opts...,
		),
		backup: connect.NewClient[v17.BackupRequest, v17.BackupResponse](
			httpClient,
			baseURL+TabletManagerBackupProcedure,
			opts...,
		),
		restoreFromBackup: connect.NewClient[v17.RestoreFromBackupRequest, v17.RestoreFromBackupResponse](
			httpClient,
			baseURL+TabletManagerRestoreFromBackupProcedure,
			opts...,
		),
	}
}

// tabletManagerClient implements TabletManagerClient.
type tabletManagerClient struct {
	ping                        *connect.Client[v17.PingRequest, v17.PingResponse]
	sleep                       *connect.Client[v17.SleepRequest, v17.SleepResponse]
	executeHook                 *connect.Client[v17.ExecuteHookRequest, v17.ExecuteHookResponse]
	getSchema                   *connect.Client[v17.GetSchemaRequest, v17.GetSchemaResponse]
	getPermissions              *connect.Client[v17.GetPermissionsRequest, v17.GetPermissionsResponse]
	setReadOnly                 *connect.Client[v17.SetReadOnlyRequest, v17.SetReadOnlyResponse]
	setReadWrite                *connect.Client[v17.SetReadWriteRequest, v17.SetReadWriteResponse]
	changeType                  *connect.Client[v17.ChangeTypeRequest, v17.ChangeTypeResponse]
	refreshState                *connect.Client[v17.RefreshStateRequest, v17.RefreshStateResponse]
	runHealthCheck              *connect.Client[v17.RunHealthCheckRequest, v17.RunHealthCheckResponse]
	reloadSchema                *connect.Client[v17.ReloadSchemaRequest, v17.ReloadSchemaResponse]
	preflightSchema             *connect.Client[v17.PreflightSchemaRequest, v17.PreflightSchemaResponse]
	applySchema                 *connect.Client[v17.ApplySchemaRequest, v17.ApplySchemaResponse]
	lockTables                  *connect.Client[v17.LockTablesRequest, v17.LockTablesResponse]
	unlockTables                *connect.Client[v17.UnlockTablesRequest, v17.UnlockTablesResponse]
	executeQuery                *connect.Client[v17.ExecuteQueryRequest, v17.ExecuteQueryResponse]
	executeFetchAsDba           *connect.Client[v17.ExecuteFetchAsDbaRequest, v17.ExecuteFetchAsDbaResponse]
	executeFetchAsAllPrivs      *connect.Client[v17.ExecuteFetchAsAllPrivsRequest, v17.ExecuteFetchAsAllPrivsResponse]
	executeFetchAsApp           *connect.Client[v17.ExecuteFetchAsAppRequest, v17.ExecuteFetchAsAppResponse]
	replicationStatus           *connect.Client[v17.ReplicationStatusRequest, v17.ReplicationStatusResponse]
	primaryStatus               *connect.Client[v17.PrimaryStatusRequest, v17.PrimaryStatusResponse]
	primaryPosition             *connect.Client[v17.PrimaryPositionRequest, v17.PrimaryPositionResponse]
	waitForPosition             *connect.Client[v17.WaitForPositionRequest, v17.WaitForPositionResponse]
	stopReplication             *connect.Client[v17.StopReplicationRequest, v17.StopReplicationResponse]
	stopReplicationMinimum      *connect.Client[v17.StopReplicationMinimumRequest, v17.StopReplicationMinimumResponse]
	startReplication            *connect.Client[v17.StartReplicationRequest, v17.StartReplicationResponse]
	startReplicationUntilAfter  *connect.Client[v17.StartReplicationUntilAfterRequest, v17.StartReplicationUntilAfterResponse]
	getReplicas                 *connect.Client[v17.GetReplicasRequest, v17.GetReplicasResponse]
	vReplicationExec            *connect.Client[v17.VReplicationExecRequest, v17.VReplicationExecResponse]
	vReplicationWaitForPos      *connect.Client[v17.VReplicationWaitForPosRequest, v17.VReplicationWaitForPosResponse]
	updateVRWorkflow            *connect.Client[v17.UpdateVRWorkflowRequest, v17.UpdateVRWorkflowResponse]
	vDiff                       *connect.Client[v17.VDiffRequest, v17.VDiffResponse]
	resetReplication            *connect.Client[v17.ResetReplicationRequest, v17.ResetReplicationResponse]
	initPrimary                 *connect.Client[v17.InitPrimaryRequest, v17.InitPrimaryResponse]
	populateReparentJournal     *connect.Client[v17.PopulateReparentJournalRequest, v17.PopulateReparentJournalResponse]
	initReplica                 *connect.Client[v17.InitReplicaRequest, v17.InitReplicaResponse]
	demotePrimary               *connect.Client[v17.DemotePrimaryRequest, v17.DemotePrimaryResponse]
	undoDemotePrimary           *connect.Client[v17.UndoDemotePrimaryRequest, v17.UndoDemotePrimaryResponse]
	replicaWasPromoted          *connect.Client[v17.ReplicaWasPromotedRequest, v17.ReplicaWasPromotedResponse]
	resetReplicationParameters  *connect.Client[v17.ResetReplicationParametersRequest, v17.ResetReplicationParametersResponse]
	fullStatus                  *connect.Client[v17.FullStatusRequest, v17.FullStatusResponse]
	setReplicationSource        *connect.Client[v17.SetReplicationSourceRequest, v17.SetReplicationSourceResponse]
	replicaWasRestarted         *connect.Client[v17.ReplicaWasRestartedRequest, v17.ReplicaWasRestartedResponse]
	stopReplicationAndGetStatus *connect.Client[v17.StopReplicationAndGetStatusRequest, v17.StopReplicationAndGetStatusResponse]
	promoteReplica              *connect.Client[v17.PromoteReplicaRequest, v17.PromoteReplicaResponse]
	backup                      *connect.Client[v17.BackupRequest, v17.BackupResponse]
	restoreFromBackup           *connect.Client[v17.RestoreFromBackupRequest, v17.RestoreFromBackupResponse]
}

// Ping calls tabletmanagerservice.TabletManager.Ping.
func (c *tabletManagerClient) Ping(ctx context.Context, req *connect.Request[v17.PingRequest]) (*connect.Response[v17.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Sleep calls tabletmanagerservice.TabletManager.Sleep.
func (c *tabletManagerClient) Sleep(ctx context.Context, req *connect.Request[v17.SleepRequest]) (*connect.Response[v17.SleepResponse], error) {
	return c.sleep.CallUnary(ctx, req)
}

// ExecuteHook calls tabletmanagerservice.TabletManager.ExecuteHook.
func (c *tabletManagerClient) ExecuteHook(ctx context.Context, req *connect.Request[v17.ExecuteHookRequest]) (*connect.Response[v17.ExecuteHookResponse], error) {
	return c.executeHook.CallUnary(ctx, req)
}

// GetSchema calls tabletmanagerservice.TabletManager.GetSchema.
func (c *tabletManagerClient) GetSchema(ctx context.Context, req *connect.Request[v17.GetSchemaRequest]) (*connect.Response[v17.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// GetPermissions calls tabletmanagerservice.TabletManager.GetPermissions.
func (c *tabletManagerClient) GetPermissions(ctx context.Context, req *connect.Request[v17.GetPermissionsRequest]) (*connect.Response[v17.GetPermissionsResponse], error) {
	return c.getPermissions.CallUnary(ctx, req)
}

// SetReadOnly calls tabletmanagerservice.TabletManager.SetReadOnly.
func (c *tabletManagerClient) SetReadOnly(ctx context.Context, req *connect.Request[v17.SetReadOnlyRequest]) (*connect.Response[v17.SetReadOnlyResponse], error) {
	return c.setReadOnly.CallUnary(ctx, req)
}

// SetReadWrite calls tabletmanagerservice.TabletManager.SetReadWrite.
func (c *tabletManagerClient) SetReadWrite(ctx context.Context, req *connect.Request[v17.SetReadWriteRequest]) (*connect.Response[v17.SetReadWriteResponse], error) {
	return c.setReadWrite.CallUnary(ctx, req)
}

// ChangeType calls tabletmanagerservice.TabletManager.ChangeType.
func (c *tabletManagerClient) ChangeType(ctx context.Context, req *connect.Request[v17.ChangeTypeRequest]) (*connect.Response[v17.ChangeTypeResponse], error) {
	return c.changeType.CallUnary(ctx, req)
}

// RefreshState calls tabletmanagerservice.TabletManager.RefreshState.
func (c *tabletManagerClient) RefreshState(ctx context.Context, req *connect.Request[v17.RefreshStateRequest]) (*connect.Response[v17.RefreshStateResponse], error) {
	return c.refreshState.CallUnary(ctx, req)
}

// RunHealthCheck calls tabletmanagerservice.TabletManager.RunHealthCheck.
func (c *tabletManagerClient) RunHealthCheck(ctx context.Context, req *connect.Request[v17.RunHealthCheckRequest]) (*connect.Response[v17.RunHealthCheckResponse], error) {
	return c.runHealthCheck.CallUnary(ctx, req)
}

// ReloadSchema calls tabletmanagerservice.TabletManager.ReloadSchema.
func (c *tabletManagerClient) ReloadSchema(ctx context.Context, req *connect.Request[v17.ReloadSchemaRequest]) (*connect.Response[v17.ReloadSchemaResponse], error) {
	return c.reloadSchema.CallUnary(ctx, req)
}

// PreflightSchema calls tabletmanagerservice.TabletManager.PreflightSchema.
func (c *tabletManagerClient) PreflightSchema(ctx context.Context, req *connect.Request[v17.PreflightSchemaRequest]) (*connect.Response[v17.PreflightSchemaResponse], error) {
	return c.preflightSchema.CallUnary(ctx, req)
}

// ApplySchema calls tabletmanagerservice.TabletManager.ApplySchema.
func (c *tabletManagerClient) ApplySchema(ctx context.Context, req *connect.Request[v17.ApplySchemaRequest]) (*connect.Response[v17.ApplySchemaResponse], error) {
	return c.applySchema.CallUnary(ctx, req)
}

// LockTables calls tabletmanagerservice.TabletManager.LockTables.
func (c *tabletManagerClient) LockTables(ctx context.Context, req *connect.Request[v17.LockTablesRequest]) (*connect.Response[v17.LockTablesResponse], error) {
	return c.lockTables.CallUnary(ctx, req)
}

// UnlockTables calls tabletmanagerservice.TabletManager.UnlockTables.
func (c *tabletManagerClient) UnlockTables(ctx context.Context, req *connect.Request[v17.UnlockTablesRequest]) (*connect.Response[v17.UnlockTablesResponse], error) {
	return c.unlockTables.CallUnary(ctx, req)
}

// ExecuteQuery calls tabletmanagerservice.TabletManager.ExecuteQuery.
func (c *tabletManagerClient) ExecuteQuery(ctx context.Context, req *connect.Request[v17.ExecuteQueryRequest]) (*connect.Response[v17.ExecuteQueryResponse], error) {
	return c.executeQuery.CallUnary(ctx, req)
}

// ExecuteFetchAsDba calls tabletmanagerservice.TabletManager.ExecuteFetchAsDba.
func (c *tabletManagerClient) ExecuteFetchAsDba(ctx context.Context, req *connect.Request[v17.ExecuteFetchAsDbaRequest]) (*connect.Response[v17.ExecuteFetchAsDbaResponse], error) {
	return c.executeFetchAsDba.CallUnary(ctx, req)
}

// ExecuteFetchAsAllPrivs calls
// tabletmanagerservice.TabletManager.ExecuteFetchAsAllPrivs.
func (c *tabletManagerClient) ExecuteFetchAsAllPrivs(ctx context.Context, req *connect.Request[v17.ExecuteFetchAsAllPrivsRequest]) (*connect.Response[v17.ExecuteFetchAsAllPrivsResponse], error) {
	return c.executeFetchAsAllPrivs.CallUnary(ctx, req)
}

// ExecuteFetchAsApp calls tabletmanagerservice.TabletManager.ExecuteFetchAsApp.
func (c *tabletManagerClient) ExecuteFetchAsApp(ctx context.Context, req *connect.Request[v17.ExecuteFetchAsAppRequest]) (*connect.Response[v17.ExecuteFetchAsAppResponse], error) {
	return c.executeFetchAsApp.CallUnary(ctx, req)
}

// ReplicationStatus calls tabletmanagerservice.TabletManager.ReplicationStatus.
func (c *tabletManagerClient) ReplicationStatus(ctx context.Context, req *connect.Request[v17.ReplicationStatusRequest]) (*connect.Response[v17.ReplicationStatusResponse], error) {
	return c.replicationStatus.CallUnary(ctx, req)
}

// PrimaryStatus calls tabletmanagerservice.TabletManager.PrimaryStatus.
func (c *tabletManagerClient) PrimaryStatus(ctx context.Context, req *connect.Request[v17.PrimaryStatusRequest]) (*connect.Response[v17.PrimaryStatusResponse], error) {
	return c.primaryStatus.CallUnary(ctx, req)
}

// PrimaryPosition calls tabletmanagerservice.TabletManager.PrimaryPosition.
func (c *tabletManagerClient) PrimaryPosition(ctx context.Context, req *connect.Request[v17.PrimaryPositionRequest]) (*connect.Response[v17.PrimaryPositionResponse], error) {
	return c.primaryPosition.CallUnary(ctx, req)
}

// WaitForPosition calls tabletmanagerservice.TabletManager.WaitForPosition.
func (c *tabletManagerClient) WaitForPosition(ctx context.Context, req *connect.Request[v17.WaitForPositionRequest]) (*connect.Response[v17.WaitForPositionResponse], error) {
	return c.waitForPosition.CallUnary(ctx, req)
}

// StopReplication calls tabletmanagerservice.TabletManager.StopReplication.
func (c *tabletManagerClient) StopReplication(ctx context.Context, req *connect.Request[v17.StopReplicationRequest]) (*connect.Response[v17.StopReplicationResponse], error) {
	return c.stopReplication.CallUnary(ctx, req)
}

// StopReplicationMinimum calls
// tabletmanagerservice.TabletManager.StopReplicationMinimum.
func (c *tabletManagerClient) StopReplicationMinimum(ctx context.Context, req *connect.Request[v17.StopReplicationMinimumRequest]) (*connect.Response[v17.StopReplicationMinimumResponse], error) {
	return c.stopReplicationMinimum.CallUnary(ctx, req)
}

// StartReplication calls tabletmanagerservice.TabletManager.StartReplication.
func (c *tabletManagerClient) StartReplication(ctx context.Context, req *connect.Request[v17.StartReplicationRequest]) (*connect.Response[v17.StartReplicationResponse], error) {
	return c.startReplication.CallUnary(ctx, req)
}

// StartReplicationUntilAfter calls
// tabletmanagerservice.TabletManager.StartReplicationUntilAfter.
func (c *tabletManagerClient) StartReplicationUntilAfter(ctx context.Context, req *connect.Request[v17.StartReplicationUntilAfterRequest]) (*connect.Response[v17.StartReplicationUntilAfterResponse], error) {
	return c.startReplicationUntilAfter.CallUnary(ctx, req)
}

// GetReplicas calls tabletmanagerservice.TabletManager.GetReplicas.
func (c *tabletManagerClient) GetReplicas(ctx context.Context, req *connect.Request[v17.GetReplicasRequest]) (*connect.Response[v17.GetReplicasResponse], error) {
	return c.getReplicas.CallUnary(ctx, req)
}

// VReplicationExec calls tabletmanagerservice.TabletManager.VReplicationExec.
func (c *tabletManagerClient) VReplicationExec(ctx context.Context, req *connect.Request[v17.VReplicationExecRequest]) (*connect.Response[v17.VReplicationExecResponse], error) {
	return c.vReplicationExec.CallUnary(ctx, req)
}

// VReplicationWaitForPos calls
// tabletmanagerservice.TabletManager.VReplicationWaitForPos.
func (c *tabletManagerClient) VReplicationWaitForPos(ctx context.Context, req *connect.Request[v17.VReplicationWaitForPosRequest]) (*connect.Response[v17.VReplicationWaitForPosResponse], error) {
	return c.vReplicationWaitForPos.CallUnary(ctx, req)
}

// UpdateVRWorkflow calls tabletmanagerservice.TabletManager.UpdateVRWorkflow.
func (c *tabletManagerClient) UpdateVRWorkflow(ctx context.Context, req *connect.Request[v17.UpdateVRWorkflowRequest]) (*connect.Response[v17.UpdateVRWorkflowResponse], error) {
	return c.updateVRWorkflow.CallUnary(ctx, req)
}

// VDiff calls tabletmanagerservice.TabletManager.VDiff.
func (c *tabletManagerClient) VDiff(ctx context.Context, req *connect.Request[v17.VDiffRequest]) (*connect.Response[v17.VDiffResponse], error) {
	return c.vDiff.CallUnary(ctx, req)
}

// ResetReplication calls tabletmanagerservice.TabletManager.ResetReplication.
func (c *tabletManagerClient) ResetReplication(ctx context.Context, req *connect.Request[v17.ResetReplicationRequest]) (*connect.Response[v17.ResetReplicationResponse], error) {
	return c.resetReplication.CallUnary(ctx, req)
}

// InitPrimary calls tabletmanagerservice.TabletManager.InitPrimary.
func (c *tabletManagerClient) InitPrimary(ctx context.Context, req *connect.Request[v17.InitPrimaryRequest]) (*connect.Response[v17.InitPrimaryResponse], error) {
	return c.initPrimary.CallUnary(ctx, req)
}

// PopulateReparentJournal calls
// tabletmanagerservice.TabletManager.PopulateReparentJournal.
func (c *tabletManagerClient) PopulateReparentJournal(ctx context.Context, req *connect.Request[v17.PopulateReparentJournalRequest]) (*connect.Response[v17.PopulateReparentJournalResponse], error) {
	return c.populateReparentJournal.CallUnary(ctx, req)
}

// InitReplica calls tabletmanagerservice.TabletManager.InitReplica.
func (c *tabletManagerClient) InitReplica(ctx context.Context, req *connect.Request[v17.InitReplicaRequest]) (*connect.Response[v17.InitReplicaResponse], error) {
	return c.initReplica.CallUnary(ctx, req)
}

// DemotePrimary calls tabletmanagerservice.TabletManager.DemotePrimary.
func (c *tabletManagerClient) DemotePrimary(ctx context.Context, req *connect.Request[v17.DemotePrimaryRequest]) (*connect.Response[v17.DemotePrimaryResponse], error) {
	return c.demotePrimary.CallUnary(ctx, req)
}

// UndoDemotePrimary calls tabletmanagerservice.TabletManager.UndoDemotePrimary.
func (c *tabletManagerClient) UndoDemotePrimary(ctx context.Context, req *connect.Request[v17.UndoDemotePrimaryRequest]) (*connect.Response[v17.UndoDemotePrimaryResponse], error) {
	return c.undoDemotePrimary.CallUnary(ctx, req)
}

// ReplicaWasPromoted calls tabletmanagerservice.TabletManager.ReplicaWasPromoted.
func (c *tabletManagerClient) ReplicaWasPromoted(ctx context.Context, req *connect.Request[v17.ReplicaWasPromotedRequest]) (*connect.Response[v17.ReplicaWasPromotedResponse], error) {
	return c.replicaWasPromoted.CallUnary(ctx, req)
}

// ResetReplicationParameters calls
// tabletmanagerservice.TabletManager.ResetReplicationParameters.
func (c *tabletManagerClient) ResetReplicationParameters(ctx context.Context, req *connect.Request[v17.ResetReplicationParametersRequest]) (*connect.Response[v17.ResetReplicationParametersResponse], error) {
	return c.resetReplicationParameters.CallUnary(ctx, req)
}

// FullStatus calls tabletmanagerservice.TabletManager.FullStatus.
func (c *tabletManagerClient) FullStatus(ctx context.Context, req *connect.Request[v17.FullStatusRequest]) (*connect.Response[v17.FullStatusResponse], error) {
	return c.fullStatus.CallUnary(ctx, req)
}

// SetReplicationSource calls tabletmanagerservice.TabletManager.SetReplicationSource.
func (c *tabletManagerClient) SetReplicationSource(ctx context.Context, req *connect.Request[v17.SetReplicationSourceRequest]) (*connect.Response[v17.SetReplicationSourceResponse], error) {
	return c.setReplicationSource.CallUnary(ctx, req)
}

// ReplicaWasRestarted calls tabletmanagerservice.TabletManager.ReplicaWasRestarted.
func (c *tabletManagerClient) ReplicaWasRestarted(ctx context.Context, req *connect.Request[v17.ReplicaWasRestartedRequest]) (*connect.Response[v17.ReplicaWasRestartedResponse], error) {
	return c.replicaWasRestarted.CallUnary(ctx, req)
}

// StopReplicationAndGetStatus calls
// tabletmanagerservice.TabletManager.StopReplicationAndGetStatus.
func (c *tabletManagerClient) StopReplicationAndGetStatus(ctx context.Context, req *connect.Request[v17.StopReplicationAndGetStatusRequest]) (*connect.Response[v17.StopReplicationAndGetStatusResponse], error) {
	return c.stopReplicationAndGetStatus.CallUnary(ctx, req)
}

// PromoteReplica calls tabletmanagerservice.TabletManager.PromoteReplica.
func (c *tabletManagerClient) PromoteReplica(ctx context.Context, req *connect.Request[v17.PromoteReplicaRequest]) (*connect.Response[v17.PromoteReplicaResponse], error) {
	return c.promoteReplica.CallUnary(ctx, req)
}

// Backup calls tabletmanagerservice.TabletManager.Backup.
func (c *tabletManagerClient) Backup(ctx context.Context, req *connect.Request[v17.BackupRequest]) (*connect.ServerStreamForClient[v17.BackupResponse], error) {
	return c.backup.CallServerStream(ctx, req)
}

// RestoreFromBackup calls tabletmanagerservice.TabletManager.RestoreFromBackup.
func (c *tabletManagerClient) RestoreFromBackup(ctx context.Context, req *connect.Request[v17.RestoreFromBackupRequest]) (*connect.ServerStreamForClient[v17.RestoreFromBackupResponse], error) {
	return c.restoreFromBackup.CallServerStream(ctx, req)
}

// TabletManagerHandler is an implementation of the tabletmanagerservice.TabletManager
// service.
type TabletManagerHandler interface {
	// Ping returns the input payload
	Ping(context.Context, *connect.Request[v17.PingRequest]) (*connect.Response[v17.PingResponse], error)
	// Sleep sleeps for the provided duration
	Sleep(context.Context, *connect.Request[v17.SleepRequest]) (*connect.Response[v17.SleepResponse], error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(context.Context, *connect.Request[v17.ExecuteHookRequest]) (*connect.Response[v17.ExecuteHookResponse], error)
	// GetSchema asks the tablet for its schema
	GetSchema(context.Context, *connect.Request[v17.GetSchemaRequest]) (*connect.Response[v17.GetSchemaResponse], error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(context.Context, *connect.Request[v17.GetPermissionsRequest]) (*connect.Response[v17.GetPermissionsResponse], error)
	SetReadOnly(context.Context, *connect.Request[v17.SetReadOnlyRequest]) (*connect.Response[v17.SetReadOnlyResponse], error)
	SetReadWrite(context.Context, *connect.Request[v17.SetReadWriteRequest]) (*connect.Response[v17.SetReadWriteResponse], error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(context.Context, *connect.Request[v17.ChangeTypeRequest]) (*connect.Response[v17.ChangeTypeResponse], error)
	RefreshState(context.Context, *connect.Request[v17.RefreshStateRequest]) (*connect.Response[v17.RefreshStateResponse], error)
	RunHealthCheck(context.Context, *connect.Request[v17.RunHealthCheckRequest]) (*connect.Response[v17.RunHealthCheckResponse], error)
	ReloadSchema(context.Context, *connect.Request[v17.ReloadSchemaRequest]) (*connect.Response[v17.ReloadSchemaResponse], error)
	PreflightSchema(context.Context, *connect.Request[v17.PreflightSchemaRequest]) (*connect.Response[v17.PreflightSchemaResponse], error)
	ApplySchema(context.Context, *connect.Request[v17.ApplySchemaRequest]) (*connect.Response[v17.ApplySchemaResponse], error)
	LockTables(context.Context, *connect.Request[v17.LockTablesRequest]) (*connect.Response[v17.LockTablesResponse], error)
	UnlockTables(context.Context, *connect.Request[v17.UnlockTablesRequest]) (*connect.Response[v17.UnlockTablesResponse], error)
	ExecuteQuery(context.Context, *connect.Request[v17.ExecuteQueryRequest]) (*connect.Response[v17.ExecuteQueryResponse], error)
	ExecuteFetchAsDba(context.Context, *connect.Request[v17.ExecuteFetchAsDbaRequest]) (*connect.Response[v17.ExecuteFetchAsDbaResponse], error)
	ExecuteFetchAsAllPrivs(context.Context, *connect.Request[v17.ExecuteFetchAsAllPrivsRequest]) (*connect.Response[v17.ExecuteFetchAsAllPrivsResponse], error)
	ExecuteFetchAsApp(context.Context, *connect.Request[v17.ExecuteFetchAsAppRequest]) (*connect.Response[v17.ExecuteFetchAsAppResponse], error)
	// ReplicationStatus returns the current replication status.
	ReplicationStatus(context.Context, *connect.Request[v17.ReplicationStatusRequest]) (*connect.Response[v17.ReplicationStatusResponse], error)
	// PrimaryStatus returns the current primary status.
	PrimaryStatus(context.Context, *connect.Request[v17.PrimaryStatusRequest]) (*connect.Response[v17.PrimaryStatusResponse], error)
	// PrimaryPosition returns the current primary position
	PrimaryPosition(context.Context, *connect.Request[v17.PrimaryPositionRequest]) (*connect.Response[v17.PrimaryPositionResponse], error)
	// WaitForPosition waits for the position to be reached
	WaitForPosition(context.Context, *connect.Request[v17.WaitForPositionRequest]) (*connect.Response[v17.WaitForPositionResponse], error)
	// StopReplication makes mysql stop its replication
	StopReplication(context.Context, *connect.Request[v17.StopReplicationRequest]) (*connect.Response[v17.StopReplicationResponse], error)
	// StopReplicationMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopReplicationMinimum(context.Context, *connect.Request[v17.StopReplicationMinimumRequest]) (*connect.Response[v17.StopReplicationMinimumResponse], error)
	// StartReplication starts the mysql replication
	StartReplication(context.Context, *connect.Request[v17.StartReplicationRequest]) (*connect.Response[v17.StartReplicationResponse], error)
	// StartReplicationUnitAfter starts the mysql replication until and including
	// the provided position
	StartReplicationUntilAfter(context.Context, *connect.Request[v17.StartReplicationUntilAfterRequest]) (*connect.Response[v17.StartReplicationUntilAfterResponse], error)
	// GetReplicas asks for the list of mysql replicas
	GetReplicas(context.Context, *connect.Request[v17.GetReplicasRequest]) (*connect.Response[v17.GetReplicasResponse], error)
	// VReplication API
	VReplicationExec(context.Context, *connect.Request[v17.VReplicationExecRequest]) (*connect.Response[v17.VReplicationExecResponse], error)
	VReplicationWaitForPos(context.Context, *connect.Request[v17.VReplicationWaitForPosRequest]) (*connect.Response[v17.VReplicationWaitForPosResponse], error)
	UpdateVRWorkflow(context.Context, *connect.Request[v17.UpdateVRWorkflowRequest]) (*connect.Response[v17.UpdateVRWorkflowResponse], error)
	// VDiff API
	VDiff(context.Context, *connect.Request[v17.VDiffRequest]) (*connect.Response[v17.VDiffResponse], error)
	// ResetReplication makes the target not replicating
	ResetReplication(context.Context, *connect.Request[v17.ResetReplicationRequest]) (*connect.Response[v17.ResetReplicationResponse], error)
	// InitPrimary initializes the tablet as a primary
	InitPrimary(context.Context, *connect.Request[v17.InitPrimaryRequest]) (*connect.Response[v17.InitPrimaryResponse], error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(context.Context, *connect.Request[v17.PopulateReparentJournalRequest]) (*connect.Response[v17.PopulateReparentJournalResponse], error)
	// InitReplica tells the tablet to reparent to the primary unconditionally
	InitReplica(context.Context, *connect.Request[v17.InitReplicaRequest]) (*connect.Response[v17.InitReplicaResponse], error)
	// DemotePrimary tells the soon-to-be-former primary it's gonna change
	DemotePrimary(context.Context, *connect.Request[v17.DemotePrimaryRequest]) (*connect.Response[v17.DemotePrimaryResponse], error)
	// UndoDemotePrimary reverts all changes made by DemotePrimary
	UndoDemotePrimary(context.Context, *connect.Request[v17.UndoDemotePrimaryRequest]) (*connect.Response[v17.UndoDemotePrimaryResponse], error)
	// ReplicaWasPromoted tells the remote tablet it is now the primary
	ReplicaWasPromoted(context.Context, *connect.Request[v17.ReplicaWasPromotedRequest]) (*connect.Response[v17.ReplicaWasPromotedResponse], error)
	// ResetReplicationParameters resets the replica replication parameters
	ResetReplicationParameters(context.Context, *connect.Request[v17.ResetReplicationParametersRequest]) (*connect.Response[v17.ResetReplicationParametersResponse], error)
	// FullStatus collects and returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	FullStatus(context.Context, *connect.Request[v17.FullStatusRequest]) (*connect.Response[v17.FullStatusResponse], error)
	// SetReplicationSource tells the replica to reparent
	SetReplicationSource(context.Context, *connect.Request[v17.SetReplicationSourceRequest]) (*connect.Response[v17.SetReplicationSourceResponse], error)
	// ReplicaWasRestarted tells the remote tablet its primary has changed
	ReplicaWasRestarted(context.Context, *connect.Request[v17.ReplicaWasRestartedRequest]) (*connect.Response[v17.ReplicaWasRestartedResponse], error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(context.Context, *connect.Request[v17.StopReplicationAndGetStatusRequest]) (*connect.Response[v17.StopReplicationAndGetStatusResponse], error)
	// PromoteReplica makes the replica the new primary
	PromoteReplica(context.Context, *connect.Request[v17.PromoteReplicaRequest]) (*connect.Response[v17.PromoteReplicaResponse], error)
	Backup(context.Context, *connect.Request[v17.BackupRequest], *connect.ServerStream[v17.BackupResponse]) error
	// RestoreFromBackup deletes all local data and restores it from the latest backup.
	RestoreFromBackup(context.Context, *connect.Request[v17.RestoreFromBackupRequest], *connect.ServerStream[v17.RestoreFromBackupResponse]) error
}

// NewTabletManagerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTabletManagerHandler(svc TabletManagerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tabletManagerPingHandler := connect.NewUnaryHandler(
		TabletManagerPingProcedure,
		svc.Ping,
		opts...,
	)
	tabletManagerSleepHandler := connect.NewUnaryHandler(
		TabletManagerSleepProcedure,
		svc.Sleep,
		opts...,
	)
	tabletManagerExecuteHookHandler := connect.NewUnaryHandler(
		TabletManagerExecuteHookProcedure,
		svc.ExecuteHook,
		opts...,
	)
	tabletManagerGetSchemaHandler := connect.NewUnaryHandler(
		TabletManagerGetSchemaProcedure,
		svc.GetSchema,
		opts...,
	)
	tabletManagerGetPermissionsHandler := connect.NewUnaryHandler(
		TabletManagerGetPermissionsProcedure,
		svc.GetPermissions,
		opts...,
	)
	tabletManagerSetReadOnlyHandler := connect.NewUnaryHandler(
		TabletManagerSetReadOnlyProcedure,
		svc.SetReadOnly,
		opts...,
	)
	tabletManagerSetReadWriteHandler := connect.NewUnaryHandler(
		TabletManagerSetReadWriteProcedure,
		svc.SetReadWrite,
		opts...,
	)
	tabletManagerChangeTypeHandler := connect.NewUnaryHandler(
		TabletManagerChangeTypeProcedure,
		svc.ChangeType,
		opts...,
	)
	tabletManagerRefreshStateHandler := connect.NewUnaryHandler(
		TabletManagerRefreshStateProcedure,
		svc.RefreshState,
		opts...,
	)
	tabletManagerRunHealthCheckHandler := connect.NewUnaryHandler(
		TabletManagerRunHealthCheckProcedure,
		svc.RunHealthCheck,
		opts...,
	)
	tabletManagerReloadSchemaHandler := connect.NewUnaryHandler(
		TabletManagerReloadSchemaProcedure,
		svc.ReloadSchema,
		opts...,
	)
	tabletManagerPreflightSchemaHandler := connect.NewUnaryHandler(
		TabletManagerPreflightSchemaProcedure,
		svc.PreflightSchema,
		opts...,
	)
	tabletManagerApplySchemaHandler := connect.NewUnaryHandler(
		TabletManagerApplySchemaProcedure,
		svc.ApplySchema,
		opts...,
	)
	tabletManagerLockTablesHandler := connect.NewUnaryHandler(
		TabletManagerLockTablesProcedure,
		svc.LockTables,
		opts...,
	)
	tabletManagerUnlockTablesHandler := connect.NewUnaryHandler(
		TabletManagerUnlockTablesProcedure,
		svc.UnlockTables,
		opts...,
	)
	tabletManagerExecuteQueryHandler := connect.NewUnaryHandler(
		TabletManagerExecuteQueryProcedure,
		svc.ExecuteQuery,
		opts...,
	)
	tabletManagerExecuteFetchAsDbaHandler := connect.NewUnaryHandler(
		TabletManagerExecuteFetchAsDbaProcedure,
		svc.ExecuteFetchAsDba,
		opts...,
	)
	tabletManagerExecuteFetchAsAllPrivsHandler := connect.NewUnaryHandler(
		TabletManagerExecuteFetchAsAllPrivsProcedure,
		svc.ExecuteFetchAsAllPrivs,
		opts...,
	)
	tabletManagerExecuteFetchAsAppHandler := connect.NewUnaryHandler(
		TabletManagerExecuteFetchAsAppProcedure,
		svc.ExecuteFetchAsApp,
		opts...,
	)
	tabletManagerReplicationStatusHandler := connect.NewUnaryHandler(
		TabletManagerReplicationStatusProcedure,
		svc.ReplicationStatus,
		opts...,
	)
	tabletManagerPrimaryStatusHandler := connect.NewUnaryHandler(
		TabletManagerPrimaryStatusProcedure,
		svc.PrimaryStatus,
		opts...,
	)
	tabletManagerPrimaryPositionHandler := connect.NewUnaryHandler(
		TabletManagerPrimaryPositionProcedure,
		svc.PrimaryPosition,
		opts...,
	)
	tabletManagerWaitForPositionHandler := connect.NewUnaryHandler(
		TabletManagerWaitForPositionProcedure,
		svc.WaitForPosition,
		opts...,
	)
	tabletManagerStopReplicationHandler := connect.NewUnaryHandler(
		TabletManagerStopReplicationProcedure,
		svc.StopReplication,
		opts...,
	)
	tabletManagerStopReplicationMinimumHandler := connect.NewUnaryHandler(
		TabletManagerStopReplicationMinimumProcedure,
		svc.StopReplicationMinimum,
		opts...,
	)
	tabletManagerStartReplicationHandler := connect.NewUnaryHandler(
		TabletManagerStartReplicationProcedure,
		svc.StartReplication,
		opts...,
	)
	tabletManagerStartReplicationUntilAfterHandler := connect.NewUnaryHandler(
		TabletManagerStartReplicationUntilAfterProcedure,
		svc.StartReplicationUntilAfter,
		opts...,
	)
	tabletManagerGetReplicasHandler := connect.NewUnaryHandler(
		TabletManagerGetReplicasProcedure,
		svc.GetReplicas,
		opts...,
	)
	tabletManagerVReplicationExecHandler := connect.NewUnaryHandler(
		TabletManagerVReplicationExecProcedure,
		svc.VReplicationExec,
		opts...,
	)
	tabletManagerVReplicationWaitForPosHandler := connect.NewUnaryHandler(
		TabletManagerVReplicationWaitForPosProcedure,
		svc.VReplicationWaitForPos,
		opts...,
	)
	tabletManagerUpdateVRWorkflowHandler := connect.NewUnaryHandler(
		TabletManagerUpdateVRWorkflowProcedure,
		svc.UpdateVRWorkflow,
		opts...,
	)
	tabletManagerVDiffHandler := connect.NewUnaryHandler(
		TabletManagerVDiffProcedure,
		svc.VDiff,
		opts...,
	)
	tabletManagerResetReplicationHandler := connect.NewUnaryHandler(
		TabletManagerResetReplicationProcedure,
		svc.ResetReplication,
		opts...,
	)
	tabletManagerInitPrimaryHandler := connect.NewUnaryHandler(
		TabletManagerInitPrimaryProcedure,
		svc.InitPrimary,
		opts...,
	)
	tabletManagerPopulateReparentJournalHandler := connect.NewUnaryHandler(
		TabletManagerPopulateReparentJournalProcedure,
		svc.PopulateReparentJournal,
		opts...,
	)
	tabletManagerInitReplicaHandler := connect.NewUnaryHandler(
		TabletManagerInitReplicaProcedure,
		svc.InitReplica,
		opts...,
	)
	tabletManagerDemotePrimaryHandler := connect.NewUnaryHandler(
		TabletManagerDemotePrimaryProcedure,
		svc.DemotePrimary,
		opts...,
	)
	tabletManagerUndoDemotePrimaryHandler := connect.NewUnaryHandler(
		TabletManagerUndoDemotePrimaryProcedure,
		svc.UndoDemotePrimary,
		opts...,
	)
	tabletManagerReplicaWasPromotedHandler := connect.NewUnaryHandler(
		TabletManagerReplicaWasPromotedProcedure,
		svc.ReplicaWasPromoted,
		opts...,
	)
	tabletManagerResetReplicationParametersHandler := connect.NewUnaryHandler(
		TabletManagerResetReplicationParametersProcedure,
		svc.ResetReplicationParameters,
		opts...,
	)
	tabletManagerFullStatusHandler := connect.NewUnaryHandler(
		TabletManagerFullStatusProcedure,
		svc.FullStatus,
		opts...,
	)
	tabletManagerSetReplicationSourceHandler := connect.NewUnaryHandler(
		TabletManagerSetReplicationSourceProcedure,
		svc.SetReplicationSource,
		opts...,
	)
	tabletManagerReplicaWasRestartedHandler := connect.NewUnaryHandler(
		TabletManagerReplicaWasRestartedProcedure,
		svc.ReplicaWasRestarted,
		opts...,
	)
	tabletManagerStopReplicationAndGetStatusHandler := connect.NewUnaryHandler(
		TabletManagerStopReplicationAndGetStatusProcedure,
		svc.StopReplicationAndGetStatus,
		opts...,
	)
	tabletManagerPromoteReplicaHandler := connect.NewUnaryHandler(
		TabletManagerPromoteReplicaProcedure,
		svc.PromoteReplica,
		opts...,
	)
	tabletManagerBackupHandler := connect.NewServerStreamHandler(
		TabletManagerBackupProcedure,
		svc.Backup,
		opts...,
	)
	tabletManagerRestoreFromBackupHandler := connect.NewServerStreamHandler(
		TabletManagerRestoreFromBackupProcedure,
		svc.RestoreFromBackup,
		opts...,
	)
	return "/tabletmanagerservice.TabletManager/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TabletManagerPingProcedure:
			tabletManagerPingHandler.ServeHTTP(w, r)
		case TabletManagerSleepProcedure:
			tabletManagerSleepHandler.ServeHTTP(w, r)
		case TabletManagerExecuteHookProcedure:
			tabletManagerExecuteHookHandler.ServeHTTP(w, r)
		case TabletManagerGetSchemaProcedure:
			tabletManagerGetSchemaHandler.ServeHTTP(w, r)
		case TabletManagerGetPermissionsProcedure:
			tabletManagerGetPermissionsHandler.ServeHTTP(w, r)
		case TabletManagerSetReadOnlyProcedure:
			tabletManagerSetReadOnlyHandler.ServeHTTP(w, r)
		case TabletManagerSetReadWriteProcedure:
			tabletManagerSetReadWriteHandler.ServeHTTP(w, r)
		case TabletManagerChangeTypeProcedure:
			tabletManagerChangeTypeHandler.ServeHTTP(w, r)
		case TabletManagerRefreshStateProcedure:
			tabletManagerRefreshStateHandler.ServeHTTP(w, r)
		case TabletManagerRunHealthCheckProcedure:
			tabletManagerRunHealthCheckHandler.ServeHTTP(w, r)
		case TabletManagerReloadSchemaProcedure:
			tabletManagerReloadSchemaHandler.ServeHTTP(w, r)
		case TabletManagerPreflightSchemaProcedure:
			tabletManagerPreflightSchemaHandler.ServeHTTP(w, r)
		case TabletManagerApplySchemaProcedure:
			tabletManagerApplySchemaHandler.ServeHTTP(w, r)
		case TabletManagerLockTablesProcedure:
			tabletManagerLockTablesHandler.ServeHTTP(w, r)
		case TabletManagerUnlockTablesProcedure:
			tabletManagerUnlockTablesHandler.ServeHTTP(w, r)
		case TabletManagerExecuteQueryProcedure:
			tabletManagerExecuteQueryHandler.ServeHTTP(w, r)
		case TabletManagerExecuteFetchAsDbaProcedure:
			tabletManagerExecuteFetchAsDbaHandler.ServeHTTP(w, r)
		case TabletManagerExecuteFetchAsAllPrivsProcedure:
			tabletManagerExecuteFetchAsAllPrivsHandler.ServeHTTP(w, r)
		case TabletManagerExecuteFetchAsAppProcedure:
			tabletManagerExecuteFetchAsAppHandler.ServeHTTP(w, r)
		case TabletManagerReplicationStatusProcedure:
			tabletManagerReplicationStatusHandler.ServeHTTP(w, r)
		case TabletManagerPrimaryStatusProcedure:
			tabletManagerPrimaryStatusHandler.ServeHTTP(w, r)
		case TabletManagerPrimaryPositionProcedure:
			tabletManagerPrimaryPositionHandler.ServeHTTP(w, r)
		case TabletManagerWaitForPositionProcedure:
			tabletManagerWaitForPositionHandler.ServeHTTP(w, r)
		case TabletManagerStopReplicationProcedure:
			tabletManagerStopReplicationHandler.ServeHTTP(w, r)
		case TabletManagerStopReplicationMinimumProcedure:
			tabletManagerStopReplicationMinimumHandler.ServeHTTP(w, r)
		case TabletManagerStartReplicationProcedure:
			tabletManagerStartReplicationHandler.ServeHTTP(w, r)
		case TabletManagerStartReplicationUntilAfterProcedure:
			tabletManagerStartReplicationUntilAfterHandler.ServeHTTP(w, r)
		case TabletManagerGetReplicasProcedure:
			tabletManagerGetReplicasHandler.ServeHTTP(w, r)
		case TabletManagerVReplicationExecProcedure:
			tabletManagerVReplicationExecHandler.ServeHTTP(w, r)
		case TabletManagerVReplicationWaitForPosProcedure:
			tabletManagerVReplicationWaitForPosHandler.ServeHTTP(w, r)
		case TabletManagerUpdateVRWorkflowProcedure:
			tabletManagerUpdateVRWorkflowHandler.ServeHTTP(w, r)
		case TabletManagerVDiffProcedure:
			tabletManagerVDiffHandler.ServeHTTP(w, r)
		case TabletManagerResetReplicationProcedure:
			tabletManagerResetReplicationHandler.ServeHTTP(w, r)
		case TabletManagerInitPrimaryProcedure:
			tabletManagerInitPrimaryHandler.ServeHTTP(w, r)
		case TabletManagerPopulateReparentJournalProcedure:
			tabletManagerPopulateReparentJournalHandler.ServeHTTP(w, r)
		case TabletManagerInitReplicaProcedure:
			tabletManagerInitReplicaHandler.ServeHTTP(w, r)
		case TabletManagerDemotePrimaryProcedure:
			tabletManagerDemotePrimaryHandler.ServeHTTP(w, r)
		case TabletManagerUndoDemotePrimaryProcedure:
			tabletManagerUndoDemotePrimaryHandler.ServeHTTP(w, r)
		case TabletManagerReplicaWasPromotedProcedure:
			tabletManagerReplicaWasPromotedHandler.ServeHTTP(w, r)
		case TabletManagerResetReplicationParametersProcedure:
			tabletManagerResetReplicationParametersHandler.ServeHTTP(w, r)
		case TabletManagerFullStatusProcedure:
			tabletManagerFullStatusHandler.ServeHTTP(w, r)
		case TabletManagerSetReplicationSourceProcedure:
			tabletManagerSetReplicationSourceHandler.ServeHTTP(w, r)
		case TabletManagerReplicaWasRestartedProcedure:
			tabletManagerReplicaWasRestartedHandler.ServeHTTP(w, r)
		case TabletManagerStopReplicationAndGetStatusProcedure:
			tabletManagerStopReplicationAndGetStatusHandler.ServeHTTP(w, r)
		case TabletManagerPromoteReplicaProcedure:
			tabletManagerPromoteReplicaHandler.ServeHTTP(w, r)
		case TabletManagerBackupProcedure:
			tabletManagerBackupHandler.ServeHTTP(w, r)
		case TabletManagerRestoreFromBackupProcedure:
			tabletManagerRestoreFromBackupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTabletManagerHandler returns CodeUnimplemented from all methods.
type UnimplementedTabletManagerHandler struct{}

func (UnimplementedTabletManagerHandler) Ping(context.Context, *connect.Request[v17.PingRequest]) (*connect.Response[v17.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.Ping is not implemented"))
}

func (UnimplementedTabletManagerHandler) Sleep(context.Context, *connect.Request[v17.SleepRequest]) (*connect.Response[v17.SleepResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.Sleep is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteHook(context.Context, *connect.Request[v17.ExecuteHookRequest]) (*connect.Response[v17.ExecuteHookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteHook is not implemented"))
}

func (UnimplementedTabletManagerHandler) GetSchema(context.Context, *connect.Request[v17.GetSchemaRequest]) (*connect.Response[v17.GetSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.GetSchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) GetPermissions(context.Context, *connect.Request[v17.GetPermissionsRequest]) (*connect.Response[v17.GetPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.GetPermissions is not implemented"))
}

func (UnimplementedTabletManagerHandler) SetReadOnly(context.Context, *connect.Request[v17.SetReadOnlyRequest]) (*connect.Response[v17.SetReadOnlyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.SetReadOnly is not implemented"))
}

func (UnimplementedTabletManagerHandler) SetReadWrite(context.Context, *connect.Request[v17.SetReadWriteRequest]) (*connect.Response[v17.SetReadWriteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.SetReadWrite is not implemented"))
}

func (UnimplementedTabletManagerHandler) ChangeType(context.Context, *connect.Request[v17.ChangeTypeRequest]) (*connect.Response[v17.ChangeTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ChangeType is not implemented"))
}

func (UnimplementedTabletManagerHandler) RefreshState(context.Context, *connect.Request[v17.RefreshStateRequest]) (*connect.Response[v17.RefreshStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.RefreshState is not implemented"))
}

func (UnimplementedTabletManagerHandler) RunHealthCheck(context.Context, *connect.Request[v17.RunHealthCheckRequest]) (*connect.Response[v17.RunHealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.RunHealthCheck is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReloadSchema(context.Context, *connect.Request[v17.ReloadSchemaRequest]) (*connect.Response[v17.ReloadSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ReloadSchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) PreflightSchema(context.Context, *connect.Request[v17.PreflightSchemaRequest]) (*connect.Response[v17.PreflightSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PreflightSchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) ApplySchema(context.Context, *connect.Request[v17.ApplySchemaRequest]) (*connect.Response[v17.ApplySchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ApplySchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) LockTables(context.Context, *connect.Request[v17.LockTablesRequest]) (*connect.Response[v17.LockTablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.LockTables is not implemented"))
}

func (UnimplementedTabletManagerHandler) UnlockTables(context.Context, *connect.Request[v17.UnlockTablesRequest]) (*connect.Response[v17.UnlockTablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.UnlockTables is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteQuery(context.Context, *connect.Request[v17.ExecuteQueryRequest]) (*connect.Response[v17.ExecuteQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteQuery is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteFetchAsDba(context.Context, *connect.Request[v17.ExecuteFetchAsDbaRequest]) (*connect.Response[v17.ExecuteFetchAsDbaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteFetchAsDba is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteFetchAsAllPrivs(context.Context, *connect.Request[v17.ExecuteFetchAsAllPrivsRequest]) (*connect.Response[v17.ExecuteFetchAsAllPrivsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteFetchAsAllPrivs is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteFetchAsApp(context.Context, *connect.Request[v17.ExecuteFetchAsAppRequest]) (*connect.Response[v17.ExecuteFetchAsAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteFetchAsApp is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReplicationStatus(context.Context, *connect.Request[v17.ReplicationStatusRequest]) (*connect.Response[v17.ReplicationStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ReplicationStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) PrimaryStatus(context.Context, *connect.Request[v17.PrimaryStatusRequest]) (*connect.Response[v17.PrimaryStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PrimaryStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) PrimaryPosition(context.Context, *connect.Request[v17.PrimaryPositionRequest]) (*connect.Response[v17.PrimaryPositionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PrimaryPosition is not implemented"))
}

func (UnimplementedTabletManagerHandler) WaitForPosition(context.Context, *connect.Request[v17.WaitForPositionRequest]) (*connect.Response[v17.WaitForPositionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.WaitForPosition is not implemented"))
}

func (UnimplementedTabletManagerHandler) StopReplication(context.Context, *connect.Request[v17.StopReplicationRequest]) (*connect.Response[v17.StopReplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StopReplication is not implemented"))
}

func (UnimplementedTabletManagerHandler) StopReplicationMinimum(context.Context, *connect.Request[v17.StopReplicationMinimumRequest]) (*connect.Response[v17.StopReplicationMinimumResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StopReplicationMinimum is not implemented"))
}

func (UnimplementedTabletManagerHandler) StartReplication(context.Context, *connect.Request[v17.StartReplicationRequest]) (*connect.Response[v17.StartReplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StartReplication is not implemented"))
}

func (UnimplementedTabletManagerHandler) StartReplicationUntilAfter(context.Context, *connect.Request[v17.StartReplicationUntilAfterRequest]) (*connect.Response[v17.StartReplicationUntilAfterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StartReplicationUntilAfter is not implemented"))
}

func (UnimplementedTabletManagerHandler) GetReplicas(context.Context, *connect.Request[v17.GetReplicasRequest]) (*connect.Response[v17.GetReplicasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.GetReplicas is not implemented"))
}

func (UnimplementedTabletManagerHandler) VReplicationExec(context.Context, *connect.Request[v17.VReplicationExecRequest]) (*connect.Response[v17.VReplicationExecResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.VReplicationExec is not implemented"))
}

func (UnimplementedTabletManagerHandler) VReplicationWaitForPos(context.Context, *connect.Request[v17.VReplicationWaitForPosRequest]) (*connect.Response[v17.VReplicationWaitForPosResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.VReplicationWaitForPos is not implemented"))
}

func (UnimplementedTabletManagerHandler) UpdateVRWorkflow(context.Context, *connect.Request[v17.UpdateVRWorkflowRequest]) (*connect.Response[v17.UpdateVRWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.UpdateVRWorkflow is not implemented"))
}

func (UnimplementedTabletManagerHandler) VDiff(context.Context, *connect.Request[v17.VDiffRequest]) (*connect.Response[v17.VDiffResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.VDiff is not implemented"))
}

func (UnimplementedTabletManagerHandler) ResetReplication(context.Context, *connect.Request[v17.ResetReplicationRequest]) (*connect.Response[v17.ResetReplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ResetReplication is not implemented"))
}

func (UnimplementedTabletManagerHandler) InitPrimary(context.Context, *connect.Request[v17.InitPrimaryRequest]) (*connect.Response[v17.InitPrimaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.InitPrimary is not implemented"))
}

func (UnimplementedTabletManagerHandler) PopulateReparentJournal(context.Context, *connect.Request[v17.PopulateReparentJournalRequest]) (*connect.Response[v17.PopulateReparentJournalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PopulateReparentJournal is not implemented"))
}

func (UnimplementedTabletManagerHandler) InitReplica(context.Context, *connect.Request[v17.InitReplicaRequest]) (*connect.Response[v17.InitReplicaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.InitReplica is not implemented"))
}

func (UnimplementedTabletManagerHandler) DemotePrimary(context.Context, *connect.Request[v17.DemotePrimaryRequest]) (*connect.Response[v17.DemotePrimaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.DemotePrimary is not implemented"))
}

func (UnimplementedTabletManagerHandler) UndoDemotePrimary(context.Context, *connect.Request[v17.UndoDemotePrimaryRequest]) (*connect.Response[v17.UndoDemotePrimaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.UndoDemotePrimary is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReplicaWasPromoted(context.Context, *connect.Request[v17.ReplicaWasPromotedRequest]) (*connect.Response[v17.ReplicaWasPromotedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ReplicaWasPromoted is not implemented"))
}

func (UnimplementedTabletManagerHandler) ResetReplicationParameters(context.Context, *connect.Request[v17.ResetReplicationParametersRequest]) (*connect.Response[v17.ResetReplicationParametersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ResetReplicationParameters is not implemented"))
}

func (UnimplementedTabletManagerHandler) FullStatus(context.Context, *connect.Request[v17.FullStatusRequest]) (*connect.Response[v17.FullStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.FullStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) SetReplicationSource(context.Context, *connect.Request[v17.SetReplicationSourceRequest]) (*connect.Response[v17.SetReplicationSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.SetReplicationSource is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReplicaWasRestarted(context.Context, *connect.Request[v17.ReplicaWasRestartedRequest]) (*connect.Response[v17.ReplicaWasRestartedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ReplicaWasRestarted is not implemented"))
}

func (UnimplementedTabletManagerHandler) StopReplicationAndGetStatus(context.Context, *connect.Request[v17.StopReplicationAndGetStatusRequest]) (*connect.Response[v17.StopReplicationAndGetStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StopReplicationAndGetStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) PromoteReplica(context.Context, *connect.Request[v17.PromoteReplicaRequest]) (*connect.Response[v17.PromoteReplicaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PromoteReplica is not implemented"))
}

func (UnimplementedTabletManagerHandler) Backup(context.Context, *connect.Request[v17.BackupRequest], *connect.ServerStream[v17.BackupResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.Backup is not implemented"))
}

func (UnimplementedTabletManagerHandler) RestoreFromBackup(context.Context, *connect.Request[v17.RestoreFromBackupRequest], *connect.ServerStream[v17.RestoreFromBackupResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.RestoreFromBackup is not implemented"))
}
