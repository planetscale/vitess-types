// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tabletmanagerservice/tabletmanagerservice.proto

package tabletmanagerserviceconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	tabletmanagerdata "github.com/planetscale/vitess-types/gen/vitess/v14/tabletmanagerdata"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TabletManagerName is the fully-qualified name of the TabletManager service.
	TabletManagerName = "tabletmanagerservice.TabletManager"
)

// TabletManagerClient is a client for the tabletmanagerservice.TabletManager service.
type TabletManagerClient interface {
	// Ping returns the input payload
	Ping(context.Context, *connect_go.Request[tabletmanagerdata.PingRequest]) (*connect_go.Response[tabletmanagerdata.PingResponse], error)
	// Sleep sleeps for the provided duration
	Sleep(context.Context, *connect_go.Request[tabletmanagerdata.SleepRequest]) (*connect_go.Response[tabletmanagerdata.SleepResponse], error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteHookRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteHookResponse], error)
	// GetSchema asks the tablet for its schema
	GetSchema(context.Context, *connect_go.Request[tabletmanagerdata.GetSchemaRequest]) (*connect_go.Response[tabletmanagerdata.GetSchemaResponse], error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(context.Context, *connect_go.Request[tabletmanagerdata.GetPermissionsRequest]) (*connect_go.Response[tabletmanagerdata.GetPermissionsResponse], error)
	SetReadOnly(context.Context, *connect_go.Request[tabletmanagerdata.SetReadOnlyRequest]) (*connect_go.Response[tabletmanagerdata.SetReadOnlyResponse], error)
	SetReadWrite(context.Context, *connect_go.Request[tabletmanagerdata.SetReadWriteRequest]) (*connect_go.Response[tabletmanagerdata.SetReadWriteResponse], error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(context.Context, *connect_go.Request[tabletmanagerdata.ChangeTypeRequest]) (*connect_go.Response[tabletmanagerdata.ChangeTypeResponse], error)
	RefreshState(context.Context, *connect_go.Request[tabletmanagerdata.RefreshStateRequest]) (*connect_go.Response[tabletmanagerdata.RefreshStateResponse], error)
	RunHealthCheck(context.Context, *connect_go.Request[tabletmanagerdata.RunHealthCheckRequest]) (*connect_go.Response[tabletmanagerdata.RunHealthCheckResponse], error)
	ReloadSchema(context.Context, *connect_go.Request[tabletmanagerdata.ReloadSchemaRequest]) (*connect_go.Response[tabletmanagerdata.ReloadSchemaResponse], error)
	PreflightSchema(context.Context, *connect_go.Request[tabletmanagerdata.PreflightSchemaRequest]) (*connect_go.Response[tabletmanagerdata.PreflightSchemaResponse], error)
	ApplySchema(context.Context, *connect_go.Request[tabletmanagerdata.ApplySchemaRequest]) (*connect_go.Response[tabletmanagerdata.ApplySchemaResponse], error)
	LockTables(context.Context, *connect_go.Request[tabletmanagerdata.LockTablesRequest]) (*connect_go.Response[tabletmanagerdata.LockTablesResponse], error)
	UnlockTables(context.Context, *connect_go.Request[tabletmanagerdata.UnlockTablesRequest]) (*connect_go.Response[tabletmanagerdata.UnlockTablesResponse], error)
	ExecuteQuery(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteQueryRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteQueryResponse], error)
	ExecuteFetchAsDba(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteFetchAsDbaRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteFetchAsDbaResponse], error)
	ExecuteFetchAsAllPrivs(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteFetchAsAllPrivsRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteFetchAsAllPrivsResponse], error)
	ExecuteFetchAsApp(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteFetchAsAppRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteFetchAsAppResponse], error)
	// ReplicationStatus returns the current replication status.
	ReplicationStatus(context.Context, *connect_go.Request[tabletmanagerdata.ReplicationStatusRequest]) (*connect_go.Response[tabletmanagerdata.ReplicationStatusResponse], error)
	// PrimaryStatus returns the current primary status.
	PrimaryStatus(context.Context, *connect_go.Request[tabletmanagerdata.PrimaryStatusRequest]) (*connect_go.Response[tabletmanagerdata.PrimaryStatusResponse], error)
	// PrimaryPosition returns the current primary position
	PrimaryPosition(context.Context, *connect_go.Request[tabletmanagerdata.PrimaryPositionRequest]) (*connect_go.Response[tabletmanagerdata.PrimaryPositionResponse], error)
	// WaitForPosition waits for the position to be reached
	WaitForPosition(context.Context, *connect_go.Request[tabletmanagerdata.WaitForPositionRequest]) (*connect_go.Response[tabletmanagerdata.WaitForPositionResponse], error)
	// StopReplication makes mysql stop its replication
	StopReplication(context.Context, *connect_go.Request[tabletmanagerdata.StopReplicationRequest]) (*connect_go.Response[tabletmanagerdata.StopReplicationResponse], error)
	// StopReplicationMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopReplicationMinimum(context.Context, *connect_go.Request[tabletmanagerdata.StopReplicationMinimumRequest]) (*connect_go.Response[tabletmanagerdata.StopReplicationMinimumResponse], error)
	// StartReplication starts the mysql replication
	StartReplication(context.Context, *connect_go.Request[tabletmanagerdata.StartReplicationRequest]) (*connect_go.Response[tabletmanagerdata.StartReplicationResponse], error)
	// StartReplicationUnitAfter starts the mysql replication until and including
	// the provided position
	StartReplicationUntilAfter(context.Context, *connect_go.Request[tabletmanagerdata.StartReplicationUntilAfterRequest]) (*connect_go.Response[tabletmanagerdata.StartReplicationUntilAfterResponse], error)
	// GetReplicas asks for the list of mysql replicas
	GetReplicas(context.Context, *connect_go.Request[tabletmanagerdata.GetReplicasRequest]) (*connect_go.Response[tabletmanagerdata.GetReplicasResponse], error)
	// VReplication API
	VReplicationExec(context.Context, *connect_go.Request[tabletmanagerdata.VReplicationExecRequest]) (*connect_go.Response[tabletmanagerdata.VReplicationExecResponse], error)
	VReplicationWaitForPos(context.Context, *connect_go.Request[tabletmanagerdata.VReplicationWaitForPosRequest]) (*connect_go.Response[tabletmanagerdata.VReplicationWaitForPosResponse], error)
	// VDiff API
	VDiff(context.Context, *connect_go.Request[tabletmanagerdata.VDiffRequest]) (*connect_go.Response[tabletmanagerdata.VDiffResponse], error)
	// ResetReplication makes the target not replicating
	ResetReplication(context.Context, *connect_go.Request[tabletmanagerdata.ResetReplicationRequest]) (*connect_go.Response[tabletmanagerdata.ResetReplicationResponse], error)
	// InitPrimary initializes the tablet as a primary
	InitPrimary(context.Context, *connect_go.Request[tabletmanagerdata.InitPrimaryRequest]) (*connect_go.Response[tabletmanagerdata.InitPrimaryResponse], error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(context.Context, *connect_go.Request[tabletmanagerdata.PopulateReparentJournalRequest]) (*connect_go.Response[tabletmanagerdata.PopulateReparentJournalResponse], error)
	// InitReplica tells the tablet to reparent to the primary unconditionally
	InitReplica(context.Context, *connect_go.Request[tabletmanagerdata.InitReplicaRequest]) (*connect_go.Response[tabletmanagerdata.InitReplicaResponse], error)
	// DemotePrimary tells the soon-to-be-former primary it's gonna change
	DemotePrimary(context.Context, *connect_go.Request[tabletmanagerdata.DemotePrimaryRequest]) (*connect_go.Response[tabletmanagerdata.DemotePrimaryResponse], error)
	// UndoDemotePrimary reverts all changes made by DemotePrimary
	UndoDemotePrimary(context.Context, *connect_go.Request[tabletmanagerdata.UndoDemotePrimaryRequest]) (*connect_go.Response[tabletmanagerdata.UndoDemotePrimaryResponse], error)
	// ReplicaWasPromoted tells the remote tablet it is now the primary
	ReplicaWasPromoted(context.Context, *connect_go.Request[tabletmanagerdata.ReplicaWasPromotedRequest]) (*connect_go.Response[tabletmanagerdata.ReplicaWasPromotedResponse], error)
	// ResetReplicationParameters resets the replica replication parameters
	ResetReplicationParameters(context.Context, *connect_go.Request[tabletmanagerdata.ResetReplicationParametersRequest]) (*connect_go.Response[tabletmanagerdata.ResetReplicationParametersResponse], error)
	// FullStatus collects and returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	FullStatus(context.Context, *connect_go.Request[tabletmanagerdata.FullStatusRequest]) (*connect_go.Response[tabletmanagerdata.FullStatusResponse], error)
	// SetReplicationSource tells the replica to reparent
	SetReplicationSource(context.Context, *connect_go.Request[tabletmanagerdata.SetReplicationSourceRequest]) (*connect_go.Response[tabletmanagerdata.SetReplicationSourceResponse], error)
	// ReplicaWasRestarted tells the remote tablet its primary has changed
	ReplicaWasRestarted(context.Context, *connect_go.Request[tabletmanagerdata.ReplicaWasRestartedRequest]) (*connect_go.Response[tabletmanagerdata.ReplicaWasRestartedResponse], error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(context.Context, *connect_go.Request[tabletmanagerdata.StopReplicationAndGetStatusRequest]) (*connect_go.Response[tabletmanagerdata.StopReplicationAndGetStatusResponse], error)
	// PromoteReplica makes the replica the new primary
	PromoteReplica(context.Context, *connect_go.Request[tabletmanagerdata.PromoteReplicaRequest]) (*connect_go.Response[tabletmanagerdata.PromoteReplicaResponse], error)
	Backup(context.Context, *connect_go.Request[tabletmanagerdata.BackupRequest]) (*connect_go.ServerStreamForClient[tabletmanagerdata.BackupResponse], error)
	// RestoreFromBackup deletes all local data and restores it from the latest backup.
	RestoreFromBackup(context.Context, *connect_go.Request[tabletmanagerdata.RestoreFromBackupRequest]) (*connect_go.ServerStreamForClient[tabletmanagerdata.RestoreFromBackupResponse], error)
	// Generic VExec request. Can be used for various purposes
	VExec(context.Context, *connect_go.Request[tabletmanagerdata.VExecRequest]) (*connect_go.Response[tabletmanagerdata.VExecResponse], error)
}

// NewTabletManagerClient constructs a client for the tabletmanagerservice.TabletManager service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTabletManagerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TabletManagerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tabletManagerClient{
		ping: connect_go.NewClient[tabletmanagerdata.PingRequest, tabletmanagerdata.PingResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/Ping",
			opts...,
		),
		sleep: connect_go.NewClient[tabletmanagerdata.SleepRequest, tabletmanagerdata.SleepResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/Sleep",
			opts...,
		),
		executeHook: connect_go.NewClient[tabletmanagerdata.ExecuteHookRequest, tabletmanagerdata.ExecuteHookResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/ExecuteHook",
			opts...,
		),
		getSchema: connect_go.NewClient[tabletmanagerdata.GetSchemaRequest, tabletmanagerdata.GetSchemaResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/GetSchema",
			opts...,
		),
		getPermissions: connect_go.NewClient[tabletmanagerdata.GetPermissionsRequest, tabletmanagerdata.GetPermissionsResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/GetPermissions",
			opts...,
		),
		setReadOnly: connect_go.NewClient[tabletmanagerdata.SetReadOnlyRequest, tabletmanagerdata.SetReadOnlyResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/SetReadOnly",
			opts...,
		),
		setReadWrite: connect_go.NewClient[tabletmanagerdata.SetReadWriteRequest, tabletmanagerdata.SetReadWriteResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/SetReadWrite",
			opts...,
		),
		changeType: connect_go.NewClient[tabletmanagerdata.ChangeTypeRequest, tabletmanagerdata.ChangeTypeResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/ChangeType",
			opts...,
		),
		refreshState: connect_go.NewClient[tabletmanagerdata.RefreshStateRequest, tabletmanagerdata.RefreshStateResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/RefreshState",
			opts...,
		),
		runHealthCheck: connect_go.NewClient[tabletmanagerdata.RunHealthCheckRequest, tabletmanagerdata.RunHealthCheckResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/RunHealthCheck",
			opts...,
		),
		reloadSchema: connect_go.NewClient[tabletmanagerdata.ReloadSchemaRequest, tabletmanagerdata.ReloadSchemaResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/ReloadSchema",
			opts...,
		),
		preflightSchema: connect_go.NewClient[tabletmanagerdata.PreflightSchemaRequest, tabletmanagerdata.PreflightSchemaResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/PreflightSchema",
			opts...,
		),
		applySchema: connect_go.NewClient[tabletmanagerdata.ApplySchemaRequest, tabletmanagerdata.ApplySchemaResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/ApplySchema",
			opts...,
		),
		lockTables: connect_go.NewClient[tabletmanagerdata.LockTablesRequest, tabletmanagerdata.LockTablesResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/LockTables",
			opts...,
		),
		unlockTables: connect_go.NewClient[tabletmanagerdata.UnlockTablesRequest, tabletmanagerdata.UnlockTablesResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/UnlockTables",
			opts...,
		),
		executeQuery: connect_go.NewClient[tabletmanagerdata.ExecuteQueryRequest, tabletmanagerdata.ExecuteQueryResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/ExecuteQuery",
			opts...,
		),
		executeFetchAsDba: connect_go.NewClient[tabletmanagerdata.ExecuteFetchAsDbaRequest, tabletmanagerdata.ExecuteFetchAsDbaResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/ExecuteFetchAsDba",
			opts...,
		),
		executeFetchAsAllPrivs: connect_go.NewClient[tabletmanagerdata.ExecuteFetchAsAllPrivsRequest, tabletmanagerdata.ExecuteFetchAsAllPrivsResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/ExecuteFetchAsAllPrivs",
			opts...,
		),
		executeFetchAsApp: connect_go.NewClient[tabletmanagerdata.ExecuteFetchAsAppRequest, tabletmanagerdata.ExecuteFetchAsAppResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/ExecuteFetchAsApp",
			opts...,
		),
		replicationStatus: connect_go.NewClient[tabletmanagerdata.ReplicationStatusRequest, tabletmanagerdata.ReplicationStatusResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/ReplicationStatus",
			opts...,
		),
		primaryStatus: connect_go.NewClient[tabletmanagerdata.PrimaryStatusRequest, tabletmanagerdata.PrimaryStatusResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/PrimaryStatus",
			opts...,
		),
		primaryPosition: connect_go.NewClient[tabletmanagerdata.PrimaryPositionRequest, tabletmanagerdata.PrimaryPositionResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/PrimaryPosition",
			opts...,
		),
		waitForPosition: connect_go.NewClient[tabletmanagerdata.WaitForPositionRequest, tabletmanagerdata.WaitForPositionResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/WaitForPosition",
			opts...,
		),
		stopReplication: connect_go.NewClient[tabletmanagerdata.StopReplicationRequest, tabletmanagerdata.StopReplicationResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/StopReplication",
			opts...,
		),
		stopReplicationMinimum: connect_go.NewClient[tabletmanagerdata.StopReplicationMinimumRequest, tabletmanagerdata.StopReplicationMinimumResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/StopReplicationMinimum",
			opts...,
		),
		startReplication: connect_go.NewClient[tabletmanagerdata.StartReplicationRequest, tabletmanagerdata.StartReplicationResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/StartReplication",
			opts...,
		),
		startReplicationUntilAfter: connect_go.NewClient[tabletmanagerdata.StartReplicationUntilAfterRequest, tabletmanagerdata.StartReplicationUntilAfterResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/StartReplicationUntilAfter",
			opts...,
		),
		getReplicas: connect_go.NewClient[tabletmanagerdata.GetReplicasRequest, tabletmanagerdata.GetReplicasResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/GetReplicas",
			opts...,
		),
		vReplicationExec: connect_go.NewClient[tabletmanagerdata.VReplicationExecRequest, tabletmanagerdata.VReplicationExecResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/VReplicationExec",
			opts...,
		),
		vReplicationWaitForPos: connect_go.NewClient[tabletmanagerdata.VReplicationWaitForPosRequest, tabletmanagerdata.VReplicationWaitForPosResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/VReplicationWaitForPos",
			opts...,
		),
		vDiff: connect_go.NewClient[tabletmanagerdata.VDiffRequest, tabletmanagerdata.VDiffResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/VDiff",
			opts...,
		),
		resetReplication: connect_go.NewClient[tabletmanagerdata.ResetReplicationRequest, tabletmanagerdata.ResetReplicationResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/ResetReplication",
			opts...,
		),
		initPrimary: connect_go.NewClient[tabletmanagerdata.InitPrimaryRequest, tabletmanagerdata.InitPrimaryResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/InitPrimary",
			opts...,
		),
		populateReparentJournal: connect_go.NewClient[tabletmanagerdata.PopulateReparentJournalRequest, tabletmanagerdata.PopulateReparentJournalResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/PopulateReparentJournal",
			opts...,
		),
		initReplica: connect_go.NewClient[tabletmanagerdata.InitReplicaRequest, tabletmanagerdata.InitReplicaResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/InitReplica",
			opts...,
		),
		demotePrimary: connect_go.NewClient[tabletmanagerdata.DemotePrimaryRequest, tabletmanagerdata.DemotePrimaryResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/DemotePrimary",
			opts...,
		),
		undoDemotePrimary: connect_go.NewClient[tabletmanagerdata.UndoDemotePrimaryRequest, tabletmanagerdata.UndoDemotePrimaryResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/UndoDemotePrimary",
			opts...,
		),
		replicaWasPromoted: connect_go.NewClient[tabletmanagerdata.ReplicaWasPromotedRequest, tabletmanagerdata.ReplicaWasPromotedResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/ReplicaWasPromoted",
			opts...,
		),
		resetReplicationParameters: connect_go.NewClient[tabletmanagerdata.ResetReplicationParametersRequest, tabletmanagerdata.ResetReplicationParametersResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/ResetReplicationParameters",
			opts...,
		),
		fullStatus: connect_go.NewClient[tabletmanagerdata.FullStatusRequest, tabletmanagerdata.FullStatusResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/FullStatus",
			opts...,
		),
		setReplicationSource: connect_go.NewClient[tabletmanagerdata.SetReplicationSourceRequest, tabletmanagerdata.SetReplicationSourceResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/SetReplicationSource",
			opts...,
		),
		replicaWasRestarted: connect_go.NewClient[tabletmanagerdata.ReplicaWasRestartedRequest, tabletmanagerdata.ReplicaWasRestartedResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/ReplicaWasRestarted",
			opts...,
		),
		stopReplicationAndGetStatus: connect_go.NewClient[tabletmanagerdata.StopReplicationAndGetStatusRequest, tabletmanagerdata.StopReplicationAndGetStatusResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/StopReplicationAndGetStatus",
			opts...,
		),
		promoteReplica: connect_go.NewClient[tabletmanagerdata.PromoteReplicaRequest, tabletmanagerdata.PromoteReplicaResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/PromoteReplica",
			opts...,
		),
		backup: connect_go.NewClient[tabletmanagerdata.BackupRequest, tabletmanagerdata.BackupResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/Backup",
			opts...,
		),
		restoreFromBackup: connect_go.NewClient[tabletmanagerdata.RestoreFromBackupRequest, tabletmanagerdata.RestoreFromBackupResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/RestoreFromBackup",
			opts...,
		),
		vExec: connect_go.NewClient[tabletmanagerdata.VExecRequest, tabletmanagerdata.VExecResponse](
			httpClient,
			baseURL+"/tabletmanagerservice.TabletManager/VExec",
			opts...,
		),
	}
}

// tabletManagerClient implements TabletManagerClient.
type tabletManagerClient struct {
	ping                        *connect_go.Client[tabletmanagerdata.PingRequest, tabletmanagerdata.PingResponse]
	sleep                       *connect_go.Client[tabletmanagerdata.SleepRequest, tabletmanagerdata.SleepResponse]
	executeHook                 *connect_go.Client[tabletmanagerdata.ExecuteHookRequest, tabletmanagerdata.ExecuteHookResponse]
	getSchema                   *connect_go.Client[tabletmanagerdata.GetSchemaRequest, tabletmanagerdata.GetSchemaResponse]
	getPermissions              *connect_go.Client[tabletmanagerdata.GetPermissionsRequest, tabletmanagerdata.GetPermissionsResponse]
	setReadOnly                 *connect_go.Client[tabletmanagerdata.SetReadOnlyRequest, tabletmanagerdata.SetReadOnlyResponse]
	setReadWrite                *connect_go.Client[tabletmanagerdata.SetReadWriteRequest, tabletmanagerdata.SetReadWriteResponse]
	changeType                  *connect_go.Client[tabletmanagerdata.ChangeTypeRequest, tabletmanagerdata.ChangeTypeResponse]
	refreshState                *connect_go.Client[tabletmanagerdata.RefreshStateRequest, tabletmanagerdata.RefreshStateResponse]
	runHealthCheck              *connect_go.Client[tabletmanagerdata.RunHealthCheckRequest, tabletmanagerdata.RunHealthCheckResponse]
	reloadSchema                *connect_go.Client[tabletmanagerdata.ReloadSchemaRequest, tabletmanagerdata.ReloadSchemaResponse]
	preflightSchema             *connect_go.Client[tabletmanagerdata.PreflightSchemaRequest, tabletmanagerdata.PreflightSchemaResponse]
	applySchema                 *connect_go.Client[tabletmanagerdata.ApplySchemaRequest, tabletmanagerdata.ApplySchemaResponse]
	lockTables                  *connect_go.Client[tabletmanagerdata.LockTablesRequest, tabletmanagerdata.LockTablesResponse]
	unlockTables                *connect_go.Client[tabletmanagerdata.UnlockTablesRequest, tabletmanagerdata.UnlockTablesResponse]
	executeQuery                *connect_go.Client[tabletmanagerdata.ExecuteQueryRequest, tabletmanagerdata.ExecuteQueryResponse]
	executeFetchAsDba           *connect_go.Client[tabletmanagerdata.ExecuteFetchAsDbaRequest, tabletmanagerdata.ExecuteFetchAsDbaResponse]
	executeFetchAsAllPrivs      *connect_go.Client[tabletmanagerdata.ExecuteFetchAsAllPrivsRequest, tabletmanagerdata.ExecuteFetchAsAllPrivsResponse]
	executeFetchAsApp           *connect_go.Client[tabletmanagerdata.ExecuteFetchAsAppRequest, tabletmanagerdata.ExecuteFetchAsAppResponse]
	replicationStatus           *connect_go.Client[tabletmanagerdata.ReplicationStatusRequest, tabletmanagerdata.ReplicationStatusResponse]
	primaryStatus               *connect_go.Client[tabletmanagerdata.PrimaryStatusRequest, tabletmanagerdata.PrimaryStatusResponse]
	primaryPosition             *connect_go.Client[tabletmanagerdata.PrimaryPositionRequest, tabletmanagerdata.PrimaryPositionResponse]
	waitForPosition             *connect_go.Client[tabletmanagerdata.WaitForPositionRequest, tabletmanagerdata.WaitForPositionResponse]
	stopReplication             *connect_go.Client[tabletmanagerdata.StopReplicationRequest, tabletmanagerdata.StopReplicationResponse]
	stopReplicationMinimum      *connect_go.Client[tabletmanagerdata.StopReplicationMinimumRequest, tabletmanagerdata.StopReplicationMinimumResponse]
	startReplication            *connect_go.Client[tabletmanagerdata.StartReplicationRequest, tabletmanagerdata.StartReplicationResponse]
	startReplicationUntilAfter  *connect_go.Client[tabletmanagerdata.StartReplicationUntilAfterRequest, tabletmanagerdata.StartReplicationUntilAfterResponse]
	getReplicas                 *connect_go.Client[tabletmanagerdata.GetReplicasRequest, tabletmanagerdata.GetReplicasResponse]
	vReplicationExec            *connect_go.Client[tabletmanagerdata.VReplicationExecRequest, tabletmanagerdata.VReplicationExecResponse]
	vReplicationWaitForPos      *connect_go.Client[tabletmanagerdata.VReplicationWaitForPosRequest, tabletmanagerdata.VReplicationWaitForPosResponse]
	vDiff                       *connect_go.Client[tabletmanagerdata.VDiffRequest, tabletmanagerdata.VDiffResponse]
	resetReplication            *connect_go.Client[tabletmanagerdata.ResetReplicationRequest, tabletmanagerdata.ResetReplicationResponse]
	initPrimary                 *connect_go.Client[tabletmanagerdata.InitPrimaryRequest, tabletmanagerdata.InitPrimaryResponse]
	populateReparentJournal     *connect_go.Client[tabletmanagerdata.PopulateReparentJournalRequest, tabletmanagerdata.PopulateReparentJournalResponse]
	initReplica                 *connect_go.Client[tabletmanagerdata.InitReplicaRequest, tabletmanagerdata.InitReplicaResponse]
	demotePrimary               *connect_go.Client[tabletmanagerdata.DemotePrimaryRequest, tabletmanagerdata.DemotePrimaryResponse]
	undoDemotePrimary           *connect_go.Client[tabletmanagerdata.UndoDemotePrimaryRequest, tabletmanagerdata.UndoDemotePrimaryResponse]
	replicaWasPromoted          *connect_go.Client[tabletmanagerdata.ReplicaWasPromotedRequest, tabletmanagerdata.ReplicaWasPromotedResponse]
	resetReplicationParameters  *connect_go.Client[tabletmanagerdata.ResetReplicationParametersRequest, tabletmanagerdata.ResetReplicationParametersResponse]
	fullStatus                  *connect_go.Client[tabletmanagerdata.FullStatusRequest, tabletmanagerdata.FullStatusResponse]
	setReplicationSource        *connect_go.Client[tabletmanagerdata.SetReplicationSourceRequest, tabletmanagerdata.SetReplicationSourceResponse]
	replicaWasRestarted         *connect_go.Client[tabletmanagerdata.ReplicaWasRestartedRequest, tabletmanagerdata.ReplicaWasRestartedResponse]
	stopReplicationAndGetStatus *connect_go.Client[tabletmanagerdata.StopReplicationAndGetStatusRequest, tabletmanagerdata.StopReplicationAndGetStatusResponse]
	promoteReplica              *connect_go.Client[tabletmanagerdata.PromoteReplicaRequest, tabletmanagerdata.PromoteReplicaResponse]
	backup                      *connect_go.Client[tabletmanagerdata.BackupRequest, tabletmanagerdata.BackupResponse]
	restoreFromBackup           *connect_go.Client[tabletmanagerdata.RestoreFromBackupRequest, tabletmanagerdata.RestoreFromBackupResponse]
	vExec                       *connect_go.Client[tabletmanagerdata.VExecRequest, tabletmanagerdata.VExecResponse]
}

// Ping calls tabletmanagerservice.TabletManager.Ping.
func (c *tabletManagerClient) Ping(ctx context.Context, req *connect_go.Request[tabletmanagerdata.PingRequest]) (*connect_go.Response[tabletmanagerdata.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Sleep calls tabletmanagerservice.TabletManager.Sleep.
func (c *tabletManagerClient) Sleep(ctx context.Context, req *connect_go.Request[tabletmanagerdata.SleepRequest]) (*connect_go.Response[tabletmanagerdata.SleepResponse], error) {
	return c.sleep.CallUnary(ctx, req)
}

// ExecuteHook calls tabletmanagerservice.TabletManager.ExecuteHook.
func (c *tabletManagerClient) ExecuteHook(ctx context.Context, req *connect_go.Request[tabletmanagerdata.ExecuteHookRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteHookResponse], error) {
	return c.executeHook.CallUnary(ctx, req)
}

// GetSchema calls tabletmanagerservice.TabletManager.GetSchema.
func (c *tabletManagerClient) GetSchema(ctx context.Context, req *connect_go.Request[tabletmanagerdata.GetSchemaRequest]) (*connect_go.Response[tabletmanagerdata.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// GetPermissions calls tabletmanagerservice.TabletManager.GetPermissions.
func (c *tabletManagerClient) GetPermissions(ctx context.Context, req *connect_go.Request[tabletmanagerdata.GetPermissionsRequest]) (*connect_go.Response[tabletmanagerdata.GetPermissionsResponse], error) {
	return c.getPermissions.CallUnary(ctx, req)
}

// SetReadOnly calls tabletmanagerservice.TabletManager.SetReadOnly.
func (c *tabletManagerClient) SetReadOnly(ctx context.Context, req *connect_go.Request[tabletmanagerdata.SetReadOnlyRequest]) (*connect_go.Response[tabletmanagerdata.SetReadOnlyResponse], error) {
	return c.setReadOnly.CallUnary(ctx, req)
}

// SetReadWrite calls tabletmanagerservice.TabletManager.SetReadWrite.
func (c *tabletManagerClient) SetReadWrite(ctx context.Context, req *connect_go.Request[tabletmanagerdata.SetReadWriteRequest]) (*connect_go.Response[tabletmanagerdata.SetReadWriteResponse], error) {
	return c.setReadWrite.CallUnary(ctx, req)
}

// ChangeType calls tabletmanagerservice.TabletManager.ChangeType.
func (c *tabletManagerClient) ChangeType(ctx context.Context, req *connect_go.Request[tabletmanagerdata.ChangeTypeRequest]) (*connect_go.Response[tabletmanagerdata.ChangeTypeResponse], error) {
	return c.changeType.CallUnary(ctx, req)
}

// RefreshState calls tabletmanagerservice.TabletManager.RefreshState.
func (c *tabletManagerClient) RefreshState(ctx context.Context, req *connect_go.Request[tabletmanagerdata.RefreshStateRequest]) (*connect_go.Response[tabletmanagerdata.RefreshStateResponse], error) {
	return c.refreshState.CallUnary(ctx, req)
}

// RunHealthCheck calls tabletmanagerservice.TabletManager.RunHealthCheck.
func (c *tabletManagerClient) RunHealthCheck(ctx context.Context, req *connect_go.Request[tabletmanagerdata.RunHealthCheckRequest]) (*connect_go.Response[tabletmanagerdata.RunHealthCheckResponse], error) {
	return c.runHealthCheck.CallUnary(ctx, req)
}

// ReloadSchema calls tabletmanagerservice.TabletManager.ReloadSchema.
func (c *tabletManagerClient) ReloadSchema(ctx context.Context, req *connect_go.Request[tabletmanagerdata.ReloadSchemaRequest]) (*connect_go.Response[tabletmanagerdata.ReloadSchemaResponse], error) {
	return c.reloadSchema.CallUnary(ctx, req)
}

// PreflightSchema calls tabletmanagerservice.TabletManager.PreflightSchema.
func (c *tabletManagerClient) PreflightSchema(ctx context.Context, req *connect_go.Request[tabletmanagerdata.PreflightSchemaRequest]) (*connect_go.Response[tabletmanagerdata.PreflightSchemaResponse], error) {
	return c.preflightSchema.CallUnary(ctx, req)
}

// ApplySchema calls tabletmanagerservice.TabletManager.ApplySchema.
func (c *tabletManagerClient) ApplySchema(ctx context.Context, req *connect_go.Request[tabletmanagerdata.ApplySchemaRequest]) (*connect_go.Response[tabletmanagerdata.ApplySchemaResponse], error) {
	return c.applySchema.CallUnary(ctx, req)
}

// LockTables calls tabletmanagerservice.TabletManager.LockTables.
func (c *tabletManagerClient) LockTables(ctx context.Context, req *connect_go.Request[tabletmanagerdata.LockTablesRequest]) (*connect_go.Response[tabletmanagerdata.LockTablesResponse], error) {
	return c.lockTables.CallUnary(ctx, req)
}

// UnlockTables calls tabletmanagerservice.TabletManager.UnlockTables.
func (c *tabletManagerClient) UnlockTables(ctx context.Context, req *connect_go.Request[tabletmanagerdata.UnlockTablesRequest]) (*connect_go.Response[tabletmanagerdata.UnlockTablesResponse], error) {
	return c.unlockTables.CallUnary(ctx, req)
}

// ExecuteQuery calls tabletmanagerservice.TabletManager.ExecuteQuery.
func (c *tabletManagerClient) ExecuteQuery(ctx context.Context, req *connect_go.Request[tabletmanagerdata.ExecuteQueryRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteQueryResponse], error) {
	return c.executeQuery.CallUnary(ctx, req)
}

// ExecuteFetchAsDba calls tabletmanagerservice.TabletManager.ExecuteFetchAsDba.
func (c *tabletManagerClient) ExecuteFetchAsDba(ctx context.Context, req *connect_go.Request[tabletmanagerdata.ExecuteFetchAsDbaRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteFetchAsDbaResponse], error) {
	return c.executeFetchAsDba.CallUnary(ctx, req)
}

// ExecuteFetchAsAllPrivs calls tabletmanagerservice.TabletManager.ExecuteFetchAsAllPrivs.
func (c *tabletManagerClient) ExecuteFetchAsAllPrivs(ctx context.Context, req *connect_go.Request[tabletmanagerdata.ExecuteFetchAsAllPrivsRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteFetchAsAllPrivsResponse], error) {
	return c.executeFetchAsAllPrivs.CallUnary(ctx, req)
}

// ExecuteFetchAsApp calls tabletmanagerservice.TabletManager.ExecuteFetchAsApp.
func (c *tabletManagerClient) ExecuteFetchAsApp(ctx context.Context, req *connect_go.Request[tabletmanagerdata.ExecuteFetchAsAppRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteFetchAsAppResponse], error) {
	return c.executeFetchAsApp.CallUnary(ctx, req)
}

// ReplicationStatus calls tabletmanagerservice.TabletManager.ReplicationStatus.
func (c *tabletManagerClient) ReplicationStatus(ctx context.Context, req *connect_go.Request[tabletmanagerdata.ReplicationStatusRequest]) (*connect_go.Response[tabletmanagerdata.ReplicationStatusResponse], error) {
	return c.replicationStatus.CallUnary(ctx, req)
}

// PrimaryStatus calls tabletmanagerservice.TabletManager.PrimaryStatus.
func (c *tabletManagerClient) PrimaryStatus(ctx context.Context, req *connect_go.Request[tabletmanagerdata.PrimaryStatusRequest]) (*connect_go.Response[tabletmanagerdata.PrimaryStatusResponse], error) {
	return c.primaryStatus.CallUnary(ctx, req)
}

// PrimaryPosition calls tabletmanagerservice.TabletManager.PrimaryPosition.
func (c *tabletManagerClient) PrimaryPosition(ctx context.Context, req *connect_go.Request[tabletmanagerdata.PrimaryPositionRequest]) (*connect_go.Response[tabletmanagerdata.PrimaryPositionResponse], error) {
	return c.primaryPosition.CallUnary(ctx, req)
}

// WaitForPosition calls tabletmanagerservice.TabletManager.WaitForPosition.
func (c *tabletManagerClient) WaitForPosition(ctx context.Context, req *connect_go.Request[tabletmanagerdata.WaitForPositionRequest]) (*connect_go.Response[tabletmanagerdata.WaitForPositionResponse], error) {
	return c.waitForPosition.CallUnary(ctx, req)
}

// StopReplication calls tabletmanagerservice.TabletManager.StopReplication.
func (c *tabletManagerClient) StopReplication(ctx context.Context, req *connect_go.Request[tabletmanagerdata.StopReplicationRequest]) (*connect_go.Response[tabletmanagerdata.StopReplicationResponse], error) {
	return c.stopReplication.CallUnary(ctx, req)
}

// StopReplicationMinimum calls tabletmanagerservice.TabletManager.StopReplicationMinimum.
func (c *tabletManagerClient) StopReplicationMinimum(ctx context.Context, req *connect_go.Request[tabletmanagerdata.StopReplicationMinimumRequest]) (*connect_go.Response[tabletmanagerdata.StopReplicationMinimumResponse], error) {
	return c.stopReplicationMinimum.CallUnary(ctx, req)
}

// StartReplication calls tabletmanagerservice.TabletManager.StartReplication.
func (c *tabletManagerClient) StartReplication(ctx context.Context, req *connect_go.Request[tabletmanagerdata.StartReplicationRequest]) (*connect_go.Response[tabletmanagerdata.StartReplicationResponse], error) {
	return c.startReplication.CallUnary(ctx, req)
}

// StartReplicationUntilAfter calls tabletmanagerservice.TabletManager.StartReplicationUntilAfter.
func (c *tabletManagerClient) StartReplicationUntilAfter(ctx context.Context, req *connect_go.Request[tabletmanagerdata.StartReplicationUntilAfterRequest]) (*connect_go.Response[tabletmanagerdata.StartReplicationUntilAfterResponse], error) {
	return c.startReplicationUntilAfter.CallUnary(ctx, req)
}

// GetReplicas calls tabletmanagerservice.TabletManager.GetReplicas.
func (c *tabletManagerClient) GetReplicas(ctx context.Context, req *connect_go.Request[tabletmanagerdata.GetReplicasRequest]) (*connect_go.Response[tabletmanagerdata.GetReplicasResponse], error) {
	return c.getReplicas.CallUnary(ctx, req)
}

// VReplicationExec calls tabletmanagerservice.TabletManager.VReplicationExec.
func (c *tabletManagerClient) VReplicationExec(ctx context.Context, req *connect_go.Request[tabletmanagerdata.VReplicationExecRequest]) (*connect_go.Response[tabletmanagerdata.VReplicationExecResponse], error) {
	return c.vReplicationExec.CallUnary(ctx, req)
}

// VReplicationWaitForPos calls tabletmanagerservice.TabletManager.VReplicationWaitForPos.
func (c *tabletManagerClient) VReplicationWaitForPos(ctx context.Context, req *connect_go.Request[tabletmanagerdata.VReplicationWaitForPosRequest]) (*connect_go.Response[tabletmanagerdata.VReplicationWaitForPosResponse], error) {
	return c.vReplicationWaitForPos.CallUnary(ctx, req)
}

// VDiff calls tabletmanagerservice.TabletManager.VDiff.
func (c *tabletManagerClient) VDiff(ctx context.Context, req *connect_go.Request[tabletmanagerdata.VDiffRequest]) (*connect_go.Response[tabletmanagerdata.VDiffResponse], error) {
	return c.vDiff.CallUnary(ctx, req)
}

// ResetReplication calls tabletmanagerservice.TabletManager.ResetReplication.
func (c *tabletManagerClient) ResetReplication(ctx context.Context, req *connect_go.Request[tabletmanagerdata.ResetReplicationRequest]) (*connect_go.Response[tabletmanagerdata.ResetReplicationResponse], error) {
	return c.resetReplication.CallUnary(ctx, req)
}

// InitPrimary calls tabletmanagerservice.TabletManager.InitPrimary.
func (c *tabletManagerClient) InitPrimary(ctx context.Context, req *connect_go.Request[tabletmanagerdata.InitPrimaryRequest]) (*connect_go.Response[tabletmanagerdata.InitPrimaryResponse], error) {
	return c.initPrimary.CallUnary(ctx, req)
}

// PopulateReparentJournal calls tabletmanagerservice.TabletManager.PopulateReparentJournal.
func (c *tabletManagerClient) PopulateReparentJournal(ctx context.Context, req *connect_go.Request[tabletmanagerdata.PopulateReparentJournalRequest]) (*connect_go.Response[tabletmanagerdata.PopulateReparentJournalResponse], error) {
	return c.populateReparentJournal.CallUnary(ctx, req)
}

// InitReplica calls tabletmanagerservice.TabletManager.InitReplica.
func (c *tabletManagerClient) InitReplica(ctx context.Context, req *connect_go.Request[tabletmanagerdata.InitReplicaRequest]) (*connect_go.Response[tabletmanagerdata.InitReplicaResponse], error) {
	return c.initReplica.CallUnary(ctx, req)
}

// DemotePrimary calls tabletmanagerservice.TabletManager.DemotePrimary.
func (c *tabletManagerClient) DemotePrimary(ctx context.Context, req *connect_go.Request[tabletmanagerdata.DemotePrimaryRequest]) (*connect_go.Response[tabletmanagerdata.DemotePrimaryResponse], error) {
	return c.demotePrimary.CallUnary(ctx, req)
}

// UndoDemotePrimary calls tabletmanagerservice.TabletManager.UndoDemotePrimary.
func (c *tabletManagerClient) UndoDemotePrimary(ctx context.Context, req *connect_go.Request[tabletmanagerdata.UndoDemotePrimaryRequest]) (*connect_go.Response[tabletmanagerdata.UndoDemotePrimaryResponse], error) {
	return c.undoDemotePrimary.CallUnary(ctx, req)
}

// ReplicaWasPromoted calls tabletmanagerservice.TabletManager.ReplicaWasPromoted.
func (c *tabletManagerClient) ReplicaWasPromoted(ctx context.Context, req *connect_go.Request[tabletmanagerdata.ReplicaWasPromotedRequest]) (*connect_go.Response[tabletmanagerdata.ReplicaWasPromotedResponse], error) {
	return c.replicaWasPromoted.CallUnary(ctx, req)
}

// ResetReplicationParameters calls tabletmanagerservice.TabletManager.ResetReplicationParameters.
func (c *tabletManagerClient) ResetReplicationParameters(ctx context.Context, req *connect_go.Request[tabletmanagerdata.ResetReplicationParametersRequest]) (*connect_go.Response[tabletmanagerdata.ResetReplicationParametersResponse], error) {
	return c.resetReplicationParameters.CallUnary(ctx, req)
}

// FullStatus calls tabletmanagerservice.TabletManager.FullStatus.
func (c *tabletManagerClient) FullStatus(ctx context.Context, req *connect_go.Request[tabletmanagerdata.FullStatusRequest]) (*connect_go.Response[tabletmanagerdata.FullStatusResponse], error) {
	return c.fullStatus.CallUnary(ctx, req)
}

// SetReplicationSource calls tabletmanagerservice.TabletManager.SetReplicationSource.
func (c *tabletManagerClient) SetReplicationSource(ctx context.Context, req *connect_go.Request[tabletmanagerdata.SetReplicationSourceRequest]) (*connect_go.Response[tabletmanagerdata.SetReplicationSourceResponse], error) {
	return c.setReplicationSource.CallUnary(ctx, req)
}

// ReplicaWasRestarted calls tabletmanagerservice.TabletManager.ReplicaWasRestarted.
func (c *tabletManagerClient) ReplicaWasRestarted(ctx context.Context, req *connect_go.Request[tabletmanagerdata.ReplicaWasRestartedRequest]) (*connect_go.Response[tabletmanagerdata.ReplicaWasRestartedResponse], error) {
	return c.replicaWasRestarted.CallUnary(ctx, req)
}

// StopReplicationAndGetStatus calls tabletmanagerservice.TabletManager.StopReplicationAndGetStatus.
func (c *tabletManagerClient) StopReplicationAndGetStatus(ctx context.Context, req *connect_go.Request[tabletmanagerdata.StopReplicationAndGetStatusRequest]) (*connect_go.Response[tabletmanagerdata.StopReplicationAndGetStatusResponse], error) {
	return c.stopReplicationAndGetStatus.CallUnary(ctx, req)
}

// PromoteReplica calls tabletmanagerservice.TabletManager.PromoteReplica.
func (c *tabletManagerClient) PromoteReplica(ctx context.Context, req *connect_go.Request[tabletmanagerdata.PromoteReplicaRequest]) (*connect_go.Response[tabletmanagerdata.PromoteReplicaResponse], error) {
	return c.promoteReplica.CallUnary(ctx, req)
}

// Backup calls tabletmanagerservice.TabletManager.Backup.
func (c *tabletManagerClient) Backup(ctx context.Context, req *connect_go.Request[tabletmanagerdata.BackupRequest]) (*connect_go.ServerStreamForClient[tabletmanagerdata.BackupResponse], error) {
	return c.backup.CallServerStream(ctx, req)
}

// RestoreFromBackup calls tabletmanagerservice.TabletManager.RestoreFromBackup.
func (c *tabletManagerClient) RestoreFromBackup(ctx context.Context, req *connect_go.Request[tabletmanagerdata.RestoreFromBackupRequest]) (*connect_go.ServerStreamForClient[tabletmanagerdata.RestoreFromBackupResponse], error) {
	return c.restoreFromBackup.CallServerStream(ctx, req)
}

// VExec calls tabletmanagerservice.TabletManager.VExec.
func (c *tabletManagerClient) VExec(ctx context.Context, req *connect_go.Request[tabletmanagerdata.VExecRequest]) (*connect_go.Response[tabletmanagerdata.VExecResponse], error) {
	return c.vExec.CallUnary(ctx, req)
}

// TabletManagerHandler is an implementation of the tabletmanagerservice.TabletManager service.
type TabletManagerHandler interface {
	// Ping returns the input payload
	Ping(context.Context, *connect_go.Request[tabletmanagerdata.PingRequest]) (*connect_go.Response[tabletmanagerdata.PingResponse], error)
	// Sleep sleeps for the provided duration
	Sleep(context.Context, *connect_go.Request[tabletmanagerdata.SleepRequest]) (*connect_go.Response[tabletmanagerdata.SleepResponse], error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteHookRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteHookResponse], error)
	// GetSchema asks the tablet for its schema
	GetSchema(context.Context, *connect_go.Request[tabletmanagerdata.GetSchemaRequest]) (*connect_go.Response[tabletmanagerdata.GetSchemaResponse], error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(context.Context, *connect_go.Request[tabletmanagerdata.GetPermissionsRequest]) (*connect_go.Response[tabletmanagerdata.GetPermissionsResponse], error)
	SetReadOnly(context.Context, *connect_go.Request[tabletmanagerdata.SetReadOnlyRequest]) (*connect_go.Response[tabletmanagerdata.SetReadOnlyResponse], error)
	SetReadWrite(context.Context, *connect_go.Request[tabletmanagerdata.SetReadWriteRequest]) (*connect_go.Response[tabletmanagerdata.SetReadWriteResponse], error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(context.Context, *connect_go.Request[tabletmanagerdata.ChangeTypeRequest]) (*connect_go.Response[tabletmanagerdata.ChangeTypeResponse], error)
	RefreshState(context.Context, *connect_go.Request[tabletmanagerdata.RefreshStateRequest]) (*connect_go.Response[tabletmanagerdata.RefreshStateResponse], error)
	RunHealthCheck(context.Context, *connect_go.Request[tabletmanagerdata.RunHealthCheckRequest]) (*connect_go.Response[tabletmanagerdata.RunHealthCheckResponse], error)
	ReloadSchema(context.Context, *connect_go.Request[tabletmanagerdata.ReloadSchemaRequest]) (*connect_go.Response[tabletmanagerdata.ReloadSchemaResponse], error)
	PreflightSchema(context.Context, *connect_go.Request[tabletmanagerdata.PreflightSchemaRequest]) (*connect_go.Response[tabletmanagerdata.PreflightSchemaResponse], error)
	ApplySchema(context.Context, *connect_go.Request[tabletmanagerdata.ApplySchemaRequest]) (*connect_go.Response[tabletmanagerdata.ApplySchemaResponse], error)
	LockTables(context.Context, *connect_go.Request[tabletmanagerdata.LockTablesRequest]) (*connect_go.Response[tabletmanagerdata.LockTablesResponse], error)
	UnlockTables(context.Context, *connect_go.Request[tabletmanagerdata.UnlockTablesRequest]) (*connect_go.Response[tabletmanagerdata.UnlockTablesResponse], error)
	ExecuteQuery(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteQueryRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteQueryResponse], error)
	ExecuteFetchAsDba(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteFetchAsDbaRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteFetchAsDbaResponse], error)
	ExecuteFetchAsAllPrivs(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteFetchAsAllPrivsRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteFetchAsAllPrivsResponse], error)
	ExecuteFetchAsApp(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteFetchAsAppRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteFetchAsAppResponse], error)
	// ReplicationStatus returns the current replication status.
	ReplicationStatus(context.Context, *connect_go.Request[tabletmanagerdata.ReplicationStatusRequest]) (*connect_go.Response[tabletmanagerdata.ReplicationStatusResponse], error)
	// PrimaryStatus returns the current primary status.
	PrimaryStatus(context.Context, *connect_go.Request[tabletmanagerdata.PrimaryStatusRequest]) (*connect_go.Response[tabletmanagerdata.PrimaryStatusResponse], error)
	// PrimaryPosition returns the current primary position
	PrimaryPosition(context.Context, *connect_go.Request[tabletmanagerdata.PrimaryPositionRequest]) (*connect_go.Response[tabletmanagerdata.PrimaryPositionResponse], error)
	// WaitForPosition waits for the position to be reached
	WaitForPosition(context.Context, *connect_go.Request[tabletmanagerdata.WaitForPositionRequest]) (*connect_go.Response[tabletmanagerdata.WaitForPositionResponse], error)
	// StopReplication makes mysql stop its replication
	StopReplication(context.Context, *connect_go.Request[tabletmanagerdata.StopReplicationRequest]) (*connect_go.Response[tabletmanagerdata.StopReplicationResponse], error)
	// StopReplicationMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopReplicationMinimum(context.Context, *connect_go.Request[tabletmanagerdata.StopReplicationMinimumRequest]) (*connect_go.Response[tabletmanagerdata.StopReplicationMinimumResponse], error)
	// StartReplication starts the mysql replication
	StartReplication(context.Context, *connect_go.Request[tabletmanagerdata.StartReplicationRequest]) (*connect_go.Response[tabletmanagerdata.StartReplicationResponse], error)
	// StartReplicationUnitAfter starts the mysql replication until and including
	// the provided position
	StartReplicationUntilAfter(context.Context, *connect_go.Request[tabletmanagerdata.StartReplicationUntilAfterRequest]) (*connect_go.Response[tabletmanagerdata.StartReplicationUntilAfterResponse], error)
	// GetReplicas asks for the list of mysql replicas
	GetReplicas(context.Context, *connect_go.Request[tabletmanagerdata.GetReplicasRequest]) (*connect_go.Response[tabletmanagerdata.GetReplicasResponse], error)
	// VReplication API
	VReplicationExec(context.Context, *connect_go.Request[tabletmanagerdata.VReplicationExecRequest]) (*connect_go.Response[tabletmanagerdata.VReplicationExecResponse], error)
	VReplicationWaitForPos(context.Context, *connect_go.Request[tabletmanagerdata.VReplicationWaitForPosRequest]) (*connect_go.Response[tabletmanagerdata.VReplicationWaitForPosResponse], error)
	// VDiff API
	VDiff(context.Context, *connect_go.Request[tabletmanagerdata.VDiffRequest]) (*connect_go.Response[tabletmanagerdata.VDiffResponse], error)
	// ResetReplication makes the target not replicating
	ResetReplication(context.Context, *connect_go.Request[tabletmanagerdata.ResetReplicationRequest]) (*connect_go.Response[tabletmanagerdata.ResetReplicationResponse], error)
	// InitPrimary initializes the tablet as a primary
	InitPrimary(context.Context, *connect_go.Request[tabletmanagerdata.InitPrimaryRequest]) (*connect_go.Response[tabletmanagerdata.InitPrimaryResponse], error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(context.Context, *connect_go.Request[tabletmanagerdata.PopulateReparentJournalRequest]) (*connect_go.Response[tabletmanagerdata.PopulateReparentJournalResponse], error)
	// InitReplica tells the tablet to reparent to the primary unconditionally
	InitReplica(context.Context, *connect_go.Request[tabletmanagerdata.InitReplicaRequest]) (*connect_go.Response[tabletmanagerdata.InitReplicaResponse], error)
	// DemotePrimary tells the soon-to-be-former primary it's gonna change
	DemotePrimary(context.Context, *connect_go.Request[tabletmanagerdata.DemotePrimaryRequest]) (*connect_go.Response[tabletmanagerdata.DemotePrimaryResponse], error)
	// UndoDemotePrimary reverts all changes made by DemotePrimary
	UndoDemotePrimary(context.Context, *connect_go.Request[tabletmanagerdata.UndoDemotePrimaryRequest]) (*connect_go.Response[tabletmanagerdata.UndoDemotePrimaryResponse], error)
	// ReplicaWasPromoted tells the remote tablet it is now the primary
	ReplicaWasPromoted(context.Context, *connect_go.Request[tabletmanagerdata.ReplicaWasPromotedRequest]) (*connect_go.Response[tabletmanagerdata.ReplicaWasPromotedResponse], error)
	// ResetReplicationParameters resets the replica replication parameters
	ResetReplicationParameters(context.Context, *connect_go.Request[tabletmanagerdata.ResetReplicationParametersRequest]) (*connect_go.Response[tabletmanagerdata.ResetReplicationParametersResponse], error)
	// FullStatus collects and returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	FullStatus(context.Context, *connect_go.Request[tabletmanagerdata.FullStatusRequest]) (*connect_go.Response[tabletmanagerdata.FullStatusResponse], error)
	// SetReplicationSource tells the replica to reparent
	SetReplicationSource(context.Context, *connect_go.Request[tabletmanagerdata.SetReplicationSourceRequest]) (*connect_go.Response[tabletmanagerdata.SetReplicationSourceResponse], error)
	// ReplicaWasRestarted tells the remote tablet its primary has changed
	ReplicaWasRestarted(context.Context, *connect_go.Request[tabletmanagerdata.ReplicaWasRestartedRequest]) (*connect_go.Response[tabletmanagerdata.ReplicaWasRestartedResponse], error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(context.Context, *connect_go.Request[tabletmanagerdata.StopReplicationAndGetStatusRequest]) (*connect_go.Response[tabletmanagerdata.StopReplicationAndGetStatusResponse], error)
	// PromoteReplica makes the replica the new primary
	PromoteReplica(context.Context, *connect_go.Request[tabletmanagerdata.PromoteReplicaRequest]) (*connect_go.Response[tabletmanagerdata.PromoteReplicaResponse], error)
	Backup(context.Context, *connect_go.Request[tabletmanagerdata.BackupRequest], *connect_go.ServerStream[tabletmanagerdata.BackupResponse]) error
	// RestoreFromBackup deletes all local data and restores it from the latest backup.
	RestoreFromBackup(context.Context, *connect_go.Request[tabletmanagerdata.RestoreFromBackupRequest], *connect_go.ServerStream[tabletmanagerdata.RestoreFromBackupResponse]) error
	// Generic VExec request. Can be used for various purposes
	VExec(context.Context, *connect_go.Request[tabletmanagerdata.VExecRequest]) (*connect_go.Response[tabletmanagerdata.VExecResponse], error)
}

// NewTabletManagerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTabletManagerHandler(svc TabletManagerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/tabletmanagerservice.TabletManager/Ping", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/Ping",
		svc.Ping,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/Sleep", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/Sleep",
		svc.Sleep,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/ExecuteHook", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/ExecuteHook",
		svc.ExecuteHook,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/GetSchema", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/GetSchema",
		svc.GetSchema,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/GetPermissions", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/GetPermissions",
		svc.GetPermissions,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/SetReadOnly", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/SetReadOnly",
		svc.SetReadOnly,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/SetReadWrite", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/SetReadWrite",
		svc.SetReadWrite,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/ChangeType", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/ChangeType",
		svc.ChangeType,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/RefreshState", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/RefreshState",
		svc.RefreshState,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/RunHealthCheck", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/RunHealthCheck",
		svc.RunHealthCheck,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/ReloadSchema", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/ReloadSchema",
		svc.ReloadSchema,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/PreflightSchema", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/PreflightSchema",
		svc.PreflightSchema,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/ApplySchema", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/ApplySchema",
		svc.ApplySchema,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/LockTables", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/LockTables",
		svc.LockTables,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/UnlockTables", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/UnlockTables",
		svc.UnlockTables,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/ExecuteQuery", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/ExecuteQuery",
		svc.ExecuteQuery,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/ExecuteFetchAsDba", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/ExecuteFetchAsDba",
		svc.ExecuteFetchAsDba,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/ExecuteFetchAsAllPrivs", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/ExecuteFetchAsAllPrivs",
		svc.ExecuteFetchAsAllPrivs,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/ExecuteFetchAsApp", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/ExecuteFetchAsApp",
		svc.ExecuteFetchAsApp,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/ReplicationStatus", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/ReplicationStatus",
		svc.ReplicationStatus,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/PrimaryStatus", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/PrimaryStatus",
		svc.PrimaryStatus,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/PrimaryPosition", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/PrimaryPosition",
		svc.PrimaryPosition,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/WaitForPosition", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/WaitForPosition",
		svc.WaitForPosition,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/StopReplication", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/StopReplication",
		svc.StopReplication,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/StopReplicationMinimum", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/StopReplicationMinimum",
		svc.StopReplicationMinimum,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/StartReplication", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/StartReplication",
		svc.StartReplication,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/StartReplicationUntilAfter", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/StartReplicationUntilAfter",
		svc.StartReplicationUntilAfter,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/GetReplicas", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/GetReplicas",
		svc.GetReplicas,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/VReplicationExec", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/VReplicationExec",
		svc.VReplicationExec,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/VReplicationWaitForPos", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/VReplicationWaitForPos",
		svc.VReplicationWaitForPos,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/VDiff", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/VDiff",
		svc.VDiff,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/ResetReplication", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/ResetReplication",
		svc.ResetReplication,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/InitPrimary", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/InitPrimary",
		svc.InitPrimary,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/PopulateReparentJournal", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/PopulateReparentJournal",
		svc.PopulateReparentJournal,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/InitReplica", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/InitReplica",
		svc.InitReplica,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/DemotePrimary", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/DemotePrimary",
		svc.DemotePrimary,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/UndoDemotePrimary", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/UndoDemotePrimary",
		svc.UndoDemotePrimary,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/ReplicaWasPromoted", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/ReplicaWasPromoted",
		svc.ReplicaWasPromoted,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/ResetReplicationParameters", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/ResetReplicationParameters",
		svc.ResetReplicationParameters,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/FullStatus", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/FullStatus",
		svc.FullStatus,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/SetReplicationSource", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/SetReplicationSource",
		svc.SetReplicationSource,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/ReplicaWasRestarted", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/ReplicaWasRestarted",
		svc.ReplicaWasRestarted,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/StopReplicationAndGetStatus", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/StopReplicationAndGetStatus",
		svc.StopReplicationAndGetStatus,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/PromoteReplica", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/PromoteReplica",
		svc.PromoteReplica,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/Backup", connect_go.NewServerStreamHandler(
		"/tabletmanagerservice.TabletManager/Backup",
		svc.Backup,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/RestoreFromBackup", connect_go.NewServerStreamHandler(
		"/tabletmanagerservice.TabletManager/RestoreFromBackup",
		svc.RestoreFromBackup,
		opts...,
	))
	mux.Handle("/tabletmanagerservice.TabletManager/VExec", connect_go.NewUnaryHandler(
		"/tabletmanagerservice.TabletManager/VExec",
		svc.VExec,
		opts...,
	))
	return "/tabletmanagerservice.TabletManager/", mux
}

// UnimplementedTabletManagerHandler returns CodeUnimplemented from all methods.
type UnimplementedTabletManagerHandler struct{}

func (UnimplementedTabletManagerHandler) Ping(context.Context, *connect_go.Request[tabletmanagerdata.PingRequest]) (*connect_go.Response[tabletmanagerdata.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.Ping is not implemented"))
}

func (UnimplementedTabletManagerHandler) Sleep(context.Context, *connect_go.Request[tabletmanagerdata.SleepRequest]) (*connect_go.Response[tabletmanagerdata.SleepResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.Sleep is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteHook(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteHookRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteHookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteHook is not implemented"))
}

func (UnimplementedTabletManagerHandler) GetSchema(context.Context, *connect_go.Request[tabletmanagerdata.GetSchemaRequest]) (*connect_go.Response[tabletmanagerdata.GetSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.GetSchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) GetPermissions(context.Context, *connect_go.Request[tabletmanagerdata.GetPermissionsRequest]) (*connect_go.Response[tabletmanagerdata.GetPermissionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.GetPermissions is not implemented"))
}

func (UnimplementedTabletManagerHandler) SetReadOnly(context.Context, *connect_go.Request[tabletmanagerdata.SetReadOnlyRequest]) (*connect_go.Response[tabletmanagerdata.SetReadOnlyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.SetReadOnly is not implemented"))
}

func (UnimplementedTabletManagerHandler) SetReadWrite(context.Context, *connect_go.Request[tabletmanagerdata.SetReadWriteRequest]) (*connect_go.Response[tabletmanagerdata.SetReadWriteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.SetReadWrite is not implemented"))
}

func (UnimplementedTabletManagerHandler) ChangeType(context.Context, *connect_go.Request[tabletmanagerdata.ChangeTypeRequest]) (*connect_go.Response[tabletmanagerdata.ChangeTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ChangeType is not implemented"))
}

func (UnimplementedTabletManagerHandler) RefreshState(context.Context, *connect_go.Request[tabletmanagerdata.RefreshStateRequest]) (*connect_go.Response[tabletmanagerdata.RefreshStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.RefreshState is not implemented"))
}

func (UnimplementedTabletManagerHandler) RunHealthCheck(context.Context, *connect_go.Request[tabletmanagerdata.RunHealthCheckRequest]) (*connect_go.Response[tabletmanagerdata.RunHealthCheckResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.RunHealthCheck is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReloadSchema(context.Context, *connect_go.Request[tabletmanagerdata.ReloadSchemaRequest]) (*connect_go.Response[tabletmanagerdata.ReloadSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ReloadSchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) PreflightSchema(context.Context, *connect_go.Request[tabletmanagerdata.PreflightSchemaRequest]) (*connect_go.Response[tabletmanagerdata.PreflightSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PreflightSchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) ApplySchema(context.Context, *connect_go.Request[tabletmanagerdata.ApplySchemaRequest]) (*connect_go.Response[tabletmanagerdata.ApplySchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ApplySchema is not implemented"))
}

func (UnimplementedTabletManagerHandler) LockTables(context.Context, *connect_go.Request[tabletmanagerdata.LockTablesRequest]) (*connect_go.Response[tabletmanagerdata.LockTablesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.LockTables is not implemented"))
}

func (UnimplementedTabletManagerHandler) UnlockTables(context.Context, *connect_go.Request[tabletmanagerdata.UnlockTablesRequest]) (*connect_go.Response[tabletmanagerdata.UnlockTablesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.UnlockTables is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteQuery(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteQueryRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteQueryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteQuery is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteFetchAsDba(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteFetchAsDbaRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteFetchAsDbaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteFetchAsDba is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteFetchAsAllPrivs(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteFetchAsAllPrivsRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteFetchAsAllPrivsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteFetchAsAllPrivs is not implemented"))
}

func (UnimplementedTabletManagerHandler) ExecuteFetchAsApp(context.Context, *connect_go.Request[tabletmanagerdata.ExecuteFetchAsAppRequest]) (*connect_go.Response[tabletmanagerdata.ExecuteFetchAsAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ExecuteFetchAsApp is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReplicationStatus(context.Context, *connect_go.Request[tabletmanagerdata.ReplicationStatusRequest]) (*connect_go.Response[tabletmanagerdata.ReplicationStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ReplicationStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) PrimaryStatus(context.Context, *connect_go.Request[tabletmanagerdata.PrimaryStatusRequest]) (*connect_go.Response[tabletmanagerdata.PrimaryStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PrimaryStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) PrimaryPosition(context.Context, *connect_go.Request[tabletmanagerdata.PrimaryPositionRequest]) (*connect_go.Response[tabletmanagerdata.PrimaryPositionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PrimaryPosition is not implemented"))
}

func (UnimplementedTabletManagerHandler) WaitForPosition(context.Context, *connect_go.Request[tabletmanagerdata.WaitForPositionRequest]) (*connect_go.Response[tabletmanagerdata.WaitForPositionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.WaitForPosition is not implemented"))
}

func (UnimplementedTabletManagerHandler) StopReplication(context.Context, *connect_go.Request[tabletmanagerdata.StopReplicationRequest]) (*connect_go.Response[tabletmanagerdata.StopReplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StopReplication is not implemented"))
}

func (UnimplementedTabletManagerHandler) StopReplicationMinimum(context.Context, *connect_go.Request[tabletmanagerdata.StopReplicationMinimumRequest]) (*connect_go.Response[tabletmanagerdata.StopReplicationMinimumResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StopReplicationMinimum is not implemented"))
}

func (UnimplementedTabletManagerHandler) StartReplication(context.Context, *connect_go.Request[tabletmanagerdata.StartReplicationRequest]) (*connect_go.Response[tabletmanagerdata.StartReplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StartReplication is not implemented"))
}

func (UnimplementedTabletManagerHandler) StartReplicationUntilAfter(context.Context, *connect_go.Request[tabletmanagerdata.StartReplicationUntilAfterRequest]) (*connect_go.Response[tabletmanagerdata.StartReplicationUntilAfterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StartReplicationUntilAfter is not implemented"))
}

func (UnimplementedTabletManagerHandler) GetReplicas(context.Context, *connect_go.Request[tabletmanagerdata.GetReplicasRequest]) (*connect_go.Response[tabletmanagerdata.GetReplicasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.GetReplicas is not implemented"))
}

func (UnimplementedTabletManagerHandler) VReplicationExec(context.Context, *connect_go.Request[tabletmanagerdata.VReplicationExecRequest]) (*connect_go.Response[tabletmanagerdata.VReplicationExecResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.VReplicationExec is not implemented"))
}

func (UnimplementedTabletManagerHandler) VReplicationWaitForPos(context.Context, *connect_go.Request[tabletmanagerdata.VReplicationWaitForPosRequest]) (*connect_go.Response[tabletmanagerdata.VReplicationWaitForPosResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.VReplicationWaitForPos is not implemented"))
}

func (UnimplementedTabletManagerHandler) VDiff(context.Context, *connect_go.Request[tabletmanagerdata.VDiffRequest]) (*connect_go.Response[tabletmanagerdata.VDiffResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.VDiff is not implemented"))
}

func (UnimplementedTabletManagerHandler) ResetReplication(context.Context, *connect_go.Request[tabletmanagerdata.ResetReplicationRequest]) (*connect_go.Response[tabletmanagerdata.ResetReplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ResetReplication is not implemented"))
}

func (UnimplementedTabletManagerHandler) InitPrimary(context.Context, *connect_go.Request[tabletmanagerdata.InitPrimaryRequest]) (*connect_go.Response[tabletmanagerdata.InitPrimaryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.InitPrimary is not implemented"))
}

func (UnimplementedTabletManagerHandler) PopulateReparentJournal(context.Context, *connect_go.Request[tabletmanagerdata.PopulateReparentJournalRequest]) (*connect_go.Response[tabletmanagerdata.PopulateReparentJournalResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PopulateReparentJournal is not implemented"))
}

func (UnimplementedTabletManagerHandler) InitReplica(context.Context, *connect_go.Request[tabletmanagerdata.InitReplicaRequest]) (*connect_go.Response[tabletmanagerdata.InitReplicaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.InitReplica is not implemented"))
}

func (UnimplementedTabletManagerHandler) DemotePrimary(context.Context, *connect_go.Request[tabletmanagerdata.DemotePrimaryRequest]) (*connect_go.Response[tabletmanagerdata.DemotePrimaryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.DemotePrimary is not implemented"))
}

func (UnimplementedTabletManagerHandler) UndoDemotePrimary(context.Context, *connect_go.Request[tabletmanagerdata.UndoDemotePrimaryRequest]) (*connect_go.Response[tabletmanagerdata.UndoDemotePrimaryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.UndoDemotePrimary is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReplicaWasPromoted(context.Context, *connect_go.Request[tabletmanagerdata.ReplicaWasPromotedRequest]) (*connect_go.Response[tabletmanagerdata.ReplicaWasPromotedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ReplicaWasPromoted is not implemented"))
}

func (UnimplementedTabletManagerHandler) ResetReplicationParameters(context.Context, *connect_go.Request[tabletmanagerdata.ResetReplicationParametersRequest]) (*connect_go.Response[tabletmanagerdata.ResetReplicationParametersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ResetReplicationParameters is not implemented"))
}

func (UnimplementedTabletManagerHandler) FullStatus(context.Context, *connect_go.Request[tabletmanagerdata.FullStatusRequest]) (*connect_go.Response[tabletmanagerdata.FullStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.FullStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) SetReplicationSource(context.Context, *connect_go.Request[tabletmanagerdata.SetReplicationSourceRequest]) (*connect_go.Response[tabletmanagerdata.SetReplicationSourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.SetReplicationSource is not implemented"))
}

func (UnimplementedTabletManagerHandler) ReplicaWasRestarted(context.Context, *connect_go.Request[tabletmanagerdata.ReplicaWasRestartedRequest]) (*connect_go.Response[tabletmanagerdata.ReplicaWasRestartedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.ReplicaWasRestarted is not implemented"))
}

func (UnimplementedTabletManagerHandler) StopReplicationAndGetStatus(context.Context, *connect_go.Request[tabletmanagerdata.StopReplicationAndGetStatusRequest]) (*connect_go.Response[tabletmanagerdata.StopReplicationAndGetStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.StopReplicationAndGetStatus is not implemented"))
}

func (UnimplementedTabletManagerHandler) PromoteReplica(context.Context, *connect_go.Request[tabletmanagerdata.PromoteReplicaRequest]) (*connect_go.Response[tabletmanagerdata.PromoteReplicaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.PromoteReplica is not implemented"))
}

func (UnimplementedTabletManagerHandler) Backup(context.Context, *connect_go.Request[tabletmanagerdata.BackupRequest], *connect_go.ServerStream[tabletmanagerdata.BackupResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.Backup is not implemented"))
}

func (UnimplementedTabletManagerHandler) RestoreFromBackup(context.Context, *connect_go.Request[tabletmanagerdata.RestoreFromBackupRequest], *connect_go.ServerStream[tabletmanagerdata.RestoreFromBackupResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.RestoreFromBackup is not implemented"))
}

func (UnimplementedTabletManagerHandler) VExec(context.Context, *connect_go.Request[tabletmanagerdata.VExecRequest]) (*connect_go.Response[tabletmanagerdata.VExecResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tabletmanagerservice.TabletManager.VExec is not implemented"))
}
