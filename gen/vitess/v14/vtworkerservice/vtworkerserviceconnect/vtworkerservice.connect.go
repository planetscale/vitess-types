// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vtworkerservice/vtworkerservice.proto

package vtworkerserviceconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	vtworkerdata "github.com/planetscale/vitess-types/gen/vitess/v14/vtworkerdata"
	_ "github.com/planetscale/vitess-types/gen/vitess/v14/vtworkerservice"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// VtworkerName is the fully-qualified name of the Vtworker service.
	VtworkerName = "vtworkerservice.Vtworker"
)

// VtworkerClient is a client for the vtworkerservice.Vtworker service.
type VtworkerClient interface {
	// ExecuteVtworkerCommand allows to run a vtworker command by specifying the
	// same arguments as on the command line.
	ExecuteVtworkerCommand(context.Context, *connect_go.Request[vtworkerdata.ExecuteVtworkerCommandRequest]) (*connect_go.ServerStreamForClient[vtworkerdata.ExecuteVtworkerCommandResponse], error)
}

// NewVtworkerClient constructs a client for the vtworkerservice.Vtworker service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVtworkerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VtworkerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vtworkerClient{
		executeVtworkerCommand: connect_go.NewClient[vtworkerdata.ExecuteVtworkerCommandRequest, vtworkerdata.ExecuteVtworkerCommandResponse](
			httpClient,
			baseURL+"/vtworkerservice.Vtworker/ExecuteVtworkerCommand",
			opts...,
		),
	}
}

// vtworkerClient implements VtworkerClient.
type vtworkerClient struct {
	executeVtworkerCommand *connect_go.Client[vtworkerdata.ExecuteVtworkerCommandRequest, vtworkerdata.ExecuteVtworkerCommandResponse]
}

// ExecuteVtworkerCommand calls vtworkerservice.Vtworker.ExecuteVtworkerCommand.
func (c *vtworkerClient) ExecuteVtworkerCommand(ctx context.Context, req *connect_go.Request[vtworkerdata.ExecuteVtworkerCommandRequest]) (*connect_go.ServerStreamForClient[vtworkerdata.ExecuteVtworkerCommandResponse], error) {
	return c.executeVtworkerCommand.CallServerStream(ctx, req)
}

// VtworkerHandler is an implementation of the vtworkerservice.Vtworker service.
type VtworkerHandler interface {
	// ExecuteVtworkerCommand allows to run a vtworker command by specifying the
	// same arguments as on the command line.
	ExecuteVtworkerCommand(context.Context, *connect_go.Request[vtworkerdata.ExecuteVtworkerCommandRequest], *connect_go.ServerStream[vtworkerdata.ExecuteVtworkerCommandResponse]) error
}

// NewVtworkerHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVtworkerHandler(svc VtworkerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/vtworkerservice.Vtworker/ExecuteVtworkerCommand", connect_go.NewServerStreamHandler(
		"/vtworkerservice.Vtworker/ExecuteVtworkerCommand",
		svc.ExecuteVtworkerCommand,
		opts...,
	))
	return "/vtworkerservice.Vtworker/", mux
}

// UnimplementedVtworkerHandler returns CodeUnimplemented from all methods.
type UnimplementedVtworkerHandler struct{}

func (UnimplementedVtworkerHandler) ExecuteVtworkerCommand(context.Context, *connect_go.Request[vtworkerdata.ExecuteVtworkerCommandRequest], *connect_go.ServerStream[vtworkerdata.ExecuteVtworkerCommandResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtworkerservice.Vtworker.ExecuteVtworkerCommand is not implemented"))
}
