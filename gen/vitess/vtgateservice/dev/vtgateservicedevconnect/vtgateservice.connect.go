//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
// Service definition for vtgateservice.
// This is the main entry point to Vitess.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vitess/vtgateservice/dev/vtgateservice.proto

// option java_package="io.vitess.proto.grpc";

package vtgateservicedevconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	dev "github.com/planetscale/vitess-types/gen/vitess/vtgate/dev"
	dev1 "github.com/planetscale/vitess-types/gen/vitess/vtgateservice/dev"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VitessName is the fully-qualified name of the Vitess service.
	VitessName = "vitess.vtgateservice.dev.Vitess"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VitessExecuteProcedure is the fully-qualified name of the Vitess's Execute RPC.
	VitessExecuteProcedure = "/vitess.vtgateservice.dev.Vitess/Execute"
	// VitessExecuteMultiProcedure is the fully-qualified name of the Vitess's ExecuteMulti RPC.
	VitessExecuteMultiProcedure = "/vitess.vtgateservice.dev.Vitess/ExecuteMulti"
	// VitessExecuteBatchProcedure is the fully-qualified name of the Vitess's ExecuteBatch RPC.
	VitessExecuteBatchProcedure = "/vitess.vtgateservice.dev.Vitess/ExecuteBatch"
	// VitessStreamExecuteProcedure is the fully-qualified name of the Vitess's StreamExecute RPC.
	VitessStreamExecuteProcedure = "/vitess.vtgateservice.dev.Vitess/StreamExecute"
	// VitessStreamExecuteMultiProcedure is the fully-qualified name of the Vitess's StreamExecuteMulti
	// RPC.
	VitessStreamExecuteMultiProcedure = "/vitess.vtgateservice.dev.Vitess/StreamExecuteMulti"
	// VitessVStreamProcedure is the fully-qualified name of the Vitess's VStream RPC.
	VitessVStreamProcedure = "/vitess.vtgateservice.dev.Vitess/VStream"
	// VitessPrepareProcedure is the fully-qualified name of the Vitess's Prepare RPC.
	VitessPrepareProcedure = "/vitess.vtgateservice.dev.Vitess/Prepare"
	// VitessCloseSessionProcedure is the fully-qualified name of the Vitess's CloseSession RPC.
	VitessCloseSessionProcedure = "/vitess.vtgateservice.dev.Vitess/CloseSession"
)

// VitessClient is a client for the vitess.vtgateservice.dev.Vitess service.
type VitessClient interface {
	// Execute tries to route the query to the right shard.
	// It depends on the query and bind variables to provide enough
	// information in conjunction with the vindexes to route the query.
	// API group: v3
	Execute(context.Context, *connect.Request[dev.ExecuteRequest]) (*connect.Response[dev.ExecuteResponse], error)
	// ExecuteMulti executes multiple queries on the right shards.
	ExecuteMulti(context.Context, *connect.Request[dev.ExecuteMultiRequest]) (*connect.Response[dev.ExecuteMultiResponse], error)
	// ExecuteBatch tries to route the list of queries on the right shards.
	// It depends on the query and bind variables to provide enough
	// information in conjunction with the vindexes to route the query.
	// API group: v3
	ExecuteBatch(context.Context, *connect.Request[dev.ExecuteBatchRequest]) (*connect.Response[dev.ExecuteBatchResponse], error)
	// StreamExecute executes a streaming query based on shards.
	// It depends on the query and bind variables to provide enough
	// information in conjunction with the vindexes to route the query.
	// Use this method if the query returns a large number of rows.
	// API group: v3
	StreamExecute(context.Context, *connect.Request[dev.StreamExecuteRequest]) (*connect.ServerStreamForClient[dev.StreamExecuteResponse], error)
	// StreamExecuteMulti executes multiple streaming queries.
	StreamExecuteMulti(context.Context, *connect.Request[dev.StreamExecuteMultiRequest]) (*connect.ServerStreamForClient[dev.StreamExecuteMultiResponse], error)
	// VStream streams binlog events from the requested sources.
	VStream(context.Context, *connect.Request[dev.VStreamRequest]) (*connect.ServerStreamForClient[dev.VStreamResponse], error)
	// Prepare is used by the MySQL server plugin as part of supporting prepared statements.
	Prepare(context.Context, *connect.Request[dev.PrepareRequest]) (*connect.Response[dev.PrepareResponse], error)
	// CloseSession closes the session, rolling back any implicit transactions.
	// This has the same effect as if a "rollback" statement was executed,
	// but does not affect the query statistics.
	CloseSession(context.Context, *connect.Request[dev.CloseSessionRequest]) (*connect.Response[dev.CloseSessionResponse], error)
}

// NewVitessClient constructs a client for the vitess.vtgateservice.dev.Vitess service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVitessClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VitessClient {
	baseURL = strings.TrimRight(baseURL, "/")
	vitessMethods := dev1.File_vitess_vtgateservice_dev_vtgateservice_proto.Services().ByName("Vitess").Methods()
	return &vitessClient{
		execute: connect.NewClient[dev.ExecuteRequest, dev.ExecuteResponse](
			httpClient,
			baseURL+VitessExecuteProcedure,
			connect.WithSchema(vitessMethods.ByName("Execute")),
			connect.WithClientOptions(opts...),
		),
		executeMulti: connect.NewClient[dev.ExecuteMultiRequest, dev.ExecuteMultiResponse](
			httpClient,
			baseURL+VitessExecuteMultiProcedure,
			connect.WithSchema(vitessMethods.ByName("ExecuteMulti")),
			connect.WithClientOptions(opts...),
		),
		executeBatch: connect.NewClient[dev.ExecuteBatchRequest, dev.ExecuteBatchResponse](
			httpClient,
			baseURL+VitessExecuteBatchProcedure,
			connect.WithSchema(vitessMethods.ByName("ExecuteBatch")),
			connect.WithClientOptions(opts...),
		),
		streamExecute: connect.NewClient[dev.StreamExecuteRequest, dev.StreamExecuteResponse](
			httpClient,
			baseURL+VitessStreamExecuteProcedure,
			connect.WithSchema(vitessMethods.ByName("StreamExecute")),
			connect.WithClientOptions(opts...),
		),
		streamExecuteMulti: connect.NewClient[dev.StreamExecuteMultiRequest, dev.StreamExecuteMultiResponse](
			httpClient,
			baseURL+VitessStreamExecuteMultiProcedure,
			connect.WithSchema(vitessMethods.ByName("StreamExecuteMulti")),
			connect.WithClientOptions(opts...),
		),
		vStream: connect.NewClient[dev.VStreamRequest, dev.VStreamResponse](
			httpClient,
			baseURL+VitessVStreamProcedure,
			connect.WithSchema(vitessMethods.ByName("VStream")),
			connect.WithClientOptions(opts...),
		),
		prepare: connect.NewClient[dev.PrepareRequest, dev.PrepareResponse](
			httpClient,
			baseURL+VitessPrepareProcedure,
			connect.WithSchema(vitessMethods.ByName("Prepare")),
			connect.WithClientOptions(opts...),
		),
		closeSession: connect.NewClient[dev.CloseSessionRequest, dev.CloseSessionResponse](
			httpClient,
			baseURL+VitessCloseSessionProcedure,
			connect.WithSchema(vitessMethods.ByName("CloseSession")),
			connect.WithClientOptions(opts...),
		),
	}
}

// vitessClient implements VitessClient.
type vitessClient struct {
	execute            *connect.Client[dev.ExecuteRequest, dev.ExecuteResponse]
	executeMulti       *connect.Client[dev.ExecuteMultiRequest, dev.ExecuteMultiResponse]
	executeBatch       *connect.Client[dev.ExecuteBatchRequest, dev.ExecuteBatchResponse]
	streamExecute      *connect.Client[dev.StreamExecuteRequest, dev.StreamExecuteResponse]
	streamExecuteMulti *connect.Client[dev.StreamExecuteMultiRequest, dev.StreamExecuteMultiResponse]
	vStream            *connect.Client[dev.VStreamRequest, dev.VStreamResponse]
	prepare            *connect.Client[dev.PrepareRequest, dev.PrepareResponse]
	closeSession       *connect.Client[dev.CloseSessionRequest, dev.CloseSessionResponse]
}

// Execute calls vitess.vtgateservice.dev.Vitess.Execute.
func (c *vitessClient) Execute(ctx context.Context, req *connect.Request[dev.ExecuteRequest]) (*connect.Response[dev.ExecuteResponse], error) {
	return c.execute.CallUnary(ctx, req)
}

// ExecuteMulti calls vitess.vtgateservice.dev.Vitess.ExecuteMulti.
func (c *vitessClient) ExecuteMulti(ctx context.Context, req *connect.Request[dev.ExecuteMultiRequest]) (*connect.Response[dev.ExecuteMultiResponse], error) {
	return c.executeMulti.CallUnary(ctx, req)
}

// ExecuteBatch calls vitess.vtgateservice.dev.Vitess.ExecuteBatch.
func (c *vitessClient) ExecuteBatch(ctx context.Context, req *connect.Request[dev.ExecuteBatchRequest]) (*connect.Response[dev.ExecuteBatchResponse], error) {
	return c.executeBatch.CallUnary(ctx, req)
}

// StreamExecute calls vitess.vtgateservice.dev.Vitess.StreamExecute.
func (c *vitessClient) StreamExecute(ctx context.Context, req *connect.Request[dev.StreamExecuteRequest]) (*connect.ServerStreamForClient[dev.StreamExecuteResponse], error) {
	return c.streamExecute.CallServerStream(ctx, req)
}

// StreamExecuteMulti calls vitess.vtgateservice.dev.Vitess.StreamExecuteMulti.
func (c *vitessClient) StreamExecuteMulti(ctx context.Context, req *connect.Request[dev.StreamExecuteMultiRequest]) (*connect.ServerStreamForClient[dev.StreamExecuteMultiResponse], error) {
	return c.streamExecuteMulti.CallServerStream(ctx, req)
}

// VStream calls vitess.vtgateservice.dev.Vitess.VStream.
func (c *vitessClient) VStream(ctx context.Context, req *connect.Request[dev.VStreamRequest]) (*connect.ServerStreamForClient[dev.VStreamResponse], error) {
	return c.vStream.CallServerStream(ctx, req)
}

// Prepare calls vitess.vtgateservice.dev.Vitess.Prepare.
func (c *vitessClient) Prepare(ctx context.Context, req *connect.Request[dev.PrepareRequest]) (*connect.Response[dev.PrepareResponse], error) {
	return c.prepare.CallUnary(ctx, req)
}

// CloseSession calls vitess.vtgateservice.dev.Vitess.CloseSession.
func (c *vitessClient) CloseSession(ctx context.Context, req *connect.Request[dev.CloseSessionRequest]) (*connect.Response[dev.CloseSessionResponse], error) {
	return c.closeSession.CallUnary(ctx, req)
}

// VitessHandler is an implementation of the vitess.vtgateservice.dev.Vitess service.
type VitessHandler interface {
	// Execute tries to route the query to the right shard.
	// It depends on the query and bind variables to provide enough
	// information in conjunction with the vindexes to route the query.
	// API group: v3
	Execute(context.Context, *connect.Request[dev.ExecuteRequest]) (*connect.Response[dev.ExecuteResponse], error)
	// ExecuteMulti executes multiple queries on the right shards.
	ExecuteMulti(context.Context, *connect.Request[dev.ExecuteMultiRequest]) (*connect.Response[dev.ExecuteMultiResponse], error)
	// ExecuteBatch tries to route the list of queries on the right shards.
	// It depends on the query and bind variables to provide enough
	// information in conjunction with the vindexes to route the query.
	// API group: v3
	ExecuteBatch(context.Context, *connect.Request[dev.ExecuteBatchRequest]) (*connect.Response[dev.ExecuteBatchResponse], error)
	// StreamExecute executes a streaming query based on shards.
	// It depends on the query and bind variables to provide enough
	// information in conjunction with the vindexes to route the query.
	// Use this method if the query returns a large number of rows.
	// API group: v3
	StreamExecute(context.Context, *connect.Request[dev.StreamExecuteRequest], *connect.ServerStream[dev.StreamExecuteResponse]) error
	// StreamExecuteMulti executes multiple streaming queries.
	StreamExecuteMulti(context.Context, *connect.Request[dev.StreamExecuteMultiRequest], *connect.ServerStream[dev.StreamExecuteMultiResponse]) error
	// VStream streams binlog events from the requested sources.
	VStream(context.Context, *connect.Request[dev.VStreamRequest], *connect.ServerStream[dev.VStreamResponse]) error
	// Prepare is used by the MySQL server plugin as part of supporting prepared statements.
	Prepare(context.Context, *connect.Request[dev.PrepareRequest]) (*connect.Response[dev.PrepareResponse], error)
	// CloseSession closes the session, rolling back any implicit transactions.
	// This has the same effect as if a "rollback" statement was executed,
	// but does not affect the query statistics.
	CloseSession(context.Context, *connect.Request[dev.CloseSessionRequest]) (*connect.Response[dev.CloseSessionResponse], error)
}

// NewVitessHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVitessHandler(svc VitessHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vitessMethods := dev1.File_vitess_vtgateservice_dev_vtgateservice_proto.Services().ByName("Vitess").Methods()
	vitessExecuteHandler := connect.NewUnaryHandler(
		VitessExecuteProcedure,
		svc.Execute,
		connect.WithSchema(vitessMethods.ByName("Execute")),
		connect.WithHandlerOptions(opts...),
	)
	vitessExecuteMultiHandler := connect.NewUnaryHandler(
		VitessExecuteMultiProcedure,
		svc.ExecuteMulti,
		connect.WithSchema(vitessMethods.ByName("ExecuteMulti")),
		connect.WithHandlerOptions(opts...),
	)
	vitessExecuteBatchHandler := connect.NewUnaryHandler(
		VitessExecuteBatchProcedure,
		svc.ExecuteBatch,
		connect.WithSchema(vitessMethods.ByName("ExecuteBatch")),
		connect.WithHandlerOptions(opts...),
	)
	vitessStreamExecuteHandler := connect.NewServerStreamHandler(
		VitessStreamExecuteProcedure,
		svc.StreamExecute,
		connect.WithSchema(vitessMethods.ByName("StreamExecute")),
		connect.WithHandlerOptions(opts...),
	)
	vitessStreamExecuteMultiHandler := connect.NewServerStreamHandler(
		VitessStreamExecuteMultiProcedure,
		svc.StreamExecuteMulti,
		connect.WithSchema(vitessMethods.ByName("StreamExecuteMulti")),
		connect.WithHandlerOptions(opts...),
	)
	vitessVStreamHandler := connect.NewServerStreamHandler(
		VitessVStreamProcedure,
		svc.VStream,
		connect.WithSchema(vitessMethods.ByName("VStream")),
		connect.WithHandlerOptions(opts...),
	)
	vitessPrepareHandler := connect.NewUnaryHandler(
		VitessPrepareProcedure,
		svc.Prepare,
		connect.WithSchema(vitessMethods.ByName("Prepare")),
		connect.WithHandlerOptions(opts...),
	)
	vitessCloseSessionHandler := connect.NewUnaryHandler(
		VitessCloseSessionProcedure,
		svc.CloseSession,
		connect.WithSchema(vitessMethods.ByName("CloseSession")),
		connect.WithHandlerOptions(opts...),
	)
	return "/vitess.vtgateservice.dev.Vitess/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VitessExecuteProcedure:
			vitessExecuteHandler.ServeHTTP(w, r)
		case VitessExecuteMultiProcedure:
			vitessExecuteMultiHandler.ServeHTTP(w, r)
		case VitessExecuteBatchProcedure:
			vitessExecuteBatchHandler.ServeHTTP(w, r)
		case VitessStreamExecuteProcedure:
			vitessStreamExecuteHandler.ServeHTTP(w, r)
		case VitessStreamExecuteMultiProcedure:
			vitessStreamExecuteMultiHandler.ServeHTTP(w, r)
		case VitessVStreamProcedure:
			vitessVStreamHandler.ServeHTTP(w, r)
		case VitessPrepareProcedure:
			vitessPrepareHandler.ServeHTTP(w, r)
		case VitessCloseSessionProcedure:
			vitessCloseSessionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVitessHandler returns CodeUnimplemented from all methods.
type UnimplementedVitessHandler struct{}

func (UnimplementedVitessHandler) Execute(context.Context, *connect.Request[dev.ExecuteRequest]) (*connect.Response[dev.ExecuteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtgateservice.dev.Vitess.Execute is not implemented"))
}

func (UnimplementedVitessHandler) ExecuteMulti(context.Context, *connect.Request[dev.ExecuteMultiRequest]) (*connect.Response[dev.ExecuteMultiResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtgateservice.dev.Vitess.ExecuteMulti is not implemented"))
}

func (UnimplementedVitessHandler) ExecuteBatch(context.Context, *connect.Request[dev.ExecuteBatchRequest]) (*connect.Response[dev.ExecuteBatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtgateservice.dev.Vitess.ExecuteBatch is not implemented"))
}

func (UnimplementedVitessHandler) StreamExecute(context.Context, *connect.Request[dev.StreamExecuteRequest], *connect.ServerStream[dev.StreamExecuteResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtgateservice.dev.Vitess.StreamExecute is not implemented"))
}

func (UnimplementedVitessHandler) StreamExecuteMulti(context.Context, *connect.Request[dev.StreamExecuteMultiRequest], *connect.ServerStream[dev.StreamExecuteMultiResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtgateservice.dev.Vitess.StreamExecuteMulti is not implemented"))
}

func (UnimplementedVitessHandler) VStream(context.Context, *connect.Request[dev.VStreamRequest], *connect.ServerStream[dev.VStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtgateservice.dev.Vitess.VStream is not implemented"))
}

func (UnimplementedVitessHandler) Prepare(context.Context, *connect.Request[dev.PrepareRequest]) (*connect.Response[dev.PrepareResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtgateservice.dev.Vitess.Prepare is not implemented"))
}

func (UnimplementedVitessHandler) CloseSession(context.Context, *connect.Request[dev.CloseSessionRequest]) (*connect.Response[dev.CloseSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.vtgateservice.dev.Vitess.CloseSession is not implemented"))
}
