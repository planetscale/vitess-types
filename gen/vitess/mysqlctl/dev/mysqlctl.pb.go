//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains the service definition for making management API
// calls to mysqlctld.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: vitess/mysqlctl/dev/mysqlctl.proto

package mysqlctldev

import (
	dev1 "github.com/planetscale/vitess-types/gen/vitess/topodata/dev"
	dev2 "github.com/planetscale/vitess-types/gen/vitess/vtrpc/dev"
	dev "github.com/planetscale/vitess-types/gen/vitess/vttime/dev"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status is an enum representing the possible status of a backup.
type BackupInfo_Status int32

const (
	BackupInfo_UNKNOWN    BackupInfo_Status = 0
	BackupInfo_INCOMPLETE BackupInfo_Status = 1
	BackupInfo_COMPLETE   BackupInfo_Status = 2
	// A backup status of INVALID should be set if the backup is complete
	// but unusable in some way (partial upload, corrupt file, etc).
	BackupInfo_INVALID BackupInfo_Status = 3
	// A backup status of VALID should be set if the backup is both
	// complete and usuable.
	BackupInfo_VALID BackupInfo_Status = 4
)

// Enum value maps for BackupInfo_Status.
var (
	BackupInfo_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "INCOMPLETE",
		2: "COMPLETE",
		3: "INVALID",
		4: "VALID",
	}
	BackupInfo_Status_value = map[string]int32{
		"UNKNOWN":    0,
		"INCOMPLETE": 1,
		"COMPLETE":   2,
		"INVALID":    3,
		"VALID":      4,
	}
)

func (x BackupInfo_Status) Enum() *BackupInfo_Status {
	p := new(BackupInfo_Status)
	*p = x
	return p
}

func (x BackupInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_enumTypes[0].Descriptor()
}

func (BackupInfo_Status) Type() protoreflect.EnumType {
	return &file_vitess_mysqlctl_dev_mysqlctl_proto_enumTypes[0]
}

func (x BackupInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupInfo_Status.Descriptor instead.
func (BackupInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{18, 0}
}

type StartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MysqldArgs []string `protobuf:"bytes,1,rep,name=mysqld_args,json=mysqldArgs,proto3" json:"mysqld_args,omitempty"`
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{0}
}

func (x *StartRequest) GetMysqldArgs() []string {
	if x != nil {
		return x.MysqldArgs
	}
	return nil
}

type StartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartResponse) Reset() {
	*x = StartResponse{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartResponse) ProtoMessage() {}

func (x *StartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartResponse.ProtoReflect.Descriptor instead.
func (*StartResponse) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{1}
}

type ShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitForMysqld        bool          `protobuf:"varint,1,opt,name=wait_for_mysqld,json=waitForMysqld,proto3" json:"wait_for_mysqld,omitempty"`
	MysqlShutdownTimeout *dev.Duration `protobuf:"bytes,2,opt,name=mysql_shutdown_timeout,json=mysqlShutdownTimeout,proto3" json:"mysql_shutdown_timeout,omitempty"`
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{2}
}

func (x *ShutdownRequest) GetWaitForMysqld() bool {
	if x != nil {
		return x.WaitForMysqld
	}
	return false
}

func (x *ShutdownRequest) GetMysqlShutdownTimeout() *dev.Duration {
	if x != nil {
		return x.MysqlShutdownTimeout
	}
	return nil
}

type ShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{3}
}

type RunMysqlUpgradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunMysqlUpgradeRequest) Reset() {
	*x = RunMysqlUpgradeRequest{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunMysqlUpgradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMysqlUpgradeRequest) ProtoMessage() {}

func (x *RunMysqlUpgradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMysqlUpgradeRequest.ProtoReflect.Descriptor instead.
func (*RunMysqlUpgradeRequest) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{4}
}

type RunMysqlUpgradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunMysqlUpgradeResponse) Reset() {
	*x = RunMysqlUpgradeResponse{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunMysqlUpgradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMysqlUpgradeResponse) ProtoMessage() {}

func (x *RunMysqlUpgradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMysqlUpgradeResponse.ProtoReflect.Descriptor instead.
func (*RunMysqlUpgradeResponse) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{5}
}

type ApplyBinlogFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinlogFileName        string    `protobuf:"bytes,1,opt,name=binlog_file_name,json=binlogFileName,proto3" json:"binlog_file_name,omitempty"`
	BinlogRestorePosition string    `protobuf:"bytes,2,opt,name=binlog_restore_position,json=binlogRestorePosition,proto3" json:"binlog_restore_position,omitempty"`
	BinlogRestoreDatetime *dev.Time `protobuf:"bytes,3,opt,name=binlog_restore_datetime,json=binlogRestoreDatetime,proto3" json:"binlog_restore_datetime,omitempty"`
}

func (x *ApplyBinlogFileRequest) Reset() {
	*x = ApplyBinlogFileRequest{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyBinlogFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyBinlogFileRequest) ProtoMessage() {}

func (x *ApplyBinlogFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyBinlogFileRequest.ProtoReflect.Descriptor instead.
func (*ApplyBinlogFileRequest) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{6}
}

func (x *ApplyBinlogFileRequest) GetBinlogFileName() string {
	if x != nil {
		return x.BinlogFileName
	}
	return ""
}

func (x *ApplyBinlogFileRequest) GetBinlogRestorePosition() string {
	if x != nil {
		return x.BinlogRestorePosition
	}
	return ""
}

func (x *ApplyBinlogFileRequest) GetBinlogRestoreDatetime() *dev.Time {
	if x != nil {
		return x.BinlogRestoreDatetime
	}
	return nil
}

type ApplyBinlogFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApplyBinlogFileResponse) Reset() {
	*x = ApplyBinlogFileResponse{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyBinlogFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyBinlogFileResponse) ProtoMessage() {}

func (x *ApplyBinlogFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyBinlogFileResponse.ProtoReflect.Descriptor instead.
func (*ApplyBinlogFileResponse) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{7}
}

type ReadBinlogFilesTimestampsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinlogFileNames []string `protobuf:"bytes,1,rep,name=binlog_file_names,json=binlogFileNames,proto3" json:"binlog_file_names,omitempty"`
}

func (x *ReadBinlogFilesTimestampsRequest) Reset() {
	*x = ReadBinlogFilesTimestampsRequest{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadBinlogFilesTimestampsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadBinlogFilesTimestampsRequest) ProtoMessage() {}

func (x *ReadBinlogFilesTimestampsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadBinlogFilesTimestampsRequest.ProtoReflect.Descriptor instead.
func (*ReadBinlogFilesTimestampsRequest) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{8}
}

func (x *ReadBinlogFilesTimestampsRequest) GetBinlogFileNames() []string {
	if x != nil {
		return x.BinlogFileNames
	}
	return nil
}

type ReadBinlogFilesTimestampsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FirstTimestamp is the timestamp of the first found transaction searching in order of given binlog files
	FirstTimestamp *dev.Time `protobuf:"bytes,1,opt,name=first_timestamp,json=firstTimestamp,proto3" json:"first_timestamp,omitempty"`
	// FirstTimestampBinlog is the name of the binary log in which the first timestamp is found
	FirstTimestampBinlog string `protobuf:"bytes,2,opt,name=first_timestamp_binlog,json=firstTimestampBinlog,proto3" json:"first_timestamp_binlog,omitempty"`
	// LastTimestamp is the timestamp of the last found transaction in given binlog files
	LastTimestamp *dev.Time `protobuf:"bytes,3,opt,name=last_timestamp,json=lastTimestamp,proto3" json:"last_timestamp,omitempty"`
	// LastTimestampBinlog is the name of the binary log in which the last timestamp is found
	LastTimestampBinlog string `protobuf:"bytes,4,opt,name=last_timestamp_binlog,json=lastTimestampBinlog,proto3" json:"last_timestamp_binlog,omitempty"`
}

func (x *ReadBinlogFilesTimestampsResponse) Reset() {
	*x = ReadBinlogFilesTimestampsResponse{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadBinlogFilesTimestampsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadBinlogFilesTimestampsResponse) ProtoMessage() {}

func (x *ReadBinlogFilesTimestampsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadBinlogFilesTimestampsResponse.ProtoReflect.Descriptor instead.
func (*ReadBinlogFilesTimestampsResponse) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{9}
}

func (x *ReadBinlogFilesTimestampsResponse) GetFirstTimestamp() *dev.Time {
	if x != nil {
		return x.FirstTimestamp
	}
	return nil
}

func (x *ReadBinlogFilesTimestampsResponse) GetFirstTimestampBinlog() string {
	if x != nil {
		return x.FirstTimestampBinlog
	}
	return ""
}

func (x *ReadBinlogFilesTimestampsResponse) GetLastTimestamp() *dev.Time {
	if x != nil {
		return x.LastTimestamp
	}
	return nil
}

func (x *ReadBinlogFilesTimestampsResponse) GetLastTimestampBinlog() string {
	if x != nil {
		return x.LastTimestampBinlog
	}
	return ""
}

type ReinitConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReinitConfigRequest) Reset() {
	*x = ReinitConfigRequest{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReinitConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReinitConfigRequest) ProtoMessage() {}

func (x *ReinitConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReinitConfigRequest.ProtoReflect.Descriptor instead.
func (*ReinitConfigRequest) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{10}
}

type ReinitConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReinitConfigResponse) Reset() {
	*x = ReinitConfigResponse{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReinitConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReinitConfigResponse) ProtoMessage() {}

func (x *ReinitConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReinitConfigResponse.ProtoReflect.Descriptor instead.
func (*ReinitConfigResponse) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{11}
}

type RefreshConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshConfigRequest) Reset() {
	*x = RefreshConfigRequest{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshConfigRequest) ProtoMessage() {}

func (x *RefreshConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshConfigRequest.ProtoReflect.Descriptor instead.
func (*RefreshConfigRequest) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{12}
}

type RefreshConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshConfigResponse) Reset() {
	*x = RefreshConfigResponse{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshConfigResponse) ProtoMessage() {}

func (x *RefreshConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshConfigResponse.ProtoReflect.Descriptor instead.
func (*RefreshConfigResponse) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{13}
}

type VersionStringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionStringRequest) Reset() {
	*x = VersionStringRequest{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionStringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionStringRequest) ProtoMessage() {}

func (x *VersionStringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionStringRequest.ProtoReflect.Descriptor instead.
func (*VersionStringRequest) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{14}
}

type VersionStringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionStringResponse) Reset() {
	*x = VersionStringResponse{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionStringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionStringResponse) ProtoMessage() {}

func (x *VersionStringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionStringResponse.ProtoReflect.Descriptor instead.
func (*VersionStringResponse) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{15}
}

func (x *VersionStringResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type HostMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HostMetricsRequest) Reset() {
	*x = HostMetricsRequest{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMetricsRequest) ProtoMessage() {}

func (x *HostMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMetricsRequest.ProtoReflect.Descriptor instead.
func (*HostMetricsRequest) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{16}
}

type HostMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metrics is a map (metric name -> metric value/error) so that the client has as much
	// information as possible about all the checked metrics.
	Metrics map[string]*HostMetricsResponse_Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HostMetricsResponse) Reset() {
	*x = HostMetricsResponse{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMetricsResponse) ProtoMessage() {}

func (x *HostMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMetricsResponse.ProtoReflect.Descriptor instead.
func (*HostMetricsResponse) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{17}
}

func (x *HostMetricsResponse) GetMetrics() map[string]*HostMetricsResponse_Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// BackupInfo is the read-only attributes of a mysqlctl/backupstorage.BackupHandle.
type BackupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Directory   string            `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	Keyspace    string            `protobuf:"bytes,3,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard       string            `protobuf:"bytes,4,opt,name=shard,proto3" json:"shard,omitempty"`
	TabletAlias *dev1.TabletAlias `protobuf:"bytes,5,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	Time        *dev.Time         `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	// Engine is the name of the backupengine implementation used to create
	// this backup.
	Engine string            `protobuf:"bytes,7,opt,name=engine,proto3" json:"engine,omitempty"`
	Status BackupInfo_Status `protobuf:"varint,8,opt,name=status,proto3,enum=vitess.mysqlctl.dev.BackupInfo_Status" json:"status,omitempty"`
}

func (x *BackupInfo) Reset() {
	*x = BackupInfo{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupInfo) ProtoMessage() {}

func (x *BackupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupInfo.ProtoReflect.Descriptor instead.
func (*BackupInfo) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{18}
}

func (x *BackupInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BackupInfo) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *BackupInfo) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *BackupInfo) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *BackupInfo) GetTabletAlias() *dev1.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

func (x *BackupInfo) GetTime() *dev.Time {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *BackupInfo) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *BackupInfo) GetStatus() BackupInfo_Status {
	if x != nil {
		return x.Status
	}
	return BackupInfo_UNKNOWN
}

type HostMetricsResponse_Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the metric
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value is the metric value
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	// Error indicates an error retrieving the value
	Error *dev2.RPCError `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *HostMetricsResponse_Metric) Reset() {
	*x = HostMetricsResponse_Metric{}
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostMetricsResponse_Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMetricsResponse_Metric) ProtoMessage() {}

func (x *HostMetricsResponse_Metric) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMetricsResponse_Metric.ProtoReflect.Descriptor instead.
func (*HostMetricsResponse_Metric) Descriptor() ([]byte, []int) {
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP(), []int{17, 0}
}

func (x *HostMetricsResponse_Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HostMetricsResponse_Metric) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *HostMetricsResponse_Metric) GetError() *dev2.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_vitess_mysqlctl_dev_mysqlctl_proto protoreflect.FileDescriptor

var file_vitess_mysqlctl_dev_mysqlctl_proto_rawDesc = []byte{
	0x0a, 0x22, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74,
	0x6c, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73,
	0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x1a, 0x22, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x74,
	0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x64, 0x65, 0x76,
	0x2f, 0x76, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x65, 0x76, 0x2f,
	0x76, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x64, 0x41, 0x72, 0x67, 0x73, 0x22, 0x0f, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01,
	0x0a, 0x0f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x79,
	0x73, 0x71, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x64, 0x12, 0x51, 0x0a, 0x16, 0x6d, 0x79, 0x73,
	0x71, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x12, 0x0a, 0x10,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x18, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x75,
	0x6e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x42,
	0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x69,
	0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x17, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x15, 0x62, 0x69,
	0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e,
	0x0a, 0x20, 0x52, 0x65, 0x61, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x8f,
	0x02, 0x0a, 0x21, 0x52, 0x65, 0x61, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x12, 0x3e, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x15,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x62,
	0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67,
	0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x69, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x16, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x16, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x48,
	0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xb9, 0x02, 0x0a, 0x13, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x64, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x52, 0x50, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x1a, 0x6b, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x03,
	0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x12, 0x43, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x32, 0xc5, 0x07, 0x0a, 0x08, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x43, 0x74, 0x6c, 0x12, 0x50, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63,
	0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x24, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79,
	0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x52, 0x75, 0x6e, 0x4d, 0x79,
	0x73, 0x71, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x52, 0x75, 0x6e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79,
	0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12,
	0x35, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74,
	0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x0c, 0x52, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x28, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63,
	0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x52, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x52, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73,
	0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x29, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x48,
	0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x27, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6d, 0x79, 0x73,
	0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2f, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x2f, 0x64, 0x65, 0x76, 0x3b, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x63, 0x74, 0x6c, 0x64, 0x65, 0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescOnce sync.Once
	file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescData = file_vitess_mysqlctl_dev_mysqlctl_proto_rawDesc
)

func file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescGZIP() []byte {
	file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescOnce.Do(func() {
		file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescData = protoimpl.X.CompressGZIP(file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescData)
	})
	return file_vitess_mysqlctl_dev_mysqlctl_proto_rawDescData
}

var file_vitess_mysqlctl_dev_mysqlctl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_vitess_mysqlctl_dev_mysqlctl_proto_goTypes = []any{
	(BackupInfo_Status)(0),                    // 0: vitess.mysqlctl.dev.BackupInfo.Status
	(*StartRequest)(nil),                      // 1: vitess.mysqlctl.dev.StartRequest
	(*StartResponse)(nil),                     // 2: vitess.mysqlctl.dev.StartResponse
	(*ShutdownRequest)(nil),                   // 3: vitess.mysqlctl.dev.ShutdownRequest
	(*ShutdownResponse)(nil),                  // 4: vitess.mysqlctl.dev.ShutdownResponse
	(*RunMysqlUpgradeRequest)(nil),            // 5: vitess.mysqlctl.dev.RunMysqlUpgradeRequest
	(*RunMysqlUpgradeResponse)(nil),           // 6: vitess.mysqlctl.dev.RunMysqlUpgradeResponse
	(*ApplyBinlogFileRequest)(nil),            // 7: vitess.mysqlctl.dev.ApplyBinlogFileRequest
	(*ApplyBinlogFileResponse)(nil),           // 8: vitess.mysqlctl.dev.ApplyBinlogFileResponse
	(*ReadBinlogFilesTimestampsRequest)(nil),  // 9: vitess.mysqlctl.dev.ReadBinlogFilesTimestampsRequest
	(*ReadBinlogFilesTimestampsResponse)(nil), // 10: vitess.mysqlctl.dev.ReadBinlogFilesTimestampsResponse
	(*ReinitConfigRequest)(nil),               // 11: vitess.mysqlctl.dev.ReinitConfigRequest
	(*ReinitConfigResponse)(nil),              // 12: vitess.mysqlctl.dev.ReinitConfigResponse
	(*RefreshConfigRequest)(nil),              // 13: vitess.mysqlctl.dev.RefreshConfigRequest
	(*RefreshConfigResponse)(nil),             // 14: vitess.mysqlctl.dev.RefreshConfigResponse
	(*VersionStringRequest)(nil),              // 15: vitess.mysqlctl.dev.VersionStringRequest
	(*VersionStringResponse)(nil),             // 16: vitess.mysqlctl.dev.VersionStringResponse
	(*HostMetricsRequest)(nil),                // 17: vitess.mysqlctl.dev.HostMetricsRequest
	(*HostMetricsResponse)(nil),               // 18: vitess.mysqlctl.dev.HostMetricsResponse
	(*BackupInfo)(nil),                        // 19: vitess.mysqlctl.dev.BackupInfo
	(*HostMetricsResponse_Metric)(nil),        // 20: vitess.mysqlctl.dev.HostMetricsResponse.Metric
	nil,                                       // 21: vitess.mysqlctl.dev.HostMetricsResponse.MetricsEntry
	(*dev.Duration)(nil),                      // 22: vitess.vttime.dev.Duration
	(*dev.Time)(nil),                          // 23: vitess.vttime.dev.Time
	(*dev1.TabletAlias)(nil),                  // 24: vitess.topodata.dev.TabletAlias
	(*dev2.RPCError)(nil),                     // 25: vitess.vtrpc.dev.RPCError
}
var file_vitess_mysqlctl_dev_mysqlctl_proto_depIdxs = []int32{
	22, // 0: vitess.mysqlctl.dev.ShutdownRequest.mysql_shutdown_timeout:type_name -> vitess.vttime.dev.Duration
	23, // 1: vitess.mysqlctl.dev.ApplyBinlogFileRequest.binlog_restore_datetime:type_name -> vitess.vttime.dev.Time
	23, // 2: vitess.mysqlctl.dev.ReadBinlogFilesTimestampsResponse.first_timestamp:type_name -> vitess.vttime.dev.Time
	23, // 3: vitess.mysqlctl.dev.ReadBinlogFilesTimestampsResponse.last_timestamp:type_name -> vitess.vttime.dev.Time
	21, // 4: vitess.mysqlctl.dev.HostMetricsResponse.metrics:type_name -> vitess.mysqlctl.dev.HostMetricsResponse.MetricsEntry
	24, // 5: vitess.mysqlctl.dev.BackupInfo.tablet_alias:type_name -> vitess.topodata.dev.TabletAlias
	23, // 6: vitess.mysqlctl.dev.BackupInfo.time:type_name -> vitess.vttime.dev.Time
	0,  // 7: vitess.mysqlctl.dev.BackupInfo.status:type_name -> vitess.mysqlctl.dev.BackupInfo.Status
	25, // 8: vitess.mysqlctl.dev.HostMetricsResponse.Metric.error:type_name -> vitess.vtrpc.dev.RPCError
	20, // 9: vitess.mysqlctl.dev.HostMetricsResponse.MetricsEntry.value:type_name -> vitess.mysqlctl.dev.HostMetricsResponse.Metric
	1,  // 10: vitess.mysqlctl.dev.MysqlCtl.Start:input_type -> vitess.mysqlctl.dev.StartRequest
	3,  // 11: vitess.mysqlctl.dev.MysqlCtl.Shutdown:input_type -> vitess.mysqlctl.dev.ShutdownRequest
	5,  // 12: vitess.mysqlctl.dev.MysqlCtl.RunMysqlUpgrade:input_type -> vitess.mysqlctl.dev.RunMysqlUpgradeRequest
	7,  // 13: vitess.mysqlctl.dev.MysqlCtl.ApplyBinlogFile:input_type -> vitess.mysqlctl.dev.ApplyBinlogFileRequest
	9,  // 14: vitess.mysqlctl.dev.MysqlCtl.ReadBinlogFilesTimestamps:input_type -> vitess.mysqlctl.dev.ReadBinlogFilesTimestampsRequest
	11, // 15: vitess.mysqlctl.dev.MysqlCtl.ReinitConfig:input_type -> vitess.mysqlctl.dev.ReinitConfigRequest
	13, // 16: vitess.mysqlctl.dev.MysqlCtl.RefreshConfig:input_type -> vitess.mysqlctl.dev.RefreshConfigRequest
	15, // 17: vitess.mysqlctl.dev.MysqlCtl.VersionString:input_type -> vitess.mysqlctl.dev.VersionStringRequest
	17, // 18: vitess.mysqlctl.dev.MysqlCtl.HostMetrics:input_type -> vitess.mysqlctl.dev.HostMetricsRequest
	2,  // 19: vitess.mysqlctl.dev.MysqlCtl.Start:output_type -> vitess.mysqlctl.dev.StartResponse
	4,  // 20: vitess.mysqlctl.dev.MysqlCtl.Shutdown:output_type -> vitess.mysqlctl.dev.ShutdownResponse
	6,  // 21: vitess.mysqlctl.dev.MysqlCtl.RunMysqlUpgrade:output_type -> vitess.mysqlctl.dev.RunMysqlUpgradeResponse
	8,  // 22: vitess.mysqlctl.dev.MysqlCtl.ApplyBinlogFile:output_type -> vitess.mysqlctl.dev.ApplyBinlogFileResponse
	10, // 23: vitess.mysqlctl.dev.MysqlCtl.ReadBinlogFilesTimestamps:output_type -> vitess.mysqlctl.dev.ReadBinlogFilesTimestampsResponse
	12, // 24: vitess.mysqlctl.dev.MysqlCtl.ReinitConfig:output_type -> vitess.mysqlctl.dev.ReinitConfigResponse
	14, // 25: vitess.mysqlctl.dev.MysqlCtl.RefreshConfig:output_type -> vitess.mysqlctl.dev.RefreshConfigResponse
	16, // 26: vitess.mysqlctl.dev.MysqlCtl.VersionString:output_type -> vitess.mysqlctl.dev.VersionStringResponse
	18, // 27: vitess.mysqlctl.dev.MysqlCtl.HostMetrics:output_type -> vitess.mysqlctl.dev.HostMetricsResponse
	19, // [19:28] is the sub-list for method output_type
	10, // [10:19] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_vitess_mysqlctl_dev_mysqlctl_proto_init() }
func file_vitess_mysqlctl_dev_mysqlctl_proto_init() {
	if File_vitess_mysqlctl_dev_mysqlctl_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vitess_mysqlctl_dev_mysqlctl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vitess_mysqlctl_dev_mysqlctl_proto_goTypes,
		DependencyIndexes: file_vitess_mysqlctl_dev_mysqlctl_proto_depIdxs,
		EnumInfos:         file_vitess_mysqlctl_dev_mysqlctl_proto_enumTypes,
		MessageInfos:      file_vitess_mysqlctl_dev_mysqlctl_proto_msgTypes,
	}.Build()
	File_vitess_mysqlctl_dev_mysqlctl_proto = out.File
	file_vitess_mysqlctl_dev_mysqlctl_proto_rawDesc = nil
	file_vitess_mysqlctl_dev_mysqlctl_proto_goTypes = nil
	file_vitess_mysqlctl_dev_mysqlctl_proto_depIdxs = nil
}
