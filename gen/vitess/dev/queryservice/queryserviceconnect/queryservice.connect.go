// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: queryservice/queryservice.proto

package queryserviceconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	binlogdata "github.com/planetscale/vitess-types/gen/vitess/dev/binlogdata"
	query "github.com/planetscale/vitess-types/gen/vitess/dev/query"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// QueryName is the fully-qualified name of the Query service.
	QueryName = "queryservice.Query"
)

// QueryClient is a client for the queryservice.Query service.
type QueryClient interface {
	// Execute executes the specified SQL query (might be in a
	// transaction context, if Query.transaction_id is set).
	Execute(context.Context, *connect_go.Request[query.ExecuteRequest]) (*connect_go.Response[query.ExecuteResponse], error)
	// StreamExecute executes a streaming query. Use this method if the
	// query returns a large number of rows. The first QueryResult will
	// contain the Fields, subsequent QueryResult messages will contain
	// the rows.
	StreamExecute(context.Context, *connect_go.Request[query.StreamExecuteRequest]) (*connect_go.ServerStreamForClient[query.StreamExecuteResponse], error)
	// Begin a transaction.
	Begin(context.Context, *connect_go.Request[query.BeginRequest]) (*connect_go.Response[query.BeginResponse], error)
	// Commit a transaction.
	Commit(context.Context, *connect_go.Request[query.CommitRequest]) (*connect_go.Response[query.CommitResponse], error)
	// Rollback a transaction.
	Rollback(context.Context, *connect_go.Request[query.RollbackRequest]) (*connect_go.Response[query.RollbackResponse], error)
	// Prepare preares a transaction.
	Prepare(context.Context, *connect_go.Request[query.PrepareRequest]) (*connect_go.Response[query.PrepareResponse], error)
	// CommitPrepared commits a prepared transaction.
	CommitPrepared(context.Context, *connect_go.Request[query.CommitPreparedRequest]) (*connect_go.Response[query.CommitPreparedResponse], error)
	// RollbackPrepared rolls back a prepared transaction.
	RollbackPrepared(context.Context, *connect_go.Request[query.RollbackPreparedRequest]) (*connect_go.Response[query.RollbackPreparedResponse], error)
	// CreateTransaction creates the metadata for a 2pc transaction.
	CreateTransaction(context.Context, *connect_go.Request[query.CreateTransactionRequest]) (*connect_go.Response[query.CreateTransactionResponse], error)
	// StartCommit initiates a commit for a 2pc transaction.
	StartCommit(context.Context, *connect_go.Request[query.StartCommitRequest]) (*connect_go.Response[query.StartCommitResponse], error)
	// SetRollback marks the 2pc transaction for rollback.
	SetRollback(context.Context, *connect_go.Request[query.SetRollbackRequest]) (*connect_go.Response[query.SetRollbackResponse], error)
	// ConcludeTransaction marks the 2pc transaction as resolved.
	ConcludeTransaction(context.Context, *connect_go.Request[query.ConcludeTransactionRequest]) (*connect_go.Response[query.ConcludeTransactionResponse], error)
	// ReadTransaction returns the 2pc transaction info.
	ReadTransaction(context.Context, *connect_go.Request[query.ReadTransactionRequest]) (*connect_go.Response[query.ReadTransactionResponse], error)
	// BeginExecute executes a begin and the specified SQL query.
	BeginExecute(context.Context, *connect_go.Request[query.BeginExecuteRequest]) (*connect_go.Response[query.BeginExecuteResponse], error)
	// BeginStreamExecute executes a begin and the specified SQL query.
	BeginStreamExecute(context.Context, *connect_go.Request[query.BeginStreamExecuteRequest]) (*connect_go.ServerStreamForClient[query.BeginStreamExecuteResponse], error)
	// MessageStream streams messages from a message table.
	MessageStream(context.Context, *connect_go.Request[query.MessageStreamRequest]) (*connect_go.ServerStreamForClient[query.MessageStreamResponse], error)
	// MessageAck acks messages for a table.
	MessageAck(context.Context, *connect_go.Request[query.MessageAckRequest]) (*connect_go.Response[query.MessageAckResponse], error)
	// ReserveExecute executes a query on a reserved connection
	ReserveExecute(context.Context, *connect_go.Request[query.ReserveExecuteRequest]) (*connect_go.Response[query.ReserveExecuteResponse], error)
	// ReserveBeginExecute starts a transaction and executes a query in the transaction on a reserved connection
	ReserveBeginExecute(context.Context, *connect_go.Request[query.ReserveBeginExecuteRequest]) (*connect_go.Response[query.ReserveBeginExecuteResponse], error)
	// ReserveStreamExecute executes a streaming query on a reserved connection
	ReserveStreamExecute(context.Context, *connect_go.Request[query.ReserveStreamExecuteRequest]) (*connect_go.ServerStreamForClient[query.ReserveStreamExecuteResponse], error)
	// ReserveBeginStreamExecute starts a transaction and executes a streaming query in the transaction on a reserved connection
	ReserveBeginStreamExecute(context.Context, *connect_go.Request[query.ReserveBeginStreamExecuteRequest]) (*connect_go.ServerStreamForClient[query.ReserveBeginStreamExecuteResponse], error)
	// Release releases the connection
	Release(context.Context, *connect_go.Request[query.ReleaseRequest]) (*connect_go.Response[query.ReleaseResponse], error)
	// StreamHealth runs a streaming RPC to the tablet, that returns the
	// current health of the tablet on a regular basis.
	StreamHealth(context.Context, *connect_go.Request[query.StreamHealthRequest]) (*connect_go.ServerStreamForClient[query.StreamHealthResponse], error)
	// VStream streams vreplication events.
	VStream(context.Context, *connect_go.Request[binlogdata.VStreamRequest]) (*connect_go.ServerStreamForClient[binlogdata.VStreamResponse], error)
	// VStreamRows streams rows from the specified starting point.
	VStreamRows(context.Context, *connect_go.Request[binlogdata.VStreamRowsRequest]) (*connect_go.ServerStreamForClient[binlogdata.VStreamRowsResponse], error)
	// VStreamResults streams results along with the gtid of the snapshot.
	VStreamResults(context.Context, *connect_go.Request[binlogdata.VStreamResultsRequest]) (*connect_go.ServerStreamForClient[binlogdata.VStreamResultsResponse], error)
}

// NewQueryClient constructs a client for the queryservice.Query service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueryClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) QueryClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &queryClient{
		execute: connect_go.NewClient[query.ExecuteRequest, query.ExecuteResponse](
			httpClient,
			baseURL+"/queryservice.Query/Execute",
			opts...,
		),
		streamExecute: connect_go.NewClient[query.StreamExecuteRequest, query.StreamExecuteResponse](
			httpClient,
			baseURL+"/queryservice.Query/StreamExecute",
			opts...,
		),
		begin: connect_go.NewClient[query.BeginRequest, query.BeginResponse](
			httpClient,
			baseURL+"/queryservice.Query/Begin",
			opts...,
		),
		commit: connect_go.NewClient[query.CommitRequest, query.CommitResponse](
			httpClient,
			baseURL+"/queryservice.Query/Commit",
			opts...,
		),
		rollback: connect_go.NewClient[query.RollbackRequest, query.RollbackResponse](
			httpClient,
			baseURL+"/queryservice.Query/Rollback",
			opts...,
		),
		prepare: connect_go.NewClient[query.PrepareRequest, query.PrepareResponse](
			httpClient,
			baseURL+"/queryservice.Query/Prepare",
			opts...,
		),
		commitPrepared: connect_go.NewClient[query.CommitPreparedRequest, query.CommitPreparedResponse](
			httpClient,
			baseURL+"/queryservice.Query/CommitPrepared",
			opts...,
		),
		rollbackPrepared: connect_go.NewClient[query.RollbackPreparedRequest, query.RollbackPreparedResponse](
			httpClient,
			baseURL+"/queryservice.Query/RollbackPrepared",
			opts...,
		),
		createTransaction: connect_go.NewClient[query.CreateTransactionRequest, query.CreateTransactionResponse](
			httpClient,
			baseURL+"/queryservice.Query/CreateTransaction",
			opts...,
		),
		startCommit: connect_go.NewClient[query.StartCommitRequest, query.StartCommitResponse](
			httpClient,
			baseURL+"/queryservice.Query/StartCommit",
			opts...,
		),
		setRollback: connect_go.NewClient[query.SetRollbackRequest, query.SetRollbackResponse](
			httpClient,
			baseURL+"/queryservice.Query/SetRollback",
			opts...,
		),
		concludeTransaction: connect_go.NewClient[query.ConcludeTransactionRequest, query.ConcludeTransactionResponse](
			httpClient,
			baseURL+"/queryservice.Query/ConcludeTransaction",
			opts...,
		),
		readTransaction: connect_go.NewClient[query.ReadTransactionRequest, query.ReadTransactionResponse](
			httpClient,
			baseURL+"/queryservice.Query/ReadTransaction",
			opts...,
		),
		beginExecute: connect_go.NewClient[query.BeginExecuteRequest, query.BeginExecuteResponse](
			httpClient,
			baseURL+"/queryservice.Query/BeginExecute",
			opts...,
		),
		beginStreamExecute: connect_go.NewClient[query.BeginStreamExecuteRequest, query.BeginStreamExecuteResponse](
			httpClient,
			baseURL+"/queryservice.Query/BeginStreamExecute",
			opts...,
		),
		messageStream: connect_go.NewClient[query.MessageStreamRequest, query.MessageStreamResponse](
			httpClient,
			baseURL+"/queryservice.Query/MessageStream",
			opts...,
		),
		messageAck: connect_go.NewClient[query.MessageAckRequest, query.MessageAckResponse](
			httpClient,
			baseURL+"/queryservice.Query/MessageAck",
			opts...,
		),
		reserveExecute: connect_go.NewClient[query.ReserveExecuteRequest, query.ReserveExecuteResponse](
			httpClient,
			baseURL+"/queryservice.Query/ReserveExecute",
			opts...,
		),
		reserveBeginExecute: connect_go.NewClient[query.ReserveBeginExecuteRequest, query.ReserveBeginExecuteResponse](
			httpClient,
			baseURL+"/queryservice.Query/ReserveBeginExecute",
			opts...,
		),
		reserveStreamExecute: connect_go.NewClient[query.ReserveStreamExecuteRequest, query.ReserveStreamExecuteResponse](
			httpClient,
			baseURL+"/queryservice.Query/ReserveStreamExecute",
			opts...,
		),
		reserveBeginStreamExecute: connect_go.NewClient[query.ReserveBeginStreamExecuteRequest, query.ReserveBeginStreamExecuteResponse](
			httpClient,
			baseURL+"/queryservice.Query/ReserveBeginStreamExecute",
			opts...,
		),
		release: connect_go.NewClient[query.ReleaseRequest, query.ReleaseResponse](
			httpClient,
			baseURL+"/queryservice.Query/Release",
			opts...,
		),
		streamHealth: connect_go.NewClient[query.StreamHealthRequest, query.StreamHealthResponse](
			httpClient,
			baseURL+"/queryservice.Query/StreamHealth",
			opts...,
		),
		vStream: connect_go.NewClient[binlogdata.VStreamRequest, binlogdata.VStreamResponse](
			httpClient,
			baseURL+"/queryservice.Query/VStream",
			opts...,
		),
		vStreamRows: connect_go.NewClient[binlogdata.VStreamRowsRequest, binlogdata.VStreamRowsResponse](
			httpClient,
			baseURL+"/queryservice.Query/VStreamRows",
			opts...,
		),
		vStreamResults: connect_go.NewClient[binlogdata.VStreamResultsRequest, binlogdata.VStreamResultsResponse](
			httpClient,
			baseURL+"/queryservice.Query/VStreamResults",
			opts...,
		),
	}
}

// queryClient implements QueryClient.
type queryClient struct {
	execute                   *connect_go.Client[query.ExecuteRequest, query.ExecuteResponse]
	streamExecute             *connect_go.Client[query.StreamExecuteRequest, query.StreamExecuteResponse]
	begin                     *connect_go.Client[query.BeginRequest, query.BeginResponse]
	commit                    *connect_go.Client[query.CommitRequest, query.CommitResponse]
	rollback                  *connect_go.Client[query.RollbackRequest, query.RollbackResponse]
	prepare                   *connect_go.Client[query.PrepareRequest, query.PrepareResponse]
	commitPrepared            *connect_go.Client[query.CommitPreparedRequest, query.CommitPreparedResponse]
	rollbackPrepared          *connect_go.Client[query.RollbackPreparedRequest, query.RollbackPreparedResponse]
	createTransaction         *connect_go.Client[query.CreateTransactionRequest, query.CreateTransactionResponse]
	startCommit               *connect_go.Client[query.StartCommitRequest, query.StartCommitResponse]
	setRollback               *connect_go.Client[query.SetRollbackRequest, query.SetRollbackResponse]
	concludeTransaction       *connect_go.Client[query.ConcludeTransactionRequest, query.ConcludeTransactionResponse]
	readTransaction           *connect_go.Client[query.ReadTransactionRequest, query.ReadTransactionResponse]
	beginExecute              *connect_go.Client[query.BeginExecuteRequest, query.BeginExecuteResponse]
	beginStreamExecute        *connect_go.Client[query.BeginStreamExecuteRequest, query.BeginStreamExecuteResponse]
	messageStream             *connect_go.Client[query.MessageStreamRequest, query.MessageStreamResponse]
	messageAck                *connect_go.Client[query.MessageAckRequest, query.MessageAckResponse]
	reserveExecute            *connect_go.Client[query.ReserveExecuteRequest, query.ReserveExecuteResponse]
	reserveBeginExecute       *connect_go.Client[query.ReserveBeginExecuteRequest, query.ReserveBeginExecuteResponse]
	reserveStreamExecute      *connect_go.Client[query.ReserveStreamExecuteRequest, query.ReserveStreamExecuteResponse]
	reserveBeginStreamExecute *connect_go.Client[query.ReserveBeginStreamExecuteRequest, query.ReserveBeginStreamExecuteResponse]
	release                   *connect_go.Client[query.ReleaseRequest, query.ReleaseResponse]
	streamHealth              *connect_go.Client[query.StreamHealthRequest, query.StreamHealthResponse]
	vStream                   *connect_go.Client[binlogdata.VStreamRequest, binlogdata.VStreamResponse]
	vStreamRows               *connect_go.Client[binlogdata.VStreamRowsRequest, binlogdata.VStreamRowsResponse]
	vStreamResults            *connect_go.Client[binlogdata.VStreamResultsRequest, binlogdata.VStreamResultsResponse]
}

// Execute calls queryservice.Query.Execute.
func (c *queryClient) Execute(ctx context.Context, req *connect_go.Request[query.ExecuteRequest]) (*connect_go.Response[query.ExecuteResponse], error) {
	return c.execute.CallUnary(ctx, req)
}

// StreamExecute calls queryservice.Query.StreamExecute.
func (c *queryClient) StreamExecute(ctx context.Context, req *connect_go.Request[query.StreamExecuteRequest]) (*connect_go.ServerStreamForClient[query.StreamExecuteResponse], error) {
	return c.streamExecute.CallServerStream(ctx, req)
}

// Begin calls queryservice.Query.Begin.
func (c *queryClient) Begin(ctx context.Context, req *connect_go.Request[query.BeginRequest]) (*connect_go.Response[query.BeginResponse], error) {
	return c.begin.CallUnary(ctx, req)
}

// Commit calls queryservice.Query.Commit.
func (c *queryClient) Commit(ctx context.Context, req *connect_go.Request[query.CommitRequest]) (*connect_go.Response[query.CommitResponse], error) {
	return c.commit.CallUnary(ctx, req)
}

// Rollback calls queryservice.Query.Rollback.
func (c *queryClient) Rollback(ctx context.Context, req *connect_go.Request[query.RollbackRequest]) (*connect_go.Response[query.RollbackResponse], error) {
	return c.rollback.CallUnary(ctx, req)
}

// Prepare calls queryservice.Query.Prepare.
func (c *queryClient) Prepare(ctx context.Context, req *connect_go.Request[query.PrepareRequest]) (*connect_go.Response[query.PrepareResponse], error) {
	return c.prepare.CallUnary(ctx, req)
}

// CommitPrepared calls queryservice.Query.CommitPrepared.
func (c *queryClient) CommitPrepared(ctx context.Context, req *connect_go.Request[query.CommitPreparedRequest]) (*connect_go.Response[query.CommitPreparedResponse], error) {
	return c.commitPrepared.CallUnary(ctx, req)
}

// RollbackPrepared calls queryservice.Query.RollbackPrepared.
func (c *queryClient) RollbackPrepared(ctx context.Context, req *connect_go.Request[query.RollbackPreparedRequest]) (*connect_go.Response[query.RollbackPreparedResponse], error) {
	return c.rollbackPrepared.CallUnary(ctx, req)
}

// CreateTransaction calls queryservice.Query.CreateTransaction.
func (c *queryClient) CreateTransaction(ctx context.Context, req *connect_go.Request[query.CreateTransactionRequest]) (*connect_go.Response[query.CreateTransactionResponse], error) {
	return c.createTransaction.CallUnary(ctx, req)
}

// StartCommit calls queryservice.Query.StartCommit.
func (c *queryClient) StartCommit(ctx context.Context, req *connect_go.Request[query.StartCommitRequest]) (*connect_go.Response[query.StartCommitResponse], error) {
	return c.startCommit.CallUnary(ctx, req)
}

// SetRollback calls queryservice.Query.SetRollback.
func (c *queryClient) SetRollback(ctx context.Context, req *connect_go.Request[query.SetRollbackRequest]) (*connect_go.Response[query.SetRollbackResponse], error) {
	return c.setRollback.CallUnary(ctx, req)
}

// ConcludeTransaction calls queryservice.Query.ConcludeTransaction.
func (c *queryClient) ConcludeTransaction(ctx context.Context, req *connect_go.Request[query.ConcludeTransactionRequest]) (*connect_go.Response[query.ConcludeTransactionResponse], error) {
	return c.concludeTransaction.CallUnary(ctx, req)
}

// ReadTransaction calls queryservice.Query.ReadTransaction.
func (c *queryClient) ReadTransaction(ctx context.Context, req *connect_go.Request[query.ReadTransactionRequest]) (*connect_go.Response[query.ReadTransactionResponse], error) {
	return c.readTransaction.CallUnary(ctx, req)
}

// BeginExecute calls queryservice.Query.BeginExecute.
func (c *queryClient) BeginExecute(ctx context.Context, req *connect_go.Request[query.BeginExecuteRequest]) (*connect_go.Response[query.BeginExecuteResponse], error) {
	return c.beginExecute.CallUnary(ctx, req)
}

// BeginStreamExecute calls queryservice.Query.BeginStreamExecute.
func (c *queryClient) BeginStreamExecute(ctx context.Context, req *connect_go.Request[query.BeginStreamExecuteRequest]) (*connect_go.ServerStreamForClient[query.BeginStreamExecuteResponse], error) {
	return c.beginStreamExecute.CallServerStream(ctx, req)
}

// MessageStream calls queryservice.Query.MessageStream.
func (c *queryClient) MessageStream(ctx context.Context, req *connect_go.Request[query.MessageStreamRequest]) (*connect_go.ServerStreamForClient[query.MessageStreamResponse], error) {
	return c.messageStream.CallServerStream(ctx, req)
}

// MessageAck calls queryservice.Query.MessageAck.
func (c *queryClient) MessageAck(ctx context.Context, req *connect_go.Request[query.MessageAckRequest]) (*connect_go.Response[query.MessageAckResponse], error) {
	return c.messageAck.CallUnary(ctx, req)
}

// ReserveExecute calls queryservice.Query.ReserveExecute.
func (c *queryClient) ReserveExecute(ctx context.Context, req *connect_go.Request[query.ReserveExecuteRequest]) (*connect_go.Response[query.ReserveExecuteResponse], error) {
	return c.reserveExecute.CallUnary(ctx, req)
}

// ReserveBeginExecute calls queryservice.Query.ReserveBeginExecute.
func (c *queryClient) ReserveBeginExecute(ctx context.Context, req *connect_go.Request[query.ReserveBeginExecuteRequest]) (*connect_go.Response[query.ReserveBeginExecuteResponse], error) {
	return c.reserveBeginExecute.CallUnary(ctx, req)
}

// ReserveStreamExecute calls queryservice.Query.ReserveStreamExecute.
func (c *queryClient) ReserveStreamExecute(ctx context.Context, req *connect_go.Request[query.ReserveStreamExecuteRequest]) (*connect_go.ServerStreamForClient[query.ReserveStreamExecuteResponse], error) {
	return c.reserveStreamExecute.CallServerStream(ctx, req)
}

// ReserveBeginStreamExecute calls queryservice.Query.ReserveBeginStreamExecute.
func (c *queryClient) ReserveBeginStreamExecute(ctx context.Context, req *connect_go.Request[query.ReserveBeginStreamExecuteRequest]) (*connect_go.ServerStreamForClient[query.ReserveBeginStreamExecuteResponse], error) {
	return c.reserveBeginStreamExecute.CallServerStream(ctx, req)
}

// Release calls queryservice.Query.Release.
func (c *queryClient) Release(ctx context.Context, req *connect_go.Request[query.ReleaseRequest]) (*connect_go.Response[query.ReleaseResponse], error) {
	return c.release.CallUnary(ctx, req)
}

// StreamHealth calls queryservice.Query.StreamHealth.
func (c *queryClient) StreamHealth(ctx context.Context, req *connect_go.Request[query.StreamHealthRequest]) (*connect_go.ServerStreamForClient[query.StreamHealthResponse], error) {
	return c.streamHealth.CallServerStream(ctx, req)
}

// VStream calls queryservice.Query.VStream.
func (c *queryClient) VStream(ctx context.Context, req *connect_go.Request[binlogdata.VStreamRequest]) (*connect_go.ServerStreamForClient[binlogdata.VStreamResponse], error) {
	return c.vStream.CallServerStream(ctx, req)
}

// VStreamRows calls queryservice.Query.VStreamRows.
func (c *queryClient) VStreamRows(ctx context.Context, req *connect_go.Request[binlogdata.VStreamRowsRequest]) (*connect_go.ServerStreamForClient[binlogdata.VStreamRowsResponse], error) {
	return c.vStreamRows.CallServerStream(ctx, req)
}

// VStreamResults calls queryservice.Query.VStreamResults.
func (c *queryClient) VStreamResults(ctx context.Context, req *connect_go.Request[binlogdata.VStreamResultsRequest]) (*connect_go.ServerStreamForClient[binlogdata.VStreamResultsResponse], error) {
	return c.vStreamResults.CallServerStream(ctx, req)
}

// QueryHandler is an implementation of the queryservice.Query service.
type QueryHandler interface {
	// Execute executes the specified SQL query (might be in a
	// transaction context, if Query.transaction_id is set).
	Execute(context.Context, *connect_go.Request[query.ExecuteRequest]) (*connect_go.Response[query.ExecuteResponse], error)
	// StreamExecute executes a streaming query. Use this method if the
	// query returns a large number of rows. The first QueryResult will
	// contain the Fields, subsequent QueryResult messages will contain
	// the rows.
	StreamExecute(context.Context, *connect_go.Request[query.StreamExecuteRequest], *connect_go.ServerStream[query.StreamExecuteResponse]) error
	// Begin a transaction.
	Begin(context.Context, *connect_go.Request[query.BeginRequest]) (*connect_go.Response[query.BeginResponse], error)
	// Commit a transaction.
	Commit(context.Context, *connect_go.Request[query.CommitRequest]) (*connect_go.Response[query.CommitResponse], error)
	// Rollback a transaction.
	Rollback(context.Context, *connect_go.Request[query.RollbackRequest]) (*connect_go.Response[query.RollbackResponse], error)
	// Prepare preares a transaction.
	Prepare(context.Context, *connect_go.Request[query.PrepareRequest]) (*connect_go.Response[query.PrepareResponse], error)
	// CommitPrepared commits a prepared transaction.
	CommitPrepared(context.Context, *connect_go.Request[query.CommitPreparedRequest]) (*connect_go.Response[query.CommitPreparedResponse], error)
	// RollbackPrepared rolls back a prepared transaction.
	RollbackPrepared(context.Context, *connect_go.Request[query.RollbackPreparedRequest]) (*connect_go.Response[query.RollbackPreparedResponse], error)
	// CreateTransaction creates the metadata for a 2pc transaction.
	CreateTransaction(context.Context, *connect_go.Request[query.CreateTransactionRequest]) (*connect_go.Response[query.CreateTransactionResponse], error)
	// StartCommit initiates a commit for a 2pc transaction.
	StartCommit(context.Context, *connect_go.Request[query.StartCommitRequest]) (*connect_go.Response[query.StartCommitResponse], error)
	// SetRollback marks the 2pc transaction for rollback.
	SetRollback(context.Context, *connect_go.Request[query.SetRollbackRequest]) (*connect_go.Response[query.SetRollbackResponse], error)
	// ConcludeTransaction marks the 2pc transaction as resolved.
	ConcludeTransaction(context.Context, *connect_go.Request[query.ConcludeTransactionRequest]) (*connect_go.Response[query.ConcludeTransactionResponse], error)
	// ReadTransaction returns the 2pc transaction info.
	ReadTransaction(context.Context, *connect_go.Request[query.ReadTransactionRequest]) (*connect_go.Response[query.ReadTransactionResponse], error)
	// BeginExecute executes a begin and the specified SQL query.
	BeginExecute(context.Context, *connect_go.Request[query.BeginExecuteRequest]) (*connect_go.Response[query.BeginExecuteResponse], error)
	// BeginStreamExecute executes a begin and the specified SQL query.
	BeginStreamExecute(context.Context, *connect_go.Request[query.BeginStreamExecuteRequest], *connect_go.ServerStream[query.BeginStreamExecuteResponse]) error
	// MessageStream streams messages from a message table.
	MessageStream(context.Context, *connect_go.Request[query.MessageStreamRequest], *connect_go.ServerStream[query.MessageStreamResponse]) error
	// MessageAck acks messages for a table.
	MessageAck(context.Context, *connect_go.Request[query.MessageAckRequest]) (*connect_go.Response[query.MessageAckResponse], error)
	// ReserveExecute executes a query on a reserved connection
	ReserveExecute(context.Context, *connect_go.Request[query.ReserveExecuteRequest]) (*connect_go.Response[query.ReserveExecuteResponse], error)
	// ReserveBeginExecute starts a transaction and executes a query in the transaction on a reserved connection
	ReserveBeginExecute(context.Context, *connect_go.Request[query.ReserveBeginExecuteRequest]) (*connect_go.Response[query.ReserveBeginExecuteResponse], error)
	// ReserveStreamExecute executes a streaming query on a reserved connection
	ReserveStreamExecute(context.Context, *connect_go.Request[query.ReserveStreamExecuteRequest], *connect_go.ServerStream[query.ReserveStreamExecuteResponse]) error
	// ReserveBeginStreamExecute starts a transaction and executes a streaming query in the transaction on a reserved connection
	ReserveBeginStreamExecute(context.Context, *connect_go.Request[query.ReserveBeginStreamExecuteRequest], *connect_go.ServerStream[query.ReserveBeginStreamExecuteResponse]) error
	// Release releases the connection
	Release(context.Context, *connect_go.Request[query.ReleaseRequest]) (*connect_go.Response[query.ReleaseResponse], error)
	// StreamHealth runs a streaming RPC to the tablet, that returns the
	// current health of the tablet on a regular basis.
	StreamHealth(context.Context, *connect_go.Request[query.StreamHealthRequest], *connect_go.ServerStream[query.StreamHealthResponse]) error
	// VStream streams vreplication events.
	VStream(context.Context, *connect_go.Request[binlogdata.VStreamRequest], *connect_go.ServerStream[binlogdata.VStreamResponse]) error
	// VStreamRows streams rows from the specified starting point.
	VStreamRows(context.Context, *connect_go.Request[binlogdata.VStreamRowsRequest], *connect_go.ServerStream[binlogdata.VStreamRowsResponse]) error
	// VStreamResults streams results along with the gtid of the snapshot.
	VStreamResults(context.Context, *connect_go.Request[binlogdata.VStreamResultsRequest], *connect_go.ServerStream[binlogdata.VStreamResultsResponse]) error
}

// NewQueryHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueryHandler(svc QueryHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/queryservice.Query/Execute", connect_go.NewUnaryHandler(
		"/queryservice.Query/Execute",
		svc.Execute,
		opts...,
	))
	mux.Handle("/queryservice.Query/StreamExecute", connect_go.NewServerStreamHandler(
		"/queryservice.Query/StreamExecute",
		svc.StreamExecute,
		opts...,
	))
	mux.Handle("/queryservice.Query/Begin", connect_go.NewUnaryHandler(
		"/queryservice.Query/Begin",
		svc.Begin,
		opts...,
	))
	mux.Handle("/queryservice.Query/Commit", connect_go.NewUnaryHandler(
		"/queryservice.Query/Commit",
		svc.Commit,
		opts...,
	))
	mux.Handle("/queryservice.Query/Rollback", connect_go.NewUnaryHandler(
		"/queryservice.Query/Rollback",
		svc.Rollback,
		opts...,
	))
	mux.Handle("/queryservice.Query/Prepare", connect_go.NewUnaryHandler(
		"/queryservice.Query/Prepare",
		svc.Prepare,
		opts...,
	))
	mux.Handle("/queryservice.Query/CommitPrepared", connect_go.NewUnaryHandler(
		"/queryservice.Query/CommitPrepared",
		svc.CommitPrepared,
		opts...,
	))
	mux.Handle("/queryservice.Query/RollbackPrepared", connect_go.NewUnaryHandler(
		"/queryservice.Query/RollbackPrepared",
		svc.RollbackPrepared,
		opts...,
	))
	mux.Handle("/queryservice.Query/CreateTransaction", connect_go.NewUnaryHandler(
		"/queryservice.Query/CreateTransaction",
		svc.CreateTransaction,
		opts...,
	))
	mux.Handle("/queryservice.Query/StartCommit", connect_go.NewUnaryHandler(
		"/queryservice.Query/StartCommit",
		svc.StartCommit,
		opts...,
	))
	mux.Handle("/queryservice.Query/SetRollback", connect_go.NewUnaryHandler(
		"/queryservice.Query/SetRollback",
		svc.SetRollback,
		opts...,
	))
	mux.Handle("/queryservice.Query/ConcludeTransaction", connect_go.NewUnaryHandler(
		"/queryservice.Query/ConcludeTransaction",
		svc.ConcludeTransaction,
		opts...,
	))
	mux.Handle("/queryservice.Query/ReadTransaction", connect_go.NewUnaryHandler(
		"/queryservice.Query/ReadTransaction",
		svc.ReadTransaction,
		opts...,
	))
	mux.Handle("/queryservice.Query/BeginExecute", connect_go.NewUnaryHandler(
		"/queryservice.Query/BeginExecute",
		svc.BeginExecute,
		opts...,
	))
	mux.Handle("/queryservice.Query/BeginStreamExecute", connect_go.NewServerStreamHandler(
		"/queryservice.Query/BeginStreamExecute",
		svc.BeginStreamExecute,
		opts...,
	))
	mux.Handle("/queryservice.Query/MessageStream", connect_go.NewServerStreamHandler(
		"/queryservice.Query/MessageStream",
		svc.MessageStream,
		opts...,
	))
	mux.Handle("/queryservice.Query/MessageAck", connect_go.NewUnaryHandler(
		"/queryservice.Query/MessageAck",
		svc.MessageAck,
		opts...,
	))
	mux.Handle("/queryservice.Query/ReserveExecute", connect_go.NewUnaryHandler(
		"/queryservice.Query/ReserveExecute",
		svc.ReserveExecute,
		opts...,
	))
	mux.Handle("/queryservice.Query/ReserveBeginExecute", connect_go.NewUnaryHandler(
		"/queryservice.Query/ReserveBeginExecute",
		svc.ReserveBeginExecute,
		opts...,
	))
	mux.Handle("/queryservice.Query/ReserveStreamExecute", connect_go.NewServerStreamHandler(
		"/queryservice.Query/ReserveStreamExecute",
		svc.ReserveStreamExecute,
		opts...,
	))
	mux.Handle("/queryservice.Query/ReserveBeginStreamExecute", connect_go.NewServerStreamHandler(
		"/queryservice.Query/ReserveBeginStreamExecute",
		svc.ReserveBeginStreamExecute,
		opts...,
	))
	mux.Handle("/queryservice.Query/Release", connect_go.NewUnaryHandler(
		"/queryservice.Query/Release",
		svc.Release,
		opts...,
	))
	mux.Handle("/queryservice.Query/StreamHealth", connect_go.NewServerStreamHandler(
		"/queryservice.Query/StreamHealth",
		svc.StreamHealth,
		opts...,
	))
	mux.Handle("/queryservice.Query/VStream", connect_go.NewServerStreamHandler(
		"/queryservice.Query/VStream",
		svc.VStream,
		opts...,
	))
	mux.Handle("/queryservice.Query/VStreamRows", connect_go.NewServerStreamHandler(
		"/queryservice.Query/VStreamRows",
		svc.VStreamRows,
		opts...,
	))
	mux.Handle("/queryservice.Query/VStreamResults", connect_go.NewServerStreamHandler(
		"/queryservice.Query/VStreamResults",
		svc.VStreamResults,
		opts...,
	))
	return "/queryservice.Query/", mux
}

// UnimplementedQueryHandler returns CodeUnimplemented from all methods.
type UnimplementedQueryHandler struct{}

func (UnimplementedQueryHandler) Execute(context.Context, *connect_go.Request[query.ExecuteRequest]) (*connect_go.Response[query.ExecuteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.Execute is not implemented"))
}

func (UnimplementedQueryHandler) StreamExecute(context.Context, *connect_go.Request[query.StreamExecuteRequest], *connect_go.ServerStream[query.StreamExecuteResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.StreamExecute is not implemented"))
}

func (UnimplementedQueryHandler) Begin(context.Context, *connect_go.Request[query.BeginRequest]) (*connect_go.Response[query.BeginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.Begin is not implemented"))
}

func (UnimplementedQueryHandler) Commit(context.Context, *connect_go.Request[query.CommitRequest]) (*connect_go.Response[query.CommitResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.Commit is not implemented"))
}

func (UnimplementedQueryHandler) Rollback(context.Context, *connect_go.Request[query.RollbackRequest]) (*connect_go.Response[query.RollbackResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.Rollback is not implemented"))
}

func (UnimplementedQueryHandler) Prepare(context.Context, *connect_go.Request[query.PrepareRequest]) (*connect_go.Response[query.PrepareResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.Prepare is not implemented"))
}

func (UnimplementedQueryHandler) CommitPrepared(context.Context, *connect_go.Request[query.CommitPreparedRequest]) (*connect_go.Response[query.CommitPreparedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.CommitPrepared is not implemented"))
}

func (UnimplementedQueryHandler) RollbackPrepared(context.Context, *connect_go.Request[query.RollbackPreparedRequest]) (*connect_go.Response[query.RollbackPreparedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.RollbackPrepared is not implemented"))
}

func (UnimplementedQueryHandler) CreateTransaction(context.Context, *connect_go.Request[query.CreateTransactionRequest]) (*connect_go.Response[query.CreateTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.CreateTransaction is not implemented"))
}

func (UnimplementedQueryHandler) StartCommit(context.Context, *connect_go.Request[query.StartCommitRequest]) (*connect_go.Response[query.StartCommitResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.StartCommit is not implemented"))
}

func (UnimplementedQueryHandler) SetRollback(context.Context, *connect_go.Request[query.SetRollbackRequest]) (*connect_go.Response[query.SetRollbackResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.SetRollback is not implemented"))
}

func (UnimplementedQueryHandler) ConcludeTransaction(context.Context, *connect_go.Request[query.ConcludeTransactionRequest]) (*connect_go.Response[query.ConcludeTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.ConcludeTransaction is not implemented"))
}

func (UnimplementedQueryHandler) ReadTransaction(context.Context, *connect_go.Request[query.ReadTransactionRequest]) (*connect_go.Response[query.ReadTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.ReadTransaction is not implemented"))
}

func (UnimplementedQueryHandler) BeginExecute(context.Context, *connect_go.Request[query.BeginExecuteRequest]) (*connect_go.Response[query.BeginExecuteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.BeginExecute is not implemented"))
}

func (UnimplementedQueryHandler) BeginStreamExecute(context.Context, *connect_go.Request[query.BeginStreamExecuteRequest], *connect_go.ServerStream[query.BeginStreamExecuteResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.BeginStreamExecute is not implemented"))
}

func (UnimplementedQueryHandler) MessageStream(context.Context, *connect_go.Request[query.MessageStreamRequest], *connect_go.ServerStream[query.MessageStreamResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.MessageStream is not implemented"))
}

func (UnimplementedQueryHandler) MessageAck(context.Context, *connect_go.Request[query.MessageAckRequest]) (*connect_go.Response[query.MessageAckResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.MessageAck is not implemented"))
}

func (UnimplementedQueryHandler) ReserveExecute(context.Context, *connect_go.Request[query.ReserveExecuteRequest]) (*connect_go.Response[query.ReserveExecuteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.ReserveExecute is not implemented"))
}

func (UnimplementedQueryHandler) ReserveBeginExecute(context.Context, *connect_go.Request[query.ReserveBeginExecuteRequest]) (*connect_go.Response[query.ReserveBeginExecuteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.ReserveBeginExecute is not implemented"))
}

func (UnimplementedQueryHandler) ReserveStreamExecute(context.Context, *connect_go.Request[query.ReserveStreamExecuteRequest], *connect_go.ServerStream[query.ReserveStreamExecuteResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.ReserveStreamExecute is not implemented"))
}

func (UnimplementedQueryHandler) ReserveBeginStreamExecute(context.Context, *connect_go.Request[query.ReserveBeginStreamExecuteRequest], *connect_go.ServerStream[query.ReserveBeginStreamExecuteResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.ReserveBeginStreamExecute is not implemented"))
}

func (UnimplementedQueryHandler) Release(context.Context, *connect_go.Request[query.ReleaseRequest]) (*connect_go.Response[query.ReleaseResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.Release is not implemented"))
}

func (UnimplementedQueryHandler) StreamHealth(context.Context, *connect_go.Request[query.StreamHealthRequest], *connect_go.ServerStream[query.StreamHealthResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.StreamHealth is not implemented"))
}

func (UnimplementedQueryHandler) VStream(context.Context, *connect_go.Request[binlogdata.VStreamRequest], *connect_go.ServerStream[binlogdata.VStreamResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.VStream is not implemented"))
}

func (UnimplementedQueryHandler) VStreamRows(context.Context, *connect_go.Request[binlogdata.VStreamRowsRequest], *connect_go.ServerStream[binlogdata.VStreamRowsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.VStreamRows is not implemented"))
}

func (UnimplementedQueryHandler) VStreamResults(context.Context, *connect_go.Request[binlogdata.VStreamResultsRequest], *connect_go.ServerStream[binlogdata.VStreamResultsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("queryservice.Query.VStreamResults is not implemented"))
}
