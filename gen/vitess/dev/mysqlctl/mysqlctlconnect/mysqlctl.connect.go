// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mysqlctl/mysqlctl.proto

package mysqlctlconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	mysqlctl "github.com/planetscale/vitess-types/gen/vitess/dev/mysqlctl"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MysqlCtlName is the fully-qualified name of the MysqlCtl service.
	MysqlCtlName = "mysqlctl.MysqlCtl"
)

// MysqlCtlClient is a client for the mysqlctl.MysqlCtl service.
type MysqlCtlClient interface {
	Start(context.Context, *connect_go.Request[mysqlctl.StartRequest]) (*connect_go.Response[mysqlctl.StartResponse], error)
	Shutdown(context.Context, *connect_go.Request[mysqlctl.ShutdownRequest]) (*connect_go.Response[mysqlctl.ShutdownResponse], error)
	RunMysqlUpgrade(context.Context, *connect_go.Request[mysqlctl.RunMysqlUpgradeRequest]) (*connect_go.Response[mysqlctl.RunMysqlUpgradeResponse], error)
	ReinitConfig(context.Context, *connect_go.Request[mysqlctl.ReinitConfigRequest]) (*connect_go.Response[mysqlctl.ReinitConfigResponse], error)
	RefreshConfig(context.Context, *connect_go.Request[mysqlctl.RefreshConfigRequest]) (*connect_go.Response[mysqlctl.RefreshConfigResponse], error)
}

// NewMysqlCtlClient constructs a client for the mysqlctl.MysqlCtl service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMysqlCtlClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MysqlCtlClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mysqlCtlClient{
		start: connect_go.NewClient[mysqlctl.StartRequest, mysqlctl.StartResponse](
			httpClient,
			baseURL+"/mysqlctl.MysqlCtl/Start",
			opts...,
		),
		shutdown: connect_go.NewClient[mysqlctl.ShutdownRequest, mysqlctl.ShutdownResponse](
			httpClient,
			baseURL+"/mysqlctl.MysqlCtl/Shutdown",
			opts...,
		),
		runMysqlUpgrade: connect_go.NewClient[mysqlctl.RunMysqlUpgradeRequest, mysqlctl.RunMysqlUpgradeResponse](
			httpClient,
			baseURL+"/mysqlctl.MysqlCtl/RunMysqlUpgrade",
			opts...,
		),
		reinitConfig: connect_go.NewClient[mysqlctl.ReinitConfigRequest, mysqlctl.ReinitConfigResponse](
			httpClient,
			baseURL+"/mysqlctl.MysqlCtl/ReinitConfig",
			opts...,
		),
		refreshConfig: connect_go.NewClient[mysqlctl.RefreshConfigRequest, mysqlctl.RefreshConfigResponse](
			httpClient,
			baseURL+"/mysqlctl.MysqlCtl/RefreshConfig",
			opts...,
		),
	}
}

// mysqlCtlClient implements MysqlCtlClient.
type mysqlCtlClient struct {
	start           *connect_go.Client[mysqlctl.StartRequest, mysqlctl.StartResponse]
	shutdown        *connect_go.Client[mysqlctl.ShutdownRequest, mysqlctl.ShutdownResponse]
	runMysqlUpgrade *connect_go.Client[mysqlctl.RunMysqlUpgradeRequest, mysqlctl.RunMysqlUpgradeResponse]
	reinitConfig    *connect_go.Client[mysqlctl.ReinitConfigRequest, mysqlctl.ReinitConfigResponse]
	refreshConfig   *connect_go.Client[mysqlctl.RefreshConfigRequest, mysqlctl.RefreshConfigResponse]
}

// Start calls mysqlctl.MysqlCtl.Start.
func (c *mysqlCtlClient) Start(ctx context.Context, req *connect_go.Request[mysqlctl.StartRequest]) (*connect_go.Response[mysqlctl.StartResponse], error) {
	return c.start.CallUnary(ctx, req)
}

// Shutdown calls mysqlctl.MysqlCtl.Shutdown.
func (c *mysqlCtlClient) Shutdown(ctx context.Context, req *connect_go.Request[mysqlctl.ShutdownRequest]) (*connect_go.Response[mysqlctl.ShutdownResponse], error) {
	return c.shutdown.CallUnary(ctx, req)
}

// RunMysqlUpgrade calls mysqlctl.MysqlCtl.RunMysqlUpgrade.
func (c *mysqlCtlClient) RunMysqlUpgrade(ctx context.Context, req *connect_go.Request[mysqlctl.RunMysqlUpgradeRequest]) (*connect_go.Response[mysqlctl.RunMysqlUpgradeResponse], error) {
	return c.runMysqlUpgrade.CallUnary(ctx, req)
}

// ReinitConfig calls mysqlctl.MysqlCtl.ReinitConfig.
func (c *mysqlCtlClient) ReinitConfig(ctx context.Context, req *connect_go.Request[mysqlctl.ReinitConfigRequest]) (*connect_go.Response[mysqlctl.ReinitConfigResponse], error) {
	return c.reinitConfig.CallUnary(ctx, req)
}

// RefreshConfig calls mysqlctl.MysqlCtl.RefreshConfig.
func (c *mysqlCtlClient) RefreshConfig(ctx context.Context, req *connect_go.Request[mysqlctl.RefreshConfigRequest]) (*connect_go.Response[mysqlctl.RefreshConfigResponse], error) {
	return c.refreshConfig.CallUnary(ctx, req)
}

// MysqlCtlHandler is an implementation of the mysqlctl.MysqlCtl service.
type MysqlCtlHandler interface {
	Start(context.Context, *connect_go.Request[mysqlctl.StartRequest]) (*connect_go.Response[mysqlctl.StartResponse], error)
	Shutdown(context.Context, *connect_go.Request[mysqlctl.ShutdownRequest]) (*connect_go.Response[mysqlctl.ShutdownResponse], error)
	RunMysqlUpgrade(context.Context, *connect_go.Request[mysqlctl.RunMysqlUpgradeRequest]) (*connect_go.Response[mysqlctl.RunMysqlUpgradeResponse], error)
	ReinitConfig(context.Context, *connect_go.Request[mysqlctl.ReinitConfigRequest]) (*connect_go.Response[mysqlctl.ReinitConfigResponse], error)
	RefreshConfig(context.Context, *connect_go.Request[mysqlctl.RefreshConfigRequest]) (*connect_go.Response[mysqlctl.RefreshConfigResponse], error)
}

// NewMysqlCtlHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMysqlCtlHandler(svc MysqlCtlHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/mysqlctl.MysqlCtl/Start", connect_go.NewUnaryHandler(
		"/mysqlctl.MysqlCtl/Start",
		svc.Start,
		opts...,
	))
	mux.Handle("/mysqlctl.MysqlCtl/Shutdown", connect_go.NewUnaryHandler(
		"/mysqlctl.MysqlCtl/Shutdown",
		svc.Shutdown,
		opts...,
	))
	mux.Handle("/mysqlctl.MysqlCtl/RunMysqlUpgrade", connect_go.NewUnaryHandler(
		"/mysqlctl.MysqlCtl/RunMysqlUpgrade",
		svc.RunMysqlUpgrade,
		opts...,
	))
	mux.Handle("/mysqlctl.MysqlCtl/ReinitConfig", connect_go.NewUnaryHandler(
		"/mysqlctl.MysqlCtl/ReinitConfig",
		svc.ReinitConfig,
		opts...,
	))
	mux.Handle("/mysqlctl.MysqlCtl/RefreshConfig", connect_go.NewUnaryHandler(
		"/mysqlctl.MysqlCtl/RefreshConfig",
		svc.RefreshConfig,
		opts...,
	))
	return "/mysqlctl.MysqlCtl/", mux
}

// UnimplementedMysqlCtlHandler returns CodeUnimplemented from all methods.
type UnimplementedMysqlCtlHandler struct{}

func (UnimplementedMysqlCtlHandler) Start(context.Context, *connect_go.Request[mysqlctl.StartRequest]) (*connect_go.Response[mysqlctl.StartResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mysqlctl.MysqlCtl.Start is not implemented"))
}

func (UnimplementedMysqlCtlHandler) Shutdown(context.Context, *connect_go.Request[mysqlctl.ShutdownRequest]) (*connect_go.Response[mysqlctl.ShutdownResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mysqlctl.MysqlCtl.Shutdown is not implemented"))
}

func (UnimplementedMysqlCtlHandler) RunMysqlUpgrade(context.Context, *connect_go.Request[mysqlctl.RunMysqlUpgradeRequest]) (*connect_go.Response[mysqlctl.RunMysqlUpgradeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mysqlctl.MysqlCtl.RunMysqlUpgrade is not implemented"))
}

func (UnimplementedMysqlCtlHandler) ReinitConfig(context.Context, *connect_go.Request[mysqlctl.ReinitConfigRequest]) (*connect_go.Response[mysqlctl.ReinitConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mysqlctl.MysqlCtl.ReinitConfig is not implemented"))
}

func (UnimplementedMysqlCtlHandler) RefreshConfig(context.Context, *connect_go.Request[mysqlctl.RefreshConfigRequest]) (*connect_go.Response[mysqlctl.RefreshConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mysqlctl.MysqlCtl.RefreshConfig is not implemented"))
}
