// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vtadmin/vtadmin.proto

package vtadminconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	vtadmin "github.com/planetscale/vitess-types/gen/vitess/dev/vtadmin"
	vtctldata "github.com/planetscale/vitess-types/gen/vitess/dev/vtctldata"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// VTAdminName is the fully-qualified name of the VTAdmin service.
	VTAdminName = "vtadmin.VTAdmin"
)

// VTAdminClient is a client for the vtadmin.VTAdmin service.
type VTAdminClient interface {
	// CreateKeyspace creates a new keyspace in the given cluster.
	CreateKeyspace(context.Context, *connect_go.Request[vtadmin.CreateKeyspaceRequest]) (*connect_go.Response[vtadmin.CreateKeyspaceResponse], error)
	// CreateShard creates a new shard in the given cluster and keyspace.
	CreateShard(context.Context, *connect_go.Request[vtadmin.CreateShardRequest]) (*connect_go.Response[vtctldata.CreateShardResponse], error)
	// DeleteKeyspace deletes a keyspace in the given cluster.
	DeleteKeyspace(context.Context, *connect_go.Request[vtadmin.DeleteKeyspaceRequest]) (*connect_go.Response[vtctldata.DeleteKeyspaceResponse], error)
	// DeleteShard deletes one or more shards in the given cluster and keyspace.
	DeleteShards(context.Context, *connect_go.Request[vtadmin.DeleteShardsRequest]) (*connect_go.Response[vtctldata.DeleteShardsResponse], error)
	// DeleteTablet deletes a tablet from the topology
	DeleteTablet(context.Context, *connect_go.Request[vtadmin.DeleteTabletRequest]) (*connect_go.Response[vtadmin.DeleteTabletResponse], error)
	// EmergencyFailoverShard fails over a shard to a new primary. It assumes
	// the old primary is dead or otherwise not responding.
	EmergencyFailoverShard(context.Context, *connect_go.Request[vtadmin.EmergencyFailoverShardRequest]) (*connect_go.Response[vtadmin.EmergencyFailoverShardResponse], error)
	// FindSchema returns a single Schema that matches the provided table name
	// across all specified clusters IDs. Not specifying a set of cluster IDs
	// causes the search to span all configured clusters.
	//
	// An error occurs if either no table exists across any of the clusters with
	// the specified table name, or if multiple tables exist with that name.
	FindSchema(context.Context, *connect_go.Request[vtadmin.FindSchemaRequest]) (*connect_go.Response[vtadmin.Schema], error)
	// GetBackups returns backups grouped by cluster.
	GetBackups(context.Context, *connect_go.Request[vtadmin.GetBackupsRequest]) (*connect_go.Response[vtadmin.GetBackupsResponse], error)
	// GetCellInfos returns the CellInfo objects for the specified clusters.
	//
	// Callers may optionally restrict the set of CellInfos, or restrict the
	// response to include only cell names.
	GetCellInfos(context.Context, *connect_go.Request[vtadmin.GetCellInfosRequest]) (*connect_go.Response[vtadmin.GetCellInfosResponse], error)
	// GetCellsAliases returns the CellsAliases data for the specified clusters.
	GetCellsAliases(context.Context, *connect_go.Request[vtadmin.GetCellsAliasesRequest]) (*connect_go.Response[vtadmin.GetCellsAliasesResponse], error)
	// GetClusters returns all configured clusters.
	GetClusters(context.Context, *connect_go.Request[vtadmin.GetClustersRequest]) (*connect_go.Response[vtadmin.GetClustersResponse], error)
	// GetFullStatus returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	GetFullStatus(context.Context, *connect_go.Request[vtadmin.GetFullStatusRequest]) (*connect_go.Response[vtctldata.GetFullStatusResponse], error)
	// GetGates returns all gates across all the specified clusters.
	GetGates(context.Context, *connect_go.Request[vtadmin.GetGatesRequest]) (*connect_go.Response[vtadmin.GetGatesResponse], error)
	// GetKeyspace returns a keyspace by name in the specified cluster.
	GetKeyspace(context.Context, *connect_go.Request[vtadmin.GetKeyspaceRequest]) (*connect_go.Response[vtadmin.Keyspace], error)
	// GetKeyspaces returns all keyspaces across the specified clusters.
	GetKeyspaces(context.Context, *connect_go.Request[vtadmin.GetKeyspacesRequest]) (*connect_go.Response[vtadmin.GetKeyspacesResponse], error)
	// GetSchema returns the schema for the specified (cluster, keyspace, table)
	// tuple.
	GetSchema(context.Context, *connect_go.Request[vtadmin.GetSchemaRequest]) (*connect_go.Response[vtadmin.Schema], error)
	// GetSchemas returns all schemas across the specified clusters.
	GetSchemas(context.Context, *connect_go.Request[vtadmin.GetSchemasRequest]) (*connect_go.Response[vtadmin.GetSchemasResponse], error)
	// GetShardReplicationPositions returns shard replication positions grouped
	// by cluster.
	GetShardReplicationPositions(context.Context, *connect_go.Request[vtadmin.GetShardReplicationPositionsRequest]) (*connect_go.Response[vtadmin.GetShardReplicationPositionsResponse], error)
	// GetSrvVSchema returns the SrvVSchema for the given cluster and cell.
	GetSrvVSchema(context.Context, *connect_go.Request[vtadmin.GetSrvVSchemaRequest]) (*connect_go.Response[vtadmin.SrvVSchema], error)
	// GetSrvVSchemas returns all SrvVSchemas across all (or specified) clusters
	// and cells.
	GetSrvVSchemas(context.Context, *connect_go.Request[vtadmin.GetSrvVSchemasRequest]) (*connect_go.Response[vtadmin.GetSrvVSchemasResponse], error)
	// GetTablet looks up a tablet by hostname across all clusters and returns
	// the result.
	GetTablet(context.Context, *connect_go.Request[vtadmin.GetTabletRequest]) (*connect_go.Response[vtadmin.Tablet], error)
	// GetTablets returns all tablets across all the specified clusters.
	GetTablets(context.Context, *connect_go.Request[vtadmin.GetTabletsRequest]) (*connect_go.Response[vtadmin.GetTabletsResponse], error)
	// GetTopologyPath returns the cell located at the specified path in the topology server.
	GetTopologyPath(context.Context, *connect_go.Request[vtadmin.GetTopologyPathRequest]) (*connect_go.Response[vtctldata.GetTopologyPathResponse], error)
	// GetVSchema returns a VSchema for the specified keyspace in the specified
	// cluster.
	GetVSchema(context.Context, *connect_go.Request[vtadmin.GetVSchemaRequest]) (*connect_go.Response[vtadmin.VSchema], error)
	// GetVSchemas returns the VSchemas for all specified clusters.
	GetVSchemas(context.Context, *connect_go.Request[vtadmin.GetVSchemasRequest]) (*connect_go.Response[vtadmin.GetVSchemasResponse], error)
	// GetVtctlds returns the Vtctlds for all specified clusters.
	GetVtctlds(context.Context, *connect_go.Request[vtadmin.GetVtctldsRequest]) (*connect_go.Response[vtadmin.GetVtctldsResponse], error)
	// GetWorkflow returns a single Workflow for a given cluster, keyspace, and
	// workflow name.
	GetWorkflow(context.Context, *connect_go.Request[vtadmin.GetWorkflowRequest]) (*connect_go.Response[vtadmin.Workflow], error)
	// GetWorkflows returns the Workflows for all specified clusters.
	GetWorkflows(context.Context, *connect_go.Request[vtadmin.GetWorkflowsRequest]) (*connect_go.Response[vtadmin.GetWorkflowsResponse], error)
	// PingTablet checks that the specified tablet is awake and responding to
	// RPCs. This command can be blocked by other in-flight operations.
	PingTablet(context.Context, *connect_go.Request[vtadmin.PingTabletRequest]) (*connect_go.Response[vtadmin.PingTabletResponse], error)
	// PlannedFailoverShard fails over the shard to a new primary, or away from
	// an old primary. Both the old and new primaries must be reachable and
	// running.
	//
	// NOTE: A planned failover will not consider replicas outside the current
	// shard primary's cell as promotion candidates unless NewPrimary is
	// explicitly provided in the request.
	PlannedFailoverShard(context.Context, *connect_go.Request[vtadmin.PlannedFailoverShardRequest]) (*connect_go.Response[vtadmin.PlannedFailoverShardResponse], error)
	// RebuildKeyspaceGraph rebuilds the serving data for a keyspace.
	RebuildKeyspaceGraph(context.Context, *connect_go.Request[vtadmin.RebuildKeyspaceGraphRequest]) (*connect_go.Response[vtadmin.RebuildKeyspaceGraphResponse], error)
	// RefreshState reloads the tablet record on the specified tablet.
	RefreshState(context.Context, *connect_go.Request[vtadmin.RefreshStateRequest]) (*connect_go.Response[vtadmin.RefreshStateResponse], error)
	// RefreshTabletReplicationSource performs a `CHANGE REPLICATION SOURCE TO`
	// on a tablet to replicate from the current primary in the shard.
	RefreshTabletReplicationSource(context.Context, *connect_go.Request[vtadmin.RefreshTabletReplicationSourceRequest]) (*connect_go.Response[vtadmin.RefreshTabletReplicationSourceResponse], error)
	// ReloadSchemas reloads the schema definition across keyspaces, shards, or
	// tablets in one or more clusters, depending on the request fields (see
	// ReloadSchemasRequest for details).
	ReloadSchemas(context.Context, *connect_go.Request[vtadmin.ReloadSchemasRequest]) (*connect_go.Response[vtadmin.ReloadSchemasResponse], error)
	// ReloadSchemaShard reloads the schema on all tablets in a shard. This is done on a best-effort basis.
	ReloadSchemaShard(context.Context, *connect_go.Request[vtadmin.ReloadSchemaShardRequest]) (*connect_go.Response[vtadmin.ReloadSchemaShardResponse], error)
	// RemoveKeyspaceCell removes the cell from the Cells list for all shards in the keyspace, and the SrvKeyspace for that keyspace in that cell.
	RemoveKeyspaceCell(context.Context, *connect_go.Request[vtadmin.RemoveKeyspaceCellRequest]) (*connect_go.Response[vtadmin.RemoveKeyspaceCellResponse], error)
	// RunHealthCheck runs a healthcheck on the tablet.
	RunHealthCheck(context.Context, *connect_go.Request[vtadmin.RunHealthCheckRequest]) (*connect_go.Response[vtadmin.RunHealthCheckResponse], error)
	// SetReadOnly sets the tablet to read-only mode.
	SetReadOnly(context.Context, *connect_go.Request[vtadmin.SetReadOnlyRequest]) (*connect_go.Response[vtadmin.SetReadOnlyResponse], error)
	// SetReadWrite sets the tablet to read-write mode.
	SetReadWrite(context.Context, *connect_go.Request[vtadmin.SetReadWriteRequest]) (*connect_go.Response[vtadmin.SetReadWriteResponse], error)
	// StartReplication runs the underlying database command to start
	// replication on a tablet.
	StartReplication(context.Context, *connect_go.Request[vtadmin.StartReplicationRequest]) (*connect_go.Response[vtadmin.StartReplicationResponse], error)
	// StopReplication runs the underlying database command to stop replication
	// on a tablet
	StopReplication(context.Context, *connect_go.Request[vtadmin.StopReplicationRequest]) (*connect_go.Response[vtadmin.StopReplicationResponse], error)
	// TabletExternallyPromoted updates the metadata in a cluster's topology
	// to acknowledge a shard primary change performed by an external tool
	// (e.g. orchestrator*).
	//
	// See the Reparenting guide for more information:
	// https://vitess.io/docs/user-guides/configuration-advanced/reparenting/#external-reparenting.
	//
	// * "orchestrator" here refers to external orchestrator, not the newer,
	// Vitess-aware orchestrator, VTOrc.
	TabletExternallyPromoted(context.Context, *connect_go.Request[vtadmin.TabletExternallyPromotedRequest]) (*connect_go.Response[vtadmin.TabletExternallyPromotedResponse], error)
	// Validate validates all nodes in a cluster that are reachable from the global replication graph,
	// as well as all tablets in discoverable cells, are consistent
	Validate(context.Context, *connect_go.Request[vtadmin.ValidateRequest]) (*connect_go.Response[vtctldata.ValidateResponse], error)
	// ValidateKeyspace validates that all nodes reachable from the specified
	// keyspace are consistent.
	ValidateKeyspace(context.Context, *connect_go.Request[vtadmin.ValidateKeyspaceRequest]) (*connect_go.Response[vtctldata.ValidateKeyspaceResponse], error)
	// ValidateSchemaKeyspace validates that the schema on the primary tablet
	// for shard 0 matches the schema on all of the other tablets in the
	// keyspace.
	ValidateSchemaKeyspace(context.Context, *connect_go.Request[vtadmin.ValidateSchemaKeyspaceRequest]) (*connect_go.Response[vtctldata.ValidateSchemaKeyspaceResponse], error)
	// ValidateShard validates that that all nodes reachable from the specified shard are consistent.
	ValidateShard(context.Context, *connect_go.Request[vtadmin.ValidateShardRequest]) (*connect_go.Response[vtctldata.ValidateShardResponse], error)
	// ValidateVersionKeyspace validates that the version on the primary of
	// shard 0 matches all of the other tablets in the keyspace.
	ValidateVersionKeyspace(context.Context, *connect_go.Request[vtadmin.ValidateVersionKeyspaceRequest]) (*connect_go.Response[vtctldata.ValidateVersionKeyspaceResponse], error)
	// ValidateVersionShard validates that the version on the primary matches all of the replicas.
	ValidateVersionShard(context.Context, *connect_go.Request[vtadmin.ValidateVersionShardRequest]) (*connect_go.Response[vtctldata.ValidateVersionShardResponse], error)
	// VTExplain provides information on how Vitess plans to execute a
	// particular query.
	VTExplain(context.Context, *connect_go.Request[vtadmin.VTExplainRequest]) (*connect_go.Response[vtadmin.VTExplainResponse], error)
}

// NewVTAdminClient constructs a client for the vtadmin.VTAdmin service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVTAdminClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VTAdminClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vTAdminClient{
		createKeyspace: connect_go.NewClient[vtadmin.CreateKeyspaceRequest, vtadmin.CreateKeyspaceResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/CreateKeyspace",
			opts...,
		),
		createShard: connect_go.NewClient[vtadmin.CreateShardRequest, vtctldata.CreateShardResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/CreateShard",
			opts...,
		),
		deleteKeyspace: connect_go.NewClient[vtadmin.DeleteKeyspaceRequest, vtctldata.DeleteKeyspaceResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/DeleteKeyspace",
			opts...,
		),
		deleteShards: connect_go.NewClient[vtadmin.DeleteShardsRequest, vtctldata.DeleteShardsResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/DeleteShards",
			opts...,
		),
		deleteTablet: connect_go.NewClient[vtadmin.DeleteTabletRequest, vtadmin.DeleteTabletResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/DeleteTablet",
			opts...,
		),
		emergencyFailoverShard: connect_go.NewClient[vtadmin.EmergencyFailoverShardRequest, vtadmin.EmergencyFailoverShardResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/EmergencyFailoverShard",
			opts...,
		),
		findSchema: connect_go.NewClient[vtadmin.FindSchemaRequest, vtadmin.Schema](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/FindSchema",
			opts...,
		),
		getBackups: connect_go.NewClient[vtadmin.GetBackupsRequest, vtadmin.GetBackupsResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetBackups",
			opts...,
		),
		getCellInfos: connect_go.NewClient[vtadmin.GetCellInfosRequest, vtadmin.GetCellInfosResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetCellInfos",
			opts...,
		),
		getCellsAliases: connect_go.NewClient[vtadmin.GetCellsAliasesRequest, vtadmin.GetCellsAliasesResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetCellsAliases",
			opts...,
		),
		getClusters: connect_go.NewClient[vtadmin.GetClustersRequest, vtadmin.GetClustersResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetClusters",
			opts...,
		),
		getFullStatus: connect_go.NewClient[vtadmin.GetFullStatusRequest, vtctldata.GetFullStatusResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetFullStatus",
			opts...,
		),
		getGates: connect_go.NewClient[vtadmin.GetGatesRequest, vtadmin.GetGatesResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetGates",
			opts...,
		),
		getKeyspace: connect_go.NewClient[vtadmin.GetKeyspaceRequest, vtadmin.Keyspace](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetKeyspace",
			opts...,
		),
		getKeyspaces: connect_go.NewClient[vtadmin.GetKeyspacesRequest, vtadmin.GetKeyspacesResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetKeyspaces",
			opts...,
		),
		getSchema: connect_go.NewClient[vtadmin.GetSchemaRequest, vtadmin.Schema](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetSchema",
			opts...,
		),
		getSchemas: connect_go.NewClient[vtadmin.GetSchemasRequest, vtadmin.GetSchemasResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetSchemas",
			opts...,
		),
		getShardReplicationPositions: connect_go.NewClient[vtadmin.GetShardReplicationPositionsRequest, vtadmin.GetShardReplicationPositionsResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetShardReplicationPositions",
			opts...,
		),
		getSrvVSchema: connect_go.NewClient[vtadmin.GetSrvVSchemaRequest, vtadmin.SrvVSchema](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetSrvVSchema",
			opts...,
		),
		getSrvVSchemas: connect_go.NewClient[vtadmin.GetSrvVSchemasRequest, vtadmin.GetSrvVSchemasResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetSrvVSchemas",
			opts...,
		),
		getTablet: connect_go.NewClient[vtadmin.GetTabletRequest, vtadmin.Tablet](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetTablet",
			opts...,
		),
		getTablets: connect_go.NewClient[vtadmin.GetTabletsRequest, vtadmin.GetTabletsResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetTablets",
			opts...,
		),
		getTopologyPath: connect_go.NewClient[vtadmin.GetTopologyPathRequest, vtctldata.GetTopologyPathResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetTopologyPath",
			opts...,
		),
		getVSchema: connect_go.NewClient[vtadmin.GetVSchemaRequest, vtadmin.VSchema](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetVSchema",
			opts...,
		),
		getVSchemas: connect_go.NewClient[vtadmin.GetVSchemasRequest, vtadmin.GetVSchemasResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetVSchemas",
			opts...,
		),
		getVtctlds: connect_go.NewClient[vtadmin.GetVtctldsRequest, vtadmin.GetVtctldsResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetVtctlds",
			opts...,
		),
		getWorkflow: connect_go.NewClient[vtadmin.GetWorkflowRequest, vtadmin.Workflow](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetWorkflow",
			opts...,
		),
		getWorkflows: connect_go.NewClient[vtadmin.GetWorkflowsRequest, vtadmin.GetWorkflowsResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/GetWorkflows",
			opts...,
		),
		pingTablet: connect_go.NewClient[vtadmin.PingTabletRequest, vtadmin.PingTabletResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/PingTablet",
			opts...,
		),
		plannedFailoverShard: connect_go.NewClient[vtadmin.PlannedFailoverShardRequest, vtadmin.PlannedFailoverShardResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/PlannedFailoverShard",
			opts...,
		),
		rebuildKeyspaceGraph: connect_go.NewClient[vtadmin.RebuildKeyspaceGraphRequest, vtadmin.RebuildKeyspaceGraphResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/RebuildKeyspaceGraph",
			opts...,
		),
		refreshState: connect_go.NewClient[vtadmin.RefreshStateRequest, vtadmin.RefreshStateResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/RefreshState",
			opts...,
		),
		refreshTabletReplicationSource: connect_go.NewClient[vtadmin.RefreshTabletReplicationSourceRequest, vtadmin.RefreshTabletReplicationSourceResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/RefreshTabletReplicationSource",
			opts...,
		),
		reloadSchemas: connect_go.NewClient[vtadmin.ReloadSchemasRequest, vtadmin.ReloadSchemasResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/ReloadSchemas",
			opts...,
		),
		reloadSchemaShard: connect_go.NewClient[vtadmin.ReloadSchemaShardRequest, vtadmin.ReloadSchemaShardResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/ReloadSchemaShard",
			opts...,
		),
		removeKeyspaceCell: connect_go.NewClient[vtadmin.RemoveKeyspaceCellRequest, vtadmin.RemoveKeyspaceCellResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/RemoveKeyspaceCell",
			opts...,
		),
		runHealthCheck: connect_go.NewClient[vtadmin.RunHealthCheckRequest, vtadmin.RunHealthCheckResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/RunHealthCheck",
			opts...,
		),
		setReadOnly: connect_go.NewClient[vtadmin.SetReadOnlyRequest, vtadmin.SetReadOnlyResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/SetReadOnly",
			opts...,
		),
		setReadWrite: connect_go.NewClient[vtadmin.SetReadWriteRequest, vtadmin.SetReadWriteResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/SetReadWrite",
			opts...,
		),
		startReplication: connect_go.NewClient[vtadmin.StartReplicationRequest, vtadmin.StartReplicationResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/StartReplication",
			opts...,
		),
		stopReplication: connect_go.NewClient[vtadmin.StopReplicationRequest, vtadmin.StopReplicationResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/StopReplication",
			opts...,
		),
		tabletExternallyPromoted: connect_go.NewClient[vtadmin.TabletExternallyPromotedRequest, vtadmin.TabletExternallyPromotedResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/TabletExternallyPromoted",
			opts...,
		),
		validate: connect_go.NewClient[vtadmin.ValidateRequest, vtctldata.ValidateResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/Validate",
			opts...,
		),
		validateKeyspace: connect_go.NewClient[vtadmin.ValidateKeyspaceRequest, vtctldata.ValidateKeyspaceResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/ValidateKeyspace",
			opts...,
		),
		validateSchemaKeyspace: connect_go.NewClient[vtadmin.ValidateSchemaKeyspaceRequest, vtctldata.ValidateSchemaKeyspaceResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/ValidateSchemaKeyspace",
			opts...,
		),
		validateShard: connect_go.NewClient[vtadmin.ValidateShardRequest, vtctldata.ValidateShardResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/ValidateShard",
			opts...,
		),
		validateVersionKeyspace: connect_go.NewClient[vtadmin.ValidateVersionKeyspaceRequest, vtctldata.ValidateVersionKeyspaceResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/ValidateVersionKeyspace",
			opts...,
		),
		validateVersionShard: connect_go.NewClient[vtadmin.ValidateVersionShardRequest, vtctldata.ValidateVersionShardResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/ValidateVersionShard",
			opts...,
		),
		vTExplain: connect_go.NewClient[vtadmin.VTExplainRequest, vtadmin.VTExplainResponse](
			httpClient,
			baseURL+"/vtadmin.VTAdmin/VTExplain",
			opts...,
		),
	}
}

// vTAdminClient implements VTAdminClient.
type vTAdminClient struct {
	createKeyspace                 *connect_go.Client[vtadmin.CreateKeyspaceRequest, vtadmin.CreateKeyspaceResponse]
	createShard                    *connect_go.Client[vtadmin.CreateShardRequest, vtctldata.CreateShardResponse]
	deleteKeyspace                 *connect_go.Client[vtadmin.DeleteKeyspaceRequest, vtctldata.DeleteKeyspaceResponse]
	deleteShards                   *connect_go.Client[vtadmin.DeleteShardsRequest, vtctldata.DeleteShardsResponse]
	deleteTablet                   *connect_go.Client[vtadmin.DeleteTabletRequest, vtadmin.DeleteTabletResponse]
	emergencyFailoverShard         *connect_go.Client[vtadmin.EmergencyFailoverShardRequest, vtadmin.EmergencyFailoverShardResponse]
	findSchema                     *connect_go.Client[vtadmin.FindSchemaRequest, vtadmin.Schema]
	getBackups                     *connect_go.Client[vtadmin.GetBackupsRequest, vtadmin.GetBackupsResponse]
	getCellInfos                   *connect_go.Client[vtadmin.GetCellInfosRequest, vtadmin.GetCellInfosResponse]
	getCellsAliases                *connect_go.Client[vtadmin.GetCellsAliasesRequest, vtadmin.GetCellsAliasesResponse]
	getClusters                    *connect_go.Client[vtadmin.GetClustersRequest, vtadmin.GetClustersResponse]
	getFullStatus                  *connect_go.Client[vtadmin.GetFullStatusRequest, vtctldata.GetFullStatusResponse]
	getGates                       *connect_go.Client[vtadmin.GetGatesRequest, vtadmin.GetGatesResponse]
	getKeyspace                    *connect_go.Client[vtadmin.GetKeyspaceRequest, vtadmin.Keyspace]
	getKeyspaces                   *connect_go.Client[vtadmin.GetKeyspacesRequest, vtadmin.GetKeyspacesResponse]
	getSchema                      *connect_go.Client[vtadmin.GetSchemaRequest, vtadmin.Schema]
	getSchemas                     *connect_go.Client[vtadmin.GetSchemasRequest, vtadmin.GetSchemasResponse]
	getShardReplicationPositions   *connect_go.Client[vtadmin.GetShardReplicationPositionsRequest, vtadmin.GetShardReplicationPositionsResponse]
	getSrvVSchema                  *connect_go.Client[vtadmin.GetSrvVSchemaRequest, vtadmin.SrvVSchema]
	getSrvVSchemas                 *connect_go.Client[vtadmin.GetSrvVSchemasRequest, vtadmin.GetSrvVSchemasResponse]
	getTablet                      *connect_go.Client[vtadmin.GetTabletRequest, vtadmin.Tablet]
	getTablets                     *connect_go.Client[vtadmin.GetTabletsRequest, vtadmin.GetTabletsResponse]
	getTopologyPath                *connect_go.Client[vtadmin.GetTopologyPathRequest, vtctldata.GetTopologyPathResponse]
	getVSchema                     *connect_go.Client[vtadmin.GetVSchemaRequest, vtadmin.VSchema]
	getVSchemas                    *connect_go.Client[vtadmin.GetVSchemasRequest, vtadmin.GetVSchemasResponse]
	getVtctlds                     *connect_go.Client[vtadmin.GetVtctldsRequest, vtadmin.GetVtctldsResponse]
	getWorkflow                    *connect_go.Client[vtadmin.GetWorkflowRequest, vtadmin.Workflow]
	getWorkflows                   *connect_go.Client[vtadmin.GetWorkflowsRequest, vtadmin.GetWorkflowsResponse]
	pingTablet                     *connect_go.Client[vtadmin.PingTabletRequest, vtadmin.PingTabletResponse]
	plannedFailoverShard           *connect_go.Client[vtadmin.PlannedFailoverShardRequest, vtadmin.PlannedFailoverShardResponse]
	rebuildKeyspaceGraph           *connect_go.Client[vtadmin.RebuildKeyspaceGraphRequest, vtadmin.RebuildKeyspaceGraphResponse]
	refreshState                   *connect_go.Client[vtadmin.RefreshStateRequest, vtadmin.RefreshStateResponse]
	refreshTabletReplicationSource *connect_go.Client[vtadmin.RefreshTabletReplicationSourceRequest, vtadmin.RefreshTabletReplicationSourceResponse]
	reloadSchemas                  *connect_go.Client[vtadmin.ReloadSchemasRequest, vtadmin.ReloadSchemasResponse]
	reloadSchemaShard              *connect_go.Client[vtadmin.ReloadSchemaShardRequest, vtadmin.ReloadSchemaShardResponse]
	removeKeyspaceCell             *connect_go.Client[vtadmin.RemoveKeyspaceCellRequest, vtadmin.RemoveKeyspaceCellResponse]
	runHealthCheck                 *connect_go.Client[vtadmin.RunHealthCheckRequest, vtadmin.RunHealthCheckResponse]
	setReadOnly                    *connect_go.Client[vtadmin.SetReadOnlyRequest, vtadmin.SetReadOnlyResponse]
	setReadWrite                   *connect_go.Client[vtadmin.SetReadWriteRequest, vtadmin.SetReadWriteResponse]
	startReplication               *connect_go.Client[vtadmin.StartReplicationRequest, vtadmin.StartReplicationResponse]
	stopReplication                *connect_go.Client[vtadmin.StopReplicationRequest, vtadmin.StopReplicationResponse]
	tabletExternallyPromoted       *connect_go.Client[vtadmin.TabletExternallyPromotedRequest, vtadmin.TabletExternallyPromotedResponse]
	validate                       *connect_go.Client[vtadmin.ValidateRequest, vtctldata.ValidateResponse]
	validateKeyspace               *connect_go.Client[vtadmin.ValidateKeyspaceRequest, vtctldata.ValidateKeyspaceResponse]
	validateSchemaKeyspace         *connect_go.Client[vtadmin.ValidateSchemaKeyspaceRequest, vtctldata.ValidateSchemaKeyspaceResponse]
	validateShard                  *connect_go.Client[vtadmin.ValidateShardRequest, vtctldata.ValidateShardResponse]
	validateVersionKeyspace        *connect_go.Client[vtadmin.ValidateVersionKeyspaceRequest, vtctldata.ValidateVersionKeyspaceResponse]
	validateVersionShard           *connect_go.Client[vtadmin.ValidateVersionShardRequest, vtctldata.ValidateVersionShardResponse]
	vTExplain                      *connect_go.Client[vtadmin.VTExplainRequest, vtadmin.VTExplainResponse]
}

// CreateKeyspace calls vtadmin.VTAdmin.CreateKeyspace.
func (c *vTAdminClient) CreateKeyspace(ctx context.Context, req *connect_go.Request[vtadmin.CreateKeyspaceRequest]) (*connect_go.Response[vtadmin.CreateKeyspaceResponse], error) {
	return c.createKeyspace.CallUnary(ctx, req)
}

// CreateShard calls vtadmin.VTAdmin.CreateShard.
func (c *vTAdminClient) CreateShard(ctx context.Context, req *connect_go.Request[vtadmin.CreateShardRequest]) (*connect_go.Response[vtctldata.CreateShardResponse], error) {
	return c.createShard.CallUnary(ctx, req)
}

// DeleteKeyspace calls vtadmin.VTAdmin.DeleteKeyspace.
func (c *vTAdminClient) DeleteKeyspace(ctx context.Context, req *connect_go.Request[vtadmin.DeleteKeyspaceRequest]) (*connect_go.Response[vtctldata.DeleteKeyspaceResponse], error) {
	return c.deleteKeyspace.CallUnary(ctx, req)
}

// DeleteShards calls vtadmin.VTAdmin.DeleteShards.
func (c *vTAdminClient) DeleteShards(ctx context.Context, req *connect_go.Request[vtadmin.DeleteShardsRequest]) (*connect_go.Response[vtctldata.DeleteShardsResponse], error) {
	return c.deleteShards.CallUnary(ctx, req)
}

// DeleteTablet calls vtadmin.VTAdmin.DeleteTablet.
func (c *vTAdminClient) DeleteTablet(ctx context.Context, req *connect_go.Request[vtadmin.DeleteTabletRequest]) (*connect_go.Response[vtadmin.DeleteTabletResponse], error) {
	return c.deleteTablet.CallUnary(ctx, req)
}

// EmergencyFailoverShard calls vtadmin.VTAdmin.EmergencyFailoverShard.
func (c *vTAdminClient) EmergencyFailoverShard(ctx context.Context, req *connect_go.Request[vtadmin.EmergencyFailoverShardRequest]) (*connect_go.Response[vtadmin.EmergencyFailoverShardResponse], error) {
	return c.emergencyFailoverShard.CallUnary(ctx, req)
}

// FindSchema calls vtadmin.VTAdmin.FindSchema.
func (c *vTAdminClient) FindSchema(ctx context.Context, req *connect_go.Request[vtadmin.FindSchemaRequest]) (*connect_go.Response[vtadmin.Schema], error) {
	return c.findSchema.CallUnary(ctx, req)
}

// GetBackups calls vtadmin.VTAdmin.GetBackups.
func (c *vTAdminClient) GetBackups(ctx context.Context, req *connect_go.Request[vtadmin.GetBackupsRequest]) (*connect_go.Response[vtadmin.GetBackupsResponse], error) {
	return c.getBackups.CallUnary(ctx, req)
}

// GetCellInfos calls vtadmin.VTAdmin.GetCellInfos.
func (c *vTAdminClient) GetCellInfos(ctx context.Context, req *connect_go.Request[vtadmin.GetCellInfosRequest]) (*connect_go.Response[vtadmin.GetCellInfosResponse], error) {
	return c.getCellInfos.CallUnary(ctx, req)
}

// GetCellsAliases calls vtadmin.VTAdmin.GetCellsAliases.
func (c *vTAdminClient) GetCellsAliases(ctx context.Context, req *connect_go.Request[vtadmin.GetCellsAliasesRequest]) (*connect_go.Response[vtadmin.GetCellsAliasesResponse], error) {
	return c.getCellsAliases.CallUnary(ctx, req)
}

// GetClusters calls vtadmin.VTAdmin.GetClusters.
func (c *vTAdminClient) GetClusters(ctx context.Context, req *connect_go.Request[vtadmin.GetClustersRequest]) (*connect_go.Response[vtadmin.GetClustersResponse], error) {
	return c.getClusters.CallUnary(ctx, req)
}

// GetFullStatus calls vtadmin.VTAdmin.GetFullStatus.
func (c *vTAdminClient) GetFullStatus(ctx context.Context, req *connect_go.Request[vtadmin.GetFullStatusRequest]) (*connect_go.Response[vtctldata.GetFullStatusResponse], error) {
	return c.getFullStatus.CallUnary(ctx, req)
}

// GetGates calls vtadmin.VTAdmin.GetGates.
func (c *vTAdminClient) GetGates(ctx context.Context, req *connect_go.Request[vtadmin.GetGatesRequest]) (*connect_go.Response[vtadmin.GetGatesResponse], error) {
	return c.getGates.CallUnary(ctx, req)
}

// GetKeyspace calls vtadmin.VTAdmin.GetKeyspace.
func (c *vTAdminClient) GetKeyspace(ctx context.Context, req *connect_go.Request[vtadmin.GetKeyspaceRequest]) (*connect_go.Response[vtadmin.Keyspace], error) {
	return c.getKeyspace.CallUnary(ctx, req)
}

// GetKeyspaces calls vtadmin.VTAdmin.GetKeyspaces.
func (c *vTAdminClient) GetKeyspaces(ctx context.Context, req *connect_go.Request[vtadmin.GetKeyspacesRequest]) (*connect_go.Response[vtadmin.GetKeyspacesResponse], error) {
	return c.getKeyspaces.CallUnary(ctx, req)
}

// GetSchema calls vtadmin.VTAdmin.GetSchema.
func (c *vTAdminClient) GetSchema(ctx context.Context, req *connect_go.Request[vtadmin.GetSchemaRequest]) (*connect_go.Response[vtadmin.Schema], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// GetSchemas calls vtadmin.VTAdmin.GetSchemas.
func (c *vTAdminClient) GetSchemas(ctx context.Context, req *connect_go.Request[vtadmin.GetSchemasRequest]) (*connect_go.Response[vtadmin.GetSchemasResponse], error) {
	return c.getSchemas.CallUnary(ctx, req)
}

// GetShardReplicationPositions calls vtadmin.VTAdmin.GetShardReplicationPositions.
func (c *vTAdminClient) GetShardReplicationPositions(ctx context.Context, req *connect_go.Request[vtadmin.GetShardReplicationPositionsRequest]) (*connect_go.Response[vtadmin.GetShardReplicationPositionsResponse], error) {
	return c.getShardReplicationPositions.CallUnary(ctx, req)
}

// GetSrvVSchema calls vtadmin.VTAdmin.GetSrvVSchema.
func (c *vTAdminClient) GetSrvVSchema(ctx context.Context, req *connect_go.Request[vtadmin.GetSrvVSchemaRequest]) (*connect_go.Response[vtadmin.SrvVSchema], error) {
	return c.getSrvVSchema.CallUnary(ctx, req)
}

// GetSrvVSchemas calls vtadmin.VTAdmin.GetSrvVSchemas.
func (c *vTAdminClient) GetSrvVSchemas(ctx context.Context, req *connect_go.Request[vtadmin.GetSrvVSchemasRequest]) (*connect_go.Response[vtadmin.GetSrvVSchemasResponse], error) {
	return c.getSrvVSchemas.CallUnary(ctx, req)
}

// GetTablet calls vtadmin.VTAdmin.GetTablet.
func (c *vTAdminClient) GetTablet(ctx context.Context, req *connect_go.Request[vtadmin.GetTabletRequest]) (*connect_go.Response[vtadmin.Tablet], error) {
	return c.getTablet.CallUnary(ctx, req)
}

// GetTablets calls vtadmin.VTAdmin.GetTablets.
func (c *vTAdminClient) GetTablets(ctx context.Context, req *connect_go.Request[vtadmin.GetTabletsRequest]) (*connect_go.Response[vtadmin.GetTabletsResponse], error) {
	return c.getTablets.CallUnary(ctx, req)
}

// GetTopologyPath calls vtadmin.VTAdmin.GetTopologyPath.
func (c *vTAdminClient) GetTopologyPath(ctx context.Context, req *connect_go.Request[vtadmin.GetTopologyPathRequest]) (*connect_go.Response[vtctldata.GetTopologyPathResponse], error) {
	return c.getTopologyPath.CallUnary(ctx, req)
}

// GetVSchema calls vtadmin.VTAdmin.GetVSchema.
func (c *vTAdminClient) GetVSchema(ctx context.Context, req *connect_go.Request[vtadmin.GetVSchemaRequest]) (*connect_go.Response[vtadmin.VSchema], error) {
	return c.getVSchema.CallUnary(ctx, req)
}

// GetVSchemas calls vtadmin.VTAdmin.GetVSchemas.
func (c *vTAdminClient) GetVSchemas(ctx context.Context, req *connect_go.Request[vtadmin.GetVSchemasRequest]) (*connect_go.Response[vtadmin.GetVSchemasResponse], error) {
	return c.getVSchemas.CallUnary(ctx, req)
}

// GetVtctlds calls vtadmin.VTAdmin.GetVtctlds.
func (c *vTAdminClient) GetVtctlds(ctx context.Context, req *connect_go.Request[vtadmin.GetVtctldsRequest]) (*connect_go.Response[vtadmin.GetVtctldsResponse], error) {
	return c.getVtctlds.CallUnary(ctx, req)
}

// GetWorkflow calls vtadmin.VTAdmin.GetWorkflow.
func (c *vTAdminClient) GetWorkflow(ctx context.Context, req *connect_go.Request[vtadmin.GetWorkflowRequest]) (*connect_go.Response[vtadmin.Workflow], error) {
	return c.getWorkflow.CallUnary(ctx, req)
}

// GetWorkflows calls vtadmin.VTAdmin.GetWorkflows.
func (c *vTAdminClient) GetWorkflows(ctx context.Context, req *connect_go.Request[vtadmin.GetWorkflowsRequest]) (*connect_go.Response[vtadmin.GetWorkflowsResponse], error) {
	return c.getWorkflows.CallUnary(ctx, req)
}

// PingTablet calls vtadmin.VTAdmin.PingTablet.
func (c *vTAdminClient) PingTablet(ctx context.Context, req *connect_go.Request[vtadmin.PingTabletRequest]) (*connect_go.Response[vtadmin.PingTabletResponse], error) {
	return c.pingTablet.CallUnary(ctx, req)
}

// PlannedFailoverShard calls vtadmin.VTAdmin.PlannedFailoverShard.
func (c *vTAdminClient) PlannedFailoverShard(ctx context.Context, req *connect_go.Request[vtadmin.PlannedFailoverShardRequest]) (*connect_go.Response[vtadmin.PlannedFailoverShardResponse], error) {
	return c.plannedFailoverShard.CallUnary(ctx, req)
}

// RebuildKeyspaceGraph calls vtadmin.VTAdmin.RebuildKeyspaceGraph.
func (c *vTAdminClient) RebuildKeyspaceGraph(ctx context.Context, req *connect_go.Request[vtadmin.RebuildKeyspaceGraphRequest]) (*connect_go.Response[vtadmin.RebuildKeyspaceGraphResponse], error) {
	return c.rebuildKeyspaceGraph.CallUnary(ctx, req)
}

// RefreshState calls vtadmin.VTAdmin.RefreshState.
func (c *vTAdminClient) RefreshState(ctx context.Context, req *connect_go.Request[vtadmin.RefreshStateRequest]) (*connect_go.Response[vtadmin.RefreshStateResponse], error) {
	return c.refreshState.CallUnary(ctx, req)
}

// RefreshTabletReplicationSource calls vtadmin.VTAdmin.RefreshTabletReplicationSource.
func (c *vTAdminClient) RefreshTabletReplicationSource(ctx context.Context, req *connect_go.Request[vtadmin.RefreshTabletReplicationSourceRequest]) (*connect_go.Response[vtadmin.RefreshTabletReplicationSourceResponse], error) {
	return c.refreshTabletReplicationSource.CallUnary(ctx, req)
}

// ReloadSchemas calls vtadmin.VTAdmin.ReloadSchemas.
func (c *vTAdminClient) ReloadSchemas(ctx context.Context, req *connect_go.Request[vtadmin.ReloadSchemasRequest]) (*connect_go.Response[vtadmin.ReloadSchemasResponse], error) {
	return c.reloadSchemas.CallUnary(ctx, req)
}

// ReloadSchemaShard calls vtadmin.VTAdmin.ReloadSchemaShard.
func (c *vTAdminClient) ReloadSchemaShard(ctx context.Context, req *connect_go.Request[vtadmin.ReloadSchemaShardRequest]) (*connect_go.Response[vtadmin.ReloadSchemaShardResponse], error) {
	return c.reloadSchemaShard.CallUnary(ctx, req)
}

// RemoveKeyspaceCell calls vtadmin.VTAdmin.RemoveKeyspaceCell.
func (c *vTAdminClient) RemoveKeyspaceCell(ctx context.Context, req *connect_go.Request[vtadmin.RemoveKeyspaceCellRequest]) (*connect_go.Response[vtadmin.RemoveKeyspaceCellResponse], error) {
	return c.removeKeyspaceCell.CallUnary(ctx, req)
}

// RunHealthCheck calls vtadmin.VTAdmin.RunHealthCheck.
func (c *vTAdminClient) RunHealthCheck(ctx context.Context, req *connect_go.Request[vtadmin.RunHealthCheckRequest]) (*connect_go.Response[vtadmin.RunHealthCheckResponse], error) {
	return c.runHealthCheck.CallUnary(ctx, req)
}

// SetReadOnly calls vtadmin.VTAdmin.SetReadOnly.
func (c *vTAdminClient) SetReadOnly(ctx context.Context, req *connect_go.Request[vtadmin.SetReadOnlyRequest]) (*connect_go.Response[vtadmin.SetReadOnlyResponse], error) {
	return c.setReadOnly.CallUnary(ctx, req)
}

// SetReadWrite calls vtadmin.VTAdmin.SetReadWrite.
func (c *vTAdminClient) SetReadWrite(ctx context.Context, req *connect_go.Request[vtadmin.SetReadWriteRequest]) (*connect_go.Response[vtadmin.SetReadWriteResponse], error) {
	return c.setReadWrite.CallUnary(ctx, req)
}

// StartReplication calls vtadmin.VTAdmin.StartReplication.
func (c *vTAdminClient) StartReplication(ctx context.Context, req *connect_go.Request[vtadmin.StartReplicationRequest]) (*connect_go.Response[vtadmin.StartReplicationResponse], error) {
	return c.startReplication.CallUnary(ctx, req)
}

// StopReplication calls vtadmin.VTAdmin.StopReplication.
func (c *vTAdminClient) StopReplication(ctx context.Context, req *connect_go.Request[vtadmin.StopReplicationRequest]) (*connect_go.Response[vtadmin.StopReplicationResponse], error) {
	return c.stopReplication.CallUnary(ctx, req)
}

// TabletExternallyPromoted calls vtadmin.VTAdmin.TabletExternallyPromoted.
func (c *vTAdminClient) TabletExternallyPromoted(ctx context.Context, req *connect_go.Request[vtadmin.TabletExternallyPromotedRequest]) (*connect_go.Response[vtadmin.TabletExternallyPromotedResponse], error) {
	return c.tabletExternallyPromoted.CallUnary(ctx, req)
}

// Validate calls vtadmin.VTAdmin.Validate.
func (c *vTAdminClient) Validate(ctx context.Context, req *connect_go.Request[vtadmin.ValidateRequest]) (*connect_go.Response[vtctldata.ValidateResponse], error) {
	return c.validate.CallUnary(ctx, req)
}

// ValidateKeyspace calls vtadmin.VTAdmin.ValidateKeyspace.
func (c *vTAdminClient) ValidateKeyspace(ctx context.Context, req *connect_go.Request[vtadmin.ValidateKeyspaceRequest]) (*connect_go.Response[vtctldata.ValidateKeyspaceResponse], error) {
	return c.validateKeyspace.CallUnary(ctx, req)
}

// ValidateSchemaKeyspace calls vtadmin.VTAdmin.ValidateSchemaKeyspace.
func (c *vTAdminClient) ValidateSchemaKeyspace(ctx context.Context, req *connect_go.Request[vtadmin.ValidateSchemaKeyspaceRequest]) (*connect_go.Response[vtctldata.ValidateSchemaKeyspaceResponse], error) {
	return c.validateSchemaKeyspace.CallUnary(ctx, req)
}

// ValidateShard calls vtadmin.VTAdmin.ValidateShard.
func (c *vTAdminClient) ValidateShard(ctx context.Context, req *connect_go.Request[vtadmin.ValidateShardRequest]) (*connect_go.Response[vtctldata.ValidateShardResponse], error) {
	return c.validateShard.CallUnary(ctx, req)
}

// ValidateVersionKeyspace calls vtadmin.VTAdmin.ValidateVersionKeyspace.
func (c *vTAdminClient) ValidateVersionKeyspace(ctx context.Context, req *connect_go.Request[vtadmin.ValidateVersionKeyspaceRequest]) (*connect_go.Response[vtctldata.ValidateVersionKeyspaceResponse], error) {
	return c.validateVersionKeyspace.CallUnary(ctx, req)
}

// ValidateVersionShard calls vtadmin.VTAdmin.ValidateVersionShard.
func (c *vTAdminClient) ValidateVersionShard(ctx context.Context, req *connect_go.Request[vtadmin.ValidateVersionShardRequest]) (*connect_go.Response[vtctldata.ValidateVersionShardResponse], error) {
	return c.validateVersionShard.CallUnary(ctx, req)
}

// VTExplain calls vtadmin.VTAdmin.VTExplain.
func (c *vTAdminClient) VTExplain(ctx context.Context, req *connect_go.Request[vtadmin.VTExplainRequest]) (*connect_go.Response[vtadmin.VTExplainResponse], error) {
	return c.vTExplain.CallUnary(ctx, req)
}

// VTAdminHandler is an implementation of the vtadmin.VTAdmin service.
type VTAdminHandler interface {
	// CreateKeyspace creates a new keyspace in the given cluster.
	CreateKeyspace(context.Context, *connect_go.Request[vtadmin.CreateKeyspaceRequest]) (*connect_go.Response[vtadmin.CreateKeyspaceResponse], error)
	// CreateShard creates a new shard in the given cluster and keyspace.
	CreateShard(context.Context, *connect_go.Request[vtadmin.CreateShardRequest]) (*connect_go.Response[vtctldata.CreateShardResponse], error)
	// DeleteKeyspace deletes a keyspace in the given cluster.
	DeleteKeyspace(context.Context, *connect_go.Request[vtadmin.DeleteKeyspaceRequest]) (*connect_go.Response[vtctldata.DeleteKeyspaceResponse], error)
	// DeleteShard deletes one or more shards in the given cluster and keyspace.
	DeleteShards(context.Context, *connect_go.Request[vtadmin.DeleteShardsRequest]) (*connect_go.Response[vtctldata.DeleteShardsResponse], error)
	// DeleteTablet deletes a tablet from the topology
	DeleteTablet(context.Context, *connect_go.Request[vtadmin.DeleteTabletRequest]) (*connect_go.Response[vtadmin.DeleteTabletResponse], error)
	// EmergencyFailoverShard fails over a shard to a new primary. It assumes
	// the old primary is dead or otherwise not responding.
	EmergencyFailoverShard(context.Context, *connect_go.Request[vtadmin.EmergencyFailoverShardRequest]) (*connect_go.Response[vtadmin.EmergencyFailoverShardResponse], error)
	// FindSchema returns a single Schema that matches the provided table name
	// across all specified clusters IDs. Not specifying a set of cluster IDs
	// causes the search to span all configured clusters.
	//
	// An error occurs if either no table exists across any of the clusters with
	// the specified table name, or if multiple tables exist with that name.
	FindSchema(context.Context, *connect_go.Request[vtadmin.FindSchemaRequest]) (*connect_go.Response[vtadmin.Schema], error)
	// GetBackups returns backups grouped by cluster.
	GetBackups(context.Context, *connect_go.Request[vtadmin.GetBackupsRequest]) (*connect_go.Response[vtadmin.GetBackupsResponse], error)
	// GetCellInfos returns the CellInfo objects for the specified clusters.
	//
	// Callers may optionally restrict the set of CellInfos, or restrict the
	// response to include only cell names.
	GetCellInfos(context.Context, *connect_go.Request[vtadmin.GetCellInfosRequest]) (*connect_go.Response[vtadmin.GetCellInfosResponse], error)
	// GetCellsAliases returns the CellsAliases data for the specified clusters.
	GetCellsAliases(context.Context, *connect_go.Request[vtadmin.GetCellsAliasesRequest]) (*connect_go.Response[vtadmin.GetCellsAliasesResponse], error)
	// GetClusters returns all configured clusters.
	GetClusters(context.Context, *connect_go.Request[vtadmin.GetClustersRequest]) (*connect_go.Response[vtadmin.GetClustersResponse], error)
	// GetFullStatus returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
	GetFullStatus(context.Context, *connect_go.Request[vtadmin.GetFullStatusRequest]) (*connect_go.Response[vtctldata.GetFullStatusResponse], error)
	// GetGates returns all gates across all the specified clusters.
	GetGates(context.Context, *connect_go.Request[vtadmin.GetGatesRequest]) (*connect_go.Response[vtadmin.GetGatesResponse], error)
	// GetKeyspace returns a keyspace by name in the specified cluster.
	GetKeyspace(context.Context, *connect_go.Request[vtadmin.GetKeyspaceRequest]) (*connect_go.Response[vtadmin.Keyspace], error)
	// GetKeyspaces returns all keyspaces across the specified clusters.
	GetKeyspaces(context.Context, *connect_go.Request[vtadmin.GetKeyspacesRequest]) (*connect_go.Response[vtadmin.GetKeyspacesResponse], error)
	// GetSchema returns the schema for the specified (cluster, keyspace, table)
	// tuple.
	GetSchema(context.Context, *connect_go.Request[vtadmin.GetSchemaRequest]) (*connect_go.Response[vtadmin.Schema], error)
	// GetSchemas returns all schemas across the specified clusters.
	GetSchemas(context.Context, *connect_go.Request[vtadmin.GetSchemasRequest]) (*connect_go.Response[vtadmin.GetSchemasResponse], error)
	// GetShardReplicationPositions returns shard replication positions grouped
	// by cluster.
	GetShardReplicationPositions(context.Context, *connect_go.Request[vtadmin.GetShardReplicationPositionsRequest]) (*connect_go.Response[vtadmin.GetShardReplicationPositionsResponse], error)
	// GetSrvVSchema returns the SrvVSchema for the given cluster and cell.
	GetSrvVSchema(context.Context, *connect_go.Request[vtadmin.GetSrvVSchemaRequest]) (*connect_go.Response[vtadmin.SrvVSchema], error)
	// GetSrvVSchemas returns all SrvVSchemas across all (or specified) clusters
	// and cells.
	GetSrvVSchemas(context.Context, *connect_go.Request[vtadmin.GetSrvVSchemasRequest]) (*connect_go.Response[vtadmin.GetSrvVSchemasResponse], error)
	// GetTablet looks up a tablet by hostname across all clusters and returns
	// the result.
	GetTablet(context.Context, *connect_go.Request[vtadmin.GetTabletRequest]) (*connect_go.Response[vtadmin.Tablet], error)
	// GetTablets returns all tablets across all the specified clusters.
	GetTablets(context.Context, *connect_go.Request[vtadmin.GetTabletsRequest]) (*connect_go.Response[vtadmin.GetTabletsResponse], error)
	// GetTopologyPath returns the cell located at the specified path in the topology server.
	GetTopologyPath(context.Context, *connect_go.Request[vtadmin.GetTopologyPathRequest]) (*connect_go.Response[vtctldata.GetTopologyPathResponse], error)
	// GetVSchema returns a VSchema for the specified keyspace in the specified
	// cluster.
	GetVSchema(context.Context, *connect_go.Request[vtadmin.GetVSchemaRequest]) (*connect_go.Response[vtadmin.VSchema], error)
	// GetVSchemas returns the VSchemas for all specified clusters.
	GetVSchemas(context.Context, *connect_go.Request[vtadmin.GetVSchemasRequest]) (*connect_go.Response[vtadmin.GetVSchemasResponse], error)
	// GetVtctlds returns the Vtctlds for all specified clusters.
	GetVtctlds(context.Context, *connect_go.Request[vtadmin.GetVtctldsRequest]) (*connect_go.Response[vtadmin.GetVtctldsResponse], error)
	// GetWorkflow returns a single Workflow for a given cluster, keyspace, and
	// workflow name.
	GetWorkflow(context.Context, *connect_go.Request[vtadmin.GetWorkflowRequest]) (*connect_go.Response[vtadmin.Workflow], error)
	// GetWorkflows returns the Workflows for all specified clusters.
	GetWorkflows(context.Context, *connect_go.Request[vtadmin.GetWorkflowsRequest]) (*connect_go.Response[vtadmin.GetWorkflowsResponse], error)
	// PingTablet checks that the specified tablet is awake and responding to
	// RPCs. This command can be blocked by other in-flight operations.
	PingTablet(context.Context, *connect_go.Request[vtadmin.PingTabletRequest]) (*connect_go.Response[vtadmin.PingTabletResponse], error)
	// PlannedFailoverShard fails over the shard to a new primary, or away from
	// an old primary. Both the old and new primaries must be reachable and
	// running.
	//
	// NOTE: A planned failover will not consider replicas outside the current
	// shard primary's cell as promotion candidates unless NewPrimary is
	// explicitly provided in the request.
	PlannedFailoverShard(context.Context, *connect_go.Request[vtadmin.PlannedFailoverShardRequest]) (*connect_go.Response[vtadmin.PlannedFailoverShardResponse], error)
	// RebuildKeyspaceGraph rebuilds the serving data for a keyspace.
	RebuildKeyspaceGraph(context.Context, *connect_go.Request[vtadmin.RebuildKeyspaceGraphRequest]) (*connect_go.Response[vtadmin.RebuildKeyspaceGraphResponse], error)
	// RefreshState reloads the tablet record on the specified tablet.
	RefreshState(context.Context, *connect_go.Request[vtadmin.RefreshStateRequest]) (*connect_go.Response[vtadmin.RefreshStateResponse], error)
	// RefreshTabletReplicationSource performs a `CHANGE REPLICATION SOURCE TO`
	// on a tablet to replicate from the current primary in the shard.
	RefreshTabletReplicationSource(context.Context, *connect_go.Request[vtadmin.RefreshTabletReplicationSourceRequest]) (*connect_go.Response[vtadmin.RefreshTabletReplicationSourceResponse], error)
	// ReloadSchemas reloads the schema definition across keyspaces, shards, or
	// tablets in one or more clusters, depending on the request fields (see
	// ReloadSchemasRequest for details).
	ReloadSchemas(context.Context, *connect_go.Request[vtadmin.ReloadSchemasRequest]) (*connect_go.Response[vtadmin.ReloadSchemasResponse], error)
	// ReloadSchemaShard reloads the schema on all tablets in a shard. This is done on a best-effort basis.
	ReloadSchemaShard(context.Context, *connect_go.Request[vtadmin.ReloadSchemaShardRequest]) (*connect_go.Response[vtadmin.ReloadSchemaShardResponse], error)
	// RemoveKeyspaceCell removes the cell from the Cells list for all shards in the keyspace, and the SrvKeyspace for that keyspace in that cell.
	RemoveKeyspaceCell(context.Context, *connect_go.Request[vtadmin.RemoveKeyspaceCellRequest]) (*connect_go.Response[vtadmin.RemoveKeyspaceCellResponse], error)
	// RunHealthCheck runs a healthcheck on the tablet.
	RunHealthCheck(context.Context, *connect_go.Request[vtadmin.RunHealthCheckRequest]) (*connect_go.Response[vtadmin.RunHealthCheckResponse], error)
	// SetReadOnly sets the tablet to read-only mode.
	SetReadOnly(context.Context, *connect_go.Request[vtadmin.SetReadOnlyRequest]) (*connect_go.Response[vtadmin.SetReadOnlyResponse], error)
	// SetReadWrite sets the tablet to read-write mode.
	SetReadWrite(context.Context, *connect_go.Request[vtadmin.SetReadWriteRequest]) (*connect_go.Response[vtadmin.SetReadWriteResponse], error)
	// StartReplication runs the underlying database command to start
	// replication on a tablet.
	StartReplication(context.Context, *connect_go.Request[vtadmin.StartReplicationRequest]) (*connect_go.Response[vtadmin.StartReplicationResponse], error)
	// StopReplication runs the underlying database command to stop replication
	// on a tablet
	StopReplication(context.Context, *connect_go.Request[vtadmin.StopReplicationRequest]) (*connect_go.Response[vtadmin.StopReplicationResponse], error)
	// TabletExternallyPromoted updates the metadata in a cluster's topology
	// to acknowledge a shard primary change performed by an external tool
	// (e.g. orchestrator*).
	//
	// See the Reparenting guide for more information:
	// https://vitess.io/docs/user-guides/configuration-advanced/reparenting/#external-reparenting.
	//
	// * "orchestrator" here refers to external orchestrator, not the newer,
	// Vitess-aware orchestrator, VTOrc.
	TabletExternallyPromoted(context.Context, *connect_go.Request[vtadmin.TabletExternallyPromotedRequest]) (*connect_go.Response[vtadmin.TabletExternallyPromotedResponse], error)
	// Validate validates all nodes in a cluster that are reachable from the global replication graph,
	// as well as all tablets in discoverable cells, are consistent
	Validate(context.Context, *connect_go.Request[vtadmin.ValidateRequest]) (*connect_go.Response[vtctldata.ValidateResponse], error)
	// ValidateKeyspace validates that all nodes reachable from the specified
	// keyspace are consistent.
	ValidateKeyspace(context.Context, *connect_go.Request[vtadmin.ValidateKeyspaceRequest]) (*connect_go.Response[vtctldata.ValidateKeyspaceResponse], error)
	// ValidateSchemaKeyspace validates that the schema on the primary tablet
	// for shard 0 matches the schema on all of the other tablets in the
	// keyspace.
	ValidateSchemaKeyspace(context.Context, *connect_go.Request[vtadmin.ValidateSchemaKeyspaceRequest]) (*connect_go.Response[vtctldata.ValidateSchemaKeyspaceResponse], error)
	// ValidateShard validates that that all nodes reachable from the specified shard are consistent.
	ValidateShard(context.Context, *connect_go.Request[vtadmin.ValidateShardRequest]) (*connect_go.Response[vtctldata.ValidateShardResponse], error)
	// ValidateVersionKeyspace validates that the version on the primary of
	// shard 0 matches all of the other tablets in the keyspace.
	ValidateVersionKeyspace(context.Context, *connect_go.Request[vtadmin.ValidateVersionKeyspaceRequest]) (*connect_go.Response[vtctldata.ValidateVersionKeyspaceResponse], error)
	// ValidateVersionShard validates that the version on the primary matches all of the replicas.
	ValidateVersionShard(context.Context, *connect_go.Request[vtadmin.ValidateVersionShardRequest]) (*connect_go.Response[vtctldata.ValidateVersionShardResponse], error)
	// VTExplain provides information on how Vitess plans to execute a
	// particular query.
	VTExplain(context.Context, *connect_go.Request[vtadmin.VTExplainRequest]) (*connect_go.Response[vtadmin.VTExplainResponse], error)
}

// NewVTAdminHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVTAdminHandler(svc VTAdminHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/vtadmin.VTAdmin/CreateKeyspace", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/CreateKeyspace",
		svc.CreateKeyspace,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/CreateShard", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/CreateShard",
		svc.CreateShard,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/DeleteKeyspace", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/DeleteKeyspace",
		svc.DeleteKeyspace,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/DeleteShards", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/DeleteShards",
		svc.DeleteShards,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/DeleteTablet", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/DeleteTablet",
		svc.DeleteTablet,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/EmergencyFailoverShard", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/EmergencyFailoverShard",
		svc.EmergencyFailoverShard,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/FindSchema", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/FindSchema",
		svc.FindSchema,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetBackups", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetBackups",
		svc.GetBackups,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetCellInfos", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetCellInfos",
		svc.GetCellInfos,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetCellsAliases", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetCellsAliases",
		svc.GetCellsAliases,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetClusters", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetClusters",
		svc.GetClusters,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetFullStatus", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetFullStatus",
		svc.GetFullStatus,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetGates", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetGates",
		svc.GetGates,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetKeyspace", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetKeyspace",
		svc.GetKeyspace,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetKeyspaces", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetKeyspaces",
		svc.GetKeyspaces,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetSchema", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetSchema",
		svc.GetSchema,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetSchemas", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetSchemas",
		svc.GetSchemas,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetShardReplicationPositions", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetShardReplicationPositions",
		svc.GetShardReplicationPositions,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetSrvVSchema", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetSrvVSchema",
		svc.GetSrvVSchema,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetSrvVSchemas", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetSrvVSchemas",
		svc.GetSrvVSchemas,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetTablet", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetTablet",
		svc.GetTablet,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetTablets", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetTablets",
		svc.GetTablets,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetTopologyPath", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetTopologyPath",
		svc.GetTopologyPath,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetVSchema", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetVSchema",
		svc.GetVSchema,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetVSchemas", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetVSchemas",
		svc.GetVSchemas,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetVtctlds", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetVtctlds",
		svc.GetVtctlds,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetWorkflow", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetWorkflow",
		svc.GetWorkflow,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/GetWorkflows", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/GetWorkflows",
		svc.GetWorkflows,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/PingTablet", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/PingTablet",
		svc.PingTablet,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/PlannedFailoverShard", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/PlannedFailoverShard",
		svc.PlannedFailoverShard,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/RebuildKeyspaceGraph", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/RebuildKeyspaceGraph",
		svc.RebuildKeyspaceGraph,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/RefreshState", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/RefreshState",
		svc.RefreshState,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/RefreshTabletReplicationSource", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/RefreshTabletReplicationSource",
		svc.RefreshTabletReplicationSource,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/ReloadSchemas", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/ReloadSchemas",
		svc.ReloadSchemas,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/ReloadSchemaShard", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/ReloadSchemaShard",
		svc.ReloadSchemaShard,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/RemoveKeyspaceCell", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/RemoveKeyspaceCell",
		svc.RemoveKeyspaceCell,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/RunHealthCheck", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/RunHealthCheck",
		svc.RunHealthCheck,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/SetReadOnly", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/SetReadOnly",
		svc.SetReadOnly,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/SetReadWrite", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/SetReadWrite",
		svc.SetReadWrite,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/StartReplication", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/StartReplication",
		svc.StartReplication,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/StopReplication", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/StopReplication",
		svc.StopReplication,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/TabletExternallyPromoted", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/TabletExternallyPromoted",
		svc.TabletExternallyPromoted,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/Validate", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/Validate",
		svc.Validate,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/ValidateKeyspace", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/ValidateKeyspace",
		svc.ValidateKeyspace,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/ValidateSchemaKeyspace", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/ValidateSchemaKeyspace",
		svc.ValidateSchemaKeyspace,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/ValidateShard", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/ValidateShard",
		svc.ValidateShard,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/ValidateVersionKeyspace", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/ValidateVersionKeyspace",
		svc.ValidateVersionKeyspace,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/ValidateVersionShard", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/ValidateVersionShard",
		svc.ValidateVersionShard,
		opts...,
	))
	mux.Handle("/vtadmin.VTAdmin/VTExplain", connect_go.NewUnaryHandler(
		"/vtadmin.VTAdmin/VTExplain",
		svc.VTExplain,
		opts...,
	))
	return "/vtadmin.VTAdmin/", mux
}

// UnimplementedVTAdminHandler returns CodeUnimplemented from all methods.
type UnimplementedVTAdminHandler struct{}

func (UnimplementedVTAdminHandler) CreateKeyspace(context.Context, *connect_go.Request[vtadmin.CreateKeyspaceRequest]) (*connect_go.Response[vtadmin.CreateKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.CreateKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) CreateShard(context.Context, *connect_go.Request[vtadmin.CreateShardRequest]) (*connect_go.Response[vtctldata.CreateShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.CreateShard is not implemented"))
}

func (UnimplementedVTAdminHandler) DeleteKeyspace(context.Context, *connect_go.Request[vtadmin.DeleteKeyspaceRequest]) (*connect_go.Response[vtctldata.DeleteKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.DeleteKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) DeleteShards(context.Context, *connect_go.Request[vtadmin.DeleteShardsRequest]) (*connect_go.Response[vtctldata.DeleteShardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.DeleteShards is not implemented"))
}

func (UnimplementedVTAdminHandler) DeleteTablet(context.Context, *connect_go.Request[vtadmin.DeleteTabletRequest]) (*connect_go.Response[vtadmin.DeleteTabletResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.DeleteTablet is not implemented"))
}

func (UnimplementedVTAdminHandler) EmergencyFailoverShard(context.Context, *connect_go.Request[vtadmin.EmergencyFailoverShardRequest]) (*connect_go.Response[vtadmin.EmergencyFailoverShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.EmergencyFailoverShard is not implemented"))
}

func (UnimplementedVTAdminHandler) FindSchema(context.Context, *connect_go.Request[vtadmin.FindSchemaRequest]) (*connect_go.Response[vtadmin.Schema], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.FindSchema is not implemented"))
}

func (UnimplementedVTAdminHandler) GetBackups(context.Context, *connect_go.Request[vtadmin.GetBackupsRequest]) (*connect_go.Response[vtadmin.GetBackupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetBackups is not implemented"))
}

func (UnimplementedVTAdminHandler) GetCellInfos(context.Context, *connect_go.Request[vtadmin.GetCellInfosRequest]) (*connect_go.Response[vtadmin.GetCellInfosResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetCellInfos is not implemented"))
}

func (UnimplementedVTAdminHandler) GetCellsAliases(context.Context, *connect_go.Request[vtadmin.GetCellsAliasesRequest]) (*connect_go.Response[vtadmin.GetCellsAliasesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetCellsAliases is not implemented"))
}

func (UnimplementedVTAdminHandler) GetClusters(context.Context, *connect_go.Request[vtadmin.GetClustersRequest]) (*connect_go.Response[vtadmin.GetClustersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetClusters is not implemented"))
}

func (UnimplementedVTAdminHandler) GetFullStatus(context.Context, *connect_go.Request[vtadmin.GetFullStatusRequest]) (*connect_go.Response[vtctldata.GetFullStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetFullStatus is not implemented"))
}

func (UnimplementedVTAdminHandler) GetGates(context.Context, *connect_go.Request[vtadmin.GetGatesRequest]) (*connect_go.Response[vtadmin.GetGatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetGates is not implemented"))
}

func (UnimplementedVTAdminHandler) GetKeyspace(context.Context, *connect_go.Request[vtadmin.GetKeyspaceRequest]) (*connect_go.Response[vtadmin.Keyspace], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) GetKeyspaces(context.Context, *connect_go.Request[vtadmin.GetKeyspacesRequest]) (*connect_go.Response[vtadmin.GetKeyspacesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetKeyspaces is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSchema(context.Context, *connect_go.Request[vtadmin.GetSchemaRequest]) (*connect_go.Response[vtadmin.Schema], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetSchema is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSchemas(context.Context, *connect_go.Request[vtadmin.GetSchemasRequest]) (*connect_go.Response[vtadmin.GetSchemasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetSchemas is not implemented"))
}

func (UnimplementedVTAdminHandler) GetShardReplicationPositions(context.Context, *connect_go.Request[vtadmin.GetShardReplicationPositionsRequest]) (*connect_go.Response[vtadmin.GetShardReplicationPositionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetShardReplicationPositions is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSrvVSchema(context.Context, *connect_go.Request[vtadmin.GetSrvVSchemaRequest]) (*connect_go.Response[vtadmin.SrvVSchema], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetSrvVSchema is not implemented"))
}

func (UnimplementedVTAdminHandler) GetSrvVSchemas(context.Context, *connect_go.Request[vtadmin.GetSrvVSchemasRequest]) (*connect_go.Response[vtadmin.GetSrvVSchemasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetSrvVSchemas is not implemented"))
}

func (UnimplementedVTAdminHandler) GetTablet(context.Context, *connect_go.Request[vtadmin.GetTabletRequest]) (*connect_go.Response[vtadmin.Tablet], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetTablet is not implemented"))
}

func (UnimplementedVTAdminHandler) GetTablets(context.Context, *connect_go.Request[vtadmin.GetTabletsRequest]) (*connect_go.Response[vtadmin.GetTabletsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetTablets is not implemented"))
}

func (UnimplementedVTAdminHandler) GetTopologyPath(context.Context, *connect_go.Request[vtadmin.GetTopologyPathRequest]) (*connect_go.Response[vtctldata.GetTopologyPathResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetTopologyPath is not implemented"))
}

func (UnimplementedVTAdminHandler) GetVSchema(context.Context, *connect_go.Request[vtadmin.GetVSchemaRequest]) (*connect_go.Response[vtadmin.VSchema], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetVSchema is not implemented"))
}

func (UnimplementedVTAdminHandler) GetVSchemas(context.Context, *connect_go.Request[vtadmin.GetVSchemasRequest]) (*connect_go.Response[vtadmin.GetVSchemasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetVSchemas is not implemented"))
}

func (UnimplementedVTAdminHandler) GetVtctlds(context.Context, *connect_go.Request[vtadmin.GetVtctldsRequest]) (*connect_go.Response[vtadmin.GetVtctldsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetVtctlds is not implemented"))
}

func (UnimplementedVTAdminHandler) GetWorkflow(context.Context, *connect_go.Request[vtadmin.GetWorkflowRequest]) (*connect_go.Response[vtadmin.Workflow], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetWorkflow is not implemented"))
}

func (UnimplementedVTAdminHandler) GetWorkflows(context.Context, *connect_go.Request[vtadmin.GetWorkflowsRequest]) (*connect_go.Response[vtadmin.GetWorkflowsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.GetWorkflows is not implemented"))
}

func (UnimplementedVTAdminHandler) PingTablet(context.Context, *connect_go.Request[vtadmin.PingTabletRequest]) (*connect_go.Response[vtadmin.PingTabletResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.PingTablet is not implemented"))
}

func (UnimplementedVTAdminHandler) PlannedFailoverShard(context.Context, *connect_go.Request[vtadmin.PlannedFailoverShardRequest]) (*connect_go.Response[vtadmin.PlannedFailoverShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.PlannedFailoverShard is not implemented"))
}

func (UnimplementedVTAdminHandler) RebuildKeyspaceGraph(context.Context, *connect_go.Request[vtadmin.RebuildKeyspaceGraphRequest]) (*connect_go.Response[vtadmin.RebuildKeyspaceGraphResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.RebuildKeyspaceGraph is not implemented"))
}

func (UnimplementedVTAdminHandler) RefreshState(context.Context, *connect_go.Request[vtadmin.RefreshStateRequest]) (*connect_go.Response[vtadmin.RefreshStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.RefreshState is not implemented"))
}

func (UnimplementedVTAdminHandler) RefreshTabletReplicationSource(context.Context, *connect_go.Request[vtadmin.RefreshTabletReplicationSourceRequest]) (*connect_go.Response[vtadmin.RefreshTabletReplicationSourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.RefreshTabletReplicationSource is not implemented"))
}

func (UnimplementedVTAdminHandler) ReloadSchemas(context.Context, *connect_go.Request[vtadmin.ReloadSchemasRequest]) (*connect_go.Response[vtadmin.ReloadSchemasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ReloadSchemas is not implemented"))
}

func (UnimplementedVTAdminHandler) ReloadSchemaShard(context.Context, *connect_go.Request[vtadmin.ReloadSchemaShardRequest]) (*connect_go.Response[vtadmin.ReloadSchemaShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ReloadSchemaShard is not implemented"))
}

func (UnimplementedVTAdminHandler) RemoveKeyspaceCell(context.Context, *connect_go.Request[vtadmin.RemoveKeyspaceCellRequest]) (*connect_go.Response[vtadmin.RemoveKeyspaceCellResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.RemoveKeyspaceCell is not implemented"))
}

func (UnimplementedVTAdminHandler) RunHealthCheck(context.Context, *connect_go.Request[vtadmin.RunHealthCheckRequest]) (*connect_go.Response[vtadmin.RunHealthCheckResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.RunHealthCheck is not implemented"))
}

func (UnimplementedVTAdminHandler) SetReadOnly(context.Context, *connect_go.Request[vtadmin.SetReadOnlyRequest]) (*connect_go.Response[vtadmin.SetReadOnlyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.SetReadOnly is not implemented"))
}

func (UnimplementedVTAdminHandler) SetReadWrite(context.Context, *connect_go.Request[vtadmin.SetReadWriteRequest]) (*connect_go.Response[vtadmin.SetReadWriteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.SetReadWrite is not implemented"))
}

func (UnimplementedVTAdminHandler) StartReplication(context.Context, *connect_go.Request[vtadmin.StartReplicationRequest]) (*connect_go.Response[vtadmin.StartReplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.StartReplication is not implemented"))
}

func (UnimplementedVTAdminHandler) StopReplication(context.Context, *connect_go.Request[vtadmin.StopReplicationRequest]) (*connect_go.Response[vtadmin.StopReplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.StopReplication is not implemented"))
}

func (UnimplementedVTAdminHandler) TabletExternallyPromoted(context.Context, *connect_go.Request[vtadmin.TabletExternallyPromotedRequest]) (*connect_go.Response[vtadmin.TabletExternallyPromotedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.TabletExternallyPromoted is not implemented"))
}

func (UnimplementedVTAdminHandler) Validate(context.Context, *connect_go.Request[vtadmin.ValidateRequest]) (*connect_go.Response[vtctldata.ValidateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.Validate is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateKeyspace(context.Context, *connect_go.Request[vtadmin.ValidateKeyspaceRequest]) (*connect_go.Response[vtctldata.ValidateKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ValidateKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateSchemaKeyspace(context.Context, *connect_go.Request[vtadmin.ValidateSchemaKeyspaceRequest]) (*connect_go.Response[vtctldata.ValidateSchemaKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ValidateSchemaKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateShard(context.Context, *connect_go.Request[vtadmin.ValidateShardRequest]) (*connect_go.Response[vtctldata.ValidateShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ValidateShard is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateVersionKeyspace(context.Context, *connect_go.Request[vtadmin.ValidateVersionKeyspaceRequest]) (*connect_go.Response[vtctldata.ValidateVersionKeyspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ValidateVersionKeyspace is not implemented"))
}

func (UnimplementedVTAdminHandler) ValidateVersionShard(context.Context, *connect_go.Request[vtadmin.ValidateVersionShardRequest]) (*connect_go.Response[vtctldata.ValidateVersionShardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.ValidateVersionShard is not implemented"))
}

func (UnimplementedVTAdminHandler) VTExplain(context.Context, *connect_go.Request[vtadmin.VTExplainRequest]) (*connect_go.Response[vtadmin.VTExplainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vtadmin.VTAdmin.VTExplain is not implemented"))
}
