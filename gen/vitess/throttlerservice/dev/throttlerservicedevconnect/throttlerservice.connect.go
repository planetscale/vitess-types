//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
// gRPC RPC interface for the internal resharding throttler (go/vt/throttler)
// which is used by vreplication.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vitess/throttlerservice/dev/throttlerservice.proto

package throttlerservicedevconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	dev "github.com/planetscale/vitess-types/gen/vitess/throttlerdata/dev"
	dev1 "github.com/planetscale/vitess-types/gen/vitess/throttlerservice/dev"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ThrottlerName is the fully-qualified name of the Throttler service.
	ThrottlerName = "vitess.throttlerservice.dev.Throttler"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ThrottlerMaxRatesProcedure is the fully-qualified name of the Throttler's MaxRates RPC.
	ThrottlerMaxRatesProcedure = "/vitess.throttlerservice.dev.Throttler/MaxRates"
	// ThrottlerSetMaxRateProcedure is the fully-qualified name of the Throttler's SetMaxRate RPC.
	ThrottlerSetMaxRateProcedure = "/vitess.throttlerservice.dev.Throttler/SetMaxRate"
	// ThrottlerGetConfigurationProcedure is the fully-qualified name of the Throttler's
	// GetConfiguration RPC.
	ThrottlerGetConfigurationProcedure = "/vitess.throttlerservice.dev.Throttler/GetConfiguration"
	// ThrottlerUpdateConfigurationProcedure is the fully-qualified name of the Throttler's
	// UpdateConfiguration RPC.
	ThrottlerUpdateConfigurationProcedure = "/vitess.throttlerservice.dev.Throttler/UpdateConfiguration"
	// ThrottlerResetConfigurationProcedure is the fully-qualified name of the Throttler's
	// ResetConfiguration RPC.
	ThrottlerResetConfigurationProcedure = "/vitess.throttlerservice.dev.Throttler/ResetConfiguration"
)

// ThrottlerClient is a client for the vitess.throttlerservice.dev.Throttler service.
type ThrottlerClient interface {
	// MaxRates returns the current max rate for each throttler of the process.
	MaxRates(context.Context, *connect.Request[dev.MaxRatesRequest]) (*connect.Response[dev.MaxRatesResponse], error)
	// SetMaxRate allows to change the current max rate for all throttlers
	// of the process.
	SetMaxRate(context.Context, *connect.Request[dev.SetMaxRateRequest]) (*connect.Response[dev.SetMaxRateResponse], error)
	// GetConfiguration returns the configuration of the MaxReplicationlag module
	// for the given throttler or all throttlers if "throttler_name" is empty.
	GetConfiguration(context.Context, *connect.Request[dev.GetConfigurationRequest]) (*connect.Response[dev.GetConfigurationResponse], error)
	// UpdateConfiguration (partially) updates the configuration of the
	// MaxReplicationlag module for the given throttler or all throttlers if
	// "throttler_name" is empty.
	// If "copy_zero_values" is true, fields with zero values will be copied
	// as well.
	UpdateConfiguration(context.Context, *connect.Request[dev.UpdateConfigurationRequest]) (*connect.Response[dev.UpdateConfigurationResponse], error)
	// ResetConfiguration resets the configuration of the MaxReplicationlag module
	// to the initial configuration for the given throttler or all throttlers if
	// "throttler_name" is empty.
	ResetConfiguration(context.Context, *connect.Request[dev.ResetConfigurationRequest]) (*connect.Response[dev.ResetConfigurationResponse], error)
}

// NewThrottlerClient constructs a client for the vitess.throttlerservice.dev.Throttler service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewThrottlerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ThrottlerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	throttlerMethods := dev1.File_vitess_throttlerservice_dev_throttlerservice_proto.Services().ByName("Throttler").Methods()
	return &throttlerClient{
		maxRates: connect.NewClient[dev.MaxRatesRequest, dev.MaxRatesResponse](
			httpClient,
			baseURL+ThrottlerMaxRatesProcedure,
			connect.WithSchema(throttlerMethods.ByName("MaxRates")),
			connect.WithClientOptions(opts...),
		),
		setMaxRate: connect.NewClient[dev.SetMaxRateRequest, dev.SetMaxRateResponse](
			httpClient,
			baseURL+ThrottlerSetMaxRateProcedure,
			connect.WithSchema(throttlerMethods.ByName("SetMaxRate")),
			connect.WithClientOptions(opts...),
		),
		getConfiguration: connect.NewClient[dev.GetConfigurationRequest, dev.GetConfigurationResponse](
			httpClient,
			baseURL+ThrottlerGetConfigurationProcedure,
			connect.WithSchema(throttlerMethods.ByName("GetConfiguration")),
			connect.WithClientOptions(opts...),
		),
		updateConfiguration: connect.NewClient[dev.UpdateConfigurationRequest, dev.UpdateConfigurationResponse](
			httpClient,
			baseURL+ThrottlerUpdateConfigurationProcedure,
			connect.WithSchema(throttlerMethods.ByName("UpdateConfiguration")),
			connect.WithClientOptions(opts...),
		),
		resetConfiguration: connect.NewClient[dev.ResetConfigurationRequest, dev.ResetConfigurationResponse](
			httpClient,
			baseURL+ThrottlerResetConfigurationProcedure,
			connect.WithSchema(throttlerMethods.ByName("ResetConfiguration")),
			connect.WithClientOptions(opts...),
		),
	}
}

// throttlerClient implements ThrottlerClient.
type throttlerClient struct {
	maxRates            *connect.Client[dev.MaxRatesRequest, dev.MaxRatesResponse]
	setMaxRate          *connect.Client[dev.SetMaxRateRequest, dev.SetMaxRateResponse]
	getConfiguration    *connect.Client[dev.GetConfigurationRequest, dev.GetConfigurationResponse]
	updateConfiguration *connect.Client[dev.UpdateConfigurationRequest, dev.UpdateConfigurationResponse]
	resetConfiguration  *connect.Client[dev.ResetConfigurationRequest, dev.ResetConfigurationResponse]
}

// MaxRates calls vitess.throttlerservice.dev.Throttler.MaxRates.
func (c *throttlerClient) MaxRates(ctx context.Context, req *connect.Request[dev.MaxRatesRequest]) (*connect.Response[dev.MaxRatesResponse], error) {
	return c.maxRates.CallUnary(ctx, req)
}

// SetMaxRate calls vitess.throttlerservice.dev.Throttler.SetMaxRate.
func (c *throttlerClient) SetMaxRate(ctx context.Context, req *connect.Request[dev.SetMaxRateRequest]) (*connect.Response[dev.SetMaxRateResponse], error) {
	return c.setMaxRate.CallUnary(ctx, req)
}

// GetConfiguration calls vitess.throttlerservice.dev.Throttler.GetConfiguration.
func (c *throttlerClient) GetConfiguration(ctx context.Context, req *connect.Request[dev.GetConfigurationRequest]) (*connect.Response[dev.GetConfigurationResponse], error) {
	return c.getConfiguration.CallUnary(ctx, req)
}

// UpdateConfiguration calls vitess.throttlerservice.dev.Throttler.UpdateConfiguration.
func (c *throttlerClient) UpdateConfiguration(ctx context.Context, req *connect.Request[dev.UpdateConfigurationRequest]) (*connect.Response[dev.UpdateConfigurationResponse], error) {
	return c.updateConfiguration.CallUnary(ctx, req)
}

// ResetConfiguration calls vitess.throttlerservice.dev.Throttler.ResetConfiguration.
func (c *throttlerClient) ResetConfiguration(ctx context.Context, req *connect.Request[dev.ResetConfigurationRequest]) (*connect.Response[dev.ResetConfigurationResponse], error) {
	return c.resetConfiguration.CallUnary(ctx, req)
}

// ThrottlerHandler is an implementation of the vitess.throttlerservice.dev.Throttler service.
type ThrottlerHandler interface {
	// MaxRates returns the current max rate for each throttler of the process.
	MaxRates(context.Context, *connect.Request[dev.MaxRatesRequest]) (*connect.Response[dev.MaxRatesResponse], error)
	// SetMaxRate allows to change the current max rate for all throttlers
	// of the process.
	SetMaxRate(context.Context, *connect.Request[dev.SetMaxRateRequest]) (*connect.Response[dev.SetMaxRateResponse], error)
	// GetConfiguration returns the configuration of the MaxReplicationlag module
	// for the given throttler or all throttlers if "throttler_name" is empty.
	GetConfiguration(context.Context, *connect.Request[dev.GetConfigurationRequest]) (*connect.Response[dev.GetConfigurationResponse], error)
	// UpdateConfiguration (partially) updates the configuration of the
	// MaxReplicationlag module for the given throttler or all throttlers if
	// "throttler_name" is empty.
	// If "copy_zero_values" is true, fields with zero values will be copied
	// as well.
	UpdateConfiguration(context.Context, *connect.Request[dev.UpdateConfigurationRequest]) (*connect.Response[dev.UpdateConfigurationResponse], error)
	// ResetConfiguration resets the configuration of the MaxReplicationlag module
	// to the initial configuration for the given throttler or all throttlers if
	// "throttler_name" is empty.
	ResetConfiguration(context.Context, *connect.Request[dev.ResetConfigurationRequest]) (*connect.Response[dev.ResetConfigurationResponse], error)
}

// NewThrottlerHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewThrottlerHandler(svc ThrottlerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	throttlerMethods := dev1.File_vitess_throttlerservice_dev_throttlerservice_proto.Services().ByName("Throttler").Methods()
	throttlerMaxRatesHandler := connect.NewUnaryHandler(
		ThrottlerMaxRatesProcedure,
		svc.MaxRates,
		connect.WithSchema(throttlerMethods.ByName("MaxRates")),
		connect.WithHandlerOptions(opts...),
	)
	throttlerSetMaxRateHandler := connect.NewUnaryHandler(
		ThrottlerSetMaxRateProcedure,
		svc.SetMaxRate,
		connect.WithSchema(throttlerMethods.ByName("SetMaxRate")),
		connect.WithHandlerOptions(opts...),
	)
	throttlerGetConfigurationHandler := connect.NewUnaryHandler(
		ThrottlerGetConfigurationProcedure,
		svc.GetConfiguration,
		connect.WithSchema(throttlerMethods.ByName("GetConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	throttlerUpdateConfigurationHandler := connect.NewUnaryHandler(
		ThrottlerUpdateConfigurationProcedure,
		svc.UpdateConfiguration,
		connect.WithSchema(throttlerMethods.ByName("UpdateConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	throttlerResetConfigurationHandler := connect.NewUnaryHandler(
		ThrottlerResetConfigurationProcedure,
		svc.ResetConfiguration,
		connect.WithSchema(throttlerMethods.ByName("ResetConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	return "/vitess.throttlerservice.dev.Throttler/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ThrottlerMaxRatesProcedure:
			throttlerMaxRatesHandler.ServeHTTP(w, r)
		case ThrottlerSetMaxRateProcedure:
			throttlerSetMaxRateHandler.ServeHTTP(w, r)
		case ThrottlerGetConfigurationProcedure:
			throttlerGetConfigurationHandler.ServeHTTP(w, r)
		case ThrottlerUpdateConfigurationProcedure:
			throttlerUpdateConfigurationHandler.ServeHTTP(w, r)
		case ThrottlerResetConfigurationProcedure:
			throttlerResetConfigurationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedThrottlerHandler returns CodeUnimplemented from all methods.
type UnimplementedThrottlerHandler struct{}

func (UnimplementedThrottlerHandler) MaxRates(context.Context, *connect.Request[dev.MaxRatesRequest]) (*connect.Response[dev.MaxRatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.throttlerservice.dev.Throttler.MaxRates is not implemented"))
}

func (UnimplementedThrottlerHandler) SetMaxRate(context.Context, *connect.Request[dev.SetMaxRateRequest]) (*connect.Response[dev.SetMaxRateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.throttlerservice.dev.Throttler.SetMaxRate is not implemented"))
}

func (UnimplementedThrottlerHandler) GetConfiguration(context.Context, *connect.Request[dev.GetConfigurationRequest]) (*connect.Response[dev.GetConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.throttlerservice.dev.Throttler.GetConfiguration is not implemented"))
}

func (UnimplementedThrottlerHandler) UpdateConfiguration(context.Context, *connect.Request[dev.UpdateConfigurationRequest]) (*connect.Response[dev.UpdateConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.throttlerservice.dev.Throttler.UpdateConfiguration is not implemented"))
}

func (UnimplementedThrottlerHandler) ResetConfiguration(context.Context, *connect.Request[dev.ResetConfigurationRequest]) (*connect.Response[dev.ResetConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vitess.throttlerservice.dev.Throttler.ResetConfiguration is not implemented"))
}
