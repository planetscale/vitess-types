//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains all the types and servers necessary to make
// RPC calls to VtTablet for the management API.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: vitess/tabletmanagerdata/dev/tabletmanagerdata.proto

package tabletmanagerdatadev

import (
	dev6 "github.com/planetscale/vitess-types/gen/vitess/binlogdata/dev"
	dev4 "github.com/planetscale/vitess-types/gen/vitess/logutil/dev"
	dev "github.com/planetscale/vitess-types/gen/vitess/query/dev"
	dev3 "github.com/planetscale/vitess-types/gen/vitess/replicationdata/dev"
	dev1 "github.com/planetscale/vitess-types/gen/vitess/topodata/dev"
	dev2 "github.com/planetscale/vitess-types/gen/vitess/vtrpc/dev"
	dev5 "github.com/planetscale/vitess-types/gen/vitess/vttime/dev"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This structure allows us to manage tablet selection preferences
// which are eventually passed to a TabletPicker.
type TabletSelectionPreference int32

const (
	TabletSelectionPreference_ANY     TabletSelectionPreference = 0
	TabletSelectionPreference_INORDER TabletSelectionPreference = 1
	TabletSelectionPreference_UNKNOWN TabletSelectionPreference = 3 // Don't change any existing value
)

// Enum value maps for TabletSelectionPreference.
var (
	TabletSelectionPreference_name = map[int32]string{
		0: "ANY",
		1: "INORDER",
		3: "UNKNOWN",
	}
	TabletSelectionPreference_value = map[string]int32{
		"ANY":     0,
		"INORDER": 1,
		"UNKNOWN": 3,
	}
)

func (x TabletSelectionPreference) Enum() *TabletSelectionPreference {
	p := new(TabletSelectionPreference)
	*p = x
	return p
}

func (x TabletSelectionPreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TabletSelectionPreference) Descriptor() protoreflect.EnumDescriptor {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_enumTypes[0].Descriptor()
}

func (TabletSelectionPreference) Type() protoreflect.EnumType {
	return &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_enumTypes[0]
}

func (x TabletSelectionPreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TabletSelectionPreference.Descriptor instead.
func (TabletSelectionPreference) EnumDescriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{0}
}

type TableDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the table name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the SQL to run to create the table
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// the columns in the order that will be used to dump and load the data
	Columns []string `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
	// the primary key columns in the primary key order
	PrimaryKeyColumns []string `protobuf:"bytes,4,rep,name=primary_key_columns,json=primaryKeyColumns,proto3" json:"primary_key_columns,omitempty"`
	// type is either mysqlctl.TableBaseTable or mysqlctl.TableView
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// how much space the data file takes.
	DataLength uint64 `protobuf:"varint,6,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`
	// approximate number of rows
	RowCount uint64 `protobuf:"varint,7,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	// column names along with their types.
	// NOTE: this is a superset of columns.
	Fields []*dev.Field `protobuf:"bytes,8,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *TableDefinition) Reset() {
	*x = TableDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDefinition) ProtoMessage() {}

func (x *TableDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDefinition.ProtoReflect.Descriptor instead.
func (*TableDefinition) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{0}
}

func (x *TableDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableDefinition) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *TableDefinition) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *TableDefinition) GetPrimaryKeyColumns() []string {
	if x != nil {
		return x.PrimaryKeyColumns
	}
	return nil
}

func (x *TableDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TableDefinition) GetDataLength() uint64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *TableDefinition) GetRowCount() uint64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *TableDefinition) GetFields() []*dev.Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SchemaDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseSchema   string             `protobuf:"bytes,1,opt,name=database_schema,json=databaseSchema,proto3" json:"database_schema,omitempty"`
	TableDefinitions []*TableDefinition `protobuf:"bytes,2,rep,name=table_definitions,json=tableDefinitions,proto3" json:"table_definitions,omitempty"`
}

func (x *SchemaDefinition) Reset() {
	*x = SchemaDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaDefinition) ProtoMessage() {}

func (x *SchemaDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaDefinition.ProtoReflect.Descriptor instead.
func (*SchemaDefinition) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{1}
}

func (x *SchemaDefinition) GetDatabaseSchema() string {
	if x != nil {
		return x.DatabaseSchema
	}
	return ""
}

func (x *SchemaDefinition) GetTableDefinitions() []*TableDefinition {
	if x != nil {
		return x.TableDefinitions
	}
	return nil
}

type SchemaChangeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// before_schema holds the schema before each change.
	BeforeSchema *SchemaDefinition `protobuf:"bytes,1,opt,name=before_schema,json=beforeSchema,proto3" json:"before_schema,omitempty"`
	// after_schema holds the schema after each change.
	AfterSchema *SchemaDefinition `protobuf:"bytes,2,opt,name=after_schema,json=afterSchema,proto3" json:"after_schema,omitempty"`
}

func (x *SchemaChangeResult) Reset() {
	*x = SchemaChangeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaChangeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaChangeResult) ProtoMessage() {}

func (x *SchemaChangeResult) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaChangeResult.ProtoReflect.Descriptor instead.
func (*SchemaChangeResult) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{2}
}

func (x *SchemaChangeResult) GetBeforeSchema() *SchemaDefinition {
	if x != nil {
		return x.BeforeSchema
	}
	return nil
}

func (x *SchemaChangeResult) GetAfterSchema() *SchemaDefinition {
	if x != nil {
		return x.AfterSchema
	}
	return nil
}

// UserPermission describes a single row in the mysql.user table
// Primary key is Host+User
// PasswordChecksum is the crc64 of the password, for security reasons
type UserPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host             string            `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	User             string            `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	PasswordChecksum uint64            `protobuf:"varint,3,opt,name=password_checksum,json=passwordChecksum,proto3" json:"password_checksum,omitempty"`
	Privileges       map[string]string `protobuf:"bytes,4,rep,name=privileges,proto3" json:"privileges,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserPermission) Reset() {
	*x = UserPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPermission) ProtoMessage() {}

func (x *UserPermission) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPermission.ProtoReflect.Descriptor instead.
func (*UserPermission) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{3}
}

func (x *UserPermission) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *UserPermission) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *UserPermission) GetPasswordChecksum() uint64 {
	if x != nil {
		return x.PasswordChecksum
	}
	return 0
}

func (x *UserPermission) GetPrivileges() map[string]string {
	if x != nil {
		return x.Privileges
	}
	return nil
}

// DbPermission describes a single row in the mysql.db table
// Primary key is Host+Db+User
type DbPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host       string            `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Db         string            `protobuf:"bytes,2,opt,name=db,proto3" json:"db,omitempty"`
	User       string            `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Privileges map[string]string `protobuf:"bytes,4,rep,name=privileges,proto3" json:"privileges,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DbPermission) Reset() {
	*x = DbPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbPermission) ProtoMessage() {}

func (x *DbPermission) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbPermission.ProtoReflect.Descriptor instead.
func (*DbPermission) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{4}
}

func (x *DbPermission) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DbPermission) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *DbPermission) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DbPermission) GetPrivileges() map[string]string {
	if x != nil {
		return x.Privileges
	}
	return nil
}

// Permissions have all the rows in mysql.{user,db} tables,
// (all rows are sorted by primary key)
type Permissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPermissions []*UserPermission `protobuf:"bytes,1,rep,name=user_permissions,json=userPermissions,proto3" json:"user_permissions,omitempty"`
	DbPermissions   []*DbPermission   `protobuf:"bytes,2,rep,name=db_permissions,json=dbPermissions,proto3" json:"db_permissions,omitempty"`
}

func (x *Permissions) Reset() {
	*x = Permissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permissions) ProtoMessage() {}

func (x *Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permissions.ProtoReflect.Descriptor instead.
func (*Permissions) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{5}
}

func (x *Permissions) GetUserPermissions() []*UserPermission {
	if x != nil {
		return x.UserPermissions
	}
	return nil
}

func (x *Permissions) GetDbPermissions() []*DbPermission {
	if x != nil {
		return x.DbPermissions
	}
	return nil
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{6}
}

func (x *PingRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{7}
}

func (x *PingResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type SleepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// duration is in nanoseconds
	Duration int64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *SleepRequest) Reset() {
	*x = SleepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepRequest) ProtoMessage() {}

func (x *SleepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepRequest.ProtoReflect.Descriptor instead.
func (*SleepRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{8}
}

func (x *SleepRequest) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type SleepResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SleepResponse) Reset() {
	*x = SleepResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepResponse) ProtoMessage() {}

func (x *SleepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepResponse.ProtoReflect.Descriptor instead.
func (*SleepResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{9}
}

type ExecuteHookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parameters []string          `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
	ExtraEnv   map[string]string `protobuf:"bytes,3,rep,name=extra_env,json=extraEnv,proto3" json:"extra_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExecuteHookRequest) Reset() {
	*x = ExecuteHookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteHookRequest) ProtoMessage() {}

func (x *ExecuteHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteHookRequest.ProtoReflect.Descriptor instead.
func (*ExecuteHookRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{10}
}

func (x *ExecuteHookRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecuteHookRequest) GetParameters() []string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ExecuteHookRequest) GetExtraEnv() map[string]string {
	if x != nil {
		return x.ExtraEnv
	}
	return nil
}

type ExecuteHookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitStatus int64  `protobuf:"varint,1,opt,name=exit_status,json=exitStatus,proto3" json:"exit_status,omitempty"`
	Stdout     string `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr     string `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *ExecuteHookResponse) Reset() {
	*x = ExecuteHookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteHookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteHookResponse) ProtoMessage() {}

func (x *ExecuteHookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteHookResponse.ProtoReflect.Descriptor instead.
func (*ExecuteHookResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{11}
}

func (x *ExecuteHookResponse) GetExitStatus() int64 {
	if x != nil {
		return x.ExitStatus
	}
	return 0
}

func (x *ExecuteHookResponse) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *ExecuteHookResponse) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

type GetSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables        []string `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	IncludeViews  bool     `protobuf:"varint,2,opt,name=include_views,json=includeViews,proto3" json:"include_views,omitempty"`
	ExcludeTables []string `protobuf:"bytes,3,rep,name=exclude_tables,json=excludeTables,proto3" json:"exclude_tables,omitempty"`
	// TableSchemaOnly specifies whether to limit the results to just table/view
	// schema definition (CREATE TABLE/VIEW statements) and skip column/field information
	TableSchemaOnly bool `protobuf:"varint,4,opt,name=table_schema_only,json=tableSchemaOnly,proto3" json:"table_schema_only,omitempty"`
}

func (x *GetSchemaRequest) Reset() {
	*x = GetSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRequest) ProtoMessage() {}

func (x *GetSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{12}
}

func (x *GetSchemaRequest) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *GetSchemaRequest) GetIncludeViews() bool {
	if x != nil {
		return x.IncludeViews
	}
	return false
}

func (x *GetSchemaRequest) GetExcludeTables() []string {
	if x != nil {
		return x.ExcludeTables
	}
	return nil
}

func (x *GetSchemaRequest) GetTableSchemaOnly() bool {
	if x != nil {
		return x.TableSchemaOnly
	}
	return false
}

type GetSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaDefinition *SchemaDefinition `protobuf:"bytes,1,opt,name=schema_definition,json=schemaDefinition,proto3" json:"schema_definition,omitempty"`
}

func (x *GetSchemaResponse) Reset() {
	*x = GetSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaResponse) ProtoMessage() {}

func (x *GetSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{13}
}

func (x *GetSchemaResponse) GetSchemaDefinition() *SchemaDefinition {
	if x != nil {
		return x.SchemaDefinition
	}
	return nil
}

type GetPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPermissionsRequest) Reset() {
	*x = GetPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionsRequest) ProtoMessage() {}

func (x *GetPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GetPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{14}
}

type GetPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions *Permissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *GetPermissionsResponse) Reset() {
	*x = GetPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionsResponse) ProtoMessage() {}

func (x *GetPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GetPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{15}
}

func (x *GetPermissionsResponse) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type SetReadOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetReadOnlyRequest) Reset() {
	*x = SetReadOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReadOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReadOnlyRequest) ProtoMessage() {}

func (x *SetReadOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReadOnlyRequest.ProtoReflect.Descriptor instead.
func (*SetReadOnlyRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{16}
}

type SetReadOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetReadOnlyResponse) Reset() {
	*x = SetReadOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReadOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReadOnlyResponse) ProtoMessage() {}

func (x *SetReadOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReadOnlyResponse.ProtoReflect.Descriptor instead.
func (*SetReadOnlyResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{17}
}

type SetReadWriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetReadWriteRequest) Reset() {
	*x = SetReadWriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReadWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReadWriteRequest) ProtoMessage() {}

func (x *SetReadWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReadWriteRequest.ProtoReflect.Descriptor instead.
func (*SetReadWriteRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{18}
}

type SetReadWriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetReadWriteResponse) Reset() {
	*x = SetReadWriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReadWriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReadWriteResponse) ProtoMessage() {}

func (x *SetReadWriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReadWriteResponse.ProtoReflect.Descriptor instead.
func (*SetReadWriteResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{19}
}

type ChangeTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletType dev1.TabletType `protobuf:"varint,1,opt,name=tablet_type,json=tabletType,proto3,enum=vitess.topodata.dev.TabletType" json:"tablet_type,omitempty"`
	SemiSync   bool            `protobuf:"varint,2,opt,name=semiSync,proto3" json:"semiSync,omitempty"`
}

func (x *ChangeTypeRequest) Reset() {
	*x = ChangeTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTypeRequest) ProtoMessage() {}

func (x *ChangeTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTypeRequest.ProtoReflect.Descriptor instead.
func (*ChangeTypeRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{20}
}

func (x *ChangeTypeRequest) GetTabletType() dev1.TabletType {
	if x != nil {
		return x.TabletType
	}
	return dev1.TabletType(0)
}

func (x *ChangeTypeRequest) GetSemiSync() bool {
	if x != nil {
		return x.SemiSync
	}
	return false
}

type ChangeTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeTypeResponse) Reset() {
	*x = ChangeTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTypeResponse) ProtoMessage() {}

func (x *ChangeTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTypeResponse.ProtoReflect.Descriptor instead.
func (*ChangeTypeResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{21}
}

type RefreshStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshStateRequest) Reset() {
	*x = RefreshStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshStateRequest) ProtoMessage() {}

func (x *RefreshStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshStateRequest.ProtoReflect.Descriptor instead.
func (*RefreshStateRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{22}
}

type RefreshStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshStateResponse) Reset() {
	*x = RefreshStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshStateResponse) ProtoMessage() {}

func (x *RefreshStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshStateResponse.ProtoReflect.Descriptor instead.
func (*RefreshStateResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{23}
}

type RunHealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunHealthCheckRequest) Reset() {
	*x = RunHealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunHealthCheckRequest) ProtoMessage() {}

func (x *RunHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*RunHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{24}
}

type RunHealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunHealthCheckResponse) Reset() {
	*x = RunHealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunHealthCheckResponse) ProtoMessage() {}

func (x *RunHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*RunHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{25}
}

type ReloadSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// wait_position allows scheduling a schema reload to occur after a
	// given DDL has replicated to this server, by specifying a replication
	// position to wait for. Leave empty to trigger the reload immediately.
	WaitPosition string `protobuf:"bytes,1,opt,name=wait_position,json=waitPosition,proto3" json:"wait_position,omitempty"`
}

func (x *ReloadSchemaRequest) Reset() {
	*x = ReloadSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemaRequest) ProtoMessage() {}

func (x *ReloadSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemaRequest.ProtoReflect.Descriptor instead.
func (*ReloadSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{26}
}

func (x *ReloadSchemaRequest) GetWaitPosition() string {
	if x != nil {
		return x.WaitPosition
	}
	return ""
}

type ReloadSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReloadSchemaResponse) Reset() {
	*x = ReloadSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadSchemaResponse) ProtoMessage() {}

func (x *ReloadSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadSchemaResponse.ProtoReflect.Descriptor instead.
func (*ReloadSchemaResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{27}
}

type PreflightSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []string `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PreflightSchemaRequest) Reset() {
	*x = PreflightSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreflightSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreflightSchemaRequest) ProtoMessage() {}

func (x *PreflightSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreflightSchemaRequest.ProtoReflect.Descriptor instead.
func (*PreflightSchemaRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{28}
}

func (x *PreflightSchemaRequest) GetChanges() []string {
	if x != nil {
		return x.Changes
	}
	return nil
}

type PreflightSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// change_results has for each change the schema before and after it.
	// The number of elements is identical to the length of "changes" in the request.
	ChangeResults []*SchemaChangeResult `protobuf:"bytes,1,rep,name=change_results,json=changeResults,proto3" json:"change_results,omitempty"`
}

func (x *PreflightSchemaResponse) Reset() {
	*x = PreflightSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreflightSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreflightSchemaResponse) ProtoMessage() {}

func (x *PreflightSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreflightSchemaResponse.ProtoReflect.Descriptor instead.
func (*PreflightSchemaResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{29}
}

func (x *PreflightSchemaResponse) GetChangeResults() []*SchemaChangeResult {
	if x != nil {
		return x.ChangeResults
	}
	return nil
}

type ApplySchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql              string            `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Force            bool              `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	AllowReplication bool              `protobuf:"varint,3,opt,name=allow_replication,json=allowReplication,proto3" json:"allow_replication,omitempty"`
	BeforeSchema     *SchemaDefinition `protobuf:"bytes,4,opt,name=before_schema,json=beforeSchema,proto3" json:"before_schema,omitempty"`
	AfterSchema      *SchemaDefinition `protobuf:"bytes,5,opt,name=after_schema,json=afterSchema,proto3" json:"after_schema,omitempty"`
	SqlMode          string            `protobuf:"bytes,6,opt,name=sql_mode,json=sqlMode,proto3" json:"sql_mode,omitempty"`
	// BatchSize indicates how many queries to apply together
	BatchSize int64 `protobuf:"varint,7,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
}

func (x *ApplySchemaRequest) Reset() {
	*x = ApplySchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplySchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplySchemaRequest) ProtoMessage() {}

func (x *ApplySchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplySchemaRequest.ProtoReflect.Descriptor instead.
func (*ApplySchemaRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{30}
}

func (x *ApplySchemaRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *ApplySchemaRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *ApplySchemaRequest) GetAllowReplication() bool {
	if x != nil {
		return x.AllowReplication
	}
	return false
}

func (x *ApplySchemaRequest) GetBeforeSchema() *SchemaDefinition {
	if x != nil {
		return x.BeforeSchema
	}
	return nil
}

func (x *ApplySchemaRequest) GetAfterSchema() *SchemaDefinition {
	if x != nil {
		return x.AfterSchema
	}
	return nil
}

func (x *ApplySchemaRequest) GetSqlMode() string {
	if x != nil {
		return x.SqlMode
	}
	return ""
}

func (x *ApplySchemaRequest) GetBatchSize() int64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type ApplySchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeforeSchema *SchemaDefinition `protobuf:"bytes,1,opt,name=before_schema,json=beforeSchema,proto3" json:"before_schema,omitempty"`
	AfterSchema  *SchemaDefinition `protobuf:"bytes,2,opt,name=after_schema,json=afterSchema,proto3" json:"after_schema,omitempty"`
}

func (x *ApplySchemaResponse) Reset() {
	*x = ApplySchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplySchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplySchemaResponse) ProtoMessage() {}

func (x *ApplySchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplySchemaResponse.ProtoReflect.Descriptor instead.
func (*ApplySchemaResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{31}
}

func (x *ApplySchemaResponse) GetBeforeSchema() *SchemaDefinition {
	if x != nil {
		return x.BeforeSchema
	}
	return nil
}

func (x *ApplySchemaResponse) GetAfterSchema() *SchemaDefinition {
	if x != nil {
		return x.AfterSchema
	}
	return nil
}

type LockTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LockTablesRequest) Reset() {
	*x = LockTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockTablesRequest) ProtoMessage() {}

func (x *LockTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockTablesRequest.ProtoReflect.Descriptor instead.
func (*LockTablesRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{32}
}

type LockTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LockTablesResponse) Reset() {
	*x = LockTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockTablesResponse) ProtoMessage() {}

func (x *LockTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockTablesResponse.ProtoReflect.Descriptor instead.
func (*LockTablesResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{33}
}

type UnlockTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnlockTablesRequest) Reset() {
	*x = UnlockTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockTablesRequest) ProtoMessage() {}

func (x *UnlockTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockTablesRequest.ProtoReflect.Descriptor instead.
func (*UnlockTablesRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{34}
}

type UnlockTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnlockTablesResponse) Reset() {
	*x = UnlockTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockTablesResponse) ProtoMessage() {}

func (x *UnlockTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockTablesResponse.ProtoReflect.Descriptor instead.
func (*UnlockTablesResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{35}
}

type ExecuteQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query   []byte `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DbName  string `protobuf:"bytes,2,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	MaxRows uint64 `protobuf:"varint,3,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *dev2.CallerID `protobuf:"bytes,4,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
}

func (x *ExecuteQueryRequest) Reset() {
	*x = ExecuteQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteQueryRequest) ProtoMessage() {}

func (x *ExecuteQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteQueryRequest.ProtoReflect.Descriptor instead.
func (*ExecuteQueryRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{36}
}

func (x *ExecuteQueryRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ExecuteQueryRequest) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *ExecuteQueryRequest) GetMaxRows() uint64 {
	if x != nil {
		return x.MaxRows
	}
	return 0
}

func (x *ExecuteQueryRequest) GetCallerId() *dev2.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

type ExecuteQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *dev.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ExecuteQueryResponse) Reset() {
	*x = ExecuteQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteQueryResponse) ProtoMessage() {}

func (x *ExecuteQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteQueryResponse.ProtoReflect.Descriptor instead.
func (*ExecuteQueryResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{37}
}

func (x *ExecuteQueryResponse) GetResult() *dev.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type ExecuteFetchAsDbaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query          []byte `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DbName         string `protobuf:"bytes,2,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	MaxRows        uint64 `protobuf:"varint,3,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
	DisableBinlogs bool   `protobuf:"varint,4,opt,name=disable_binlogs,json=disableBinlogs,proto3" json:"disable_binlogs,omitempty"`
	ReloadSchema   bool   `protobuf:"varint,5,opt,name=reload_schema,json=reloadSchema,proto3" json:"reload_schema,omitempty"`
}

func (x *ExecuteFetchAsDbaRequest) Reset() {
	*x = ExecuteFetchAsDbaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteFetchAsDbaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteFetchAsDbaRequest) ProtoMessage() {}

func (x *ExecuteFetchAsDbaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteFetchAsDbaRequest.ProtoReflect.Descriptor instead.
func (*ExecuteFetchAsDbaRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{38}
}

func (x *ExecuteFetchAsDbaRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ExecuteFetchAsDbaRequest) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *ExecuteFetchAsDbaRequest) GetMaxRows() uint64 {
	if x != nil {
		return x.MaxRows
	}
	return 0
}

func (x *ExecuteFetchAsDbaRequest) GetDisableBinlogs() bool {
	if x != nil {
		return x.DisableBinlogs
	}
	return false
}

func (x *ExecuteFetchAsDbaRequest) GetReloadSchema() bool {
	if x != nil {
		return x.ReloadSchema
	}
	return false
}

type ExecuteFetchAsDbaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *dev.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ExecuteFetchAsDbaResponse) Reset() {
	*x = ExecuteFetchAsDbaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteFetchAsDbaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteFetchAsDbaResponse) ProtoMessage() {}

func (x *ExecuteFetchAsDbaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteFetchAsDbaResponse.ProtoReflect.Descriptor instead.
func (*ExecuteFetchAsDbaResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{39}
}

func (x *ExecuteFetchAsDbaResponse) GetResult() *dev.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type ExecuteFetchAsAllPrivsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query        []byte `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DbName       string `protobuf:"bytes,2,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	MaxRows      uint64 `protobuf:"varint,3,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
	ReloadSchema bool   `protobuf:"varint,4,opt,name=reload_schema,json=reloadSchema,proto3" json:"reload_schema,omitempty"`
}

func (x *ExecuteFetchAsAllPrivsRequest) Reset() {
	*x = ExecuteFetchAsAllPrivsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteFetchAsAllPrivsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteFetchAsAllPrivsRequest) ProtoMessage() {}

func (x *ExecuteFetchAsAllPrivsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteFetchAsAllPrivsRequest.ProtoReflect.Descriptor instead.
func (*ExecuteFetchAsAllPrivsRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{40}
}

func (x *ExecuteFetchAsAllPrivsRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ExecuteFetchAsAllPrivsRequest) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *ExecuteFetchAsAllPrivsRequest) GetMaxRows() uint64 {
	if x != nil {
		return x.MaxRows
	}
	return 0
}

func (x *ExecuteFetchAsAllPrivsRequest) GetReloadSchema() bool {
	if x != nil {
		return x.ReloadSchema
	}
	return false
}

type ExecuteFetchAsAllPrivsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *dev.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ExecuteFetchAsAllPrivsResponse) Reset() {
	*x = ExecuteFetchAsAllPrivsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteFetchAsAllPrivsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteFetchAsAllPrivsResponse) ProtoMessage() {}

func (x *ExecuteFetchAsAllPrivsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteFetchAsAllPrivsResponse.ProtoReflect.Descriptor instead.
func (*ExecuteFetchAsAllPrivsResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{41}
}

func (x *ExecuteFetchAsAllPrivsResponse) GetResult() *dev.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type ExecuteFetchAsAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query   []byte `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	MaxRows uint64 `protobuf:"varint,2,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
}

func (x *ExecuteFetchAsAppRequest) Reset() {
	*x = ExecuteFetchAsAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteFetchAsAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteFetchAsAppRequest) ProtoMessage() {}

func (x *ExecuteFetchAsAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteFetchAsAppRequest.ProtoReflect.Descriptor instead.
func (*ExecuteFetchAsAppRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{42}
}

func (x *ExecuteFetchAsAppRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ExecuteFetchAsAppRequest) GetMaxRows() uint64 {
	if x != nil {
		return x.MaxRows
	}
	return 0
}

type ExecuteFetchAsAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *dev.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ExecuteFetchAsAppResponse) Reset() {
	*x = ExecuteFetchAsAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteFetchAsAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteFetchAsAppResponse) ProtoMessage() {}

func (x *ExecuteFetchAsAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteFetchAsAppResponse.ProtoReflect.Descriptor instead.
func (*ExecuteFetchAsAppResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{43}
}

func (x *ExecuteFetchAsAppResponse) GetResult() *dev.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReplicationStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplicationStatusRequest) Reset() {
	*x = ReplicationStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationStatusRequest) ProtoMessage() {}

func (x *ReplicationStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationStatusRequest.ProtoReflect.Descriptor instead.
func (*ReplicationStatusRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{44}
}

type ReplicationStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *dev3.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ReplicationStatusResponse) Reset() {
	*x = ReplicationStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationStatusResponse) ProtoMessage() {}

func (x *ReplicationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationStatusResponse.ProtoReflect.Descriptor instead.
func (*ReplicationStatusResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{45}
}

func (x *ReplicationStatusResponse) GetStatus() *dev3.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type PrimaryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrimaryStatusRequest) Reset() {
	*x = PrimaryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryStatusRequest) ProtoMessage() {}

func (x *PrimaryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryStatusRequest.ProtoReflect.Descriptor instead.
func (*PrimaryStatusRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{46}
}

type PrimaryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *dev3.PrimaryStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PrimaryStatusResponse) Reset() {
	*x = PrimaryStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryStatusResponse) ProtoMessage() {}

func (x *PrimaryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryStatusResponse.ProtoReflect.Descriptor instead.
func (*PrimaryStatusResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{47}
}

func (x *PrimaryStatusResponse) GetStatus() *dev3.PrimaryStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type PrimaryPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrimaryPositionRequest) Reset() {
	*x = PrimaryPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryPositionRequest) ProtoMessage() {}

func (x *PrimaryPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryPositionRequest.ProtoReflect.Descriptor instead.
func (*PrimaryPositionRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{48}
}

type PrimaryPositionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *PrimaryPositionResponse) Reset() {
	*x = PrimaryPositionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryPositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryPositionResponse) ProtoMessage() {}

func (x *PrimaryPositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryPositionResponse.ProtoReflect.Descriptor instead.
func (*PrimaryPositionResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{49}
}

func (x *PrimaryPositionResponse) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type WaitForPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *WaitForPositionRequest) Reset() {
	*x = WaitForPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForPositionRequest) ProtoMessage() {}

func (x *WaitForPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForPositionRequest.ProtoReflect.Descriptor instead.
func (*WaitForPositionRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{50}
}

func (x *WaitForPositionRequest) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type WaitForPositionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitForPositionResponse) Reset() {
	*x = WaitForPositionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForPositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForPositionResponse) ProtoMessage() {}

func (x *WaitForPositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForPositionResponse.ProtoReflect.Descriptor instead.
func (*WaitForPositionResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{51}
}

type StopReplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopReplicationRequest) Reset() {
	*x = StopReplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationRequest) ProtoMessage() {}

func (x *StopReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationRequest.ProtoReflect.Descriptor instead.
func (*StopReplicationRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{52}
}

type StopReplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopReplicationResponse) Reset() {
	*x = StopReplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationResponse) ProtoMessage() {}

func (x *StopReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationResponse.ProtoReflect.Descriptor instead.
func (*StopReplicationResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{53}
}

type StopReplicationMinimumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position    string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	WaitTimeout int64  `protobuf:"varint,2,opt,name=wait_timeout,json=waitTimeout,proto3" json:"wait_timeout,omitempty"`
}

func (x *StopReplicationMinimumRequest) Reset() {
	*x = StopReplicationMinimumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReplicationMinimumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationMinimumRequest) ProtoMessage() {}

func (x *StopReplicationMinimumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationMinimumRequest.ProtoReflect.Descriptor instead.
func (*StopReplicationMinimumRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{54}
}

func (x *StopReplicationMinimumRequest) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *StopReplicationMinimumRequest) GetWaitTimeout() int64 {
	if x != nil {
		return x.WaitTimeout
	}
	return 0
}

type StopReplicationMinimumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *StopReplicationMinimumResponse) Reset() {
	*x = StopReplicationMinimumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReplicationMinimumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationMinimumResponse) ProtoMessage() {}

func (x *StopReplicationMinimumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationMinimumResponse.ProtoReflect.Descriptor instead.
func (*StopReplicationMinimumResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{55}
}

func (x *StopReplicationMinimumResponse) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type StartReplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SemiSync bool `protobuf:"varint,1,opt,name=semiSync,proto3" json:"semiSync,omitempty"`
}

func (x *StartReplicationRequest) Reset() {
	*x = StartReplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicationRequest) ProtoMessage() {}

func (x *StartReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicationRequest.ProtoReflect.Descriptor instead.
func (*StartReplicationRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{56}
}

func (x *StartReplicationRequest) GetSemiSync() bool {
	if x != nil {
		return x.SemiSync
	}
	return false
}

type StartReplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartReplicationResponse) Reset() {
	*x = StartReplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicationResponse) ProtoMessage() {}

func (x *StartReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicationResponse.ProtoReflect.Descriptor instead.
func (*StartReplicationResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{57}
}

type StartReplicationUntilAfterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position    string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	WaitTimeout int64  `protobuf:"varint,2,opt,name=wait_timeout,json=waitTimeout,proto3" json:"wait_timeout,omitempty"`
}

func (x *StartReplicationUntilAfterRequest) Reset() {
	*x = StartReplicationUntilAfterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartReplicationUntilAfterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicationUntilAfterRequest) ProtoMessage() {}

func (x *StartReplicationUntilAfterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicationUntilAfterRequest.ProtoReflect.Descriptor instead.
func (*StartReplicationUntilAfterRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{58}
}

func (x *StartReplicationUntilAfterRequest) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *StartReplicationUntilAfterRequest) GetWaitTimeout() int64 {
	if x != nil {
		return x.WaitTimeout
	}
	return 0
}

type StartReplicationUntilAfterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartReplicationUntilAfterResponse) Reset() {
	*x = StartReplicationUntilAfterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartReplicationUntilAfterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicationUntilAfterResponse) ProtoMessage() {}

func (x *StartReplicationUntilAfterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicationUntilAfterResponse.ProtoReflect.Descriptor instead.
func (*StartReplicationUntilAfterResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{59}
}

type GetReplicasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetReplicasRequest) Reset() {
	*x = GetReplicasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReplicasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReplicasRequest) ProtoMessage() {}

func (x *GetReplicasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReplicasRequest.ProtoReflect.Descriptor instead.
func (*GetReplicasRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{60}
}

type GetReplicasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrs []string `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (x *GetReplicasResponse) Reset() {
	*x = GetReplicasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReplicasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReplicasResponse) ProtoMessage() {}

func (x *GetReplicasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReplicasResponse.ProtoReflect.Descriptor instead.
func (*GetReplicasResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{61}
}

func (x *GetReplicasResponse) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type ResetReplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetReplicationRequest) Reset() {
	*x = ResetReplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetReplicationRequest) ProtoMessage() {}

func (x *ResetReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetReplicationRequest.ProtoReflect.Descriptor instead.
func (*ResetReplicationRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{62}
}

type ResetReplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetReplicationResponse) Reset() {
	*x = ResetReplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetReplicationResponse) ProtoMessage() {}

func (x *ResetReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetReplicationResponse.ProtoReflect.Descriptor instead.
func (*ResetReplicationResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{63}
}

type VReplicationExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *VReplicationExecRequest) Reset() {
	*x = VReplicationExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VReplicationExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VReplicationExecRequest) ProtoMessage() {}

func (x *VReplicationExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VReplicationExecRequest.ProtoReflect.Descriptor instead.
func (*VReplicationExecRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{64}
}

func (x *VReplicationExecRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type VReplicationExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *dev.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *VReplicationExecResponse) Reset() {
	*x = VReplicationExecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VReplicationExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VReplicationExecResponse) ProtoMessage() {}

func (x *VReplicationExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VReplicationExecResponse.ProtoReflect.Descriptor instead.
func (*VReplicationExecResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{65}
}

func (x *VReplicationExecResponse) GetResult() *dev.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type VReplicationWaitForPosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Position string `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *VReplicationWaitForPosRequest) Reset() {
	*x = VReplicationWaitForPosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VReplicationWaitForPosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VReplicationWaitForPosRequest) ProtoMessage() {}

func (x *VReplicationWaitForPosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VReplicationWaitForPosRequest.ProtoReflect.Descriptor instead.
func (*VReplicationWaitForPosRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{66}
}

func (x *VReplicationWaitForPosRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VReplicationWaitForPosRequest) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type VReplicationWaitForPosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VReplicationWaitForPosResponse) Reset() {
	*x = VReplicationWaitForPosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VReplicationWaitForPosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VReplicationWaitForPosResponse) ProtoMessage() {}

func (x *VReplicationWaitForPosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VReplicationWaitForPosResponse.ProtoReflect.Descriptor instead.
func (*VReplicationWaitForPosResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{67}
}

type InitPrimaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SemiSync bool `protobuf:"varint,1,opt,name=semiSync,proto3" json:"semiSync,omitempty"`
}

func (x *InitPrimaryRequest) Reset() {
	*x = InitPrimaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPrimaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPrimaryRequest) ProtoMessage() {}

func (x *InitPrimaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPrimaryRequest.ProtoReflect.Descriptor instead.
func (*InitPrimaryRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{68}
}

func (x *InitPrimaryRequest) GetSemiSync() bool {
	if x != nil {
		return x.SemiSync
	}
	return false
}

type InitPrimaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *InitPrimaryResponse) Reset() {
	*x = InitPrimaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPrimaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPrimaryResponse) ProtoMessage() {}

func (x *InitPrimaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPrimaryResponse.ProtoReflect.Descriptor instead.
func (*InitPrimaryResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{69}
}

func (x *InitPrimaryResponse) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type PopulateReparentJournalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeCreatedNs       int64             `protobuf:"varint,1,opt,name=time_created_ns,json=timeCreatedNs,proto3" json:"time_created_ns,omitempty"`
	ActionName          string            `protobuf:"bytes,2,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`
	PrimaryAlias        *dev1.TabletAlias `protobuf:"bytes,3,opt,name=primary_alias,json=primaryAlias,proto3" json:"primary_alias,omitempty"`
	ReplicationPosition string            `protobuf:"bytes,4,opt,name=replication_position,json=replicationPosition,proto3" json:"replication_position,omitempty"`
}

func (x *PopulateReparentJournalRequest) Reset() {
	*x = PopulateReparentJournalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopulateReparentJournalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopulateReparentJournalRequest) ProtoMessage() {}

func (x *PopulateReparentJournalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopulateReparentJournalRequest.ProtoReflect.Descriptor instead.
func (*PopulateReparentJournalRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{70}
}

func (x *PopulateReparentJournalRequest) GetTimeCreatedNs() int64 {
	if x != nil {
		return x.TimeCreatedNs
	}
	return 0
}

func (x *PopulateReparentJournalRequest) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *PopulateReparentJournalRequest) GetPrimaryAlias() *dev1.TabletAlias {
	if x != nil {
		return x.PrimaryAlias
	}
	return nil
}

func (x *PopulateReparentJournalRequest) GetReplicationPosition() string {
	if x != nil {
		return x.ReplicationPosition
	}
	return ""
}

type PopulateReparentJournalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PopulateReparentJournalResponse) Reset() {
	*x = PopulateReparentJournalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopulateReparentJournalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopulateReparentJournalResponse) ProtoMessage() {}

func (x *PopulateReparentJournalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopulateReparentJournalResponse.ProtoReflect.Descriptor instead.
func (*PopulateReparentJournalResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{71}
}

type InitReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent              *dev1.TabletAlias `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	ReplicationPosition string            `protobuf:"bytes,2,opt,name=replication_position,json=replicationPosition,proto3" json:"replication_position,omitempty"`
	TimeCreatedNs       int64             `protobuf:"varint,3,opt,name=time_created_ns,json=timeCreatedNs,proto3" json:"time_created_ns,omitempty"`
	SemiSync            bool              `protobuf:"varint,4,opt,name=semiSync,proto3" json:"semiSync,omitempty"`
}

func (x *InitReplicaRequest) Reset() {
	*x = InitReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitReplicaRequest) ProtoMessage() {}

func (x *InitReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitReplicaRequest.ProtoReflect.Descriptor instead.
func (*InitReplicaRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{72}
}

func (x *InitReplicaRequest) GetParent() *dev1.TabletAlias {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *InitReplicaRequest) GetReplicationPosition() string {
	if x != nil {
		return x.ReplicationPosition
	}
	return ""
}

func (x *InitReplicaRequest) GetTimeCreatedNs() int64 {
	if x != nil {
		return x.TimeCreatedNs
	}
	return 0
}

func (x *InitReplicaRequest) GetSemiSync() bool {
	if x != nil {
		return x.SemiSync
	}
	return false
}

type InitReplicaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitReplicaResponse) Reset() {
	*x = InitReplicaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitReplicaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitReplicaResponse) ProtoMessage() {}

func (x *InitReplicaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitReplicaResponse.ProtoReflect.Descriptor instead.
func (*InitReplicaResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{73}
}

type DemotePrimaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DemotePrimaryRequest) Reset() {
	*x = DemotePrimaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemotePrimaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemotePrimaryRequest) ProtoMessage() {}

func (x *DemotePrimaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemotePrimaryRequest.ProtoReflect.Descriptor instead.
func (*DemotePrimaryRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{74}
}

type DemotePrimaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PrimaryStatus represents the response from calling `SHOW MASTER STATUS` on a primary that has been demoted.
	PrimaryStatus *dev3.PrimaryStatus `protobuf:"bytes,2,opt,name=primary_status,json=primaryStatus,proto3" json:"primary_status,omitempty"`
}

func (x *DemotePrimaryResponse) Reset() {
	*x = DemotePrimaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemotePrimaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemotePrimaryResponse) ProtoMessage() {}

func (x *DemotePrimaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemotePrimaryResponse.ProtoReflect.Descriptor instead.
func (*DemotePrimaryResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{75}
}

func (x *DemotePrimaryResponse) GetPrimaryStatus() *dev3.PrimaryStatus {
	if x != nil {
		return x.PrimaryStatus
	}
	return nil
}

type UndoDemotePrimaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SemiSync bool `protobuf:"varint,1,opt,name=semiSync,proto3" json:"semiSync,omitempty"`
}

func (x *UndoDemotePrimaryRequest) Reset() {
	*x = UndoDemotePrimaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoDemotePrimaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoDemotePrimaryRequest) ProtoMessage() {}

func (x *UndoDemotePrimaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoDemotePrimaryRequest.ProtoReflect.Descriptor instead.
func (*UndoDemotePrimaryRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{76}
}

func (x *UndoDemotePrimaryRequest) GetSemiSync() bool {
	if x != nil {
		return x.SemiSync
	}
	return false
}

type UndoDemotePrimaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UndoDemotePrimaryResponse) Reset() {
	*x = UndoDemotePrimaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoDemotePrimaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoDemotePrimaryResponse) ProtoMessage() {}

func (x *UndoDemotePrimaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoDemotePrimaryResponse.ProtoReflect.Descriptor instead.
func (*UndoDemotePrimaryResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{77}
}

type ReplicaWasPromotedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplicaWasPromotedRequest) Reset() {
	*x = ReplicaWasPromotedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaWasPromotedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaWasPromotedRequest) ProtoMessage() {}

func (x *ReplicaWasPromotedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaWasPromotedRequest.ProtoReflect.Descriptor instead.
func (*ReplicaWasPromotedRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{78}
}

type ReplicaWasPromotedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplicaWasPromotedResponse) Reset() {
	*x = ReplicaWasPromotedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaWasPromotedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaWasPromotedResponse) ProtoMessage() {}

func (x *ReplicaWasPromotedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaWasPromotedResponse.ProtoReflect.Descriptor instead.
func (*ReplicaWasPromotedResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{79}
}

type ResetReplicationParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetReplicationParametersRequest) Reset() {
	*x = ResetReplicationParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetReplicationParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetReplicationParametersRequest) ProtoMessage() {}

func (x *ResetReplicationParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetReplicationParametersRequest.ProtoReflect.Descriptor instead.
func (*ResetReplicationParametersRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{80}
}

type ResetReplicationParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetReplicationParametersResponse) Reset() {
	*x = ResetReplicationParametersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetReplicationParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetReplicationParametersResponse) ProtoMessage() {}

func (x *ResetReplicationParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetReplicationParametersResponse.ProtoReflect.Descriptor instead.
func (*ResetReplicationParametersResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{81}
}

type FullStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FullStatusRequest) Reset() {
	*x = FullStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullStatusRequest) ProtoMessage() {}

func (x *FullStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullStatusRequest.ProtoReflect.Descriptor instead.
func (*FullStatusRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{82}
}

type FullStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *dev3.FullStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FullStatusResponse) Reset() {
	*x = FullStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullStatusResponse) ProtoMessage() {}

func (x *FullStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullStatusResponse.ProtoReflect.Descriptor instead.
func (*FullStatusResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{83}
}

func (x *FullStatusResponse) GetStatus() *dev3.FullStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type SetReplicationSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                *dev1.TabletAlias `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	TimeCreatedNs         int64             `protobuf:"varint,2,opt,name=time_created_ns,json=timeCreatedNs,proto3" json:"time_created_ns,omitempty"`
	ForceStartReplication bool              `protobuf:"varint,3,opt,name=force_start_replication,json=forceStartReplication,proto3" json:"force_start_replication,omitempty"`
	WaitPosition          string            `protobuf:"bytes,4,opt,name=wait_position,json=waitPosition,proto3" json:"wait_position,omitempty"`
	SemiSync              bool              `protobuf:"varint,5,opt,name=semiSync,proto3" json:"semiSync,omitempty"`
}

func (x *SetReplicationSourceRequest) Reset() {
	*x = SetReplicationSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReplicationSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReplicationSourceRequest) ProtoMessage() {}

func (x *SetReplicationSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReplicationSourceRequest.ProtoReflect.Descriptor instead.
func (*SetReplicationSourceRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{84}
}

func (x *SetReplicationSourceRequest) GetParent() *dev1.TabletAlias {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *SetReplicationSourceRequest) GetTimeCreatedNs() int64 {
	if x != nil {
		return x.TimeCreatedNs
	}
	return 0
}

func (x *SetReplicationSourceRequest) GetForceStartReplication() bool {
	if x != nil {
		return x.ForceStartReplication
	}
	return false
}

func (x *SetReplicationSourceRequest) GetWaitPosition() string {
	if x != nil {
		return x.WaitPosition
	}
	return ""
}

func (x *SetReplicationSourceRequest) GetSemiSync() bool {
	if x != nil {
		return x.SemiSync
	}
	return false
}

type SetReplicationSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetReplicationSourceResponse) Reset() {
	*x = SetReplicationSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReplicationSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReplicationSourceResponse) ProtoMessage() {}

func (x *SetReplicationSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReplicationSourceResponse.ProtoReflect.Descriptor instead.
func (*SetReplicationSourceResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{85}
}

type ReplicaWasRestartedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the parent alias the tablet should have
	Parent *dev1.TabletAlias `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ReplicaWasRestartedRequest) Reset() {
	*x = ReplicaWasRestartedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaWasRestartedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaWasRestartedRequest) ProtoMessage() {}

func (x *ReplicaWasRestartedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaWasRestartedRequest.ProtoReflect.Descriptor instead.
func (*ReplicaWasRestartedRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{86}
}

func (x *ReplicaWasRestartedRequest) GetParent() *dev1.TabletAlias {
	if x != nil {
		return x.Parent
	}
	return nil
}

type ReplicaWasRestartedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplicaWasRestartedResponse) Reset() {
	*x = ReplicaWasRestartedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaWasRestartedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaWasRestartedResponse) ProtoMessage() {}

func (x *ReplicaWasRestartedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaWasRestartedResponse.ProtoReflect.Descriptor instead.
func (*ReplicaWasRestartedResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{87}
}

type StopReplicationAndGetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopReplicationMode dev3.StopReplicationMode `protobuf:"varint,1,opt,name=stop_replication_mode,json=stopReplicationMode,proto3,enum=vitess.replicationdata.dev.StopReplicationMode" json:"stop_replication_mode,omitempty"`
}

func (x *StopReplicationAndGetStatusRequest) Reset() {
	*x = StopReplicationAndGetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReplicationAndGetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationAndGetStatusRequest) ProtoMessage() {}

func (x *StopReplicationAndGetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationAndGetStatusRequest.ProtoReflect.Descriptor instead.
func (*StopReplicationAndGetStatusRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{88}
}

func (x *StopReplicationAndGetStatusRequest) GetStopReplicationMode() dev3.StopReplicationMode {
	if x != nil {
		return x.StopReplicationMode
	}
	return dev3.StopReplicationMode(0)
}

type StopReplicationAndGetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status represents the replication status call right before, and right after telling the replica to stop.
	Status *dev3.StopReplicationStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StopReplicationAndGetStatusResponse) Reset() {
	*x = StopReplicationAndGetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReplicationAndGetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationAndGetStatusResponse) ProtoMessage() {}

func (x *StopReplicationAndGetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationAndGetStatusResponse.ProtoReflect.Descriptor instead.
func (*StopReplicationAndGetStatusResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{89}
}

func (x *StopReplicationAndGetStatusResponse) GetStatus() *dev3.StopReplicationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type PromoteReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SemiSync bool `protobuf:"varint,1,opt,name=semiSync,proto3" json:"semiSync,omitempty"`
}

func (x *PromoteReplicaRequest) Reset() {
	*x = PromoteReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteReplicaRequest) ProtoMessage() {}

func (x *PromoteReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteReplicaRequest.ProtoReflect.Descriptor instead.
func (*PromoteReplicaRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{90}
}

func (x *PromoteReplicaRequest) GetSemiSync() bool {
	if x != nil {
		return x.SemiSync
	}
	return false
}

type PromoteReplicaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *PromoteReplicaResponse) Reset() {
	*x = PromoteReplicaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteReplicaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteReplicaResponse) ProtoMessage() {}

func (x *PromoteReplicaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteReplicaResponse.ProtoReflect.Descriptor instead.
func (*PromoteReplicaResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{91}
}

func (x *PromoteReplicaResponse) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type BackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concurrency  int64 `protobuf:"varint,1,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	AllowPrimary bool  `protobuf:"varint,2,opt,name=allow_primary,json=allowPrimary,proto3" json:"allow_primary,omitempty"`
	// IncrementalFromPos indicates a position of a previous backup. When this value is non-empty
	// then the backup becomes incremental and applies as of given position.
	IncrementalFromPos string `protobuf:"bytes,3,opt,name=incremental_from_pos,json=incrementalFromPos,proto3" json:"incremental_from_pos,omitempty"`
	// UpgradeSafe indicates if the backup should be taken with innodb_fast_shutdown=0
	// so that it's a backup that can be used for an upgrade.
	UpgradeSafe bool `protobuf:"varint,4,opt,name=upgrade_safe,json=upgradeSafe,proto3" json:"upgrade_safe,omitempty"`
}

func (x *BackupRequest) Reset() {
	*x = BackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRequest) ProtoMessage() {}

func (x *BackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRequest.ProtoReflect.Descriptor instead.
func (*BackupRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{92}
}

func (x *BackupRequest) GetConcurrency() int64 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *BackupRequest) GetAllowPrimary() bool {
	if x != nil {
		return x.AllowPrimary
	}
	return false
}

func (x *BackupRequest) GetIncrementalFromPos() string {
	if x != nil {
		return x.IncrementalFromPos
	}
	return ""
}

func (x *BackupRequest) GetUpgradeSafe() bool {
	if x != nil {
		return x.UpgradeSafe
	}
	return false
}

type BackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *dev4.Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *BackupResponse) Reset() {
	*x = BackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupResponse) ProtoMessage() {}

func (x *BackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupResponse.ProtoReflect.Descriptor instead.
func (*BackupResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{93}
}

func (x *BackupResponse) GetEvent() *dev4.Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type RestoreFromBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupTime *dev5.Time `protobuf:"bytes,1,opt,name=backup_time,json=backupTime,proto3" json:"backup_time,omitempty"`
	// RestoreToPos indicates a position for a point-in-time recovery. The recovery
	// is expected to utilize one full backup, followed by zero or more incremental backups,
	// that reach the precise desired position
	RestoreToPos string `protobuf:"bytes,2,opt,name=restore_to_pos,json=restoreToPos,proto3" json:"restore_to_pos,omitempty"`
	// Dry run does not actually performs the restore, but validates the steps and availability of backups
	DryRun bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// RestoreToTimestamp, if given, requested an inremental restore up to (and excluding) the given timestamp.
	// RestoreToTimestamp and RestoreToPos are mutually exclusive.
	RestoreToTimestamp *dev5.Time `protobuf:"bytes,4,opt,name=restore_to_timestamp,json=restoreToTimestamp,proto3" json:"restore_to_timestamp,omitempty"`
}

func (x *RestoreFromBackupRequest) Reset() {
	*x = RestoreFromBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreFromBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreFromBackupRequest) ProtoMessage() {}

func (x *RestoreFromBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreFromBackupRequest.ProtoReflect.Descriptor instead.
func (*RestoreFromBackupRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{94}
}

func (x *RestoreFromBackupRequest) GetBackupTime() *dev5.Time {
	if x != nil {
		return x.BackupTime
	}
	return nil
}

func (x *RestoreFromBackupRequest) GetRestoreToPos() string {
	if x != nil {
		return x.RestoreToPos
	}
	return ""
}

func (x *RestoreFromBackupRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *RestoreFromBackupRequest) GetRestoreToTimestamp() *dev5.Time {
	if x != nil {
		return x.RestoreToTimestamp
	}
	return nil
}

type RestoreFromBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *dev4.Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *RestoreFromBackupResponse) Reset() {
	*x = RestoreFromBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreFromBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreFromBackupResponse) ProtoMessage() {}

func (x *RestoreFromBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreFromBackupResponse.ProtoReflect.Descriptor instead.
func (*RestoreFromBackupResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{95}
}

func (x *RestoreFromBackupResponse) GetEvent() *dev4.Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type CreateVReplicationWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflow     string               `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	BinlogSource []*dev6.BinlogSource `protobuf:"bytes,2,rep,name=binlog_source,json=binlogSource,proto3" json:"binlog_source,omitempty"`
	// Optional parameters.
	Cells []string `protobuf:"bytes,3,rep,name=cells,proto3" json:"cells,omitempty"`
	// TabletTypes is the list of tablet types to use when selecting source tablets.
	TabletTypes               []dev1.TabletType                `protobuf:"varint,4,rep,packed,name=tablet_types,json=tabletTypes,proto3,enum=vitess.topodata.dev.TabletType" json:"tablet_types,omitempty"`
	TabletSelectionPreference TabletSelectionPreference        `protobuf:"varint,5,opt,name=tablet_selection_preference,json=tabletSelectionPreference,proto3,enum=vitess.tabletmanagerdata.dev.TabletSelectionPreference" json:"tablet_selection_preference,omitempty"`
	WorkflowType              dev6.VReplicationWorkflowType    `protobuf:"varint,6,opt,name=workflow_type,json=workflowType,proto3,enum=vitess.binlogdata.dev.VReplicationWorkflowType" json:"workflow_type,omitempty"`
	WorkflowSubType           dev6.VReplicationWorkflowSubType `protobuf:"varint,7,opt,name=workflow_sub_type,json=workflowSubType,proto3,enum=vitess.binlogdata.dev.VReplicationWorkflowSubType" json:"workflow_sub_type,omitempty"`
	// DeferSecondaryKeys specifies if secondary keys should be created in one shot after table
	// copy finishes.
	DeferSecondaryKeys bool `protobuf:"varint,8,opt,name=defer_secondary_keys,json=deferSecondaryKeys,proto3" json:"defer_secondary_keys,omitempty"`
	// AutoStart specifies if the workflow should be started when created.
	AutoStart bool `protobuf:"varint,9,opt,name=auto_start,json=autoStart,proto3" json:"auto_start,omitempty"`
	// Should the workflow stop after the copy phase.
	StopAfterCopy bool `protobuf:"varint,10,opt,name=stop_after_copy,json=stopAfterCopy,proto3" json:"stop_after_copy,omitempty"`
}

func (x *CreateVReplicationWorkflowRequest) Reset() {
	*x = CreateVReplicationWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVReplicationWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVReplicationWorkflowRequest) ProtoMessage() {}

func (x *CreateVReplicationWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVReplicationWorkflowRequest.ProtoReflect.Descriptor instead.
func (*CreateVReplicationWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{96}
}

func (x *CreateVReplicationWorkflowRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *CreateVReplicationWorkflowRequest) GetBinlogSource() []*dev6.BinlogSource {
	if x != nil {
		return x.BinlogSource
	}
	return nil
}

func (x *CreateVReplicationWorkflowRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *CreateVReplicationWorkflowRequest) GetTabletTypes() []dev1.TabletType {
	if x != nil {
		return x.TabletTypes
	}
	return nil
}

func (x *CreateVReplicationWorkflowRequest) GetTabletSelectionPreference() TabletSelectionPreference {
	if x != nil {
		return x.TabletSelectionPreference
	}
	return TabletSelectionPreference_ANY
}

func (x *CreateVReplicationWorkflowRequest) GetWorkflowType() dev6.VReplicationWorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return dev6.VReplicationWorkflowType(0)
}

func (x *CreateVReplicationWorkflowRequest) GetWorkflowSubType() dev6.VReplicationWorkflowSubType {
	if x != nil {
		return x.WorkflowSubType
	}
	return dev6.VReplicationWorkflowSubType(0)
}

func (x *CreateVReplicationWorkflowRequest) GetDeferSecondaryKeys() bool {
	if x != nil {
		return x.DeferSecondaryKeys
	}
	return false
}

func (x *CreateVReplicationWorkflowRequest) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

func (x *CreateVReplicationWorkflowRequest) GetStopAfterCopy() bool {
	if x != nil {
		return x.StopAfterCopy
	}
	return false
}

type CreateVReplicationWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *dev.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateVReplicationWorkflowResponse) Reset() {
	*x = CreateVReplicationWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVReplicationWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVReplicationWorkflowResponse) ProtoMessage() {}

func (x *CreateVReplicationWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVReplicationWorkflowResponse.ProtoReflect.Descriptor instead.
func (*CreateVReplicationWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{97}
}

func (x *CreateVReplicationWorkflowResponse) GetResult() *dev.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type DeleteVReplicationWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflow string `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *DeleteVReplicationWorkflowRequest) Reset() {
	*x = DeleteVReplicationWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVReplicationWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVReplicationWorkflowRequest) ProtoMessage() {}

func (x *DeleteVReplicationWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVReplicationWorkflowRequest.ProtoReflect.Descriptor instead.
func (*DeleteVReplicationWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{98}
}

func (x *DeleteVReplicationWorkflowRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

type DeleteVReplicationWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *dev.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DeleteVReplicationWorkflowResponse) Reset() {
	*x = DeleteVReplicationWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVReplicationWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVReplicationWorkflowResponse) ProtoMessage() {}

func (x *DeleteVReplicationWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVReplicationWorkflowResponse.ProtoReflect.Descriptor instead.
func (*DeleteVReplicationWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{99}
}

func (x *DeleteVReplicationWorkflowResponse) GetResult() *dev.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReadVReplicationWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflow string `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *ReadVReplicationWorkflowRequest) Reset() {
	*x = ReadVReplicationWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadVReplicationWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadVReplicationWorkflowRequest) ProtoMessage() {}

func (x *ReadVReplicationWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadVReplicationWorkflowRequest.ProtoReflect.Descriptor instead.
func (*ReadVReplicationWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{100}
}

func (x *ReadVReplicationWorkflowRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

type ReadVReplicationWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflow                  string                                     `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Cells                     string                                     `protobuf:"bytes,3,opt,name=cells,proto3" json:"cells,omitempty"`
	TabletTypes               []dev1.TabletType                          `protobuf:"varint,4,rep,packed,name=tablet_types,json=tabletTypes,proto3,enum=vitess.topodata.dev.TabletType" json:"tablet_types,omitempty"`
	TabletSelectionPreference TabletSelectionPreference                  `protobuf:"varint,5,opt,name=tablet_selection_preference,json=tabletSelectionPreference,proto3,enum=vitess.tabletmanagerdata.dev.TabletSelectionPreference" json:"tablet_selection_preference,omitempty"`
	DbName                    string                                     `protobuf:"bytes,6,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	Tags                      string                                     `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
	WorkflowType              dev6.VReplicationWorkflowType              `protobuf:"varint,8,opt,name=workflow_type,json=workflowType,proto3,enum=vitess.binlogdata.dev.VReplicationWorkflowType" json:"workflow_type,omitempty"`
	WorkflowSubType           dev6.VReplicationWorkflowSubType           `protobuf:"varint,9,opt,name=workflow_sub_type,json=workflowSubType,proto3,enum=vitess.binlogdata.dev.VReplicationWorkflowSubType" json:"workflow_sub_type,omitempty"`
	DeferSecondaryKeys        bool                                       `protobuf:"varint,10,opt,name=defer_secondary_keys,json=deferSecondaryKeys,proto3" json:"defer_secondary_keys,omitempty"`
	Streams                   []*ReadVReplicationWorkflowResponse_Stream `protobuf:"bytes,11,rep,name=streams,proto3" json:"streams,omitempty"`
}

func (x *ReadVReplicationWorkflowResponse) Reset() {
	*x = ReadVReplicationWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadVReplicationWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadVReplicationWorkflowResponse) ProtoMessage() {}

func (x *ReadVReplicationWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadVReplicationWorkflowResponse.ProtoReflect.Descriptor instead.
func (*ReadVReplicationWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{101}
}

func (x *ReadVReplicationWorkflowResponse) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *ReadVReplicationWorkflowResponse) GetCells() string {
	if x != nil {
		return x.Cells
	}
	return ""
}

func (x *ReadVReplicationWorkflowResponse) GetTabletTypes() []dev1.TabletType {
	if x != nil {
		return x.TabletTypes
	}
	return nil
}

func (x *ReadVReplicationWorkflowResponse) GetTabletSelectionPreference() TabletSelectionPreference {
	if x != nil {
		return x.TabletSelectionPreference
	}
	return TabletSelectionPreference_ANY
}

func (x *ReadVReplicationWorkflowResponse) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *ReadVReplicationWorkflowResponse) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *ReadVReplicationWorkflowResponse) GetWorkflowType() dev6.VReplicationWorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return dev6.VReplicationWorkflowType(0)
}

func (x *ReadVReplicationWorkflowResponse) GetWorkflowSubType() dev6.VReplicationWorkflowSubType {
	if x != nil {
		return x.WorkflowSubType
	}
	return dev6.VReplicationWorkflowSubType(0)
}

func (x *ReadVReplicationWorkflowResponse) GetDeferSecondaryKeys() bool {
	if x != nil {
		return x.DeferSecondaryKeys
	}
	return false
}

func (x *ReadVReplicationWorkflowResponse) GetStreams() []*ReadVReplicationWorkflowResponse_Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

type VDiffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyspace  string        `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Workflow  string        `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Action    string        `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	ActionArg string        `protobuf:"bytes,4,opt,name=action_arg,json=actionArg,proto3" json:"action_arg,omitempty"`
	VdiffUuid string        `protobuf:"bytes,5,opt,name=vdiff_uuid,json=vdiffUuid,proto3" json:"vdiff_uuid,omitempty"`
	Options   *VDiffOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *VDiffRequest) Reset() {
	*x = VDiffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffRequest) ProtoMessage() {}

func (x *VDiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffRequest.ProtoReflect.Descriptor instead.
func (*VDiffRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{102}
}

func (x *VDiffRequest) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *VDiffRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *VDiffRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *VDiffRequest) GetActionArg() string {
	if x != nil {
		return x.ActionArg
	}
	return ""
}

func (x *VDiffRequest) GetVdiffUuid() string {
	if x != nil {
		return x.VdiffUuid
	}
	return ""
}

func (x *VDiffRequest) GetOptions() *VDiffOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type VDiffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Output    *dev.QueryResult `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	VdiffUuid string           `protobuf:"bytes,3,opt,name=vdiff_uuid,json=vdiffUuid,proto3" json:"vdiff_uuid,omitempty"`
}

func (x *VDiffResponse) Reset() {
	*x = VDiffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDiffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffResponse) ProtoMessage() {}

func (x *VDiffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffResponse.ProtoReflect.Descriptor instead.
func (*VDiffResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{103}
}

func (x *VDiffResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VDiffResponse) GetOutput() *dev.QueryResult {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *VDiffResponse) GetVdiffUuid() string {
	if x != nil {
		return x.VdiffUuid
	}
	return ""
}

// options that influence the tablet selected by the picker for streaming data from
type VDiffPickerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletTypes string `protobuf:"bytes,1,opt,name=tablet_types,json=tabletTypes,proto3" json:"tablet_types,omitempty"`
	SourceCell  string `protobuf:"bytes,2,opt,name=source_cell,json=sourceCell,proto3" json:"source_cell,omitempty"`
	TargetCell  string `protobuf:"bytes,3,opt,name=target_cell,json=targetCell,proto3" json:"target_cell,omitempty"`
}

func (x *VDiffPickerOptions) Reset() {
	*x = VDiffPickerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDiffPickerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffPickerOptions) ProtoMessage() {}

func (x *VDiffPickerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffPickerOptions.ProtoReflect.Descriptor instead.
func (*VDiffPickerOptions) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{104}
}

func (x *VDiffPickerOptions) GetTabletTypes() string {
	if x != nil {
		return x.TabletTypes
	}
	return ""
}

func (x *VDiffPickerOptions) GetSourceCell() string {
	if x != nil {
		return x.SourceCell
	}
	return ""
}

func (x *VDiffPickerOptions) GetTargetCell() string {
	if x != nil {
		return x.TargetCell
	}
	return ""
}

// options that only influence how vdiff differences are reported
type VDiffReportOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyPks       bool   `protobuf:"varint,1,opt,name=only_pks,json=onlyPks,proto3" json:"only_pks,omitempty"`
	DebugQuery    bool   `protobuf:"varint,2,opt,name=debug_query,json=debugQuery,proto3" json:"debug_query,omitempty"`
	Format        string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	MaxSampleRows int64  `protobuf:"varint,4,opt,name=max_sample_rows,json=maxSampleRows,proto3" json:"max_sample_rows,omitempty"`
}

func (x *VDiffReportOptions) Reset() {
	*x = VDiffReportOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDiffReportOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffReportOptions) ProtoMessage() {}

func (x *VDiffReportOptions) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffReportOptions.ProtoReflect.Descriptor instead.
func (*VDiffReportOptions) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{105}
}

func (x *VDiffReportOptions) GetOnlyPks() bool {
	if x != nil {
		return x.OnlyPks
	}
	return false
}

func (x *VDiffReportOptions) GetDebugQuery() bool {
	if x != nil {
		return x.DebugQuery
	}
	return false
}

func (x *VDiffReportOptions) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VDiffReportOptions) GetMaxSampleRows() int64 {
	if x != nil {
		return x.MaxSampleRows
	}
	return 0
}

type VDiffCoreOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables                string `protobuf:"bytes,1,opt,name=tables,proto3" json:"tables,omitempty"`
	AutoRetry             bool   `protobuf:"varint,2,opt,name=auto_retry,json=autoRetry,proto3" json:"auto_retry,omitempty"`
	MaxRows               int64  `protobuf:"varint,3,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
	Checksum              bool   `protobuf:"varint,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	SamplePct             int64  `protobuf:"varint,5,opt,name=sample_pct,json=samplePct,proto3" json:"sample_pct,omitempty"`
	TimeoutSeconds        int64  `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	MaxExtraRowsToCompare int64  `protobuf:"varint,7,opt,name=max_extra_rows_to_compare,json=maxExtraRowsToCompare,proto3" json:"max_extra_rows_to_compare,omitempty"`
	UpdateTableStats      bool   `protobuf:"varint,8,opt,name=update_table_stats,json=updateTableStats,proto3" json:"update_table_stats,omitempty"`
}

func (x *VDiffCoreOptions) Reset() {
	*x = VDiffCoreOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDiffCoreOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffCoreOptions) ProtoMessage() {}

func (x *VDiffCoreOptions) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffCoreOptions.ProtoReflect.Descriptor instead.
func (*VDiffCoreOptions) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{106}
}

func (x *VDiffCoreOptions) GetTables() string {
	if x != nil {
		return x.Tables
	}
	return ""
}

func (x *VDiffCoreOptions) GetAutoRetry() bool {
	if x != nil {
		return x.AutoRetry
	}
	return false
}

func (x *VDiffCoreOptions) GetMaxRows() int64 {
	if x != nil {
		return x.MaxRows
	}
	return 0
}

func (x *VDiffCoreOptions) GetChecksum() bool {
	if x != nil {
		return x.Checksum
	}
	return false
}

func (x *VDiffCoreOptions) GetSamplePct() int64 {
	if x != nil {
		return x.SamplePct
	}
	return 0
}

func (x *VDiffCoreOptions) GetTimeoutSeconds() int64 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *VDiffCoreOptions) GetMaxExtraRowsToCompare() int64 {
	if x != nil {
		return x.MaxExtraRowsToCompare
	}
	return 0
}

func (x *VDiffCoreOptions) GetUpdateTableStats() bool {
	if x != nil {
		return x.UpdateTableStats
	}
	return false
}

type VDiffOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PickerOptions *VDiffPickerOptions `protobuf:"bytes,1,opt,name=picker_options,json=pickerOptions,proto3" json:"picker_options,omitempty"`
	CoreOptions   *VDiffCoreOptions   `protobuf:"bytes,2,opt,name=core_options,json=coreOptions,proto3" json:"core_options,omitempty"`
	ReportOptions *VDiffReportOptions `protobuf:"bytes,3,opt,name=report_options,json=reportOptions,proto3" json:"report_options,omitempty"`
}

func (x *VDiffOptions) Reset() {
	*x = VDiffOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDiffOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiffOptions) ProtoMessage() {}

func (x *VDiffOptions) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiffOptions.ProtoReflect.Descriptor instead.
func (*VDiffOptions) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{107}
}

func (x *VDiffOptions) GetPickerOptions() *VDiffPickerOptions {
	if x != nil {
		return x.PickerOptions
	}
	return nil
}

func (x *VDiffOptions) GetCoreOptions() *VDiffCoreOptions {
	if x != nil {
		return x.CoreOptions
	}
	return nil
}

func (x *VDiffOptions) GetReportOptions() *VDiffReportOptions {
	if x != nil {
		return x.ReportOptions
	}
	return nil
}

type UpdateVReplicationWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflow                  string                         `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Cells                     []string                       `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
	TabletTypes               []dev1.TabletType              `protobuf:"varint,3,rep,packed,name=tablet_types,json=tabletTypes,proto3,enum=vitess.topodata.dev.TabletType" json:"tablet_types,omitempty"`
	TabletSelectionPreference TabletSelectionPreference      `protobuf:"varint,4,opt,name=tablet_selection_preference,json=tabletSelectionPreference,proto3,enum=vitess.tabletmanagerdata.dev.TabletSelectionPreference" json:"tablet_selection_preference,omitempty"`
	OnDdl                     dev6.OnDDLAction               `protobuf:"varint,5,opt,name=on_ddl,json=onDdl,proto3,enum=vitess.binlogdata.dev.OnDDLAction" json:"on_ddl,omitempty"`
	State                     dev6.VReplicationWorkflowState `protobuf:"varint,6,opt,name=state,proto3,enum=vitess.binlogdata.dev.VReplicationWorkflowState" json:"state,omitempty"`
}

func (x *UpdateVReplicationWorkflowRequest) Reset() {
	*x = UpdateVReplicationWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVReplicationWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVReplicationWorkflowRequest) ProtoMessage() {}

func (x *UpdateVReplicationWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVReplicationWorkflowRequest.ProtoReflect.Descriptor instead.
func (*UpdateVReplicationWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{108}
}

func (x *UpdateVReplicationWorkflowRequest) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *UpdateVReplicationWorkflowRequest) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *UpdateVReplicationWorkflowRequest) GetTabletTypes() []dev1.TabletType {
	if x != nil {
		return x.TabletTypes
	}
	return nil
}

func (x *UpdateVReplicationWorkflowRequest) GetTabletSelectionPreference() TabletSelectionPreference {
	if x != nil {
		return x.TabletSelectionPreference
	}
	return TabletSelectionPreference_ANY
}

func (x *UpdateVReplicationWorkflowRequest) GetOnDdl() dev6.OnDDLAction {
	if x != nil {
		return x.OnDdl
	}
	return dev6.OnDDLAction(0)
}

func (x *UpdateVReplicationWorkflowRequest) GetState() dev6.VReplicationWorkflowState {
	if x != nil {
		return x.State
	}
	return dev6.VReplicationWorkflowState(0)
}

type UpdateVReplicationWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *dev.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateVReplicationWorkflowResponse) Reset() {
	*x = UpdateVReplicationWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVReplicationWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVReplicationWorkflowResponse) ProtoMessage() {}

func (x *UpdateVReplicationWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVReplicationWorkflowResponse.ProtoReflect.Descriptor instead.
func (*UpdateVReplicationWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{109}
}

func (x *UpdateVReplicationWorkflowResponse) GetResult() *dev.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type ResetSequencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []string `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *ResetSequencesRequest) Reset() {
	*x = ResetSequencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSequencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSequencesRequest) ProtoMessage() {}

func (x *ResetSequencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSequencesRequest.ProtoReflect.Descriptor instead.
func (*ResetSequencesRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{110}
}

func (x *ResetSequencesRequest) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

type ResetSequencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetSequencesResponse) Reset() {
	*x = ResetSequencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSequencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSequencesResponse) ProtoMessage() {}

func (x *ResetSequencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSequencesResponse.ProtoReflect.Descriptor instead.
func (*ResetSequencesResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{111}
}

type CheckThrottlerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *CheckThrottlerRequest) Reset() {
	*x = CheckThrottlerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckThrottlerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckThrottlerRequest) ProtoMessage() {}

func (x *CheckThrottlerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckThrottlerRequest.ProtoReflect.Descriptor instead.
func (*CheckThrottlerRequest) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{112}
}

func (x *CheckThrottlerRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type CheckThrottlerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StatusCode is HTTP compliant response code (e.g. 200 for OK)
	StatusCode int32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// Value is the metric value collected by the tablet
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	// Threshold is the throttling threshold the table was comparing the value with
	Threshold float64 `protobuf:"fixed64,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// Error indicates an error retrieving the value
	Error string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// Message
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// RecentlyChecked indicates that the tablet has been hit with a user-facing check, which can then imply
	// that heartbeats lease should be renwed.
	RecentlyChecked bool `protobuf:"varint,6,opt,name=recently_checked,json=recentlyChecked,proto3" json:"recently_checked,omitempty"`
}

func (x *CheckThrottlerResponse) Reset() {
	*x = CheckThrottlerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckThrottlerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckThrottlerResponse) ProtoMessage() {}

func (x *CheckThrottlerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckThrottlerResponse.ProtoReflect.Descriptor instead.
func (*CheckThrottlerResponse) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{113}
}

func (x *CheckThrottlerResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *CheckThrottlerResponse) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CheckThrottlerResponse) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *CheckThrottlerResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CheckThrottlerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CheckThrottlerResponse) GetRecentlyChecked() bool {
	if x != nil {
		return x.RecentlyChecked
	}
	return false
}

type ReadVReplicationWorkflowResponse_Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Bls                  *dev6.BinlogSource             `protobuf:"bytes,2,opt,name=bls,proto3" json:"bls,omitempty"`
	Pos                  string                         `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	StopPos              string                         `protobuf:"bytes,4,opt,name=stop_pos,json=stopPos,proto3" json:"stop_pos,omitempty"`
	MaxTps               int64                          `protobuf:"varint,5,opt,name=max_tps,json=maxTps,proto3" json:"max_tps,omitempty"`
	MaxReplicationLag    int64                          `protobuf:"varint,6,opt,name=max_replication_lag,json=maxReplicationLag,proto3" json:"max_replication_lag,omitempty"`
	TimeUpdated          *dev5.Time                     `protobuf:"bytes,7,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
	TransactionTimestamp *dev5.Time                     `protobuf:"bytes,8,opt,name=transaction_timestamp,json=transactionTimestamp,proto3" json:"transaction_timestamp,omitempty"`
	State                dev6.VReplicationWorkflowState `protobuf:"varint,9,opt,name=state,proto3,enum=vitess.binlogdata.dev.VReplicationWorkflowState" json:"state,omitempty"`
	Message              string                         `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
	RowsCopied           int64                          `protobuf:"varint,11,opt,name=rows_copied,json=rowsCopied,proto3" json:"rows_copied,omitempty"`
	TimeHeartbeat        *dev5.Time                     `protobuf:"bytes,12,opt,name=time_heartbeat,json=timeHeartbeat,proto3" json:"time_heartbeat,omitempty"`
	TimeThrottled        *dev5.Time                     `protobuf:"bytes,13,opt,name=time_throttled,json=timeThrottled,proto3" json:"time_throttled,omitempty"`
	ComponentThrottled   string                         `protobuf:"bytes,14,opt,name=component_throttled,json=componentThrottled,proto3" json:"component_throttled,omitempty"`
}

func (x *ReadVReplicationWorkflowResponse_Stream) Reset() {
	*x = ReadVReplicationWorkflowResponse_Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadVReplicationWorkflowResponse_Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadVReplicationWorkflowResponse_Stream) ProtoMessage() {}

func (x *ReadVReplicationWorkflowResponse_Stream) ProtoReflect() protoreflect.Message {
	mi := &file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadVReplicationWorkflowResponse_Stream.ProtoReflect.Descriptor instead.
func (*ReadVReplicationWorkflowResponse_Stream) Descriptor() ([]byte, []int) {
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP(), []int{101, 0}
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetBls() *dev6.BinlogSource {
	if x != nil {
		return x.Bls
	}
	return nil
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetPos() string {
	if x != nil {
		return x.Pos
	}
	return ""
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetStopPos() string {
	if x != nil {
		return x.StopPos
	}
	return ""
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetMaxTps() int64 {
	if x != nil {
		return x.MaxTps
	}
	return 0
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetMaxReplicationLag() int64 {
	if x != nil {
		return x.MaxReplicationLag
	}
	return 0
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetTimeUpdated() *dev5.Time {
	if x != nil {
		return x.TimeUpdated
	}
	return nil
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetTransactionTimestamp() *dev5.Time {
	if x != nil {
		return x.TransactionTimestamp
	}
	return nil
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetState() dev6.VReplicationWorkflowState {
	if x != nil {
		return x.State
	}
	return dev6.VReplicationWorkflowState(0)
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetRowsCopied() int64 {
	if x != nil {
		return x.RowsCopied
	}
	return 0
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetTimeHeartbeat() *dev5.Time {
	if x != nil {
		return x.TimeHeartbeat
	}
	return nil
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetTimeThrottled() *dev5.Time {
	if x != nil {
		return x.TimeThrottled
	}
	return nil
}

func (x *ReadVReplicationWorkflowResponse_Stream) GetComponentThrottled() string {
	if x != nil {
		return x.ComponentThrottled
	}
	return ""
}

var File_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto protoreflect.FileDescriptor

var file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDesc = []byte{
	0x0a, 0x34, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x64, 0x65, 0x76, 0x1a, 0x26, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x62, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x62, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x65, 0x76, 0x2f,
	0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x75, 0x74, 0x69, 0x6c,
	0x2f, 0x64, 0x65, 0x76, 0x2f, 0x6c, 0x6f, 0x67, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x76, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x74, 0x72, 0x70, 0x63,
	0x2f, 0x64, 0x65, 0x76, 0x2f, 0x76, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8a, 0x02, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x9d, 0x01,
	0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x5a, 0x0a, 0x11, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xbc, 0x01,
	0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x82, 0x02, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x12, 0x5c, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xe1, 0x01, 0x0a, 0x0c, 0x44, 0x62, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x64, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x44, 0x62,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51,
	0x0a, 0x0e, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x44, 0x62, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x62, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x27, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x28, 0x0a, 0x0c, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x2a, 0x0a, 0x0c, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xe2, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x48, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x76, 0x1a, 0x3b, 0x0a, 0x0d, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x66, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x22, 0xa2,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f,
	0x6e, 0x6c, 0x79, 0x22, 0x70, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x71, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x69,
	0x53, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x69,
	0x53, 0x79, 0x6e, 0x63, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x75, 0x6e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x13,
	0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x32, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x57, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xcb, 0x02, 0x0a, 0x12, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x71, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x71, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x4c,
	0x6f, 0x63, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x98, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x6f,
	0x77, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x14, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x73, 0x44, 0x62, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22,
	0x52, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41,
	0x73, 0x44, 0x62, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x41, 0x73, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x22, 0x57, 0x0a, 0x1e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x41, 0x73, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4b, 0x0a,
	0x18, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x73, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x52, 0x0a, 0x19, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x73, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1a,
	0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x19, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x15, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x35, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x16, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x19,
	0x0a, 0x17, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e,
	0x0a, 0x1d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x3c,
	0x0a, 0x1e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x17,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x69, 0x53,
	0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x69, 0x53,
	0x79, 0x6e, 0x63, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x62, 0x0a, 0x21, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x2b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x22, 0x19, 0x0a, 0x17,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x17, 0x56, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x22, 0x51, 0x0a, 0x18, 0x56, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4b, 0x0a, 0x1d, 0x56, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x6f,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x1e, 0x56, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x31, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe3, 0x01, 0x0a, 0x1e,
	0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x31,
	0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x21, 0x0a, 0x1f, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x15, 0x0a, 0x13,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6f, 0x0a, 0x15, 0x44,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x18,
	0x55, 0x6e, 0x64, 0x6f, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x69,
	0x53, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x69,
	0x53, 0x79, 0x6e, 0x63, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x6e, 0x64, 0x6f, 0x44, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x57, 0x61, 0x73, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1c,
	0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x57, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a, 0x21,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x46, 0x75, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x12,
	0x46, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x46, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x4e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x1e, 0x0a,
	0x1c, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a,
	0x1a, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x57, 0x61, 0x73, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x57, 0x61, 0x73, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x22, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x15, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x73, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0x76, 0x0a, 0x23, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x33, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x34, 0x0a,
	0x16, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x14,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x61, 0x66,
	0x65, 0x22, 0x41, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x50, 0x6f,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x49, 0x0a, 0x14, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x4c, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x8b, 0x05, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x48, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x1b, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x56, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x62, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x56, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x66, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x70,
	0x79, 0x22, 0x5b, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3f,
	0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22,
	0x5b, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3d, 0x0a, 0x1f,
	0x52, 0x65, 0x61, 0x64, 0x56, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x8d, 0x0a, 0x0a, 0x20,
	0x52, 0x65, 0x61, 0x64, 0x56, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x1b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x62, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x56, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x56, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x64, 0x65, 0x66, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x5f, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x56, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x83, 0x05, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x35, 0x0a, 0x03, 0x62, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x03, 0x62, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x70, 0x50, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x54, 0x70, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x67, 0x12, 0x3a, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e,
	0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x56,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x77,
	0x73, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x0c,
	0x56, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x64, 0x69, 0x66, 0x66, 0x55, 0x75, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x56, 0x44, 0x69, 0x66, 0x66,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x75, 0x0a, 0x0d, 0x56, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x35, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x64, 0x69, 0x66,
	0x66, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x64,
	0x69, 0x66, 0x66, 0x55, 0x75, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x12, 0x56, 0x44, 0x69, 0x66, 0x66,
	0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x65, 0x6c,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65,
	0x6c, 0x6c, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x56, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6e, 0x6c,
	0x79, 0x5f, 0x70, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x6e, 0x6c,
	0x79, 0x50, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x6f, 0x77, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x10, 0x56, 0x44, 0x69, 0x66, 0x66, 0x43,
	0x6f, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x50, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x38, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x6f, 0x77,
	0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x0c, 0x56, 0x44, 0x69,
	0x66, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x70, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x56, 0x44, 0x69, 0x66, 0x66, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x56, 0x44, 0x69, 0x66, 0x66, 0x43, 0x6f, 0x72,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x56, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x95,
	0x03, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x1b, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x6e, 0x5f, 0x64, 0x64, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x62, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x4f, 0x6e, 0x44, 0x44,
	0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x6e, 0x44, 0x64, 0x6c, 0x12, 0x46,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x56, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x2f, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x2a, 0x3e, 0x0a,
	0x19, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e,
	0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x42, 0x5b, 0x5a,
	0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x74, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2f, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x64, 0x65, 0x76, 0x3b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x64, 0x65, 0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescOnce sync.Once
	file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescData = file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDesc
)

func file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescGZIP() []byte {
	file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescOnce.Do(func() {
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescData = protoimpl.X.CompressGZIP(file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescData)
	})
	return file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDescData
}

var file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes = make([]protoimpl.MessageInfo, 118)
var file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_goTypes = []interface{}{
	(TabletSelectionPreference)(0),                  // 0: vitess.tabletmanagerdata.dev.TabletSelectionPreference
	(*TableDefinition)(nil),                         // 1: vitess.tabletmanagerdata.dev.TableDefinition
	(*SchemaDefinition)(nil),                        // 2: vitess.tabletmanagerdata.dev.SchemaDefinition
	(*SchemaChangeResult)(nil),                      // 3: vitess.tabletmanagerdata.dev.SchemaChangeResult
	(*UserPermission)(nil),                          // 4: vitess.tabletmanagerdata.dev.UserPermission
	(*DbPermission)(nil),                            // 5: vitess.tabletmanagerdata.dev.DbPermission
	(*Permissions)(nil),                             // 6: vitess.tabletmanagerdata.dev.Permissions
	(*PingRequest)(nil),                             // 7: vitess.tabletmanagerdata.dev.PingRequest
	(*PingResponse)(nil),                            // 8: vitess.tabletmanagerdata.dev.PingResponse
	(*SleepRequest)(nil),                            // 9: vitess.tabletmanagerdata.dev.SleepRequest
	(*SleepResponse)(nil),                           // 10: vitess.tabletmanagerdata.dev.SleepResponse
	(*ExecuteHookRequest)(nil),                      // 11: vitess.tabletmanagerdata.dev.ExecuteHookRequest
	(*ExecuteHookResponse)(nil),                     // 12: vitess.tabletmanagerdata.dev.ExecuteHookResponse
	(*GetSchemaRequest)(nil),                        // 13: vitess.tabletmanagerdata.dev.GetSchemaRequest
	(*GetSchemaResponse)(nil),                       // 14: vitess.tabletmanagerdata.dev.GetSchemaResponse
	(*GetPermissionsRequest)(nil),                   // 15: vitess.tabletmanagerdata.dev.GetPermissionsRequest
	(*GetPermissionsResponse)(nil),                  // 16: vitess.tabletmanagerdata.dev.GetPermissionsResponse
	(*SetReadOnlyRequest)(nil),                      // 17: vitess.tabletmanagerdata.dev.SetReadOnlyRequest
	(*SetReadOnlyResponse)(nil),                     // 18: vitess.tabletmanagerdata.dev.SetReadOnlyResponse
	(*SetReadWriteRequest)(nil),                     // 19: vitess.tabletmanagerdata.dev.SetReadWriteRequest
	(*SetReadWriteResponse)(nil),                    // 20: vitess.tabletmanagerdata.dev.SetReadWriteResponse
	(*ChangeTypeRequest)(nil),                       // 21: vitess.tabletmanagerdata.dev.ChangeTypeRequest
	(*ChangeTypeResponse)(nil),                      // 22: vitess.tabletmanagerdata.dev.ChangeTypeResponse
	(*RefreshStateRequest)(nil),                     // 23: vitess.tabletmanagerdata.dev.RefreshStateRequest
	(*RefreshStateResponse)(nil),                    // 24: vitess.tabletmanagerdata.dev.RefreshStateResponse
	(*RunHealthCheckRequest)(nil),                   // 25: vitess.tabletmanagerdata.dev.RunHealthCheckRequest
	(*RunHealthCheckResponse)(nil),                  // 26: vitess.tabletmanagerdata.dev.RunHealthCheckResponse
	(*ReloadSchemaRequest)(nil),                     // 27: vitess.tabletmanagerdata.dev.ReloadSchemaRequest
	(*ReloadSchemaResponse)(nil),                    // 28: vitess.tabletmanagerdata.dev.ReloadSchemaResponse
	(*PreflightSchemaRequest)(nil),                  // 29: vitess.tabletmanagerdata.dev.PreflightSchemaRequest
	(*PreflightSchemaResponse)(nil),                 // 30: vitess.tabletmanagerdata.dev.PreflightSchemaResponse
	(*ApplySchemaRequest)(nil),                      // 31: vitess.tabletmanagerdata.dev.ApplySchemaRequest
	(*ApplySchemaResponse)(nil),                     // 32: vitess.tabletmanagerdata.dev.ApplySchemaResponse
	(*LockTablesRequest)(nil),                       // 33: vitess.tabletmanagerdata.dev.LockTablesRequest
	(*LockTablesResponse)(nil),                      // 34: vitess.tabletmanagerdata.dev.LockTablesResponse
	(*UnlockTablesRequest)(nil),                     // 35: vitess.tabletmanagerdata.dev.UnlockTablesRequest
	(*UnlockTablesResponse)(nil),                    // 36: vitess.tabletmanagerdata.dev.UnlockTablesResponse
	(*ExecuteQueryRequest)(nil),                     // 37: vitess.tabletmanagerdata.dev.ExecuteQueryRequest
	(*ExecuteQueryResponse)(nil),                    // 38: vitess.tabletmanagerdata.dev.ExecuteQueryResponse
	(*ExecuteFetchAsDbaRequest)(nil),                // 39: vitess.tabletmanagerdata.dev.ExecuteFetchAsDbaRequest
	(*ExecuteFetchAsDbaResponse)(nil),               // 40: vitess.tabletmanagerdata.dev.ExecuteFetchAsDbaResponse
	(*ExecuteFetchAsAllPrivsRequest)(nil),           // 41: vitess.tabletmanagerdata.dev.ExecuteFetchAsAllPrivsRequest
	(*ExecuteFetchAsAllPrivsResponse)(nil),          // 42: vitess.tabletmanagerdata.dev.ExecuteFetchAsAllPrivsResponse
	(*ExecuteFetchAsAppRequest)(nil),                // 43: vitess.tabletmanagerdata.dev.ExecuteFetchAsAppRequest
	(*ExecuteFetchAsAppResponse)(nil),               // 44: vitess.tabletmanagerdata.dev.ExecuteFetchAsAppResponse
	(*ReplicationStatusRequest)(nil),                // 45: vitess.tabletmanagerdata.dev.ReplicationStatusRequest
	(*ReplicationStatusResponse)(nil),               // 46: vitess.tabletmanagerdata.dev.ReplicationStatusResponse
	(*PrimaryStatusRequest)(nil),                    // 47: vitess.tabletmanagerdata.dev.PrimaryStatusRequest
	(*PrimaryStatusResponse)(nil),                   // 48: vitess.tabletmanagerdata.dev.PrimaryStatusResponse
	(*PrimaryPositionRequest)(nil),                  // 49: vitess.tabletmanagerdata.dev.PrimaryPositionRequest
	(*PrimaryPositionResponse)(nil),                 // 50: vitess.tabletmanagerdata.dev.PrimaryPositionResponse
	(*WaitForPositionRequest)(nil),                  // 51: vitess.tabletmanagerdata.dev.WaitForPositionRequest
	(*WaitForPositionResponse)(nil),                 // 52: vitess.tabletmanagerdata.dev.WaitForPositionResponse
	(*StopReplicationRequest)(nil),                  // 53: vitess.tabletmanagerdata.dev.StopReplicationRequest
	(*StopReplicationResponse)(nil),                 // 54: vitess.tabletmanagerdata.dev.StopReplicationResponse
	(*StopReplicationMinimumRequest)(nil),           // 55: vitess.tabletmanagerdata.dev.StopReplicationMinimumRequest
	(*StopReplicationMinimumResponse)(nil),          // 56: vitess.tabletmanagerdata.dev.StopReplicationMinimumResponse
	(*StartReplicationRequest)(nil),                 // 57: vitess.tabletmanagerdata.dev.StartReplicationRequest
	(*StartReplicationResponse)(nil),                // 58: vitess.tabletmanagerdata.dev.StartReplicationResponse
	(*StartReplicationUntilAfterRequest)(nil),       // 59: vitess.tabletmanagerdata.dev.StartReplicationUntilAfterRequest
	(*StartReplicationUntilAfterResponse)(nil),      // 60: vitess.tabletmanagerdata.dev.StartReplicationUntilAfterResponse
	(*GetReplicasRequest)(nil),                      // 61: vitess.tabletmanagerdata.dev.GetReplicasRequest
	(*GetReplicasResponse)(nil),                     // 62: vitess.tabletmanagerdata.dev.GetReplicasResponse
	(*ResetReplicationRequest)(nil),                 // 63: vitess.tabletmanagerdata.dev.ResetReplicationRequest
	(*ResetReplicationResponse)(nil),                // 64: vitess.tabletmanagerdata.dev.ResetReplicationResponse
	(*VReplicationExecRequest)(nil),                 // 65: vitess.tabletmanagerdata.dev.VReplicationExecRequest
	(*VReplicationExecResponse)(nil),                // 66: vitess.tabletmanagerdata.dev.VReplicationExecResponse
	(*VReplicationWaitForPosRequest)(nil),           // 67: vitess.tabletmanagerdata.dev.VReplicationWaitForPosRequest
	(*VReplicationWaitForPosResponse)(nil),          // 68: vitess.tabletmanagerdata.dev.VReplicationWaitForPosResponse
	(*InitPrimaryRequest)(nil),                      // 69: vitess.tabletmanagerdata.dev.InitPrimaryRequest
	(*InitPrimaryResponse)(nil),                     // 70: vitess.tabletmanagerdata.dev.InitPrimaryResponse
	(*PopulateReparentJournalRequest)(nil),          // 71: vitess.tabletmanagerdata.dev.PopulateReparentJournalRequest
	(*PopulateReparentJournalResponse)(nil),         // 72: vitess.tabletmanagerdata.dev.PopulateReparentJournalResponse
	(*InitReplicaRequest)(nil),                      // 73: vitess.tabletmanagerdata.dev.InitReplicaRequest
	(*InitReplicaResponse)(nil),                     // 74: vitess.tabletmanagerdata.dev.InitReplicaResponse
	(*DemotePrimaryRequest)(nil),                    // 75: vitess.tabletmanagerdata.dev.DemotePrimaryRequest
	(*DemotePrimaryResponse)(nil),                   // 76: vitess.tabletmanagerdata.dev.DemotePrimaryResponse
	(*UndoDemotePrimaryRequest)(nil),                // 77: vitess.tabletmanagerdata.dev.UndoDemotePrimaryRequest
	(*UndoDemotePrimaryResponse)(nil),               // 78: vitess.tabletmanagerdata.dev.UndoDemotePrimaryResponse
	(*ReplicaWasPromotedRequest)(nil),               // 79: vitess.tabletmanagerdata.dev.ReplicaWasPromotedRequest
	(*ReplicaWasPromotedResponse)(nil),              // 80: vitess.tabletmanagerdata.dev.ReplicaWasPromotedResponse
	(*ResetReplicationParametersRequest)(nil),       // 81: vitess.tabletmanagerdata.dev.ResetReplicationParametersRequest
	(*ResetReplicationParametersResponse)(nil),      // 82: vitess.tabletmanagerdata.dev.ResetReplicationParametersResponse
	(*FullStatusRequest)(nil),                       // 83: vitess.tabletmanagerdata.dev.FullStatusRequest
	(*FullStatusResponse)(nil),                      // 84: vitess.tabletmanagerdata.dev.FullStatusResponse
	(*SetReplicationSourceRequest)(nil),             // 85: vitess.tabletmanagerdata.dev.SetReplicationSourceRequest
	(*SetReplicationSourceResponse)(nil),            // 86: vitess.tabletmanagerdata.dev.SetReplicationSourceResponse
	(*ReplicaWasRestartedRequest)(nil),              // 87: vitess.tabletmanagerdata.dev.ReplicaWasRestartedRequest
	(*ReplicaWasRestartedResponse)(nil),             // 88: vitess.tabletmanagerdata.dev.ReplicaWasRestartedResponse
	(*StopReplicationAndGetStatusRequest)(nil),      // 89: vitess.tabletmanagerdata.dev.StopReplicationAndGetStatusRequest
	(*StopReplicationAndGetStatusResponse)(nil),     // 90: vitess.tabletmanagerdata.dev.StopReplicationAndGetStatusResponse
	(*PromoteReplicaRequest)(nil),                   // 91: vitess.tabletmanagerdata.dev.PromoteReplicaRequest
	(*PromoteReplicaResponse)(nil),                  // 92: vitess.tabletmanagerdata.dev.PromoteReplicaResponse
	(*BackupRequest)(nil),                           // 93: vitess.tabletmanagerdata.dev.BackupRequest
	(*BackupResponse)(nil),                          // 94: vitess.tabletmanagerdata.dev.BackupResponse
	(*RestoreFromBackupRequest)(nil),                // 95: vitess.tabletmanagerdata.dev.RestoreFromBackupRequest
	(*RestoreFromBackupResponse)(nil),               // 96: vitess.tabletmanagerdata.dev.RestoreFromBackupResponse
	(*CreateVReplicationWorkflowRequest)(nil),       // 97: vitess.tabletmanagerdata.dev.CreateVReplicationWorkflowRequest
	(*CreateVReplicationWorkflowResponse)(nil),      // 98: vitess.tabletmanagerdata.dev.CreateVReplicationWorkflowResponse
	(*DeleteVReplicationWorkflowRequest)(nil),       // 99: vitess.tabletmanagerdata.dev.DeleteVReplicationWorkflowRequest
	(*DeleteVReplicationWorkflowResponse)(nil),      // 100: vitess.tabletmanagerdata.dev.DeleteVReplicationWorkflowResponse
	(*ReadVReplicationWorkflowRequest)(nil),         // 101: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowRequest
	(*ReadVReplicationWorkflowResponse)(nil),        // 102: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse
	(*VDiffRequest)(nil),                            // 103: vitess.tabletmanagerdata.dev.VDiffRequest
	(*VDiffResponse)(nil),                           // 104: vitess.tabletmanagerdata.dev.VDiffResponse
	(*VDiffPickerOptions)(nil),                      // 105: vitess.tabletmanagerdata.dev.VDiffPickerOptions
	(*VDiffReportOptions)(nil),                      // 106: vitess.tabletmanagerdata.dev.VDiffReportOptions
	(*VDiffCoreOptions)(nil),                        // 107: vitess.tabletmanagerdata.dev.VDiffCoreOptions
	(*VDiffOptions)(nil),                            // 108: vitess.tabletmanagerdata.dev.VDiffOptions
	(*UpdateVReplicationWorkflowRequest)(nil),       // 109: vitess.tabletmanagerdata.dev.UpdateVReplicationWorkflowRequest
	(*UpdateVReplicationWorkflowResponse)(nil),      // 110: vitess.tabletmanagerdata.dev.UpdateVReplicationWorkflowResponse
	(*ResetSequencesRequest)(nil),                   // 111: vitess.tabletmanagerdata.dev.ResetSequencesRequest
	(*ResetSequencesResponse)(nil),                  // 112: vitess.tabletmanagerdata.dev.ResetSequencesResponse
	(*CheckThrottlerRequest)(nil),                   // 113: vitess.tabletmanagerdata.dev.CheckThrottlerRequest
	(*CheckThrottlerResponse)(nil),                  // 114: vitess.tabletmanagerdata.dev.CheckThrottlerResponse
	nil,                                             // 115: vitess.tabletmanagerdata.dev.UserPermission.PrivilegesEntry
	nil,                                             // 116: vitess.tabletmanagerdata.dev.DbPermission.PrivilegesEntry
	nil,                                             // 117: vitess.tabletmanagerdata.dev.ExecuteHookRequest.ExtraEnvEntry
	(*ReadVReplicationWorkflowResponse_Stream)(nil), // 118: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse.Stream
	(*dev.Field)(nil),                               // 119: vitess.query.dev.Field
	(dev1.TabletType)(0),                            // 120: vitess.topodata.dev.TabletType
	(*dev2.CallerID)(nil),                           // 121: vitess.vtrpc.dev.CallerID
	(*dev.QueryResult)(nil),                         // 122: vitess.query.dev.QueryResult
	(*dev3.Status)(nil),                             // 123: vitess.replicationdata.dev.Status
	(*dev3.PrimaryStatus)(nil),                      // 124: vitess.replicationdata.dev.PrimaryStatus
	(*dev1.TabletAlias)(nil),                        // 125: vitess.topodata.dev.TabletAlias
	(*dev3.FullStatus)(nil),                         // 126: vitess.replicationdata.dev.FullStatus
	(dev3.StopReplicationMode)(0),                   // 127: vitess.replicationdata.dev.StopReplicationMode
	(*dev3.StopReplicationStatus)(nil),              // 128: vitess.replicationdata.dev.StopReplicationStatus
	(*dev4.Event)(nil),                              // 129: vitess.logutil.dev.Event
	(*dev5.Time)(nil),                               // 130: vitess.vttime.dev.Time
	(*dev6.BinlogSource)(nil),                       // 131: vitess.binlogdata.dev.BinlogSource
	(dev6.VReplicationWorkflowType)(0),              // 132: vitess.binlogdata.dev.VReplicationWorkflowType
	(dev6.VReplicationWorkflowSubType)(0),           // 133: vitess.binlogdata.dev.VReplicationWorkflowSubType
	(dev6.OnDDLAction)(0),                           // 134: vitess.binlogdata.dev.OnDDLAction
	(dev6.VReplicationWorkflowState)(0),             // 135: vitess.binlogdata.dev.VReplicationWorkflowState
}
var file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_depIdxs = []int32{
	119, // 0: vitess.tabletmanagerdata.dev.TableDefinition.fields:type_name -> vitess.query.dev.Field
	1,   // 1: vitess.tabletmanagerdata.dev.SchemaDefinition.table_definitions:type_name -> vitess.tabletmanagerdata.dev.TableDefinition
	2,   // 2: vitess.tabletmanagerdata.dev.SchemaChangeResult.before_schema:type_name -> vitess.tabletmanagerdata.dev.SchemaDefinition
	2,   // 3: vitess.tabletmanagerdata.dev.SchemaChangeResult.after_schema:type_name -> vitess.tabletmanagerdata.dev.SchemaDefinition
	115, // 4: vitess.tabletmanagerdata.dev.UserPermission.privileges:type_name -> vitess.tabletmanagerdata.dev.UserPermission.PrivilegesEntry
	116, // 5: vitess.tabletmanagerdata.dev.DbPermission.privileges:type_name -> vitess.tabletmanagerdata.dev.DbPermission.PrivilegesEntry
	4,   // 6: vitess.tabletmanagerdata.dev.Permissions.user_permissions:type_name -> vitess.tabletmanagerdata.dev.UserPermission
	5,   // 7: vitess.tabletmanagerdata.dev.Permissions.db_permissions:type_name -> vitess.tabletmanagerdata.dev.DbPermission
	117, // 8: vitess.tabletmanagerdata.dev.ExecuteHookRequest.extra_env:type_name -> vitess.tabletmanagerdata.dev.ExecuteHookRequest.ExtraEnvEntry
	2,   // 9: vitess.tabletmanagerdata.dev.GetSchemaResponse.schema_definition:type_name -> vitess.tabletmanagerdata.dev.SchemaDefinition
	6,   // 10: vitess.tabletmanagerdata.dev.GetPermissionsResponse.permissions:type_name -> vitess.tabletmanagerdata.dev.Permissions
	120, // 11: vitess.tabletmanagerdata.dev.ChangeTypeRequest.tablet_type:type_name -> vitess.topodata.dev.TabletType
	3,   // 12: vitess.tabletmanagerdata.dev.PreflightSchemaResponse.change_results:type_name -> vitess.tabletmanagerdata.dev.SchemaChangeResult
	2,   // 13: vitess.tabletmanagerdata.dev.ApplySchemaRequest.before_schema:type_name -> vitess.tabletmanagerdata.dev.SchemaDefinition
	2,   // 14: vitess.tabletmanagerdata.dev.ApplySchemaRequest.after_schema:type_name -> vitess.tabletmanagerdata.dev.SchemaDefinition
	2,   // 15: vitess.tabletmanagerdata.dev.ApplySchemaResponse.before_schema:type_name -> vitess.tabletmanagerdata.dev.SchemaDefinition
	2,   // 16: vitess.tabletmanagerdata.dev.ApplySchemaResponse.after_schema:type_name -> vitess.tabletmanagerdata.dev.SchemaDefinition
	121, // 17: vitess.tabletmanagerdata.dev.ExecuteQueryRequest.caller_id:type_name -> vitess.vtrpc.dev.CallerID
	122, // 18: vitess.tabletmanagerdata.dev.ExecuteQueryResponse.result:type_name -> vitess.query.dev.QueryResult
	122, // 19: vitess.tabletmanagerdata.dev.ExecuteFetchAsDbaResponse.result:type_name -> vitess.query.dev.QueryResult
	122, // 20: vitess.tabletmanagerdata.dev.ExecuteFetchAsAllPrivsResponse.result:type_name -> vitess.query.dev.QueryResult
	122, // 21: vitess.tabletmanagerdata.dev.ExecuteFetchAsAppResponse.result:type_name -> vitess.query.dev.QueryResult
	123, // 22: vitess.tabletmanagerdata.dev.ReplicationStatusResponse.status:type_name -> vitess.replicationdata.dev.Status
	124, // 23: vitess.tabletmanagerdata.dev.PrimaryStatusResponse.status:type_name -> vitess.replicationdata.dev.PrimaryStatus
	122, // 24: vitess.tabletmanagerdata.dev.VReplicationExecResponse.result:type_name -> vitess.query.dev.QueryResult
	125, // 25: vitess.tabletmanagerdata.dev.PopulateReparentJournalRequest.primary_alias:type_name -> vitess.topodata.dev.TabletAlias
	125, // 26: vitess.tabletmanagerdata.dev.InitReplicaRequest.parent:type_name -> vitess.topodata.dev.TabletAlias
	124, // 27: vitess.tabletmanagerdata.dev.DemotePrimaryResponse.primary_status:type_name -> vitess.replicationdata.dev.PrimaryStatus
	126, // 28: vitess.tabletmanagerdata.dev.FullStatusResponse.status:type_name -> vitess.replicationdata.dev.FullStatus
	125, // 29: vitess.tabletmanagerdata.dev.SetReplicationSourceRequest.parent:type_name -> vitess.topodata.dev.TabletAlias
	125, // 30: vitess.tabletmanagerdata.dev.ReplicaWasRestartedRequest.parent:type_name -> vitess.topodata.dev.TabletAlias
	127, // 31: vitess.tabletmanagerdata.dev.StopReplicationAndGetStatusRequest.stop_replication_mode:type_name -> vitess.replicationdata.dev.StopReplicationMode
	128, // 32: vitess.tabletmanagerdata.dev.StopReplicationAndGetStatusResponse.status:type_name -> vitess.replicationdata.dev.StopReplicationStatus
	129, // 33: vitess.tabletmanagerdata.dev.BackupResponse.event:type_name -> vitess.logutil.dev.Event
	130, // 34: vitess.tabletmanagerdata.dev.RestoreFromBackupRequest.backup_time:type_name -> vitess.vttime.dev.Time
	130, // 35: vitess.tabletmanagerdata.dev.RestoreFromBackupRequest.restore_to_timestamp:type_name -> vitess.vttime.dev.Time
	129, // 36: vitess.tabletmanagerdata.dev.RestoreFromBackupResponse.event:type_name -> vitess.logutil.dev.Event
	131, // 37: vitess.tabletmanagerdata.dev.CreateVReplicationWorkflowRequest.binlog_source:type_name -> vitess.binlogdata.dev.BinlogSource
	120, // 38: vitess.tabletmanagerdata.dev.CreateVReplicationWorkflowRequest.tablet_types:type_name -> vitess.topodata.dev.TabletType
	0,   // 39: vitess.tabletmanagerdata.dev.CreateVReplicationWorkflowRequest.tablet_selection_preference:type_name -> vitess.tabletmanagerdata.dev.TabletSelectionPreference
	132, // 40: vitess.tabletmanagerdata.dev.CreateVReplicationWorkflowRequest.workflow_type:type_name -> vitess.binlogdata.dev.VReplicationWorkflowType
	133, // 41: vitess.tabletmanagerdata.dev.CreateVReplicationWorkflowRequest.workflow_sub_type:type_name -> vitess.binlogdata.dev.VReplicationWorkflowSubType
	122, // 42: vitess.tabletmanagerdata.dev.CreateVReplicationWorkflowResponse.result:type_name -> vitess.query.dev.QueryResult
	122, // 43: vitess.tabletmanagerdata.dev.DeleteVReplicationWorkflowResponse.result:type_name -> vitess.query.dev.QueryResult
	120, // 44: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse.tablet_types:type_name -> vitess.topodata.dev.TabletType
	0,   // 45: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse.tablet_selection_preference:type_name -> vitess.tabletmanagerdata.dev.TabletSelectionPreference
	132, // 46: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse.workflow_type:type_name -> vitess.binlogdata.dev.VReplicationWorkflowType
	133, // 47: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse.workflow_sub_type:type_name -> vitess.binlogdata.dev.VReplicationWorkflowSubType
	118, // 48: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse.streams:type_name -> vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse.Stream
	108, // 49: vitess.tabletmanagerdata.dev.VDiffRequest.options:type_name -> vitess.tabletmanagerdata.dev.VDiffOptions
	122, // 50: vitess.tabletmanagerdata.dev.VDiffResponse.output:type_name -> vitess.query.dev.QueryResult
	105, // 51: vitess.tabletmanagerdata.dev.VDiffOptions.picker_options:type_name -> vitess.tabletmanagerdata.dev.VDiffPickerOptions
	107, // 52: vitess.tabletmanagerdata.dev.VDiffOptions.core_options:type_name -> vitess.tabletmanagerdata.dev.VDiffCoreOptions
	106, // 53: vitess.tabletmanagerdata.dev.VDiffOptions.report_options:type_name -> vitess.tabletmanagerdata.dev.VDiffReportOptions
	120, // 54: vitess.tabletmanagerdata.dev.UpdateVReplicationWorkflowRequest.tablet_types:type_name -> vitess.topodata.dev.TabletType
	0,   // 55: vitess.tabletmanagerdata.dev.UpdateVReplicationWorkflowRequest.tablet_selection_preference:type_name -> vitess.tabletmanagerdata.dev.TabletSelectionPreference
	134, // 56: vitess.tabletmanagerdata.dev.UpdateVReplicationWorkflowRequest.on_ddl:type_name -> vitess.binlogdata.dev.OnDDLAction
	135, // 57: vitess.tabletmanagerdata.dev.UpdateVReplicationWorkflowRequest.state:type_name -> vitess.binlogdata.dev.VReplicationWorkflowState
	122, // 58: vitess.tabletmanagerdata.dev.UpdateVReplicationWorkflowResponse.result:type_name -> vitess.query.dev.QueryResult
	131, // 59: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse.Stream.bls:type_name -> vitess.binlogdata.dev.BinlogSource
	130, // 60: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse.Stream.time_updated:type_name -> vitess.vttime.dev.Time
	130, // 61: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse.Stream.transaction_timestamp:type_name -> vitess.vttime.dev.Time
	135, // 62: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse.Stream.state:type_name -> vitess.binlogdata.dev.VReplicationWorkflowState
	130, // 63: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse.Stream.time_heartbeat:type_name -> vitess.vttime.dev.Time
	130, // 64: vitess.tabletmanagerdata.dev.ReadVReplicationWorkflowResponse.Stream.time_throttled:type_name -> vitess.vttime.dev.Time
	65,  // [65:65] is the sub-list for method output_type
	65,  // [65:65] is the sub-list for method input_type
	65,  // [65:65] is the sub-list for extension type_name
	65,  // [65:65] is the sub-list for extension extendee
	0,   // [0:65] is the sub-list for field type_name
}

func init() { file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_init() }
func file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_init() {
	if File_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaChangeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteHookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteHookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReadOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReadOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReadWriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReadWriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunHealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunHealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreflightSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreflightSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplySchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplySchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteFetchAsDbaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteFetchAsDbaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteFetchAsAllPrivsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteFetchAsAllPrivsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteFetchAsAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteFetchAsAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryPositionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForPositionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopReplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopReplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopReplicationMinimumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopReplicationMinimumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartReplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartReplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartReplicationUntilAfterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartReplicationUntilAfterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReplicasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReplicasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetReplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetReplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VReplicationExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VReplicationExecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VReplicationWaitForPosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VReplicationWaitForPosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitPrimaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitPrimaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopulateReparentJournalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopulateReparentJournalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitReplicaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemotePrimaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemotePrimaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoDemotePrimaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoDemotePrimaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaWasPromotedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaWasPromotedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetReplicationParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetReplicationParametersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReplicationSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReplicationSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaWasRestartedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaWasRestartedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopReplicationAndGetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopReplicationAndGetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteReplicaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreFromBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreFromBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVReplicationWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVReplicationWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVReplicationWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVReplicationWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadVReplicationWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadVReplicationWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDiffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDiffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDiffPickerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDiffReportOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDiffCoreOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDiffOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVReplicationWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVReplicationWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSequencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSequencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckThrottlerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckThrottlerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadVReplicationWorkflowResponse_Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   118,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_goTypes,
		DependencyIndexes: file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_depIdxs,
		EnumInfos:         file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_enumTypes,
		MessageInfos:      file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_msgTypes,
	}.Build()
	File_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto = out.File
	file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_rawDesc = nil
	file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_goTypes = nil
	file_vitess_tabletmanagerdata_dev_tabletmanagerdata_proto_depIdxs = nil
}
