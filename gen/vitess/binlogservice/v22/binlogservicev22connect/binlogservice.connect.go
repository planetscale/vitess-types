//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
// This file contains the UpdateStream service definition, necessary
// to make RPC calls to VtTablet for the binlog protocol, used by
// filtered replication only.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vitess/binlogservice/v22/binlogservice.proto

package binlogservicev22connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v22 "github.com/planetscale/vitess-types/gen/vitess/binlogdata/v22"
	v221 "github.com/planetscale/vitess-types/gen/vitess/binlogservice/v22"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UpdateStreamName is the fully-qualified name of the UpdateStream service.
	UpdateStreamName = "vitess.binlogservice.v22.UpdateStream"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UpdateStreamStreamKeyRangeProcedure is the fully-qualified name of the UpdateStream's
	// StreamKeyRange RPC.
	UpdateStreamStreamKeyRangeProcedure = "/vitess.binlogservice.v22.UpdateStream/StreamKeyRange"
	// UpdateStreamStreamTablesProcedure is the fully-qualified name of the UpdateStream's StreamTables
	// RPC.
	UpdateStreamStreamTablesProcedure = "/vitess.binlogservice.v22.UpdateStream/StreamTables"
)

// UpdateStreamClient is a client for the vitess.binlogservice.v22.UpdateStream service.
type UpdateStreamClient interface {
	// StreamKeyRange returns the binlog transactions related to
	// the specified Keyrange.
	StreamKeyRange(context.Context, *connect.Request[v22.StreamKeyRangeRequest]) (*connect.ServerStreamForClient[v22.StreamKeyRangeResponse], error)
	// StreamTables returns the binlog transactions related to
	// the specified Tables.
	StreamTables(context.Context, *connect.Request[v22.StreamTablesRequest]) (*connect.ServerStreamForClient[v22.StreamTablesResponse], error)
}

// NewUpdateStreamClient constructs a client for the vitess.binlogservice.v22.UpdateStream service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUpdateStreamClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UpdateStreamClient {
	baseURL = strings.TrimRight(baseURL, "/")
	updateStreamMethods := v221.File_vitess_binlogservice_v22_binlogservice_proto.Services().ByName("UpdateStream").Methods()
	return &updateStreamClient{
		streamKeyRange: connect.NewClient[v22.StreamKeyRangeRequest, v22.StreamKeyRangeResponse](
			httpClient,
			baseURL+UpdateStreamStreamKeyRangeProcedure,
			connect.WithSchema(updateStreamMethods.ByName("StreamKeyRange")),
			connect.WithClientOptions(opts...),
		),
		streamTables: connect.NewClient[v22.StreamTablesRequest, v22.StreamTablesResponse](
			httpClient,
			baseURL+UpdateStreamStreamTablesProcedure,
			connect.WithSchema(updateStreamMethods.ByName("StreamTables")),
			connect.WithClientOptions(opts...),
		),
	}
}

// updateStreamClient implements UpdateStreamClient.
type updateStreamClient struct {
	streamKeyRange *connect.Client[v22.StreamKeyRangeRequest, v22.StreamKeyRangeResponse]
	streamTables   *connect.Client[v22.StreamTablesRequest, v22.StreamTablesResponse]
}

// StreamKeyRange calls vitess.binlogservice.v22.UpdateStream.StreamKeyRange.
func (c *updateStreamClient) StreamKeyRange(ctx context.Context, req *connect.Request[v22.StreamKeyRangeRequest]) (*connect.ServerStreamForClient[v22.StreamKeyRangeResponse], error) {
	return c.streamKeyRange.CallServerStream(ctx, req)
}

// StreamTables calls vitess.binlogservice.v22.UpdateStream.StreamTables.
func (c *updateStreamClient) StreamTables(ctx context.Context, req *connect.Request[v22.StreamTablesRequest]) (*connect.ServerStreamForClient[v22.StreamTablesResponse], error) {
	return c.streamTables.CallServerStream(ctx, req)
}

// UpdateStreamHandler is an implementation of the vitess.binlogservice.v22.UpdateStream service.
type UpdateStreamHandler interface {
	// StreamKeyRange returns the binlog transactions related to
	// the specified Keyrange.
	StreamKeyRange(context.Context, *connect.Request[v22.StreamKeyRangeRequest], *connect.ServerStream[v22.StreamKeyRangeResponse]) error
	// StreamTables returns the binlog transactions related to
	// the specified Tables.
	StreamTables(context.Context, *connect.Request[v22.StreamTablesRequest], *connect.ServerStream[v22.StreamTablesResponse]) error
}

// NewUpdateStreamHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUpdateStreamHandler(svc UpdateStreamHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	updateStreamMethods := v221.File_vitess_binlogservice_v22_binlogservice_proto.Services().ByName("UpdateStream").Methods()
	updateStreamStreamKeyRangeHandler := connect.NewServerStreamHandler(
		UpdateStreamStreamKeyRangeProcedure,
		svc.StreamKeyRange,
		connect.WithSchema(updateStreamMethods.ByName("StreamKeyRange")),
		connect.WithHandlerOptions(opts...),
	)
	updateStreamStreamTablesHandler := connect.NewServerStreamHandler(
		UpdateStreamStreamTablesProcedure,
		svc.StreamTables,
		connect.WithSchema(updateStreamMethods.ByName("StreamTables")),
		connect.WithHandlerOptions(opts...),
	)
	return "/vitess.binlogservice.v22.UpdateStream/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UpdateStreamStreamKeyRangeProcedure:
			updateStreamStreamKeyRangeHandler.ServeHTTP(w, r)
		case UpdateStreamStreamTablesProcedure:
			updateStreamStreamTablesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUpdateStreamHandler returns CodeUnimplemented from all methods.
type UnimplementedUpdateStreamHandler struct{}

func (UnimplementedUpdateStreamHandler) StreamKeyRange(context.Context, *connect.Request[v22.StreamKeyRangeRequest], *connect.ServerStream[v22.StreamKeyRangeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("vitess.binlogservice.v22.UpdateStream.StreamKeyRange is not implemented"))
}

func (UnimplementedUpdateStreamHandler) StreamTables(context.Context, *connect.Request[v22.StreamTablesRequest], *connect.ServerStream[v22.StreamTablesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("vitess.binlogservice.v22.UpdateStream.StreamTables is not implemented"))
}
