/*
Copyright 2019 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file contains the service VtTablet exposes for queries.

syntax = "proto3";

package vitess.queryservice.v19;
option go_package = "github.com/planetscale/vitess-types/gen/vitess/queryservice/v19;queryservicev19";

import "vitess/query/v19/query.proto";
import "vitess/binlogdata/v19/binlogdata.proto";

// Query defines the tablet query service, implemented by vttablet.
service Query {
  // Execute executes the specified SQL query (might be in a
  // transaction context, if Query.transaction_id is set).
  rpc Execute(vitess.query.v19.ExecuteRequest) returns (vitess.query.v19.ExecuteResponse) {};

  // StreamExecute executes a streaming query. Use this method if the
  // query returns a large number of rows. The first QueryResult will
  // contain the Fields, subsequent QueryResult messages will contain
  // the rows.
  rpc StreamExecute(vitess.query.v19.StreamExecuteRequest) returns (stream vitess.query.v19.StreamExecuteResponse) {};

  // Begin a transaction.
  rpc Begin(vitess.query.v19.BeginRequest) returns (vitess.query.v19.BeginResponse) {};

  // Commit a transaction.
  rpc Commit(vitess.query.v19.CommitRequest) returns (vitess.query.v19.CommitResponse) {};

  // Rollback a transaction.
  rpc Rollback(vitess.query.v19.RollbackRequest) returns (vitess.query.v19.RollbackResponse) {};

  // Prepare preares a transaction.
  rpc Prepare(vitess.query.v19.PrepareRequest) returns (vitess.query.v19.PrepareResponse) {};

  // CommitPrepared commits a prepared transaction.
  rpc CommitPrepared(vitess.query.v19.CommitPreparedRequest) returns (vitess.query.v19.CommitPreparedResponse) {};

  // RollbackPrepared rolls back a prepared transaction.
  rpc RollbackPrepared(vitess.query.v19.RollbackPreparedRequest) returns (vitess.query.v19.RollbackPreparedResponse) {};

  // CreateTransaction creates the metadata for a 2pc transaction.
  rpc CreateTransaction(vitess.query.v19.CreateTransactionRequest) returns (vitess.query.v19.CreateTransactionResponse) {};

  // StartCommit initiates a commit for a 2pc transaction.
  rpc StartCommit(vitess.query.v19.StartCommitRequest) returns (vitess.query.v19.StartCommitResponse) {};

  // SetRollback marks the 2pc transaction for rollback.
  rpc SetRollback(vitess.query.v19.SetRollbackRequest) returns (vitess.query.v19.SetRollbackResponse) {};

  // ConcludeTransaction marks the 2pc transaction as resolved.
  rpc ConcludeTransaction(vitess.query.v19.ConcludeTransactionRequest) returns (vitess.query.v19.ConcludeTransactionResponse) {};

  // ReadTransaction returns the 2pc transaction info.
  rpc ReadTransaction(vitess.query.v19.ReadTransactionRequest) returns (vitess.query.v19.ReadTransactionResponse) {};

  // BeginExecute executes a begin and the specified SQL query.
  rpc BeginExecute(vitess.query.v19.BeginExecuteRequest) returns (vitess.query.v19.BeginExecuteResponse) {};

  // BeginStreamExecute executes a begin and the specified SQL query.
  rpc BeginStreamExecute(vitess.query.v19.BeginStreamExecuteRequest) returns (stream vitess.query.v19.BeginStreamExecuteResponse) {};

  // MessageStream streams messages from a message table.
  rpc MessageStream(vitess.query.v19.MessageStreamRequest) returns (stream vitess.query.v19.MessageStreamResponse) {};

  // MessageAck acks messages for a table.
  rpc MessageAck(vitess.query.v19.MessageAckRequest) returns (vitess.query.v19.MessageAckResponse) {};

  // ReserveExecute executes a query on a reserved connection
  rpc ReserveExecute(vitess.query.v19.ReserveExecuteRequest) returns (vitess.query.v19.ReserveExecuteResponse) {};

  // ReserveBeginExecute starts a transaction and executes a query in the transaction on a reserved connection
  rpc ReserveBeginExecute(vitess.query.v19.ReserveBeginExecuteRequest) returns (vitess.query.v19.ReserveBeginExecuteResponse) {};

  // ReserveStreamExecute executes a streaming query on a reserved connection
  rpc ReserveStreamExecute(vitess.query.v19.ReserveStreamExecuteRequest) returns (stream vitess.query.v19.ReserveStreamExecuteResponse) {};

  // ReserveBeginStreamExecute starts a transaction and executes a streaming query in the transaction on a reserved connection
  rpc ReserveBeginStreamExecute(vitess.query.v19.ReserveBeginStreamExecuteRequest) returns (stream vitess.query.v19.ReserveBeginStreamExecuteResponse) {};

  // Release releases the connection
  rpc Release(vitess.query.v19.ReleaseRequest) returns (vitess.query.v19.ReleaseResponse) {};

  // StreamHealth runs a streaming RPC to the tablet, that returns the
  // current health of the tablet on a regular basis.
  rpc StreamHealth(vitess.query.v19.StreamHealthRequest) returns (stream vitess.query.v19.StreamHealthResponse) {};

  // VStream streams vreplication events.
  rpc VStream(vitess.binlogdata.v19.VStreamRequest) returns (stream vitess.binlogdata.v19.VStreamResponse) {};

  // VStreamRows streams rows from the specified starting point.
  rpc VStreamRows(vitess.binlogdata.v19.VStreamRowsRequest) returns (stream vitess.binlogdata.v19.VStreamRowsResponse) {};

  // VStreamTables streams rows from the specified starting point.
  rpc VStreamTables(vitess.binlogdata.v19.VStreamTablesRequest) returns (stream vitess.binlogdata.v19.VStreamTablesResponse) {};

  // VStreamResults streams results along with the gtid of the snapshot.
  rpc VStreamResults(vitess.binlogdata.v19.VStreamResultsRequest) returns (stream vitess.binlogdata.v19.VStreamResultsResponse) {};

  // GetSchema returns the schema information.
  rpc GetSchema(vitess.query.v19.GetSchemaRequest) returns (stream vitess.query.v19.GetSchemaResponse) {};
}
